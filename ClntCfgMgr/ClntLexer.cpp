
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 98
#define YY_END_OF_BUFFER 99
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[844] =
    {   0,
        1,    1,    0,    0,    0,    0,   99,   97,    2,    1,
        1,   97,   79,   97,   97,   96,   96,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   83,   83,   98,    1,
        1,    1,    0,   91,   79,    0,   91,   81,   80,   96,
        0,    0,   95,    0,   88,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       11,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       52,   92,   92,   92,   92,   92,   92,   92,   92,   25,
       26,   12,   92,   92,   92,   92,   92,   82,   80,   96,

        0,    0,    0,   87,   93,   86,   86,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
        8,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   96,    0,
        0,    0,    0,   85,   85,    0,   86,    0,   86,   92,
       92,   75,   92,   92,   92,   92,   92,   92,   92,    7,
       92,   34,   13,   92,   92,   92,   92,   92,   10,    0,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,

       96,    0,   94,    0,    0,    0,   85,    0,   85,    0,
       86,   86,   86,   86,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,    3,   92,   92,
       92,   92,   92,   92,   92,    0,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
        0,    0,    0,    0,    0,   85,   85,   85,   85,    0,
       86,   86,   86,    0,   86,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   29,   92,   92,   92,   92,
       92,   35,   92,   92,   92,   92,   92,   92,   92,    0,

        0,   92,   92,   92,   92,   27,   92,   53,   92,   92,
       92,   92,   92,   20,   92,   92,   92,   92,   92,    6,
       92,   92,   92,   92,   92,    0,    0,    0,    0,   85,
       85,   85,    0,   85,    0,    0,   86,   86,   86,   86,
       92,    5,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   57,   55,   92,   92,   92,   92,   92,   92,
       92,   92,   92,    0,    0,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   43,   92,   92,   92,
       92,   92,   92,   49,   92,   92,   92,   94,    0,    0,
        0,    0,    0,   85,   85,   85,   85,    0,   86,   86,

       86,    0,   86,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   56,   92,   92,
       92,   92,   42,   92,   92,   16,   17,    0,    0,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   19,    0,
        0,    0,    0,   85,   85,   85,    0,   85,   90,   86,
       86,   86,   86,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   54,   92,   92,
       92,   92,   15,    0,    0,   92,   92,    4,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   14,

       92,   31,   92,   92,    0,    0,    0,    0,   89,   85,
       85,   85,   85,   86,   86,   86,    0,   86,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       28,   92,   92,   92,   92,   18,    0,    0,   39,   38,
       30,   92,   92,   92,   92,   92,   92,   92,   92,   33,
       32,   92,   92,   92,   92,   94,    0,    0,   85,   85,
       85,    0,   85,   86,   86,   86,   86,   78,   92,   92,
       92,   92,   92,   65,   92,   92,   92,   66,   92,   92,
       92,   92,   60,   41,   40,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   58,    0,    0,

        0,    0,   85,   85,   85,   85,   86,   86,   86,    0,
       86,    9,   92,   92,   92,   92,   92,   37,   92,   67,
       92,   77,   92,   92,   92,   92,   92,   92,   47,   92,
       92,   92,   74,   92,   92,    0,    0,    0,   85,   85,
       85,    0,   85,   86,   86,   86,   86,   92,   92,   92,
       63,   36,   92,   92,   92,   61,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   94,    0,    0,    0,
       85,   85,   85,   85,   86,   86,   86,    0,   86,   92,
       92,   64,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   44,   92,   92,   23,    0,    0,   84,   87,   85,

       85,   85,    0,   85,   86,   86,   86,   86,   92,   92,
       68,   92,   92,   92,   92,   92,   92,   92,   92,   24,
       92,    0,    0,   84,    0,   85,   85,   85,   85,   85,
       86,   86,   86,    0,   86,   92,   92,   69,   92,   92,
       92,   92,   92,   46,   92,   92,   92,   92,   92,   94,
       84,   87,   85,    0,   85,   85,   85,   85,   86,   86,
       86,   92,   92,   92,   92,   92,   92,   92,   21,   92,
       45,   51,   92,   92,    0,   84,   85,   85,   85,   85,
       86,   86,   86,   92,   92,   70,   71,   72,   73,   92,
       22,   48,   92,    0,   85,   85,    0,   85,   85,   86,

       92,   62,   92,   92,   94,   85,   85,   86,   92,   92,
       92,    0,   85,   85,    0,   59,   92,   50,   84,   85,
       85,   76,   84,   85,   85,    0,    0,   85,   85,    0,
       85,   85,    0,   94,   85,   85,    0,   85,   85,    0,
       85,   85,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   24,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    5,    6,    6,    6,    6,    6,    6,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    6,    6,
        6,    6,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[931] =
    {   0,
        0,    0, 1450, 1449,    0,    0, 1456, 3896, 3896,   71,
       73, 1450,    0, 1364,   70,   70,   33, 1346,  132,  180,
      223,  184,  189,  279,   53,   78,   72,  296,   61,  196,
      287,  317,  339,   71,   88,   71, 3896, 1355, 3896,  109,
      114,  126, 1361, 3896,    0, 1358, 1357, 3896,    0,  383,
     1314,  401, 3896,    0,  426,    0,  467,   84,  167,    0,
      176,  172,  182,  190,  180,  281,  225,  220,  236,  217,
      233,  259,  294,  237,  257,  277,  280, 1318,  306,  313,
        0,  329,  319,  471,  318,  324,  327,  335,  408,    0,
        0,    0,  333,  356,  396,  401,  434, 3896,    0,  519,

     1305,  450, 1304,  562,    0,  605,  494,  646,  458,  460,
      465,  472,  463,  503, 1315,  501,  512,  533,  539,  531,
        0,  583,  585,  592,  619,  624, 1314,  625,  258,  628,
     1313,  648,  652,  650,  645,  656,  647,  643,  655, 1312,
      649,  646,  658,  663,  666,  661,  667,  661,  707,  580,
     1299, 1264, 1262,  752,  725,  734,  795,  836,  770,  877,
      772,    0,  753, 1273, 1272,  766,  792,  809,  807, 1271,
      802, 1270,    0,  816,  832,  840,  840,  883,    0, 1269,
      883,  873,  870,  875,  889,  887,  878,  890,  879,  891,
      885,  924, 1268,  904,  926, 1240,  909,  926,  916, 1229,

     1213, 1212, 1211, 1210, 1209,  953,  980, 1021,  998, 1039,
     1064, 1082, 1107, 1125, 1199,  916,  914,  922, 1114,  921,
      918,  934,  928,  995, 1128, 1012, 1028,    0, 1116, 1106,
     1118, 1113, 1124, 1116, 1141, 1140, 1124, 1140, 1132, 1142,
     1135, 1142, 1137, 1210, 1156, 1143, 1161, 1153, 1155, 1161,
     1172, 1175, 1167, 1160, 1174, 1156, 1164, 1209, 1171, 1186,
     1196, 1195, 1194, 1193, 1227, 1238, 1256, 1281, 1299, 1091,
      258, 1143, 1324, 1365, 1342, 1262, 1227, 1292, 1362, 1329,
     1343, 1332, 1367, 1109, 1359,    0, 1364, 1365, 1368, 1356,
     1369,    0, 1361, 1066, 1371, 1373, 1364, 1383, 1375, 1374,

     1386, 1384, 1380, 1394, 1397,    0, 1412, 1057, 1415, 1410,
     1056, 1055, 1413,    0, 1408, 1406, 1411, 1422, 1054,    0,
     1413, 1409, 1419, 1053, 1423, 1040, 1039, 1006, 1467,  361,
     1005, 1478, 1519, 1496, 1537, 1562, 1573, 1591, 1616, 1634,
     1484, 1015, 1498, 1535, 1574, 1584, 1618, 1620, 1623, 1634,
     1615, 1627,    0, 1619, 1624, 1636, 1644, 1638, 1647, 1638,
     1649, 1650, 1651, 1644, 1640, 1667, 1648, 1662, 1650, 1680,
     1680, 1682, 1672, 1681, 1670, 1689,    0, 1690, 1671, 1684,
     1680, 1682, 1687,    0, 1693, 1684, 1686, 1002, 1001, 1000,
      999, 1741, 1752, 1763, 1781, 1806, 1824, 1790,  363,  998,

     1849, 1890, 1867, 1704, 1759, 1795, 1827, 1857, 1853, 1862,
     1855, 1885, 1888, 1887, 1891, 1899, 1000,    0, 1900, 1892,
      982, 1892,    0, 1890, 1897,    0,    0, 1909, 1890, 1904,
     1909, 1909, 1917,  973, 1919, 1919, 1912, 1914, 1935, 1921,
     1934, 1939, 1939, 1927, 1945, 1947, 1947, 1938,    0,  959,
      903,  862, 1989,  450,  861, 2000, 2041, 2018, 2027, 2084,
     2059, 2127, 2102, 2028, 2040,  870, 2051, 2091, 2095, 1963,
     2102, 2121, 2136, 2125, 2139, 2125, 2128,    0, 2125, 2133,
     2143, 2129,    0, 2140, 2145, 2137, 2134,    0, 2135, 2148,
      869, 2147, 2149, 2147, 2161, 2160, 2167, 2164, 2174,    0,

     2183,    0, 2183, 2184,  856,  855,  854,  853, 2202, 2226,
     2244, 2269, 2287,  540,  851, 2312, 2353, 2330, 2172, 2190,
     2243, 2275, 2326, 2333, 2312, 2335, 2332, 2361, 2360, 2357,
        0, 2349, 2367, 2355, 2366,    0, 2358, 2355,    0,    0,
        0, 2365, 2370, 2367, 2371, 2368, 2380, 2365, 2373,    0,
        0, 2375,  862, 2383, 2402,  849,  848,  847,  541,  817,
     2442, 2483, 2428, 2526, 2460, 2569, 2501,    0, 2387, 2452,
      826, 2463, 2494,    0, 2501, 2531,  825,    0, 2538, 2554,
     2566, 2575,    0, 3896, 3896, 2574, 2563, 2573, 2578, 2578,
     2566,  824, 2582, 2585, 2576, 2576, 2582,    0,  809,  808,

      807,  806, 2628, 2551, 2671, 2646,  542,  776, 2714, 2755,
     2689,    0, 2587, 2623, 2646, 2684, 2685,    0, 2749,    0,
     2698,    0, 2725, 2733, 2717, 2734, 2748, 2506,    0, 2768,
     2749, 2756,    0, 2757, 2760,  775,  774,  773,  543,  772,
     2810, 2851, 2828, 2894, 2869, 2937, 2912,  783, 2770, 2821,
        0,    0, 2847, 2869, 2910,    0, 2900, 2922, 2941, 2925,
     2928, 2946, 2931, 2937,  782, 2948,  742,  739,  681,  680,
     2990, 3008, 3033, 3051,  625,  679, 3076, 3117, 3094, 2937,
     2978,    0,  682, 3014, 3035, 3090, 3082, 3081, 3097, 3108,
     3125,    0, 3123, 3112,    0,  624,  623,  622,    0,  626,

      621, 3167, 3208, 3142, 3251, 3185, 3294, 3226, 3127, 3142,
        0,  257,  631, 3178, 3189, 3225, 3223, 3261, 3272,    0,
     3269,  618,  617,  586,  585,  584, 3337, 3276, 3380, 3319,
      627,  583, 3423,    0, 3355, 3303, 3340,    0,  211,  583,
      589, 3353, 3358,    0, 3357, 3386, 3392, 3397, 3411,  580,
      539, 3896,  538,    0,  815,  536, 3469, 3405, 3512, 3448,
        0, 3413, 3451,  540,  537,  443,  444, 3450,    0, 3464,
        0,    0, 3457, 3475,  436,  434,  407,  406, 3555, 3493,
      816,  405,    0, 3525, 3518,    0,    0,    0,    0, 3231,
        0,    0, 3529,  404,  403,  402,    0, 3530, 3896,    0,

     3526,    0, 3561, 3551,  401,  372,  370, 3896, 3546, 3562,
     3561,  357,  356,  355,    0,    0, 3550,    0,  354,  349,
      303,    0,  301,  298,  296,    0,  291,  256,  255,    0,
      248,  202,    0,  189,  185,  122,  116,  114,  104,    0,
       80,   59, 3896, 3616, 3622, 3628, 3634, 3640, 3646, 3649,
     3652, 3655, 3658, 3661, 3664, 3667, 3670, 3673, 3676, 3679,
     3682, 3686, 3688, 3691, 3694, 3698, 3700, 3703, 3706, 3709,
     3712, 3715, 3718, 3721, 3724, 3727, 3730, 3733, 3736, 3739,
     3742, 3745, 3748, 3751, 3754, 3757, 3760, 3763, 3766, 3769,
     3772, 3775, 3778, 3781, 3784, 3787, 3790, 3793, 3796, 3799,

     3802, 3805, 3808, 3811, 3814, 3817, 3820, 3823, 3826, 3829,
     3832, 3835, 3838, 3841, 3844, 3847, 3850, 3853, 3856, 3859,
     3862, 3865, 3868, 3871, 3874, 3877, 3880, 3883, 3886, 3889
    } ;

static yyconst flex_int16_t yy_def[931] =
    {   0,
      843,    1,  844,  844,  845,  845,  843,  843,  843,  843,
      843,  846,  847,  848,  843,  843,   16,  843,  843,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  843,  843,  843,  843,
      843,  843,  846,  843,  847,  848,  843,  843,  849,  843,
      850,   50,  843,  851,  843,   24,   24,   57,   57,   24,
       24,   24,   57,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  843,  849,  843,

      852,  100,  853,  843,  851,  843,  106,   57,  108,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  843,  149,
      854,  855,  856,  843,  154,  843,  843,  843,  157,  108,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  843,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      149,  150,  855,  857,  858,  843,  843,  843,  207,  843,
      843,  211,  843,  213,  160,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  843,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      859,  843,  860,  861,  843,  843,  266,  843,  268,  843,
      862,  843,  843,  843,  273,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  843,

      843,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  863,  864,  865,  843,  866,
      843,  843,  843,  332,  843,  843,  843,  337,  843,  339,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  843,  843,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  860,  843,  867,
      868,  843,  843,  843,  394,  843,  396,  843,  862,  843,

      843,  843,  401,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  843,  843,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  869,
      870,  871,  843,  866,  843,  843,  843,  456,  843,  843,
      460,  843,  462,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  843,  843,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,  872,  843,  873,  874,  843,  843,
      510,  843,  512,  862,  843,  843,  843,  516,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  843,  843,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  875,  876,  877,  866,  843,
      843,  843,  561,  843,  564,  843,  566,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  843,  843,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  878,  843,

      879,  880,  843,  603,  843,  605,  862,  843,  843,  843,
      609,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  881,  882,  883,  866,  843,
      843,  843,  641,  843,  644,  843,  646,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  884,  843,  885,  886,
      843,  671,  843,  673,  862,  843,  843,  843,  677,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  887,  888,  889,  890,  866,

      843,  843,  843,  702,  843,  705,  843,  707,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  891,  843,  892,  843,  893,  843,  727,  843,  729,
      862,  843,  843,  894,  733,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  895,
      896,  843,  897,  898,  866,  843,  843,  757,  843,  759,
      899,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  900,  843,  901,  902,  843,  779,
      862,  843,  903,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  904,  843,  905,  906,  843,  843,  907,

       24,   24,   24,   24,  908,  909,  910,  843,   24,   24,
       24,  911,  843,  912,  913,   24,   24,   24,  914,  915,
      916,   24,  917,  843,  918,  919,  920,  921,  922,  923,
      843,  924,  925,  843,  926,  927,  920,  843,  928,  929,
      930,  843,    0,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843
    } ;

static yyconst flex_int16_t yy_nxt[3970] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   25,
       26,   24,   24,   27,   24,   28,   29,   30,   24,   31,
       32,   33,   34,   35,   36,   24,   24,   24,   19,   20,
       21,   22,   23,   24,   25,   26,   24,   24,   27,   24,
       28,   29,   30,   24,   31,   32,   33,   34,   35,   36,
       24,   24,   24,   40,   41,   42,   41,   48,  843,   70,
      840,   49,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   51,   52,   52,   52,   52,   52,   52,   80,   53,

       71,  840,   74,  843,   70,   72,   94,   97,   75,  109,
       95,   40,   41,   73,   96,   54,   42,   41,   52,   52,
       52,   52,   52,   80,   53,  840,   71,   74,   40,   41,
       72,   94,   97,   75,  109,  833,   95,  843,   73,   96,
       54,   56,   56,  840,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   51,   57,   57,   57,   58,   57,   59,
       56,   60,   56,   56,   56,   56,   56,   61,   56,   56,
       56,   56,   56,   56,   62,   56,   56,   56,   56,   56,
       57,   57,   58,   57,   59,   56,   60,   56,   56,   56,
       56,   56,   61,   56,   56,   56,   56,   56,   56,   62,

       56,   56,   56,   56,   56,   57,  833,   57,  110,   57,
      837,   57,  111,  112,   57,   56,   57,  113,  114,   56,
      115,   81,   56,  833,   56,  764,   56,   69,  765,   68,
       57,   56,   57,  110,   57,   82,   57,  111,  112,   57,
       56,   57,  113,  114,   56,  115,   81,   56,   63,   56,
       57,   56,   69,   64,   68,  118,   56,  119,   65,   66,
       82,  120,  121,  122,  126,   67,  180,  181,  156,  826,
      738,  739,  740,   63,  741,   57,  833,  826,   64,  158,
      118,  123,  119,   65,   66,  127,  120,  121,  122,  126,
       67,   56,   56,   56,   56,   56,   56,   56,   56,   56,

      843,   56,   56,   56,   56,   56,   56,  123,   56,   83,
      127,  128,  752,   84,   56,  116,  124,  826,   76,  815,
      129,   56,  827,   85,  826,  117,   77,   56,   56,   56,
       56,   56,   78,   56,  125,   83,  128,   79,   84,   56,
      116,   86,  124,  131,   76,  129,   56,   87,   85,   88,
      117,   77,   90,   91,  132,  133,  134,   78,   89,  125,
      138,   92,   79,  139,  140,  141,   86,  144,  131,   93,
      815,  206,   87,  156,   88,  725,  815,  797,  699,  132,
      133,  134,  208,   89,  274,  138,  145,   92,  139,  140,
      141,  815,  144,  797,   93,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  101,  102,  102,  102,  102,  102,
      102,  145,   53,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  812,  797,  754,  670,  734,  797,  754,  146,
      142,  102,  102,  102,  102,  102,  147,   53,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  143,  107,  107,
      107,  107,  107,  107,  146,  725,  142,  104,  789,  788,
      206,  147,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  333,  143,  148,  107,  107,  107,  107,  107,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  101,  108,
      108,  108,  108,  108,  108,  135,   60,  161,  148,  162,

      163,  164,  136,  165,  843,  137,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  108,  108,  108,  108,  108,
      135,   60,  161,  168,  162,  163,  164,  136,  165,  166,
      137,  149,  149,  149,  149,  149,  149,  149,  149,  149,
       51,  150,  150,  150,  150,  150,  150,  169,   53,  168,
      156,  206,  156,  206,  166,  787,  786,  703,  170,  754,
      725,  402,  457,  517,  562,  171,  172,  150,  150,  150,
      150,  150,  169,   53,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  170,  155,  155,  155,  155,  155,  155,
      171,  172,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  775,  767,  766,  678,  754,  752,  725,  173,  174,
      155,  155,  155,  155,  155,  156,  175,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  158,  159,  159,  159,
      159,  159,  159,  173,  174,  156,  206,  156,  670,  602,
      742,  175,  642,  725,  670,  104,  610,  642,  678,  176,
      177,  179,  182,  159,  159,  159,  159,  159,  160,  160,
      160,  160,  160,  160,  160,  160,  160,   51,  160,  160,
      160,  160,  160,  160,  176,  177,  179,  182,  184,  185,
      186,  187,  188,  189,  190,  191,  193,  194,  195,  196,
      197,  198,  199,  200,  160,  160,  160,  160,  160,  711,

      610,  699,  670,  184,  185,  186,  187,  188,  189,  190,
      191,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      201,  201,  201,  201,  201,  201,  201,  201,   51,  202,
      202,  202,  202,  202,  202,  843,   53,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  202,  202,  202,  202,  202,
      602,   53,  206,  696,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  208,  209,  209,  209,  209,  209,  209,
      843,  216,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  694,  680,  562,  670,  602,  508,  517,  217,  218,

      209,  209,  209,  209,  209,  156,  221,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  158,  212,  212,  212,
      212,  212,  212,  217,  218,  206,  156,  104,  602,  508,
      104,  221,  222,  630,  619,  614,  703,  734,  457,  223,
      224,  226,  228,  212,  212,  212,  212,  212,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  222,  214,  214,
      214,  214,  214,  214,  223,  224,  226,  228,  602,  508,
      599,  596,  402,  229,  104,  508,  391,  391,  544,  521,
      230,  231,  333,  508,  214,  214,  214,  214,  214,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  229,  215,

      215,  215,  215,  215,  215,  230,  231,  232,  237,  239,
      240,  241,  244,  245,  246,  242,  233,  234,  235,  243,
      247,  248,  249,  238,  391,  215,  215,  215,  215,  215,
      253,  257,  232,  237,  239,  240,  241,  244,  245,  246,
      242,  233,  234,  235,  243,  247,  248,  249,  238,  250,
      254,  258,  259,  276,  277,  253,  278,  257,  282,  284,
      285,  255,  283,  286,  251,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  250,  254,  258,  259,  276,  277,
      104,  278,  490,  282,  284,  285,  255,  283,  286,  251,
      206,  480,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  208,  267,  267,  267,  267,  267,  267,  843,  477,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  274,
      104,  391,  264,  450,  405,  287,  208,  391,  267,  267,
      267,  267,  267,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  291,  269,  269,  269,  269,  269,  269,  270,
      287,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      264,  264,  386,  382,  376,  375,  372,  291,  292,  269,
      269,  269,  269,  269,  156,  358,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  158,  272,  272,  272,  272,
      272,  272,  843,  292,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  272,  272,  272,  272,  272,  156,  350,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  274,  275,
      275,  275,  275,  275,  275,  843,  279,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  293,  294,  295,  296,
      297,  280,  298,  281,  288,  275,  275,  275,  275,  275,
      302,  289,  279,  299,  158,  300,  303,  304,  305,  290,
      306,  293,  294,  295,  296,  297,  280,  298,  281,  288,
      301,  307,  308,  310,  311,  302,  289,  312,  313,  299,
      300,  303,  304,  305,  290,  306,  314,  315,  316,  317,

      318,  319,  320,  321,  322,  301,  307,  308,  310,  311,
      324,  325,  312,  313,  104,  264,  153,  104,  323,  309,
      843,  314,  315,  316,  317,  318,  319,  320,  321,  322,
      264,  153,  261,  843,  843,  324,  325,  329,  260,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  206,  256,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  208,
      331,  331,  331,  331,  331,  331,  843,  342,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  252,  236,  227,
      225,  220,  219,  104,  341,  153,  331,  331,  331,  331,
      331,  206,  342,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  333,  334,  334,  334,  334,  334,  334,  843,
      341,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      153,  192,  183,  178,  167,  153,  104,  130,  343,  334,
      334,  334,  334,  334,  156,  104,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  274,  338,  338,  338,  338,
      338,  338,  843,  343,  338,  338,  338,  338,  338,  338,
      338,  338,  338,   46,   47,   44,   98,   55,  346,  347,
       47,  348,  338,  338,  338,  338,  338,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  344,  340,  340,  340,
      340,  340,  340,  346,  347,  345,  348,  349,  351,  352,

      353,  354,  355,  356,  357,  359,  360,  361,  362,  363,
      364,  344,  365,  340,  340,  340,  340,  340,  366,  367,
      345,  368,  349,  351,  352,  353,  354,  355,  356,  357,
      359,  360,  361,  362,  363,  364,  369,  365,  370,  373,
      374,  377,  378,  366,  367,  379,  368,  380,  381,  383,
      384,  371,  385,  387,   44,  843,   38,   38,  843,  843,
      843,  369,  843,  370,  373,  374,  377,  378,  843,  843,
      379,  843,  380,  381,  383,  384,  371,  385,  387,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  206,  843,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  333,

      395,  395,  395,  395,  395,  395,  843,  843,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  843,  843,  843,
      843,  843,  843,  404,  843,  843,  395,  395,  395,  395,
      395,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      406,  397,  397,  397,  397,  397,  397,  398,  404,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  843,  407,
      843,  843,  843,  843,  843,  406,  843,  397,  397,  397,
      397,  397,  156,  843,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  156,  407,  399,  399,  399,  399,  399,
      399,  399,  399,  399,  274,  400,  400,  400,  400,  400,

      400,  843,  408,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  843,  843,  843,  843,  843,  843,  843,  843,
      409,  400,  400,  400,  400,  400,  156,  408,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  402,  403,  403,
      403,  403,  403,  403,  843,  409,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  410,  411,  412,  416,  417,
      418,  419,  420,  413,  403,  403,  403,  403,  403,  414,
      421,  415,  422,  423,  424,  425,  426,  427,  428,  429,
      410,  411,  412,  416,  417,  418,  419,  420,  413,  430,
      843,  431,  432,  433,  414,  421,  415,  422,  423,  424,

      425,  426,  427,  428,  429,  434,  435,  436,  437,  438,
      439,  440,  441,  843,  442,  430,  431,  432,  433,  443,
      444,  445,  446,  447,  448,  449,  464,  843,  843,  843,
      434,  435,  436,  437,  438,  439,  843,  440,  441,  442,
      843,  843,  843,  843,  443,  444,  445,  446,  447,  448,
      449,  453,  464,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  206,  843,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  206,  843,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  333,  455,  455,  455,  455,  455,
      455,  843,  465,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  455,  455,  455,  455,  455,  206,  465,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  457,  458,  458,
      458,  458,  458,  458,  843,  466,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  843,  843,  843,  843,  843,
      843,  843,  843,  467,  458,  458,  458,  458,  458,  156,
      466,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      402,  461,  461,  461,  461,  461,  461,  843,  467,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  843,  843,
      843,  843,  843,  468,  469,  470,  471,  461,  461,  461,

      461,  461,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  472,  463,  463,  463,  463,  463,  463,  468,  469,
      470,  471,  473,  474,  475,  476,  478,  479,  481,  482,
      483,  484,  843,  485,  486,  487,  472,  488,  463,  463,
      463,  463,  463,  489,  491,  492,  493,  473,  474,  475,
      476,  478,  479,  481,  482,  483,  494,  484,  485,  486,
      487,  495,  488,  496,  497,  498,  499,  500,  489,  491,
      492,  493,  501,  502,  503,  504,  843,  843,  843,  843,
      843,  494,  843,  843,  843,  525,  495,  843,  496,  497,
      498,  499,  500,  843,  843,  843,  843,  501,  502,  503,

      504,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      206,  525,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  457,  511,  511,  511,  511,  511,  511,  843,  843,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  511,  511,
      511,  511,  511,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  519,  513,  513,  513,  513,  513,  513,  843,
      520,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      843,  843,  843,  843,  843,  843,  843,  519,  522,  513,
      513,  513,  513,  513,  156,  520,  514,  514,  514,  514,

      514,  514,  514,  514,  514,  402,  515,  515,  515,  515,
      515,  515,  843,  522,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  843,  843,  843,  843,  843,  843,  843,
      523,  524,  515,  515,  515,  515,  515,  156,  526,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  517,  518,
      518,  518,  518,  518,  518,  523,  524,  527,  528,  843,
      529,  530,  843,  526,  531,  532,  533,  534,  535,  536,
      537,  538,  539,  540,  541,  518,  518,  518,  518,  518,
      545,  542,  527,  546,  528,  529,  547,  530,  543,  531,
      532,  533,  534,  535,  536,  537,  538,  539,  540,  541,

      548,  549,  550,  551,  552,  545,  542,  553,  546,  554,
      555,  547,  568,  543,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  843,  843,  548,  549,  550,  551,  552,
      569,  843,  553,  843,  554,  555,  206,  568,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  457,  560,  560,
      560,  560,  560,  560,  843,  569,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  843,  843,  843,  843,  843,
      843,  843,  843,  570,  560,  560,  560,  560,  560,  206,
      843,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      562,  563,  563,  563,  563,  563,  563,  843,  570,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  843,  843,
      843,  843,  843,  843,  843,  843,  571,  563,  563,  563,
      563,  563,  156,  843,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  517,  565,  565,  565,  565,  565,  565,
      843,  571,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  843,  843,  843,  843,  843,  572,  573,  574,  575,
      565,  565,  565,  565,  565,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  576,  567,  567,  567,  567,  567,
      567,  572,  573,  574,  575,  577,  578,  579,  580,  581,
      843,  582,  583,  584,  585,  586,  587,  590,  591,  576,

      588,  567,  567,  567,  567,  567,  592,  589,  593,  594,
      577,  578,  579,  580,  595,  581,  582,  583,  584,  585,
      586,  587,  590,  591,  597,  588,  598,  843,  612,  843,
      843,  592,  589,  593,  594,  843,  843,  843,  843,  595,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  597,
      843,  598,  206,  612,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  562,  604,  604,  604,  604,  604,  604,
      843,  843,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  843,  843,  843,  843,  843,  843,  613,  843,  843,
      604,  604,  604,  604,  604,  605,  605,  605,  605,  605,

      605,  605,  605,  605,  615,  606,  606,  606,  606,  606,
      606,  843,  613,  611,  611,  611,  611,  611,  611,  611,
      611,  611,  843,  843,  843,  843,  843,  843,  661,  615,
      616,  606,  606,  606,  606,  606,  156,  617,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  517,  608,  608,
      608,  608,  608,  608,  661,  616,  843,  843,  843,  843,
      843,  843,  617,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  618,  620,  608,  608,  608,  608,  608,  156,
      621,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      610,  611,  611,  611,  611,  611,  611,  618,  620,  622,

      623,  624,  625,  626,  627,  621,  628,  629,  631,  632,
      633,  634,  635,  843,  648,  843,  843,  611,  611,  611,
      611,  611,  843,  843,  622,  623,  624,  625,  626,  627,
      843,  628,  629,  631,  632,  633,  634,  635,  206,  648,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  562,
      640,  640,  640,  640,  640,  640,  843,  649,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  843,  843,  843,
      843,  843,  843,  843,  843,  650,  640,  640,  640,  640,
      640,  206,  649,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  642,  643,  643,  643,  643,  643,  643,  843,

      650,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      843,  843,  843,  843,  843,  843,  843,  651,  652,  643,
      643,  643,  643,  643,  156,  655,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  610,  645,  645,  645,  645,
      645,  645,  651,  652,  843,  843,  843,  843,  843,  843,
      655,  656,  843,  843,  843,  843,  843,  843,  843,  657,
      658,  659,  645,  645,  645,  645,  645,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  656,  647,  647,  647,
      647,  647,  647,  653,  657,  658,  659,  660,  663,  654,
      662,  843,  664,  665,  666,  843,  681,  843,  843,  843,

      843,  843,  843,  647,  647,  647,  647,  647,  653,  843,
      843,  843,  660,  663,  654,  843,  662,  664,  665,  666,
      206,  681,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  642,  672,  672,  672,  672,  672,  672,  843,  843,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  843,
      843,  843,  843,  843,  843,  682,  843,  843,  672,  672,
      672,  672,  672,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  683,  674,  674,  674,  674,  674,  674,  843,
      682,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      843,  843,  843,  843,  843,  843,  843,  683,  684,  674,

      674,  674,  674,  674,  156,  843,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  610,  676,  676,  676,  676,
      676,  676,  843,  684,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  843,  843,  843,  843,  843,  843,  843,
      685,  686,  676,  676,  676,  676,  676,  156,  687,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  678,  679,
      679,  679,  679,  679,  679,  685,  686,  688,  689,  690,
      691,  692,  693,  687,  695,  843,  709,  843,  843,  843,
      843,  843,  843,  843,  843,  679,  679,  679,  679,  679,
      843,  843,  688,  689,  690,  691,  692,  693,  843,  695,

      206,  709,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  642,  701,  701,  701,  701,  701,  701,  843,  710,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  843,
      843,  843,  843,  843,  843,  843,  712,  843,  701,  701,
      701,  701,  701,  206,  710,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  703,  704,  704,  704,  704,  704,
      704,  843,  712,  704,  704,  704,  704,  704,  704,  704,
      704,  704,  843,  843,  843,  843,  843,  843,  843,  843,
      713,  704,  704,  704,  704,  704,  156,  843,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  678,  706,  706,

      706,  706,  706,  706,  843,  713,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  843,  843,  843,  843,  843,
      714,  715,  716,  717,  706,  706,  706,  706,  706,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  718,  708,
      708,  708,  708,  708,  708,  714,  715,  716,  717,  719,
      720,  721,  843,  736,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  718,  843,  708,  708,  708,  708,  708,
      843,  737,  843,  843,  719,  720,  721,  206,  736,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  703,  728,
      728,  728,  728,  728,  728,  843,  737,  732,  732,  732,

      732,  732,  732,  732,  732,  732,  843,  843,  843,  843,
      843,  843,  743,  843,  843,  728,  728,  728,  728,  728,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  744,
      730,  730,  730,  730,  730,  730,  843,  743,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  843,  843,  843,
      843,  843,  843,  803,  744,  745,  730,  730,  730,  730,
      730,  156,  746,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  678,  732,  732,  732,  732,  732,  732,  803,
      745,  843,  843,  843,  843,  843,  843,  746,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  747,  748,  732,

      732,  732,  732,  732,  156,  749,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  734,  735,  735,  735,  735,
      735,  735,  747,  748,  843,  843,  843,  843,  843,  843,
      749,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      843,  762,  735,  735,  735,  735,  735,  206,  843,  755,
      755,  755,  755,  755,  755,  755,  755,  755,  703,  756,
      756,  756,  756,  756,  756,  843,  762,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  763,  843,  843,  843,
      843,  843,  843,  768,  769,  756,  756,  756,  756,  756,
      206,  770,  757,  757,  757,  757,  757,  757,  757,  757,

      757,  763,  758,  758,  758,  758,  758,  758,  768,  769,
      843,  843,  843,  843,  843,  843,  770,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  771,  772,  758,  758,
      758,  758,  758,  156,  773,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  734,  760,  760,  760,  760,  760,
      760,  771,  772,  774,  843,  784,  843,  843,  843,  773,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  843,
      843,  760,  760,  760,  760,  760,  785,  790,  774,  206,
      784,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      791,  780,  780,  780,  780,  780,  780,  843,  792,  843,

      843,  785,  790,  843,  843,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  843,  791,  793,  780,  780,  780,
      780,  780,  156,  792,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  734,  782,  782,  782,  782,  782,  782,
      206,  793,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  801,  843,  843,  843,  843,  843,  843,  802,  804,
      782,  782,  782,  782,  782,  206,  809,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  801,  799,  799,  799,
      799,  799,  799,  802,  804,  810,  811,  816,  817,  818,
      822,  809,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  843,  799,  799,  799,  799,  799,  843,  843,
      810,  811,  816,  817,  818,  822,   37,   37,   37,   37,
       37,   37,   39,   39,   39,   39,   39,   39,   43,   43,
       43,   43,   43,   43,   45,  843,   45,   45,   45,   45,
       46,   46,   46,   46,   46,   46,   99,  843,   99,   99,
       99,   99,  103,  103,  103,  105,  843,  105,  151,  151,
      151,  152,  152,  152,  203,  203,  203,  204,  204,  204,
      205,  205,  205,  262,  262,  262,  263,  263,  263,  326,
      326,  326,  327,  327,  327,  328,  328,  328,  336,  336,
      336,  388,  388,  388,  389,  389,  389,  390,  390,  390,

      393,  393,  393,  451,  451,  451,  452,  452,  452,  505,
      505,  505,  506,  506,  506,  507,  507,  507,  556,  556,
      556,  557,  557,  557,  558,  558,  558,  451,  451,  451,
      600,  600,  600,  601,  601,  601,  636,  636,  636,  637,
      637,  637,  638,  638,  638,  667,  667,  667,  668,  668,
      668,  669,  669,  669,  557,  557,  557,  697,  697,  697,
      698,  698,  698,  722,  722,  722,  723,  723,  723,  724,
      724,  724,  726,  843,  726,  750,  750,  750,  751,  751,
      751,  753,  753,  753,  761,  843,  761,  637,  637,  637,
      776,  776,  776,  777,  777,  777,  778,  843,  778,  783,

      843,  783,  794,  794,  794,  795,  795,  795,  796,  796,
      796,  800,  843,  800,  805,  805,  805,  806,  806,  806,
      807,  843,  807,  808,  843,  808,  697,  697,  697,  813,
      813,  813,  814,  814,  814,  819,  819,  819,  820,  820,
      820,  821,  843,  821,  823,  823,  823,  824,  824,  824,
      825,  825,  825,  751,  751,  751,  828,  828,  828,  829,
      843,  829,  830,  830,  830,  831,  831,  831,  832,  832,
      832,  834,  843,  834,  835,  835,  835,  836,  843,  836,
      838,  838,  838,  839,  839,  839,  841,  841,  841,  730,
      843,  730,  842,  842,  842,    7,  843,  843,  843,  843,

      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843
    } ;

static yyconst flex_int16_t yy_chk[3970] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   17,   25,
      842,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   29,   16,

       26,  841,   27,   17,   25,   26,   34,   36,   27,   58,
       35,   40,   40,   26,   35,   16,   41,   41,   16,   16,
       16,   16,   16,   29,   16,  839,   26,   27,   42,   42,
       26,   34,   36,   27,   58,  838,   35,  837,   26,   35,
       16,   19,   19,  836,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   20,  835,   20,   59,   22,
      834,   22,   61,   62,   23,   20,   23,   63,   64,   22,
       65,   30,   20,  832,   23,  739,   22,   23,  739,   22,
       20,   23,   20,   59,   22,   30,   22,   61,   62,   23,
       20,   23,   63,   64,   22,   65,   30,   20,   21,   23,
       21,   22,   23,   21,   22,   67,   23,   68,   21,   21,
       30,   69,   70,   71,   74,   21,  129,  129,  271,  831,
      712,  712,  712,   21,  712,   21,  829,  828,   21,  271,
       67,   72,   68,   21,   21,   75,   69,   70,   71,   74,
       21,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   72,   24,   31,
       75,   76,  827,   31,   24,   66,   73,  825,   28,  824,
       77,   24,  823,   31,  821,   66,   28,   24,   24,   24,
       24,   24,   28,   24,   73,   31,   76,   28,   31,   24,
       66,   32,   73,   79,   28,   77,   24,   32,   31,   32,
       66,   28,   33,   33,   80,   82,   83,   28,   32,   73,
       85,   33,   28,   86,   87,   88,   32,   93,   79,   33,
      820,  330,   32,  399,   32,  819,  814,  813,  812,   80,
       82,   83,  330,   32,  399,   85,   94,   33,   86,   87,
       88,  807,   93,  806,   33,   50,   50,   50,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   94,   50,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  805,  796,  795,  794,  782,  778,  777,   95,
       89,   50,   50,   50,   50,   50,   96,   50,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   89,   55,   55,
       55,   55,   55,   55,   95,  776,   89,  775,  767,  766,
      454,   96,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  454,   89,   97,   55,   55,   55,   55,   55,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   84,   57,  109,   97,  110,

      111,  112,   84,  113,  107,   84,  107,  107,  107,  107,
      107,  107,  107,  107,  107,   57,   57,   57,   57,   57,
       84,   57,  109,  116,  110,  111,  112,   84,  113,  114,
       84,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  117,  100,  116,
      514,  559,  607,  639,  114,  765,  764,  756,  118,  753,
      751,  514,  559,  607,  639,  119,  120,  100,  100,  100,
      100,  100,  117,  100,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  118,  104,  104,  104,  104,  104,  104,
      119,  120,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  750,  741,  740,  732,  726,  725,  724,  122,  123,
      104,  104,  104,  104,  104,  106,  124,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  122,  123,  675,  700,  731,  723,  722,
      713,  124,  701,  698,  697,  696,  675,  700,  731,  125,
      126,  128,  130,  106,  106,  106,  106,  106,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  125,  126,  128,  130,  132,  133,
      134,  135,  136,  137,  138,  139,  141,  142,  143,  144,
      145,  146,  147,  148,  108,  108,  108,  108,  108,  683,

      676,  670,  669,  132,  133,  134,  135,  136,  137,  138,
      139,  141,  142,  143,  144,  145,  146,  147,  148,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  155,  149,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  149,  149,  149,  149,  149,
      668,  149,  154,  667,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      159,  161,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  665,  648,  640,  638,  637,  636,  608,  161,  163,

      154,  154,  154,  154,  154,  157,  166,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  161,  163,  755,  781,  602,  601,  600,
      599,  166,  167,  592,  577,  571,  755,  781,  560,  168,
      169,  171,  174,  157,  157,  157,  157,  157,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  167,  158,  158,
      158,  158,  158,  158,  168,  169,  171,  174,  558,  557,
      556,  553,  515,  175,  508,  507,  506,  505,  491,  466,
      176,  177,  455,  452,  158,  158,  158,  158,  158,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  175,  160,

      160,  160,  160,  160,  160,  176,  177,  178,  181,  182,
      183,  184,  186,  187,  188,  185,  178,  178,  178,  185,
      189,  190,  191,  181,  451,  160,  160,  160,  160,  160,
      194,  197,  178,  181,  182,  183,  184,  186,  187,  188,
      185,  178,  178,  178,  185,  189,  190,  191,  181,  192,
      195,  198,  199,  216,  217,  194,  218,  197,  220,  221,
      222,  195,  220,  223,  192,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  192,  195,  198,  199,  216,  217,
      450,  218,  434,  220,  221,  222,  195,  220,  223,  192,
      207,  421,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  209,  417,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  400,
      391,  390,  389,  388,  342,  224,  331,  328,  207,  207,
      207,  207,  207,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  226,  208,  208,  208,  208,  208,  208,  210,
      224,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      327,  326,  324,  319,  312,  311,  308,  226,  227,  208,
      208,  208,  208,  208,  211,  294,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  212,  227,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  211,  211,  211,  211,  211,  213,  284,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  214,  219,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  229,  230,  231,  232,
      233,  219,  234,  219,  225,  213,  213,  213,  213,  213,
      237,  225,  219,  235,  272,  236,  238,  239,  240,  225,
      241,  229,  230,  231,  232,  233,  219,  234,  219,  225,
      236,  242,  243,  245,  246,  237,  225,  247,  248,  235,
      236,  238,  239,  240,  225,  241,  249,  250,  251,  252,

      253,  254,  255,  256,  257,  236,  242,  243,  245,  246,
      259,  260,  247,  248,  264,  263,  262,  261,  258,  244,
      215,  249,  250,  251,  252,  253,  254,  255,  256,  257,
      205,  204,  203,  202,  201,  259,  260,  265,  200,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  266,  196,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  267,  277,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  193,  180,  172,
      170,  165,  164,  153,  276,  152,  266,  266,  266,  266,
      266,  268,  277,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  269,
      276,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      151,  140,  131,  127,  115,  103,  101,   78,  278,  268,
      268,  268,  268,  268,  273,   51,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  275,  278,  275,  275,  275,  275,  275,  275,
      275,  275,  275,   47,   46,   43,   38,   18,  280,  281,
       14,  282,  273,  273,  273,  273,  273,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  279,  274,  274,  274,
      274,  274,  274,  280,  281,  279,  282,  283,  285,  287,

      288,  289,  290,  291,  293,  295,  296,  297,  298,  299,
      300,  279,  301,  274,  274,  274,  274,  274,  302,  303,
      279,  304,  283,  285,  287,  288,  289,  290,  291,  293,
      295,  296,  297,  298,  299,  300,  305,  301,  307,  309,
      310,  313,  315,  302,  303,  316,  304,  317,  318,  321,
      322,  307,  323,  325,   12,    7,    4,    3,    0,    0,
        0,  305,    0,  307,  309,  310,  313,  315,    0,    0,
      316,    0,  317,  318,  321,  322,  307,  323,  325,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  332,    0,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  334,    0,  334,  334,
      334,  334,  334,  334,  334,  334,  334,    0,    0,    0,
        0,    0,    0,  341,    0,    0,  332,  332,  332,  332,
      332,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      343,  333,  333,  333,  333,  333,  333,  335,  341,  335,
      335,  335,  335,  335,  335,  335,  335,  335,    0,  344,
        0,    0,    0,    0,    0,  343,    0,  333,  333,  333,
      333,  333,  336,    0,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  337,  344,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,

      337,  338,  345,  338,  338,  338,  338,  338,  338,  338,
      338,  338,    0,    0,    0,    0,    0,    0,    0,    0,
      346,  337,  337,  337,  337,  337,  339,  345,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  340,  346,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  347,  348,  349,  351,  352,
      354,  355,  356,  350,  339,  339,  339,  339,  339,  350,
      357,  350,  358,  359,  360,  361,  362,  363,  364,  365,
      347,  348,  349,  351,  352,  354,  355,  356,  350,  366,
        0,  367,  368,  369,  350,  357,  350,  358,  359,  360,

      361,  362,  363,  364,  365,  370,  371,  372,  373,  374,
      375,  376,  378,    0,  379,  366,  367,  368,  369,  380,
      381,  382,  383,  385,  386,  387,  404,    0,    0,    0,
      370,  371,  372,  373,  374,  375,    0,  376,  378,  379,
        0,    0,    0,    0,  380,  381,  382,  383,  385,  386,
      387,  392,  404,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  393,    0,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  394,    0,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  395,  405,  395,  395,  395,  395,  395,  395,  395,

      395,  395,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  394,  394,  394,  394,  394,  396,  405,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  397,  406,  397,  397,  397,  397,
      397,  397,  397,  397,  397,    0,    0,    0,    0,    0,
        0,    0,    0,  407,  396,  396,  396,  396,  396,  401,
      406,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  403,  407,  403,
      403,  403,  403,  403,  403,  403,  403,  403,    0,    0,
        0,    0,    0,  408,  409,  410,  411,  401,  401,  401,

      401,  401,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  412,  402,  402,  402,  402,  402,  402,  408,  409,
      410,  411,  413,  414,  415,  416,  419,  420,  422,  424,
      425,  428,    0,  429,  430,  431,  412,  432,  402,  402,
      402,  402,  402,  433,  435,  436,  437,  413,  414,  415,
      416,  419,  420,  422,  424,  425,  438,  428,  429,  430,
      431,  439,  432,  440,  441,  442,  443,  444,  433,  435,
      436,  437,  445,  446,  447,  448,    0,    0,    0,    0,
        0,  438,    0,    0,    0,  470,  439,    0,  440,  441,
      442,  443,  444,    0,    0,    0,    0,  445,  446,  447,

      448,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      456,  470,  456,  456,  456,  456,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  456,  456,  458,    0,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  456,  456,
      456,  456,  456,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  464,  457,  457,  457,  457,  457,  457,  461,
      465,  461,  461,  461,  461,  461,  461,  461,  461,  461,
        0,    0,    0,    0,    0,    0,    0,  464,  467,  457,
      457,  457,  457,  457,  460,  465,  460,  460,  460,  460,

      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  463,  467,  463,  463,  463,  463,  463,  463,
      463,  463,  463,    0,    0,    0,    0,    0,    0,    0,
      468,  469,  460,  460,  460,  460,  460,  462,  471,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  468,  469,  472,  473,    0,
      474,  475,    0,  471,  476,  477,  479,  480,  481,  482,
      484,  485,  486,  487,  489,  462,  462,  462,  462,  462,
      492,  490,  472,  493,  473,  474,  494,  475,  490,  476,
      477,  479,  480,  481,  482,  484,  485,  486,  487,  489,

      495,  496,  497,  498,  499,  492,  490,  501,  493,  503,
      504,  494,  519,  490,  509,  509,  509,  509,  509,  509,
      509,  509,  509,    0,    0,  495,  496,  497,  498,  499,
      520,    0,  501,    0,  503,  504,  510,  519,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  511,  520,  511,  511,  511,  511,
      511,  511,  511,  511,  511,    0,    0,    0,    0,    0,
        0,    0,    0,  521,  510,  510,  510,  510,  510,  512,
        0,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  513,  521,  513,

      513,  513,  513,  513,  513,  513,  513,  513,    0,    0,
        0,    0,    0,    0,    0,    0,  522,  512,  512,  512,
      512,  512,  516,    0,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      518,  522,  518,  518,  518,  518,  518,  518,  518,  518,
      518,    0,    0,    0,    0,    0,  523,  524,  525,  526,
      516,  516,  516,  516,  516,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  527,  517,  517,  517,  517,  517,
      517,  523,  524,  525,  526,  528,  529,  530,  532,  533,
        0,  534,  535,  537,  538,  542,  543,  545,  546,  527,

      544,  517,  517,  517,  517,  517,  547,  544,  548,  549,
      528,  529,  530,  532,  552,  533,  534,  535,  537,  538,
      542,  543,  545,  546,  554,  544,  555,    0,  569,    0,
        0,  547,  544,  548,  549,    0,    0,    0,  563,  552,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  554,
        0,  555,  561,  569,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      565,    0,  565,  565,  565,  565,  565,  565,  565,  565,
      565,    0,    0,    0,    0,    0,    0,  570,    0,    0,
      561,  561,  561,  561,  561,  562,  562,  562,  562,  562,

      562,  562,  562,  562,  572,  562,  562,  562,  562,  562,
      562,  567,  570,  567,  567,  567,  567,  567,  567,  567,
      567,  567,    0,    0,    0,    0,    0,    0,  628,  572,
      573,  562,  562,  562,  562,  562,  564,  575,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  628,  573,    0,    0,    0,    0,
        0,  604,  575,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  576,  579,  564,  564,  564,  564,  564,  566,
      580,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  576,  579,  581,

      582,  586,  587,  588,  589,  580,  590,  591,  593,  594,
      595,  596,  597,    0,  613,    0,    0,  566,  566,  566,
      566,  566,    0,    0,  581,  582,  586,  587,  588,  589,
        0,  590,  591,  593,  594,  595,  596,  597,  603,  613,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  606,  614,  606,  606,
      606,  606,  606,  606,  606,  606,  606,    0,    0,    0,
        0,    0,    0,    0,    0,  615,  603,  603,  603,  603,
      603,  605,  614,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  611,

      615,  611,  611,  611,  611,  611,  611,  611,  611,  611,
        0,    0,    0,    0,    0,    0,    0,  616,  617,  605,
      605,  605,  605,  605,  609,  621,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  616,  617,    0,    0,    0,    0,    0,    0,
      621,  623,    0,    0,    0,    0,    0,    0,    0,  624,
      625,  626,  609,  609,  609,  609,  609,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  623,  610,  610,  610,
      610,  610,  610,  619,  624,  625,  626,  627,  631,  619,
      630,    0,  632,  634,  635,    0,  649,    0,    0,    0,

        0,    0,    0,  610,  610,  610,  610,  610,  619,    0,
        0,    0,  627,  631,  619,    0,  630,  632,  634,  635,
      641,  649,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  643,    0,
      643,  643,  643,  643,  643,  643,  643,  643,  643,    0,
        0,    0,    0,    0,    0,  650,    0,    0,  641,  641,
      641,  641,  641,  642,  642,  642,  642,  642,  642,  642,
      642,  642,  653,  642,  642,  642,  642,  642,  642,  645,
      650,  645,  645,  645,  645,  645,  645,  645,  645,  645,
        0,    0,    0,    0,    0,    0,    0,  653,  654,  642,

      642,  642,  642,  642,  644,    0,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  647,  654,  647,  647,  647,  647,  647,  647,
      647,  647,  647,    0,    0,    0,    0,    0,    0,    0,
      655,  657,  644,  644,  644,  644,  644,  646,  658,  646,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  646,  646,  646,  655,  657,  659,  660,  661,
      662,  663,  664,  658,  666,    0,  680,    0,    0,    0,
        0,    0,    0,    0,    0,  646,  646,  646,  646,  646,
        0,    0,  659,  660,  661,  662,  663,  664,    0,  666,

      671,  680,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  672,  681,
      672,  672,  672,  672,  672,  672,  672,  672,  672,    0,
        0,    0,    0,    0,    0,    0,  684,    0,  671,  671,
      671,  671,  671,  673,  681,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  674,  684,  674,  674,  674,  674,  674,  674,  674,
      674,  674,    0,    0,    0,    0,    0,    0,    0,    0,
      685,  673,  673,  673,  673,  673,  677,    0,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,

      677,  677,  677,  677,  679,  685,  679,  679,  679,  679,
      679,  679,  679,  679,  679,    0,    0,    0,    0,    0,
      686,  687,  688,  689,  677,  677,  677,  677,  677,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  690,  678,
      678,  678,  678,  678,  678,  686,  687,  688,  689,  691,
      693,  694,  704,  709,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  690,    0,  678,  678,  678,  678,  678,
        0,  710,    0,    0,  691,  693,  694,  702,  709,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  706,  710,  706,  706,  706,

      706,  706,  706,  706,  706,  706,    0,    0,    0,    0,
        0,    0,  714,    0,    0,  702,  702,  702,  702,  702,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  715,
      703,  703,  703,  703,  703,  703,  708,  714,  708,  708,
      708,  708,  708,  708,  708,  708,  708,    0,    0,    0,
        0,    0,    0,  790,  715,  716,  703,  703,  703,  703,
      703,  705,  717,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  790,
      716,    0,    0,    0,    0,    0,  728,  717,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  718,  719,  705,

      705,  705,  705,  705,  707,  721,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  718,  719,    0,    0,    0,    0,    0,  730,
      721,  730,  730,  730,  730,  730,  730,  730,  730,  730,
        0,  736,  707,  707,  707,  707,  707,  727,    0,  727,
      727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
      727,  727,  727,  727,  727,  735,  736,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  737,    0,    0,    0,
        0,    0,    0,  742,  743,  727,  727,  727,  727,  727,
      729,  745,  729,  729,  729,  729,  729,  729,  729,  729,

      729,  737,  729,  729,  729,  729,  729,  729,  742,  743,
        0,    0,    0,    0,    0,  758,  745,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  746,  747,  729,  729,
      729,  729,  729,  733,  748,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  746,  747,  749,    0,  762,    0,    0,  760,  748,
      760,  760,  760,  760,  760,  760,  760,  760,  760,    0,
        0,  733,  733,  733,  733,  733,  763,  768,  749,  757,
      762,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      770,  757,  757,  757,  757,  757,  757,    0,  773,    0,

        0,  763,  768,  780,    0,  780,  780,  780,  780,  780,
      780,  780,  780,  780,    0,  770,  774,  757,  757,  757,
      757,  757,  759,  773,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      798,  774,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  784,    0,    0,    0,    0,    0,    0,  785,  793,
      759,  759,  759,  759,  759,  779,  801,  779,  779,  779,
      779,  779,  779,  779,  779,  779,  784,  779,  779,  779,
      779,  779,  779,  785,  793,  803,  804,  809,  810,  811,
      817,  801,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  779,  779,  779,  779,  779,    0,    0,
      803,  804,  809,  810,  811,  817,  844,  844,  844,  844,
      844,  844,  845,  845,  845,  845,  845,  845,  846,  846,
      846,  846,  846,  846,  847,    0,  847,  847,  847,  847,
      848,  848,  848,  848,  848,  848,  849,    0,  849,  849,
      849,  849,  850,  850,  850,  851,    0,  851,  852,  852,
      852,  853,  853,  853,  854,  854,  854,  855,  855,  855,
      856,  856,  856,  857,  857,  857,  858,  858,  858,  859,
      859,  859,  860,  860,  860,  861,  861,  861,  862,  862,
      862,  863,  863,  863,  864,  864,  864,  865,  865,  865,

      866,  866,  866,  867,  867,  867,  868,  868,  868,  869,
      869,  869,  870,  870,  870,  871,  871,  871,  872,  872,
      872,  873,  873,  873,  874,  874,  874,  875,  875,  875,
      876,  876,  876,  877,  877,  877,  878,  878,  878,  879,
      879,  879,  880,  880,  880,  881,  881,  881,  882,  882,
      882,  883,  883,  883,  884,  884,  884,  885,  885,  885,
      886,  886,  886,  887,  887,  887,  888,  888,  888,  889,
      889,  889,  890,    0,  890,  891,  891,  891,  892,  892,
      892,  893,  893,  893,  894,    0,  894,  895,  895,  895,
      896,  896,  896,  897,  897,  897,  898,    0,  898,  899,

        0,  899,  900,  900,  900,  901,  901,  901,  902,  902,
      902,  903,    0,  903,  904,  904,  904,  905,  905,  905,
      906,    0,  906,  907,    0,  907,  908,  908,  908,  909,
      909,  909,  910,  910,  910,  911,  911,  911,  912,  912,
      912,  913,    0,  913,  914,  914,  914,  915,  915,  915,
      916,  916,  916,  917,  917,  917,  918,  918,  918,  919,
        0,  919,  920,  920,  920,  921,  921,  921,  922,  922,
      922,  923,    0,  923,  924,  924,  924,  925,    0,  925,
      926,  926,  926,  927,  927,  927,  928,  928,  928,  929,
        0,  929,  930,  930,  930,  843,  843,  843,  843,  843,

      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[99] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 844 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3896 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_KEYWORD_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::DUID_KEYWORD_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::HEX_KEYWORD_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_KEYWORD_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::SCRIPT_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::ROUTING_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::AUTH_PROTOCOL_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::AUTH_ALGORITHM_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::AUTH_REPLAY_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return ClntParser::DOWNLINK_PREFIX_IFACES_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
;
	YY_BREAK
case 80:
YY_RULE_SETUP
;
	YY_BREAK
case 81:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 84:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) {
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        }
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return ClntParser::DUID_;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%10x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    if(!sscanf(yytext,"%10u",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
case 98:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 844 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 844 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 843);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

