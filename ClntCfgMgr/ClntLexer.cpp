
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 99
#define YY_END_OF_BUFFER 100
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[851] =
    {   0,
        1,    1,    0,    0,    0,    0,  100,   98,    2,    1,
        1,   98,   80,   98,   98,   97,   97,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   84,   84,   99,    1,
        1,    1,    0,   92,   80,    0,   92,   82,   81,   97,
        0,    0,   96,    0,   89,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       11,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       52,   93,   93,   93,   93,   93,   93,   93,   93,   25,
       26,   12,   93,   93,   93,   93,   93,   83,   81,   97,

        0,    0,    0,   88,   94,   87,   87,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
        8,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   97,    0,
        0,    0,    0,   86,   86,    0,   87,    0,   87,   93,
       93,   76,   93,   93,   93,   93,   93,   93,   93,    7,
       93,   34,   13,   93,   93,   93,   93,   93,   10,    0,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       97,    0,   95,    0,    0,    0,   86,    0,   86,    0,
       87,   87,   87,   87,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,    3,   93,   93,
       93,   93,   93,   93,   93,    0,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
        0,    0,    0,    0,    0,   86,   86,   86,   86,    0,
       87,   87,   87,    0,   87,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   29,   93,   93,   93,
       93,   93,   35,   93,   93,   93,   93,   93,   93,   93,

        0,    0,   93,   93,   93,   93,   27,   93,   53,   93,
       93,   93,   93,   93,   20,   93,   93,   93,   93,   93,
        6,   93,   93,   93,   93,   93,    0,    0,    0,    0,
       86,   86,   86,    0,   86,    0,    0,   87,   87,   87,
       87,   93,    5,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   57,   55,   93,   93,   93,   93,
       93,   93,   93,   93,   93,    0,    0,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   43,   93,
       93,   93,   93,   93,   93,   49,   93,   93,   93,   95,
        0,    0,    0,    0,    0,   86,   86,   86,   86,    0,

       87,   87,   87,    0,   87,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       56,   93,   93,   93,   93,   42,   93,   93,   16,   17,
        0,    0,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   19,    0,    0,    0,    0,   86,   86,   86,    0,
       86,   91,   87,   87,   87,   87,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   54,   93,   93,   93,   93,   15,    0,    0,   93,
       93,    4,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   14,   93,   31,   93,   93,    0,    0,
        0,    0,   90,   86,   86,   86,   86,   87,   87,   87,
        0,   87,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   28,   93,   93,   93,   93,
       18,    0,    0,   39,   38,   30,   93,   93,   93,   93,
       93,   93,   93,   93,   33,   32,   93,   93,   93,   93,
       95,    0,    0,   86,   86,   86,    0,   86,   87,   87,
       87,   87,   79,   93,   93,   93,   93,   93,   93,   66,
       93,   93,   93,   67,   93,   93,   93,   93,   60,   41,
       40,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   93,   58,    0,    0,    0,    0,   86,   86,
       86,   86,   87,   87,   87,    0,   87,    9,   93,   93,
       93,   62,   93,   93,   37,   93,   68,   93,   78,   93,
       93,   93,   93,   93,   93,   47,   93,   93,   93,   75,
       93,   93,    0,    0,    0,   86,   86,   86,    0,   86,
       87,   87,   87,   87,   93,   93,   93,   64,   36,   93,
       93,   93,   61,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   95,    0,    0,    0,   86,   86,   86,
       86,   87,   87,   87,    0,   87,   93,   93,   65,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   44,   93,

       93,   23,    0,    0,   85,   88,   86,   86,   86,    0,
       86,   87,   87,   87,   87,   93,   93,   69,   93,   93,
       93,   93,   93,   93,   93,   93,   24,   93,    0,    0,
       85,    0,   86,   86,   86,   86,   86,   87,   87,   87,
        0,   87,   93,   93,   70,   93,   93,   93,   93,   93,
       46,   93,   93,   93,   93,   93,   95,   85,   88,   86,
        0,   86,   86,   86,   86,   87,   87,   87,   93,   93,
       93,   93,   93,   93,   93,   21,   93,   45,   51,   93,
       93,    0,   85,   86,   86,   86,   86,   87,   87,   87,
       93,   93,   71,   72,   73,   74,   93,   22,   48,   93,

        0,   86,   86,    0,   86,   86,   87,   93,   63,   93,
       93,   95,   86,   86,   87,   93,   93,   93,    0,   86,
       86,    0,   59,   93,   50,   85,   86,   86,   77,   85,
       86,   86,    0,    0,   86,   86,    0,   86,   86,    0,
       95,   86,   86,    0,   86,   86,    0,   86,   86,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[936] =
    {   0,
        0,    0, 1491, 1490,    0,    0, 1490, 3976, 3976,   72,
       74, 1484,    0, 1481,   71,   71,   34, 1465,  134,  183,
      227,  187,  239,  296,   54,   77,   71,  194,   65,  188,
      197,  300,  313,   68,   87,   72, 3976, 1474, 3976,  108,
      112,  115, 1480, 3976,    0, 1477, 1476, 3976,    0,  358,
     1374,  376, 3976,    0,  402,    0,  444,  186,  174,    0,
      181,  179,  186,  232,  225,  295,  237,  231,  245,  226,
      242,  251,  320,  248,  248,  245,  288, 1383,  296,  295,
        0,  311,  303,  448,  355,  365,  368,  382,  452,    0,
        0,    0,  415,  446,  444,  443,  441, 3976,    0,  506,

     1370,  427, 1369,  550,    0,  594,  524,  636,  442,  444,
      449,  456,  446,  461, 1380,  466,  454,  465,  519,  517,
        0,  528,  536,  572,  567,  579, 1379,  612,  123,  615,
     1369,  610,  614,  638,  633,  644,  635,  631,  643, 1339,
      637,  634,  646,  651,  654,  649,  655,  649,  696,  575,
     1319, 1318, 1317,  742,  714,  723,  786,  828,  760,  870,
      762,    0,  743, 1328, 1327,  757,  790,  801,  799, 1326,
      794, 1324,    0,  823,  824,  832,  832,  876,    0, 1323,
      876,  866,  863,  868,  882,  880,  871,  883,  872,  884,
      878,  918, 1286,  898,  920, 1285,  903,  920,  910, 1284,

      947, 1271, 1270, 1269, 1268,  973,  984, 1026, 1002, 1044,
     1070, 1088, 1114, 1132, 1267,  910,  908,  915, 1131,  915,
      912,  928,  922,  999, 1128, 1017, 1059,    0, 1087, 1114,
     1126, 1122, 1133, 1124, 1149, 1148, 1136, 1148, 1140, 1150,
     1142, 1139, 1144, 1251, 1163, 1150, 1166, 1158, 1164, 1170,
     1181, 1184, 1176, 1169, 1183, 1165, 1173, 1240, 1181, 1196,
     1224, 1223, 1222, 1221, 1238, 1249, 1267, 1293, 1311, 1210,
     1337, 1220, 1349, 1391, 1367, 1256, 1256, 1298, 1388, 1358,
     1355, 1370, 1384, 1394, 1231, 1386,    0, 1391, 1392, 1395,
     1383, 1396,    0, 1388, 1107, 1398, 1400, 1391, 1410, 1402,

     1401, 1419, 1412, 1409, 1437, 1426,    0, 1440, 1106, 1443,
     1438, 1105, 1104, 1441,    0, 1436, 1434, 1439, 1450, 1103,
        0, 1441, 1437, 1447, 1102, 1451, 1089, 1088, 1060, 1496,
     1507, 1051, 1519, 1561, 1537, 1579, 1605, 1616, 1634, 1660,
     1678, 1525, 1062, 1540, 1577, 1617, 1641, 1663, 1663, 1665,
     1668, 1685, 1660, 1672,    0, 1664, 1669, 1681, 1689, 1682,
     1691, 1682, 1693, 1695, 1697, 1690, 1695, 1713, 1693, 1707,
     1695, 1714, 1725, 1727, 1717, 1726, 1715, 1734,    0, 1735,
     1715, 1724, 1726, 1728, 1733,    0, 1739, 1730, 1732, 1049,
     1048, 1047, 1046, 1788, 1799, 1810, 1828, 1854, 1872, 1837,

     1898, 1045, 1910, 1952, 1928, 1751, 1806, 1843, 1869, 1918,
     1932, 1915, 1924, 1932, 1958, 1951, 1950, 1954, 1962, 1056,
        0, 1963, 1955, 1022, 1955,    0, 1953, 1960,    0,    0,
     1972, 1952, 1966, 1971, 1970, 1980, 1021, 1982, 1982, 1975,
     1983, 2000, 1985, 1998, 2003, 2003, 1991, 2009, 2011, 2011,
     2002,    0, 1007, 1006, 1005, 2028, 2056, 1004, 2068, 2110,
     2086, 2095, 2154, 2128, 2198, 2172, 2097, 2109, 1015, 2146,
     2161, 2168, 2192, 2207, 2194, 2195, 2210, 2198, 2212, 2196,
     2199,    0, 2196, 2204, 2214, 2200,    0, 2211, 2216, 2208,
     2205,    0, 2206, 2239, 1014, 2219, 2239, 2235, 2236, 2235,

     2242, 2241, 2251,    0, 2258,    0, 2257, 2258,  992,  974,
      956,  955, 2273, 2301, 2319, 2345, 2363, 2389,  896, 2401,
     2443, 2419, 2264, 2308, 2356, 2404, 2416, 2421, 2424, 2418,
     2451, 2434, 2453, 2452, 2449,    0, 2441, 2459, 2446, 2457,
        0, 2449, 2446,    0,    0,    0, 2456, 2461, 2481, 2463,
     2467, 2472, 2456, 2464,    0,    0, 2477,  865, 2476, 2494,
      850,  849,  848, 2517,  847, 2538, 2580, 2556, 2624, 2598,
     2668, 2642,    0, 2478, 2485,  858, 2500, 2558, 2565,    0,
     2617, 2629,  857,    0, 2636, 2672, 2666, 2675,    0, 3976,
     3976, 2674, 2663, 2673, 2678, 2677, 2665,  855, 2681, 2684,

     2675, 2675, 2681,    0,  842,  841,  840,  839, 2728, 2746,
     2772, 2790, 2816,  808, 2828, 2870, 2846,    0, 2686, 2723,
     2746,    0, 2780, 2839,    0, 2865,    0, 2847,    0, 2849,
     2865, 2859, 2876, 2865, 2884,    0, 2885, 2869, 2873,    0,
     2874, 2877,  807,  806,  805, 2928,  804, 2940, 2982, 2958,
     3026, 3000, 3070, 3044,  815, 2887, 2951,    0,    0, 2978,
     3026, 3042,    0, 3032, 3074, 3075, 3059, 3062, 3080, 3065,
     3071,  813, 3081,  800,  799,  798,  797, 3124, 3142, 3168,
     3186, 3212,  796, 3224, 3266, 3242, 3070, 3112,    0,  799,
     3149, 3164, 3238, 3230, 3229, 3245, 3257, 3274,    0, 3272,

     3261,    0,  766,  765,  764,    0, 3291,  763, 3317, 3359,
     3335, 3403, 3377, 3447, 3421, 3276, 3291,    0,  385,  774,
     3328, 3340, 3402, 3410, 3414, 3451,    0, 3442,  761,  760,
      732,  729,  672, 3495, 3469, 3539, 3513, 3557,  671, 3583,
        0, 3601, 3442, 3488,    0,  123,  671,  677, 3504, 3516,
        0, 3552, 3582, 3588, 3587, 3583,  662,  661, 3976,  616,
        0, 3642,  615, 3654, 3627, 3698, 3672,    0, 3585, 3650,
      619,  616,  617,  618, 3656,    0, 3674,    0,    0, 3686,
     3687,  609,  608,  607,  606, 3745, 3719, 3763,  605,    0,
     3704, 3700,    0,    0,    0,    0, 3752,    0,    0, 3755,

      604,  603,  564,    0, 3789, 3976,    0, 3746,    0, 3763,
     3753,  563,  562,  561, 3976, 3748, 3764, 3763,  560,  559,
      530,    0,    0, 3752,    0,  529,  528,  527,    0,  526,
      525,  480,    0,  427,  416,  415,    0,  414,  413,    0,
      412,  411,  382,  380,  332,  331,    0,  313,  285, 3976,
     3819, 3823, 3827, 3831, 3835, 3839, 3841,  302, 3843, 3845,
     3847, 3849, 3851, 3853, 3855, 3857, 3859, 3861, 3863, 3865,
     3867, 3869, 3871, 3873, 3875, 3877, 3879, 3881, 3883, 3885,
     3887, 3889, 3891, 3893, 3895, 3897, 3899, 3901, 3903, 3905,
     3907, 3909, 3911, 3913,  285, 3915, 3917, 3919,  283, 3921,

     3923, 3925,  282,  280, 3927, 3929, 3931,  229, 3933, 3935,
      226,  224, 3937, 3939, 3941, 3943, 3945,  207, 3947, 3949,
     3951, 3953, 3955,  143, 3957, 3959, 3961,  139, 3963,  134,
     3965, 3967, 3969,   79, 3971
    } ;

static yyconst flex_int16_t yy_def[936] =
    {   0,
      850,    1,  851,  851,  852,  852,  850,  850,  850,  850,
      850,  853,  854,  855,  850,  850,   16,  850,  850,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  850,  850,  850,  850,
      850,  850,  853,  850,  854,  855,  850,  850,  856,  850,
      857,   50,  850,  858,  850,   24,   24,   57,   57,   24,
       24,   24,   57,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  850,  856,  850,

      859,  100,  860,  850,  858,  850,  106,   57,  108,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  850,  149,
      861,  862,  863,  850,  154,  850,  850,  850,  157,  108,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  850,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      150,  150,  862,  864,  865,  850,  850,  850,  207,  850,
      850,  211,  850,  213,  160,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  850,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      866,  850,  867,  868,  850,  850,  266,  850,  268,  850,
      850,  850,  850,  850,  273,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      850,  850,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  869,  870,  871,  850,
      850,  850,  850,  850,  333,  850,  850,  850,  338,  850,
      340,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  850,  850,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  867,
      850,  872,  873,  850,  850,  850,  396,  850,  398,  850,

      850,  850,  850,  850,  403,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      850,  850,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  874,  875,  876,  850,  850,  850,  850,  850,
      459,  850,  850,  463,  850,  465,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  850,  850,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,  877,  850,
      878,  879,  850,  850,  514,  850,  516,  850,  850,  850,
      850,  520,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  850,  850,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      880,  881,  882,  850,  850,  850,  850,  566,  850,  569,
      850,  571,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  850,
      850,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,  883,  850,  884,  885,  850,  609,
      850,  611,  850,  850,  850,  850,  615,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  886,  887,  888,  850,  850,  850,  850,  648,
      850,  651,  850,  653,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  889,  850,  890,  891,  850,  678,  850,
      680,  850,  850,  850,  850,  684,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,  892,  893,  894,  895,  850,  850,  850,  850,
      709,  850,  712,  850,  714,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  896,  850,
      897,  850,  898,  850,  734,  850,  736,  850,  850,  850,
      899,  740,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  900,  901,  850,  902,
      903,  850,  850,  850,  764,  850,  766,  904,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  905,  850,  906,  907,  850,  786,  850,  850,  908,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      909,  850,  910,  911,  850,  850,  912,   24,   24,   24,
       24,  913,  914,  915,  850,   24,   24,   24,  916,  850,
      917,  918,   24,   24,   24,  919,  920,  921,   24,  922,
      850,  923,  924,  925,  926,  927,  928,  850,  929,  930,
      850,  931,  932,  925,  850,  933,  934,  935,  850,    0,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850
    } ;

static yyconst flex_int16_t yy_nxt[4051] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   25,
       26,   24,   24,   27,   24,   28,   29,   30,   24,   31,
       32,   33,   34,   35,   36,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   25,   26,   24,   24,   27,
       24,   28,   29,   30,   24,   31,   32,   33,   34,   35,
       36,   24,   24,   24,   40,   41,   42,   41,   48,  850,
       70,  737,   49,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   51,   52,   52,   52,   52,   52,   52,   71,

       53,   74,   80,   94,   72,  850,   70,   75,   97,   95,
       40,   41,   73,   96,   42,   41,   54,   40,   41,   52,
       52,   52,   52,   52,   52,   71,   53,   74,   80,   94,
       72,  180,  181,   75,   97,   95,  843,  771,   73,   96,
      772,  841,   54,   56,   56,  836,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   51,   57,   57,   57,   58,
       57,   59,   56,   60,   56,   56,   56,   56,   56,   61,
       56,   56,   56,   56,   56,   56,   62,   56,   56,   56,
       56,   56,   57,   57,   57,   58,   57,   59,   56,   60,
       56,   56,   56,   56,   56,   61,   56,   56,   56,   56,

       56,   56,   62,   56,   56,   56,   56,   56,   57,  828,
       57,  109,   57,   81,   57,  110,   76,  111,   56,   83,
      112,  113,   56,   84,   77,   56,  815,   82,  814,   56,
       78,  807,   68,   85,   57,   79,   57,  109,   57,   81,
       57,  110,   76,  111,   56,   83,  112,  113,   56,   84,
       77,   56,   63,   82,   57,   56,   78,   64,   68,   85,
      114,   79,   65,   66,   57,  115,   57,  118,  119,   67,
      120,  121,  122,  123,   56,  126,  127,   69,   63,  128,
       57,   56,  790,   64,  785,  768,  114,  733,   65,   66,
       57,  115,   57,  118,  119,   67,  120,  121,  122,  123,

       56,  126,  127,   69,  105,  128,  847,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,  850,   56,   56,
       56,   56,   56,   56,   86,   56,   90,   91,  129,  116,
       87,   56,   88,  131,  847,   92,  132,  133,   56,  117,
      134,   89,  124,   93,   56,   56,   56,   56,   56,   56,
       86,   56,  847,  840,  129,  116,   87,   56,   88,  131,
      125,   92,  132,  133,   56,  117,  134,   89,  124,   93,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  101,
      102,  102,  102,  102,  102,  102,  125,   53,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  138,  745,  746,

      747,  850,  748,  847,  139,  140,  102,  102,  102,  102,
      102,  102,  141,   53,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  138,  107,  107,  107,  107,  107,  107,
      139,  140,  840,  844,  840,  833,  840,  833,  141,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  759,  144,
      107,  107,  107,  107,  107,  107,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  101,  108,  108,  108,  108,
      108,  108,  135,   60,  142,  144,  145,  146,  147,  136,
      148,  161,  137,  162,  163,  164,  165,  166,  168,  169,
      170,  143,  108,  108,  108,  108,  108,  108,  135,   60,

      142,  833,  145,  146,  147,  136,  148,  161,  137,  162,
      163,  164,  165,  166,  168,  169,  170,  143,  149,  149,
      149,  149,  149,  149,  149,  149,  149,   51,  150,  150,
      150,  150,  150,  150,  850,   53,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  171,  822,  834,  833,  822,
      732,  822,  172,  173,  150,  150,  150,  150,  150,  150,
      174,   53,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  171,  155,  155,  155,  155,  155,  155,  172,  173,
      804,  706,  822,  804,  819,  804,  174,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  175,  176,  155,  155,

      155,  155,  155,  155,  156,  177,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  158,  159,  159,  159,  159,
      159,  159,  175,  176,  761,  677,  741,  804,  761,  732,
      104,  177,  796,  795,  794,  793,  710,  761,  179,  182,
      184,  185,  159,  159,  159,  159,  159,  159,  160,  160,
      160,  160,  160,  160,  160,  160,  160,   51,  160,  160,
      160,  160,  160,  160,  179,  182,  184,  185,  186,  187,
      188,  189,  190,  191,  193,  194,  195,  196,  197,  198,
      199,  200,  732,  782,  160,  160,  160,  160,  160,  160,
      774,  773,  685,  761,  186,  187,  188,  189,  190,  191,

      193,  194,  195,  196,  197,  198,  199,  200,  201,  201,
      201,  201,  201,  201,  201,  201,  201,   51,  202,  202,
      202,  202,  202,  202,  850,   53,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  202,  202,  202,  202,  202,  202,
      759,   53,  206,  732,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  208,  209,  209,  209,  209,  209,  209,
      850,  216,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  677,  608,  749,  649,  732,  677,  104,  217,  218,
      209,  209,  209,  209,  209,  209,  156,  221,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  158,  212,  212,
      212,  212,  212,  212,  217,  218,  718,  616,  706,  677,
      608,  703,  701,  221,  687,  567,  677,  608,  512,  521,
      222,  223,  224,  226,  212,  212,  212,  212,  212,  212,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  228,
      214,  214,  214,  214,  214,  214,  222,  223,  224,  226,
      104,  608,  512,  104,  637,  229,  626,  620,  460,  608,
      512,  605,  230,  231,  602,  228,  214,  214,  214,  214,
      214,  214,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  229,  215,  215,  215,  215,  215,  215,  230,  231,

      232,  237,  239,  240,  241,  244,  245,  246,  242,  233,
      234,  235,  243,  247,  248,  249,  238,  404,  215,  215,
      215,  215,  215,  215,  253,  257,  232,  237,  239,  240,
      241,  244,  245,  246,  242,  233,  234,  235,  243,  247,
      248,  249,  238,  250,  254,  258,  259,  276,  277,  278,
      253,  257,  283,  285,  286,  255,  284,  287,  251,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  850,  250,
      254,  258,  259,  276,  277,  278,  104,  512,  283,  285,
      286,  255,  284,  287,  251,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  206,  393,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  208,  267,  267,  267,  267,
      267,  267,  850,  393,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  549,  525,  334,  512,  393,  104,  288,
      494,  484,  267,  267,  267,  267,  267,  267,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  292,  269,  269,
      269,  269,  269,  269,  270,  288,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  481,  274,  104,  393,  264,
      453,  407,  208,  292,  269,  269,  269,  269,  269,  269,
      156,  393,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  158,  272,  272,  272,  272,  272,  272,  850,  293,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  264,
      264,  388,  384,  378,  377,  374,  360,  294,  272,  272,
      272,  272,  272,  272,  156,  293,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  274,  275,  275,  275,  275,
      275,  275,  850,  294,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  279,  289,  295,  296,  280,  297,  298,
      299,  290,  275,  275,  275,  275,  275,  275,  281,  291,
      282,  300,  303,  301,  304,  305,  306,  307,  308,  279,
      289,  295,  296,  280,  297,  298,  299,  290,  302,  309,
      311,  312,  313,  314,  281,  291,  282,  300,  303,  301,

      304,  305,  306,  307,  308,  315,  316,  317,  318,  319,
      320,  321,  322,  323,  302,  309,  311,  312,  313,  314,
      325,  326,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  315,  316,  317,  318,  319,  320,  321,  322,  323,
      352,  158,  104,  264,  153,  104,  325,  326,  330,  324,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  206,
      310,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      208,  332,  332,  332,  332,  332,  332,  850,  342,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  850,  264,
      153,  261,  850,  260,  256,  252,  343,  332,  332,  332,

      332,  332,  332,  206,  342,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  334,  335,  335,  335,  335,  335,
      335,  850,  343,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  236,  227,  344,  225,  220,  219,  104,  153,
      153,  335,  335,  335,  335,  335,  335,  156,  192,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  158,  156,
      344,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      274,  339,  339,  339,  339,  339,  339,  850,  183,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  178,  167,
      153,  104,  130,  347,  348,  104,  349,  339,  339,  339,

      339,  339,  339,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  345,  341,  341,  341,  341,  341,  341,  347,
      348,  346,  349,  350,  351,  353,  354,  355,  356,  357,
      358,  359,  361,  362,  363,  364,  365,  366,  345,  341,
      341,  341,  341,  341,  341,  367,  368,  346,  369,  350,
      351,  353,  354,  355,  356,  357,  358,  359,  361,  362,
      363,  364,  365,  366,  370,  371,  372,  375,  376,  379,
      380,  367,  368,  381,  369,  382,  383,  385,  386,  373,
      387,  389,   46,   47,   44,   98,   55,   47,   44,  850,
      370,  371,  372,  375,  376,  379,  380,   38,   38,  381,

      850,  382,  383,  385,  386,  373,  387,  389,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  206,  850,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  208,  206,
      850,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      334,  397,  397,  397,  397,  397,  397,  850,  850,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  850,  850,
      850,  850,  850,  850,  406,  850,  850,  397,  397,  397,
      397,  397,  397,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  408,  399,  399,  399,  399,  399,  399,  400,
      406,  336,  336,  336,  336,  336,  336,  336,  336,  336,

      850,  409,  850,  850,  850,  850,  850,  850,  408,  399,
      399,  399,  399,  399,  399,  156,  850,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  156,  409,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  274,  402,  402,
      402,  402,  402,  402,  850,  410,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  850,  850,  850,  850,  850,
      850,  850,  850,  411,  402,  402,  402,  402,  402,  402,
      156,  410,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  404,  405,  405,  405,  405,  405,  405,  850,  411,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  412,

      413,  414,  415,  419,  420,  421,  422,  423,  405,  405,
      405,  405,  405,  405,  416,  424,  425,  426,  427,  428,
      417,  429,  418,  430,  431,  412,  413,  414,  415,  419,
      420,  421,  422,  423,  432,  433,  434,  435,  436,  437,
      416,  424,  425,  426,  427,  428,  417,  429,  418,  430,
      431,  438,  439,  440,  441,  442,  443,  444,  445,  446,
      432,  433,  434,  435,  436,  437,  447,  448,  449,  450,
      451,  452,  850,  467,  850,  850,  850,  438,  439,  440,
      441,  442,  443,  444,  445,  446,  850,  850,  850,  850,
      850,  850,  447,  448,  449,  450,  451,  452,  456,  467,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  206,
      850,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      206,  850,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  334,  458,  458,  458,  458,  458,  458,  850,  468,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  458,  458,
      458,  458,  458,  458,  206,  468,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  460,  461,  461,  461,  461,
      461,  461,  850,  469,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  850,  850,  470,  850,  850,  850,  850,

      850,  850,  461,  461,  461,  461,  461,  461,  156,  469,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  274,
      156,  470,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  404,  464,  464,  464,  464,  464,  464,  850,  850,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  850,
      850,  850,  850,  850,  471,  472,  473,  474,  464,  464,
      464,  464,  464,  464,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  475,  466,  466,  466,  466,  466,  466,
      471,  472,  473,  474,  476,  477,  478,  479,  480,  482,
      483,  485,  486,  487,  488,  489,  490,  491,  492,  475,

      466,  466,  466,  466,  466,  466,  493,  495,  496,  497,
      476,  477,  478,  479,  480,  482,  483,  485,  486,  487,
      488,  489,  490,  491,  492,  498,  499,  500,  501,  502,
      503,  504,  493,  495,  496,  497,  505,  506,  507,  508,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  850,
      850,  498,  499,  500,  501,  502,  503,  504,  850,  850,
      850,  850,  505,  506,  507,  508,  206,  850,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  334,  206,  850,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  460,
      515,  515,  515,  515,  515,  515,  850,  850,  515,  515,

      515,  515,  515,  515,  515,  515,  515,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  515,  515,  515,  515,
      515,  515,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  523,  517,  517,  517,  517,  517,  517,  850,  524,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  850,
      850,  850,  850,  850,  850,  850,  850,  523,  517,  517,
      517,  517,  517,  517,  156,  524,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  404,  519,  519,  519,  519,
      519,  519,  850,  526,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  850,  850,  850,  850,  850,  850,  850,

      527,  528,  519,  519,  519,  519,  519,  519,  156,  526,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  521,
      522,  522,  522,  522,  522,  522,  527,  528,  529,  530,
      531,  532,  533,  534,  535,  536,  537,  538,  539,  540,
      541,  542,  543,  544,  545,  546,  522,  522,  522,  522,
      522,  522,  550,  850,  529,  530,  531,  532,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  542,  543,  544,
      545,  546,  547,  551,  552,  553,  554,  555,  550,  548,
      556,  557,  558,  559,  560,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  850,  850,  850,  850,  547,  551,

      552,  553,  554,  555,  573,  548,  556,  557,  558,  559,
      560,  206,  850,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  460,  565,  565,  565,  565,  565,  565,  850,
      573,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      850,  850,  850,  850,  850,  850,  850,  850,  574,  565,
      565,  565,  565,  565,  565,  206,  850,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  567,  568,  568,  568,
      568,  568,  568,  850,  574,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  850,  850,  575,  850,  850,  850,
      850,  850,  850,  568,  568,  568,  568,  568,  568,  156,

      850,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      404,  156,  575,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  521,  570,  570,  570,  570,  570,  570,  850,
      850,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      850,  850,  850,  850,  850,  576,  577,  578,  579,  570,
      570,  570,  570,  570,  570,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  580,  572,  572,  572,  572,  572,
      572,  576,  577,  578,  579,  581,  582,  583,  584,  585,
      586,  587,  588,  589,  590,  591,  592,  593,  850,  596,
      580,  572,  572,  572,  572,  572,  572,  597,  598,  599,

      600,  581,  582,  583,  584,  585,  586,  587,  588,  589,
      590,  591,  592,  593,  594,  596,  601,  603,  604,  618,
      619,  595,  850,  597,  598,  599,  600,  206,  850,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  460,  850,
      594,  621,  601,  603,  604,  618,  619,  595,  206,  850,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  567,
      610,  610,  610,  610,  610,  610,  850,  621,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  850,  850,  850,
      850,  850,  850,  622,  850,  850,  610,  610,  610,  610,
      610,  610,  611,  611,  611,  611,  611,  611,  611,  611,

      611,  623,  612,  612,  612,  612,  612,  612,  850,  622,
      614,  614,  614,  614,  614,  614,  614,  614,  614,  850,
      850,  850,  850,  850,  850,  850,  850,  623,  612,  612,
      612,  612,  612,  612,  156,  850,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  521,  614,  614,  614,  614,
      614,  614,  850,  624,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  850,  850,  850,  850,  850,  850,  850,
      625,  627,  614,  614,  614,  614,  614,  614,  156,  624,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  616,
      617,  617,  617,  617,  617,  617,  625,  627,  628,  629,

      630,  631,  632,  633,  634,  635,  636,  638,  639,  640,
      641,  642,  850,  655,  850,  850,  617,  617,  617,  617,
      617,  617,  850,  850,  628,  629,  630,  631,  632,  633,
      634,  635,  636,  638,  639,  640,  641,  642,  206,  655,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  567,
      647,  647,  647,  647,  647,  647,  850,  656,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  850,  850,  850,
      850,  850,  850,  850,  850,  657,  647,  647,  647,  647,
      647,  647,  206,  656,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  649,  650,  650,  650,  650,  650,  650,

      850,  657,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  850,  850,  658,  850,  850,  850,  850,  850,  850,
      650,  650,  650,  650,  650,  650,  156,  850,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  521,  156,  658,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  616,
      652,  652,  652,  652,  652,  652,  850,  850,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  850,  850,  850,
      850,  850,  659,  850,  662,  663,  652,  652,  652,  652,
      652,  652,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  664,  654,  654,  654,  654,  654,  654,  659,  660,

      662,  663,  665,  666,  667,  661,  668,  669,  670,  671,
      672,  673,  850,  688,  850,  850,  850,  664,  654,  654,
      654,  654,  654,  654,  850,  660,  850,  850,  665,  666,
      667,  661,  668,  669,  670,  671,  672,  673,  206,  688,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  567,
      206,  850,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  649,  679,  679,  679,  679,  679,  679,  850,  850,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  850,
      850,  850,  850,  850,  850,  689,  850,  850,  679,  679,
      679,  679,  679,  679,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  690,  681,  681,  681,  681,  681,  681,
      850,  689,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  850,  850,  850,  850,  850,  850,  850,  850,  690,
      681,  681,  681,  681,  681,  681,  156,  850,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  616,  683,  683,
      683,  683,  683,  683,  850,  691,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  850,  850,  850,  850,  850,
      850,  850,  692,  693,  683,  683,  683,  683,  683,  683,
      156,  691,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  685,  686,  686,  686,  686,  686,  686,  692,  693,

      694,  695,  696,  697,  698,  699,  700,  702,  850,  716,
      850,  850,  850,  850,  850,  850,  850,  850,  686,  686,
      686,  686,  686,  686,  850,  850,  694,  695,  696,  697,
      698,  699,  700,  702,  206,  716,  707,  707,  707,  707,
      707,  707,  707,  707,  707,  649,  708,  708,  708,  708,
      708,  708,  850,  717,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  850,  850,  850,  850,  850,  850,  850,
      850,  719,  708,  708,  708,  708,  708,  708,  206,  717,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  710,
      711,  711,  711,  711,  711,  711,  850,  719,  711,  711,

      711,  711,  711,  711,  711,  711,  711,  850,  850,  720,
      850,  850,  850,  850,  850,  850,  711,  711,  711,  711,
      711,  711,  156,  850,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  616,  156,  720,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  685,  713,  713,  713,  713,
      713,  713,  850,  850,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  850,  850,  850,  850,  850,  721,  722,
      723,  724,  713,  713,  713,  713,  713,  713,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  725,  715,  715,
      715,  715,  715,  715,  721,  722,  723,  724,  726,  727,

      728,  206,  743,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  649,  725,  715,  715,  715,  715,  715,  715,
      744,  850,  850,  850,  726,  727,  728,  206,  743,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  710,  735,
      735,  735,  735,  735,  735,  850,  744,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  850,  850,  850,  850,
      850,  850,  750,  850,  850,  735,  735,  735,  735,  735,
      735,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      751,  737,  737,  737,  737,  737,  737,  850,  750,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  850,  850,

      850,  850,  850,  850,  850,  850,  751,  737,  737,  737,
      737,  737,  737,  156,  850,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  685,  739,  739,  739,  739,  739,
      739,  850,  752,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  850,  850,  850,  850,  850,  850,  850,  753,
      754,  739,  739,  739,  739,  739,  739,  156,  752,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  741,  742,
      742,  742,  742,  742,  742,  753,  754,  755,  756,  850,
      769,  763,  763,  763,  763,  763,  763,  763,  763,  763,
      850,  850,  850,  850,  850,  742,  742,  742,  742,  742,

      742,  850,  850,  755,  756,  206,  769,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  710,  763,  763,  763,
      763,  763,  763,  850,  770,  765,  765,  765,  765,  765,
      765,  765,  765,  765,  775,  850,  850,  850,  850,  850,
      850,  850,  776,  763,  763,  763,  763,  763,  763,  206,
      770,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      775,  765,  765,  765,  765,  765,  765,  156,  776,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  685,  850,
      850,  850,  850,  850,  850,  850,  777,  765,  765,  765,
      765,  765,  765,  156,  850,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  741,  767,  767,  767,  767,  767,
      767,  850,  777,  767,  767,  767,  767,  767,  767,  767,
      767,  767,  778,  779,  780,  781,  850,  791,  850,  850,
      850,  767,  767,  767,  767,  767,  767,  850,  850,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  778,  779,
      780,  781,  206,  791,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  710,  206,  850,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  792,  787,  787,  787,  787,
      787,  787,  850,  797,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  850,  850,  850,  850,  850,  850,  850,

      798,  792,  787,  787,  787,  787,  787,  787,  156,  797,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  741,
      789,  789,  789,  789,  789,  789,  798,  799,  800,  850,
      808,  806,  806,  806,  806,  806,  806,  806,  806,  806,
      809,  850,  850,  850,  850,  850,  789,  789,  789,  789,
      789,  789,  850,  799,  800,  206,  808,  805,  805,  805,
      805,  805,  805,  805,  805,  805,  809,  806,  806,  806,
      806,  806,  806,  156,  810,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  741,  811,  816,  817,  818,  823,
      824,  825,  829,  806,  806,  806,  806,  806,  806,  206,

      810,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      850,  811,  816,  817,  818,  823,  824,  825,  829,   37,
       37,   37,   37,   39,   39,   39,   39,   43,   43,   43,
       43,   45,  850,   45,   45,   46,   46,   46,   46,   99,
      850,   99,   99,  103,  103,  151,  151,  152,  152,  203,
      203,  204,  204,  205,  205,  262,  262,  263,  263,  327,
      327,  328,  328,  329,  329,  390,  390,  391,  391,  392,
      392,  454,  454,  455,  455,  509,  509,  510,  510,  511,
      511,  561,  561,  562,  562,  563,  563,  454,  454,  606,
      606,  607,  607,  643,  643,  644,  644,  645,  645,  674,

      674,  675,  675,  676,  676,  562,  562,  704,  704,  705,
      705,  729,  729,  730,  730,  731,  731,  757,  757,  758,
      758,  760,  760,  644,  644,  783,  783,  784,  784,  801,
      801,  802,  802,  803,  803,  812,  812,  813,  813,  704,
      704,  820,  820,  821,  821,  826,  826,  827,  827,  830,
      830,  831,  831,  832,  832,  758,  758,  835,  835,  837,
      837,  838,  838,  839,  839,  842,  842,  845,  845,  846,
      846,  848,  848,  849,  849,    7,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850
    } ;

static yyconst flex_int16_t yy_chk[4051] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       25,  934,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   26,

       16,   27,   29,   34,   26,   17,   25,   27,   36,   35,
       40,   40,   26,   35,   41,   41,   16,   42,   42,   16,
       16,   16,   16,   16,   16,   26,   16,   27,   29,   34,
       26,  129,  129,   27,   36,   35,  930,  746,   26,   35,
      746,  928,   16,   19,   19,  924,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,  918,
       20,   58,   22,   30,   22,   59,   28,   61,   20,   31,
       62,   63,   22,   31,   28,   20,  912,   30,  911,   22,
       28,  908,   22,   31,   20,   28,   20,   58,   22,   30,
       22,   59,   28,   61,   20,   31,   62,   63,   22,   31,
       28,   20,   21,   30,   21,   22,   28,   21,   22,   31,
       64,   28,   21,   21,   23,   65,   23,   67,   68,   21,
       69,   70,   71,   72,   23,   74,   75,   23,   21,   76,
       21,   23,  904,   21,  903,  899,   64,  895,   21,   21,
       23,   65,   23,   67,   68,   21,   69,   70,   71,   72,

       23,   74,   75,   23,  858,   76,  849,   23,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   32,   24,   33,   33,   77,   66,
       32,   24,   32,   79,  848,   33,   80,   82,   24,   66,
       83,   32,   73,   33,   24,   24,   24,   24,   24,   24,
       32,   24,  846,  845,   77,   66,   32,   24,   32,   79,
       73,   33,   80,   82,   24,   66,   83,   32,   73,   33,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   73,   50,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   85,  719,  719,

      719,  844,  719,  843,   86,   87,   50,   50,   50,   50,
       50,   50,   88,   50,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   85,   55,   55,   55,   55,   55,   55,
       86,   87,  842,  841,  839,  838,  836,  835,   88,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  834,   93,
       55,   55,   55,   55,   55,   55,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   84,   57,   89,   93,   94,   95,   96,   84,
       97,  109,   84,  110,  111,  112,  113,  114,  116,  117,
      118,   89,   57,   57,   57,   57,   57,   57,   84,   57,

       89,  832,   94,   95,   96,   84,   97,  109,   84,  110,
      111,  112,  113,  114,  116,  117,  118,   89,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  107,  100,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  119,  831,  830,  828,  827,
      826,  821,  120,  122,  100,  100,  100,  100,  100,  100,
      123,  100,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  119,  104,  104,  104,  104,  104,  104,  120,  122,
      820,  819,  814,  813,  812,  803,  123,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  124,  125,  104,  104,

      104,  104,  104,  104,  106,  126,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  124,  125,  802,  801,  789,  785,  784,  783,
      782,  126,  774,  773,  772,  771,  763,  760,  128,  130,
      132,  133,  106,  106,  106,  106,  106,  106,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  128,  130,  132,  133,  134,  135,
      136,  137,  138,  139,  141,  142,  143,  144,  145,  146,
      147,  148,  758,  757,  108,  108,  108,  108,  108,  108,
      748,  747,  739,  733,  134,  135,  136,  137,  138,  139,

      141,  142,  143,  144,  145,  146,  147,  148,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  155,  149,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  149,  149,  149,  149,  149,  149,
      732,  149,  154,  731,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      159,  161,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  730,  729,  720,  708,  705,  704,  703,  161,  163,
      154,  154,  154,  154,  154,  154,  157,  166,  157,  157,

      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  161,  163,  690,  683,  677,  676,
      675,  674,  672,  166,  655,  647,  645,  644,  643,  614,
      167,  168,  169,  171,  157,  157,  157,  157,  157,  157,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  174,
      158,  158,  158,  158,  158,  158,  167,  168,  169,  171,
      608,  607,  606,  605,  598,  175,  583,  576,  565,  563,
      562,  561,  176,  177,  558,  174,  158,  158,  158,  158,
      158,  158,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  175,  160,  160,  160,  160,  160,  160,  176,  177,

      178,  181,  182,  183,  184,  186,  187,  188,  185,  178,
      178,  178,  185,  189,  190,  191,  181,  519,  160,  160,
      160,  160,  160,  160,  194,  197,  178,  181,  182,  183,
      184,  186,  187,  188,  185,  178,  178,  178,  185,  189,
      190,  191,  181,  192,  195,  198,  199,  216,  217,  218,
      194,  197,  220,  221,  222,  195,  220,  223,  192,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  192,
      195,  198,  199,  216,  217,  218,  512,  511,  220,  221,
      222,  195,  220,  223,  192,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  207,  510,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  209,  509,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  495,  469,  458,  455,  454,  453,  224,
      437,  424,  207,  207,  207,  207,  207,  207,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  226,  208,  208,
      208,  208,  208,  208,  210,  224,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  420,  402,  393,  392,  391,
      390,  343,  332,  226,  208,  208,  208,  208,  208,  208,
      211,  329,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  212,  227,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  328,
      327,  325,  320,  313,  312,  309,  295,  229,  211,  211,
      211,  211,  211,  211,  213,  227,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  214,  229,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  219,  225,  230,  231,  219,  232,  233,
      234,  225,  213,  213,  213,  213,  213,  213,  219,  225,
      219,  235,  237,  236,  238,  239,  240,  241,  242,  219,
      225,  230,  231,  219,  232,  233,  234,  225,  236,  243,
      245,  246,  247,  248,  219,  225,  219,  235,  237,  236,

      238,  239,  240,  241,  242,  249,  250,  251,  252,  253,
      254,  255,  256,  257,  236,  243,  245,  246,  247,  248,
      259,  260,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  249,  250,  251,  252,  253,  254,  255,  256,  257,
      285,  272,  264,  263,  262,  261,  259,  260,  265,  258,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  266,
      244,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  267,  276,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  215,  205,
      204,  203,  202,  200,  196,  193,  277,  266,  266,  266,

      266,  266,  266,  268,  276,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      268,  269,  277,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  180,  172,  278,  170,  165,  164,  153,  152,
      151,  268,  268,  268,  268,  268,  268,  271,  140,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  273,
      278,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  275,  131,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  127,  115,
      103,  101,   78,  280,  281,   51,  282,  273,  273,  273,

      273,  273,  273,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  279,  274,  274,  274,  274,  274,  274,  280,
      281,  279,  282,  283,  284,  286,  288,  289,  290,  291,
      292,  294,  296,  297,  298,  299,  300,  301,  279,  274,
      274,  274,  274,  274,  274,  302,  303,  279,  304,  283,
      284,  286,  288,  289,  290,  291,  292,  294,  296,  297,
      298,  299,  300,  301,  305,  306,  308,  310,  311,  314,
      316,  302,  303,  317,  304,  318,  319,  322,  323,  308,
      324,  326,   47,   46,   43,   38,   18,   14,   12,    7,
      305,  306,  308,  310,  311,  314,  316,    4,    3,  317,

        0,  318,  319,  322,  323,  308,  324,  326,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  331,    0,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  333,
        0,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  335,    0,  335,
      335,  335,  335,  335,  335,  335,  335,  335,    0,    0,
        0,    0,    0,    0,  342,    0,    0,  333,  333,  333,
      333,  333,  333,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  344,  334,  334,  334,  334,  334,  334,  336,
      342,  336,  336,  336,  336,  336,  336,  336,  336,  336,

        0,  345,    0,    0,    0,    0,    0,    0,  344,  334,
      334,  334,  334,  334,  334,  337,    0,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  338,  345,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  339,  346,  339,  339,  339,  339,
      339,  339,  339,  339,  339,    0,    0,    0,    0,    0,
        0,    0,    0,  347,  338,  338,  338,  338,  338,  338,
      340,  346,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  341,  347,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  348,

      349,  350,  351,  353,  354,  356,  357,  358,  340,  340,
      340,  340,  340,  340,  352,  359,  360,  361,  362,  363,
      352,  364,  352,  365,  366,  348,  349,  350,  351,  353,
      354,  356,  357,  358,  367,  368,  369,  370,  371,  372,
      352,  359,  360,  361,  362,  363,  352,  364,  352,  365,
      366,  373,  374,  375,  376,  377,  378,  380,  381,  382,
      367,  368,  369,  370,  371,  372,  383,  384,  385,  387,
      388,  389,    0,  406,    0,    0,    0,  373,  374,  375,
      376,  377,  378,  380,  381,  382,    0,    0,    0,    0,
        0,    0,  383,  384,  385,  387,  388,  389,  394,  406,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  395,
        0,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      396,    0,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  397,  407,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  396,  396,
      396,  396,  396,  396,  398,  407,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,  398,  399,  408,  399,  399,  399,  399,  399,  399,
      399,  399,  399,    0,    0,  409,    0,    0,    0,    0,

        0,    0,  398,  398,  398,  398,  398,  398,  401,  408,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      403,  409,  403,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  405,    0,
      405,  405,  405,  405,  405,  405,  405,  405,  405,    0,
        0,    0,    0,    0,  410,  411,  412,  413,  403,  403,
      403,  403,  403,  403,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  414,  404,  404,  404,  404,  404,  404,
      410,  411,  412,  413,  415,  416,  417,  418,  419,  422,
      423,  425,  427,  428,  431,  432,  433,  434,  435,  414,

      404,  404,  404,  404,  404,  404,  436,  438,  439,  440,
      415,  416,  417,  418,  419,  422,  423,  425,  427,  428,
      431,  432,  433,  434,  435,  441,  442,  443,  444,  445,
      446,  447,  436,  438,  439,  440,  448,  449,  450,  451,
      456,  456,  456,  456,  456,  456,  456,  456,  456,    0,
        0,  441,  442,  443,  444,  445,  446,  447,    0,    0,
        0,    0,  448,  449,  450,  451,  457,    0,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  459,    0,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  461,    0,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  459,  459,  459,  459,
      459,  459,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  467,  460,  460,  460,  460,  460,  460,  464,  468,
      464,  464,  464,  464,  464,  464,  464,  464,  464,    0,
        0,    0,    0,    0,    0,    0,    0,  467,  460,  460,
      460,  460,  460,  460,  463,  468,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  466,  470,  466,  466,  466,  466,  466,  466,
      466,  466,  466,    0,    0,    0,    0,    0,    0,    0,

      471,  472,  463,  463,  463,  463,  463,  463,  465,  470,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  471,  472,  473,  474,
      475,  476,  477,  478,  479,  480,  481,  483,  484,  485,
      486,  488,  489,  490,  491,  493,  465,  465,  465,  465,
      465,  465,  496,    0,  473,  474,  475,  476,  477,  478,
      479,  480,  481,  483,  484,  485,  486,  488,  489,  490,
      491,  493,  494,  497,  498,  499,  500,  501,  496,  494,
      502,  503,  505,  507,  508,  513,  513,  513,  513,  513,
      513,  513,  513,  513,    0,    0,    0,    0,  494,  497,

      498,  499,  500,  501,  523,  494,  502,  503,  505,  507,
      508,  514,    0,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  515,
      523,  515,  515,  515,  515,  515,  515,  515,  515,  515,
        0,    0,    0,    0,    0,    0,    0,    0,  524,  514,
      514,  514,  514,  514,  514,  516,    0,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  517,  524,  517,  517,  517,  517,  517,
      517,  517,  517,  517,    0,    0,  525,    0,    0,    0,
        0,    0,    0,  516,  516,  516,  516,  516,  516,  518,

        0,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  520,  525,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  522,
        0,  522,  522,  522,  522,  522,  522,  522,  522,  522,
        0,    0,    0,    0,    0,  526,  527,  528,  529,  520,
      520,  520,  520,  520,  520,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  530,  521,  521,  521,  521,  521,
      521,  526,  527,  528,  529,  531,  532,  533,  534,  535,
      537,  538,  539,  540,  542,  543,  547,  548,    0,  550,
      530,  521,  521,  521,  521,  521,  521,  551,  552,  553,

      554,  531,  532,  533,  534,  535,  537,  538,  539,  540,
      542,  543,  547,  548,  549,  550,  557,  559,  560,  574,
      575,  549,    0,  551,  552,  553,  554,  564,    0,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,    0,
      549,  577,  557,  559,  560,  574,  575,  549,  566,    0,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  568,  577,  568,  568,
      568,  568,  568,  568,  568,  568,  568,    0,    0,    0,
        0,    0,    0,  578,    0,    0,  566,  566,  566,  566,
      566,  566,  567,  567,  567,  567,  567,  567,  567,  567,

      567,  579,  567,  567,  567,  567,  567,  567,  570,  578,
      570,  570,  570,  570,  570,  570,  570,  570,  570,    0,
        0,    0,    0,    0,    0,    0,    0,  579,  567,  567,
      567,  567,  567,  567,  569,    0,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  572,  581,  572,  572,  572,  572,  572,  572,
      572,  572,  572,    0,    0,    0,    0,    0,    0,    0,
      582,  585,  569,  569,  569,  569,  569,  569,  571,  581,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  582,  585,  586,  587,

      588,  592,  593,  594,  595,  596,  597,  599,  600,  601,
      602,  603,    0,  619,    0,    0,  571,  571,  571,  571,
      571,  571,    0,    0,  586,  587,  588,  592,  593,  594,
      595,  596,  597,  599,  600,  601,  602,  603,  609,  619,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  610,  620,  610,  610,
      610,  610,  610,  610,  610,  610,  610,    0,    0,    0,
        0,    0,    0,    0,    0,  621,  609,  609,  609,  609,
      609,  609,  611,  620,  611,  611,  611,  611,  611,  611,
      611,  611,  611,  611,  611,  611,  611,  611,  611,  611,

      612,  621,  612,  612,  612,  612,  612,  612,  612,  612,
      612,    0,    0,  623,    0,    0,    0,    0,    0,    0,
      611,  611,  611,  611,  611,  611,  613,    0,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  615,  623,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  617,    0,  617,  617,
      617,  617,  617,  617,  617,  617,  617,    0,    0,    0,
        0,    0,  624,    0,  628,  630,  615,  615,  615,  615,
      615,  615,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  631,  616,  616,  616,  616,  616,  616,  624,  626,

      628,  630,  632,  633,  634,  626,  635,  637,  638,  639,
      641,  642,    0,  656,    0,    0,    0,  631,  616,  616,
      616,  616,  616,  616,    0,  626,    0,    0,  632,  633,
      634,  626,  635,  637,  638,  639,  641,  642,  646,  656,
      646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      648,    0,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  650,    0,
      650,  650,  650,  650,  650,  650,  650,  650,  650,    0,
        0,    0,    0,    0,    0,  657,    0,    0,  648,  648,
      648,  648,  648,  648,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  660,  649,  649,  649,  649,  649,  649,
      652,  657,  652,  652,  652,  652,  652,  652,  652,  652,
      652,    0,    0,    0,    0,    0,    0,    0,    0,  660,
      649,  649,  649,  649,  649,  649,  651,    0,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  654,  661,  654,  654,  654,  654,
      654,  654,  654,  654,  654,    0,    0,    0,    0,    0,
        0,    0,  662,  664,  651,  651,  651,  651,  651,  651,
      653,  661,  653,  653,  653,  653,  653,  653,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  662,  664,

      665,  666,  667,  668,  669,  670,  671,  673,    0,  687,
        0,    0,    0,    0,    0,    0,    0,    0,  653,  653,
      653,  653,  653,  653,    0,    0,  665,  666,  667,  668,
      669,  670,  671,  673,  678,  687,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  679,  688,  679,  679,  679,  679,  679,  679,
      679,  679,  679,    0,    0,    0,    0,    0,    0,    0,
        0,  691,  678,  678,  678,  678,  678,  678,  680,  688,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  681,  691,  681,  681,

      681,  681,  681,  681,  681,  681,  681,    0,    0,  692,
        0,    0,    0,    0,    0,    0,  680,  680,  680,  680,
      680,  680,  682,    0,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  684,  692,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  686,    0,  686,  686,  686,  686,  686,  686,
      686,  686,  686,    0,    0,    0,    0,    0,  693,  694,
      695,  696,  684,  684,  684,  684,  684,  684,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  697,  685,  685,
      685,  685,  685,  685,  693,  694,  695,  696,  698,  700,

      701,  707,  716,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  697,  685,  685,  685,  685,  685,  685,
      717,    0,    0,    0,  698,  700,  701,  709,  716,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  711,  717,  711,  711,  711,
      711,  711,  711,  711,  711,  711,    0,    0,    0,    0,
        0,    0,  721,    0,    0,  709,  709,  709,  709,  709,
      709,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      722,  710,  710,  710,  710,  710,  710,  713,  721,  713,
      713,  713,  713,  713,  713,  713,  713,  713,    0,    0,

        0,    0,    0,    0,    0,    0,  722,  710,  710,  710,
      710,  710,  710,  712,    0,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  715,  723,  715,  715,  715,  715,  715,  715,  715,
      715,  715,    0,    0,    0,    0,    0,    0,    0,  724,
      725,  712,  712,  712,  712,  712,  712,  714,  723,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  724,  725,  726,  728,  735,
      743,  735,  735,  735,  735,  735,  735,  735,  735,  735,
        0,    0,    0,    0,    0,  714,  714,  714,  714,  714,

      714,    0,    0,  726,  728,  734,  743,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  737,  744,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  749,    0,    0,    0,    0,    0,
        0,    0,  750,  734,  734,  734,  734,  734,  734,  736,
      744,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      749,  736,  736,  736,  736,  736,  736,  738,  750,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,    0,
        0,    0,    0,    0,    0,    0,  752,  736,  736,  736,
      736,  736,  736,  740,    0,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  742,  752,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  753,  754,  755,  756,    0,  769,    0,    0,
        0,  740,  740,  740,  740,  740,  740,  765,    0,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  753,  754,
      755,  756,  762,  769,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  764,    0,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  770,  764,  764,  764,  764,
      764,  764,  767,  775,  767,  767,  767,  767,  767,  767,
      767,  767,  767,    0,    0,    0,    0,    0,    0,    0,

      777,  770,  764,  764,  764,  764,  764,  764,  766,  775,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  777,  780,  781,  787,
      791,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      792,    0,    0,    0,    0,    0,  766,  766,  766,  766,
      766,  766,    0,  780,  781,  786,  791,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  792,  786,  786,  786,
      786,  786,  786,  788,  797,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  800,  808,  810,  811,  816,
      817,  818,  824,  786,  786,  786,  786,  786,  786,  805,

      797,  805,  805,  805,  805,  805,  805,  805,  805,  805,
        0,  800,  808,  810,  811,  816,  817,  818,  824,  851,
      851,  851,  851,  852,  852,  852,  852,  853,  853,  853,
      853,  854,    0,  854,  854,  855,  855,  855,  855,  856,
        0,  856,  856,  857,  857,  859,  859,  860,  860,  861,
      861,  862,  862,  863,  863,  864,  864,  865,  865,  866,
      866,  867,  867,  868,  868,  869,  869,  870,  870,  871,
      871,  872,  872,  873,  873,  874,  874,  875,  875,  876,
      876,  877,  877,  878,  878,  879,  879,  880,  880,  881,
      881,  882,  882,  883,  883,  884,  884,  885,  885,  886,

      886,  887,  887,  888,  888,  889,  889,  890,  890,  891,
      891,  892,  892,  893,  893,  894,  894,  896,  896,  897,
      897,  898,  898,  900,  900,  901,  901,  902,  902,  905,
      905,  906,  906,  907,  907,  909,  909,  910,  910,  913,
      913,  914,  914,  915,  915,  916,  916,  917,  917,  919,
      919,  920,  920,  921,  921,  922,  922,  923,  923,  925,
      925,  926,  926,  927,  927,  929,  929,  931,  931,  932,
      932,  933,  933,  935,  935,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,

      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  850
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[100] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
        };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 851 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3976 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_KEYWORD_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::DUID_KEYWORD_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::HEX_KEYWORD_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_KEYWORD_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::SCRIPT_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::ROUTING_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::AUTH_PROTOCOL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::AUTH_ALGORITHM_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::AUTH_REPLAY_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return ClntParser::DOWNLINK_PREFIX_IFACES_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
;
	YY_BREAK
case 81:
YY_RULE_SETUP
;
	YY_BREAK
case 82:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 85:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) {
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        }
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return ClntParser::DUID_;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%10x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    if(!sscanf(yytext,"%10u",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
case 99:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 851 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 851 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 850);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

