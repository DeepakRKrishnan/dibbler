
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 99
#define YY_END_OF_BUFFER 100
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[841] =
    {   0,
        1,    1,    0,    0,    0,    0,  100,   98,    2,    1,
        1,   98,   80,   98,   98,   97,   97,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   84,   84,   99,    1,
        1,    1,    0,   92,   80,    0,   92,   82,   81,   97,
        0,    0,   96,    0,   89,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       11,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       52,   93,   93,   93,   93,   93,   93,   93,   93,   25,
       26,   12,   93,   93,   93,   93,   93,   83,   81,   97,

        0,    0,    0,   88,   94,   87,   87,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
        8,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   97,    0,
        0,    0,    0,   86,   86,    0,   87,    0,   87,   93,
       93,   76,   93,   93,   93,   93,   93,   93,   93,    7,
       93,   34,   13,   93,   93,   93,   93,   93,   10,    0,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       97,    0,   95,    0,    0,    0,   86,    0,   86,    0,
       87,   87,   87,   87,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,    3,   93,   93,
       93,   93,   93,   93,   93,    0,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
        0,    0,    0,    0,    0,   86,   86,   86,   86,    0,
       87,   87,   87,    0,   87,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   29,   93,   93,   93,
       93,   93,   35,   93,   93,   93,   93,   93,   93,   93,

        0,    0,   93,   93,   93,   93,   27,   93,   53,   93,
       93,   93,   93,   93,   20,   93,   93,   93,   93,   93,
        6,   93,   93,   93,   93,   93,    0,    0,    0,    0,
       86,   86,   86,    0,   86,    0,    0,   87,   87,   87,
       87,   93,    5,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   57,   55,   93,   93,   93,   93,   93,
       93,   93,   93,   93,    0,    0,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   43,   93,   93,
       93,   93,   93,   93,   49,   93,   93,   93,   95,    0,
        0,    0,    0,    0,   86,   86,   86,   86,    0,   87,

       87,   87,    0,   87,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   56,
       93,   93,   93,   93,   42,   93,   93,   16,   17,    0,
        0,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       19,    0,    0,    0,    0,   86,   86,   86,    0,   86,
       91,   87,   87,   87,   87,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       54,   93,   93,   93,   93,   15,    0,    0,   93,   93,
        4,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   93,   14,   93,   31,   93,   93,    0,    0,    0,
        0,   90,   86,   86,   86,   86,   87,   87,   87,    0,
       87,   93,   93,   93,   93,   93,   93,   66,   93,   93,
       93,   93,   93,   93,   28,   93,   93,   93,   93,   18,
        0,    0,   39,   38,   30,   93,   93,   93,   93,   93,
       93,   93,   93,   33,   32,   93,   93,   93,   93,   95,
        0,    0,   86,   86,   86,    0,   86,   87,   87,   87,
       87,   79,   93,   93,   93,   93,   93,   65,   93,   93,
       93,   67,   93,   93,   93,   93,   60,   41,   40,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       93,   58,    0,    0,    0,    0,   86,   86,   86,   86,
       87,   87,   87,    0,   87,    9,   93,   93,   62,   93,
       93,   37,   93,   68,   93,   78,   93,   93,   93,   93,
       93,   93,   47,   93,   93,   93,   75,   93,   93,    0,
        0,    0,   86,   86,   86,    0,   86,   87,   87,   87,
       87,   93,   93,   63,   36,   93,   93,   93,   61,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   95,
        0,    0,    0,   86,   86,   86,   86,   87,   87,   87,
        0,   87,   93,   64,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   44,   93,   93,   23,    0,    0,   85,

       88,   86,   86,   86,    0,   86,   87,   87,   87,   87,
       93,   69,   93,   93,   93,   93,   93,   93,   93,   93,
       24,   93,    0,    0,   85,    0,   86,   86,   86,   86,
       86,   87,   87,   87,    0,   87,   93,   70,   93,   93,
       93,   93,   93,   46,   93,   93,   93,   93,   93,   95,
       85,   88,   86,    0,   86,   86,   86,   86,   87,   87,
       87,   93,   93,   93,   93,   93,   93,   21,   93,   45,
       51,   93,   93,    0,   85,   86,   86,   86,   86,   87,
       87,   87,   93,   71,   72,   73,   74,   93,   22,   48,
       93,    0,   86,   86,    0,   86,   86,   87,   93,   93,

       93,   95,   86,   86,   87,   93,   93,   93,    0,   86,
       86,    0,   59,   93,   50,   85,   86,   86,   77,   85,
       86,   86,    0,    0,   86,   86,    0,   86,   86,    0,
       95,   86,   86,    0,   86,   86,    0,   86,   86,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   24,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    5,    6,    6,    6,    6,    6,    6,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    6,    6,
        6,    6,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[928] =
    {   0,
        0,    0, 1452, 1451,    0,    0, 1458, 3887, 3887,   71,
       73, 1452,    0, 1449,   70,   70,   33, 1347,  132,  180,
      223,  184,  189,  279,   53,   78,   72,  296,   61,  196,
      287,  317,  339,   71,   88,   71, 3887, 1356, 3887,  109,
      114,  126, 1362, 3887,    0, 1359, 1358, 3887,    0,  383,
     1315,  401, 3887,    0,  426,    0,  467,   84,  167,    0,
      176,  172,  182,  190,  180,  281,  225,  220,  236,  217,
      233,  259,  294,  237,  257,  277,  280, 1319,  306,  313,
        0,  329,  319,  471,  318,  324,  327,  335,  408,    0,
        0,    0,  333,  356,  396,  401,  434, 3887,    0,  519,

     1306,  450, 1305,  562,    0,  605,  494,  646,  458,  460,
      465,  472,  463,  503, 1316,  501,  512,  533,  539,  531,
        0,  583,  585,  592,  619,  624, 1315,  625,  258,  628,
     1314,  648,  652,  650,  645,  656,  647,  643,  655, 1313,
      649,  646,  658,  663,  666,  661,  667,  661,  707,  580,
     1300, 1265, 1263,  752,  725,  734,  795,  836,  770,  877,
      772,    0,  753, 1274, 1273,  766,  792,  809,  807, 1272,
      802, 1271,    0,  816,  832,  840,  840,  883,    0, 1270,
      883,  873,  870,  875,  889,  887,  878,  890,  879,  891,
      885,  924, 1269,  904,  926, 1241,  909,  926,  916, 1228,

     1213, 1212, 1211, 1210, 1209,  953,  980, 1021,  998, 1039,
     1064, 1082, 1107, 1125, 1199,  916,  914,  922, 1114,  921,
      918,  934,  928,  995, 1128, 1012, 1028,    0, 1116, 1106,
     1119, 1114, 1126, 1124, 1141, 1140, 1130, 1141, 1133, 1144,
     1146, 1143, 1138, 1210, 1157, 1146, 1162, 1161, 1156, 1162,
     1173, 1176, 1168, 1161, 1175, 1157, 1170, 1209, 1172, 1189,
     1196, 1195, 1194, 1143, 1228, 1239, 1257, 1282, 1300, 1091,
      258, 1097, 1325, 1366, 1343, 1263, 1228, 1293, 1336, 1344,
     1332, 1346, 1348, 1368, 1066, 1360,    0, 1365, 1366, 1369,
     1357, 1370,    0, 1362, 1057, 1372, 1374, 1365, 1384, 1376,

     1375, 1387, 1385, 1381, 1394, 1383,    0, 1411, 1056, 1415,
     1410, 1055, 1054, 1413,    0, 1408, 1404, 1412, 1423, 1053,
        0, 1415, 1411, 1420, 1052, 1424, 1039, 1006, 1005, 1468,
      361, 1003, 1479, 1520, 1497, 1538, 1563, 1574, 1592, 1617,
     1635, 1485, 1014, 1499, 1532, 1562, 1585, 1634, 1622, 1625,
     1635, 1617, 1629,    0, 1621, 1626, 1647, 1648, 1641, 1650,
     1641, 1652, 1653, 1654, 1647, 1651, 1669, 1650, 1664, 1664,
     1683, 1683, 1685, 1675, 1684, 1673, 1692,    0, 1694, 1677,
     1686, 1682, 1684, 1689,    0, 1695, 1686, 1688, 1001, 1000,
      999,  998, 1743, 1754, 1765, 1783, 1808, 1826, 1792,  363,

      988, 1851, 1892, 1869, 1706, 1761, 1797, 1819, 1866, 1855,
     1864, 1865, 1872, 1898, 1891, 1890, 1894, 1902,  982,    0,
     1903, 1895,  973, 1895,    0, 1893, 1900,    0,    0, 1717,
     1891, 1905, 1910, 1909, 1913,  971, 1920, 1920, 1913, 1906,
     1937, 1923, 1936, 1941, 1941, 1929, 1947, 1949, 1949, 1940,
        0,  903,  862,  861, 1966,  450,  858, 1993, 2034, 2011,
     2020, 2077, 2052, 2120, 2095, 1963, 2025,  869, 2024, 2045,
     2087, 2090, 2109, 2114, 2115, 2130, 2119, 2133, 2119, 2122,
        0, 2119, 2127, 2137, 2123,    0, 2134, 2139, 2131, 2128,
        0, 2134, 2160,  868, 2141, 2143, 2141, 2143, 2153, 2160,

     2157, 2167,    0, 2177,    0, 2177, 2178,  855,  854,  853,
      851, 2196, 2220, 2238, 2263, 2281,  540,  850, 2306, 2347,
     2324, 2166, 2184, 2237, 2280, 2325, 2327,    0, 2306, 2329,
     2326, 2355, 2354, 2351,    0, 2343, 2361, 2349, 2360,    0,
     2352, 2349,    0,    0,    0, 2359, 2364, 2361, 2365, 2362,
     2374, 2359, 2367,    0,    0, 2369,  861, 2377, 2396,  848,
      847,  817,  541,  814, 2436, 2477, 2422, 2520, 2454, 2563,
     2495,    0, 2381, 2446, 2457, 2484, 2495,    0, 2530, 2526,
      825,    0, 2539, 2567, 2561, 2570,    0, 3887, 3887, 2569,
     2558, 2568, 2574, 2573, 2561,  824, 2577, 2580, 2571, 2571,

     2577,    0,  809,  808,  807,  806, 2623, 2545, 2666, 2641,
      542,  776, 2709, 2750, 2684,    0, 2582, 2623,    0, 2637,
     2679,    0, 2744,    0, 2686,    0, 2694, 2720, 2711, 2728,
     2717, 2500,    0, 2760, 2746, 2750,    0, 2751, 2754,  775,
      774,  773,  543,  772, 2804, 2845, 2822, 2888, 2863, 2931,
     2906,  783, 2756,    0,    0, 2824, 2837, 2862,    0, 2893,
     2909, 2916, 2918, 2921, 2939, 2924, 2930,  782, 2940,  742,
      739,  681,  680, 2982, 2958, 3025, 3000,  625,  679, 3068,
     3109, 3043, 2972,    0,  682, 2785, 2984, 3041, 3033, 3038,
     3079, 3082, 3089,    0, 3087, 3076,    0,  624,  623,  622,

        0,  626,  621, 3152, 3193, 3131, 3236, 3170, 3279, 3211,
     3130,    0,  257,  631, 3163, 3174, 3210, 3208, 3246, 3257,
        0, 3254,  618,  617,  586,  585,  584, 3322, 3261, 3365,
     3304,  627,  583, 3408,    0, 3340, 3288,    0,  211,  583,
      589, 3331, 3342,    0, 3335, 3336, 3376, 3375, 3377,  580,
      539, 3887,  538,    0,  815,  536, 3451, 3390, 3494, 3433,
        0, 3412,  540,  537,  443,  444, 3428,    0, 3436,    0,
        0, 3431, 3457,  436,  434,  407,  406, 3537, 3476,  816,
      405,    0, 3479,    0,    0,    0,    0, 3216,    0,    0,
     3503,  404,  403,  402,    0, 3555, 3887,    0, 3501, 3552,

     3542,  401,  372,  370, 3887, 3537, 3553, 3552,  357,  356,
      355,    0,    0, 3541,    0,  354,  349,  303,    0,  301,
      298,  296,    0,  291,  256,  255,    0,  248,  202,    0,
      189,  185,  122,  116,  114,  104,    0,   80,   59, 3887,
     3607, 3613, 3619, 3625, 3631, 3637, 3640, 3643, 3646, 3649,
     3652, 3655, 3658, 3661, 3664, 3667, 3670, 3673, 3677, 3679,
     3682, 3685, 3689, 3691, 3694, 3697, 3700, 3703, 3706, 3709,
     3712, 3715, 3718, 3721, 3724, 3727, 3730, 3733, 3736, 3739,
     3742, 3745, 3748, 3751, 3754, 3757, 3760, 3763, 3766, 3769,
     3772, 3775, 3778, 3781, 3784, 3787, 3790, 3793, 3796, 3799,

     3802, 3805, 3808, 3811, 3814, 3817, 3820, 3823, 3826, 3829,
     3832, 3835, 3838, 3841, 3844, 3847, 3850, 3853, 3856, 3859,
     3862, 3865, 3868, 3871, 3874, 3877, 3880
    } ;

static yyconst flex_int16_t yy_def[928] =
    {   0,
      840,    1,  841,  841,  842,  842,  840,  840,  840,  840,
      840,  843,  844,  845,  840,  840,   16,  840,  840,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  840,  840,  840,  840,
      840,  840,  843,  840,  844,  845,  840,  840,  846,  840,
      847,   50,  840,  848,  840,   24,   24,   57,   57,   24,
       24,   24,   57,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  840,  846,  840,

      849,  100,  850,  840,  848,  840,  106,   57,  108,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  840,  149,
      851,  852,  853,  840,  154,  840,  840,  840,  157,  108,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  840,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      149,  150,  852,  854,  855,  840,  840,  840,  207,  840,
      840,  211,  840,  213,  160,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  840,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      856,  840,  857,  858,  840,  840,  266,  840,  268,  840,
      859,  840,  840,  840,  273,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      840,  840,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  860,  861,  862,  840,
      863,  840,  840,  840,  333,  840,  840,  840,  338,  840,
      340,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  840,  840,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  857,  840,
      864,  865,  840,  840,  840,  395,  840,  397,  840,  859,

      840,  840,  840,  402,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  840,
      840,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  866,  867,  868,  840,  863,  840,  840,  840,  458,
      840,  840,  462,  840,  464,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  840,  840,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,  869,  840,  870,
      871,  840,  840,  513,  840,  515,  859,  840,  840,  840,
      519,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      840,  840,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  872,
      873,  874,  863,  840,  840,  840,  565,  840,  568,  840,
      570,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  840,  840,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,  875,  840,  876,  877,  840,  607,  840,  609,
      859,  840,  840,  840,  613,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  878,
      879,  880,  863,  840,  840,  840,  645,  840,  648,  840,
      650,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  881,
      840,  882,  883,  840,  674,  840,  676,  859,  840,  840,
      840,  680,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  884,  885,  886,

      887,  863,  840,  840,  840,  704,  840,  707,  840,  709,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  888,  840,  889,  840,  890,  840,  728,  840,
      730,  859,  840,  840,  891,  734,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  892,
      893,  840,  894,  895,  863,  840,  840,  757,  840,  759,
      896,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  897,  840,  898,  899,  840,  778,  859,
      840,  900,   24,   24,   24,   24,   24,   24,   24,   24,
       24,  901,  840,  902,  903,  840,  840,  904,   24,   24,

       24,  905,  906,  907,  840,   24,   24,   24,  908,  840,
      909,  910,   24,   24,   24,  911,  912,  913,   24,  914,
      840,  915,  916,  917,  918,  919,  920,  840,  921,  922,
      840,  923,  924,  917,  840,  925,  926,  927,  840,    0,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840
    } ;

static yyconst flex_int16_t yy_nxt[3961] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   25,
       26,   24,   24,   27,   24,   28,   29,   30,   24,   31,
       32,   33,   34,   35,   36,   24,   24,   24,   19,   20,
       21,   22,   23,   24,   25,   26,   24,   24,   27,   24,
       28,   29,   30,   24,   31,   32,   33,   34,   35,   36,
       24,   24,   24,   40,   41,   42,   41,   48,  840,   70,
      837,   49,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   51,   52,   52,   52,   52,   52,   52,   80,   53,

       71,  837,   74,  840,   70,   72,   94,   97,   75,  109,
       95,   40,   41,   73,   96,   54,   42,   41,   52,   52,
       52,   52,   52,   80,   53,  837,   71,   74,   40,   41,
       72,   94,   97,   75,  109,  830,   95,  840,   73,   96,
       54,   56,   56,  837,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   51,   57,   57,   57,   58,   57,   59,
       56,   60,   56,   56,   56,   56,   56,   61,   56,   56,
       56,   56,   56,   56,   62,   56,   56,   56,   56,   56,
       57,   57,   58,   57,   59,   56,   60,   56,   56,   56,
       56,   56,   61,   56,   56,   56,   56,   56,   56,   62,

       56,   56,   56,   56,   56,   57,  830,   57,  110,   57,
      834,   57,  111,  112,   57,   56,   57,  113,  114,   56,
      115,   81,   56,  830,   56,  763,   56,   69,  764,   68,
       57,   56,   57,  110,   57,   82,   57,  111,  112,   57,
       56,   57,  113,  114,   56,  115,   81,   56,   63,   56,
       57,   56,   69,   64,   68,  118,   56,  119,   65,   66,
       82,  120,  121,  122,  126,   67,  180,  181,  156,  823,
      738,  739,  740,   63,  741,   57,  830,  823,   64,  158,
      118,  123,  119,   65,   66,  127,  120,  121,  122,  126,
       67,   56,   56,   56,   56,   56,   56,   56,   56,   56,

      840,   56,   56,   56,   56,   56,   56,  123,   56,   83,
      127,  128,  752,   84,   56,  116,  124,  823,   76,  812,
      129,   56,  824,   85,  823,  117,   77,   56,   56,   56,
       56,   56,   78,   56,  125,   83,  128,   79,   84,   56,
      116,   86,  124,  131,   76,  129,   56,   87,   85,   88,
      117,   77,   90,   91,  132,  133,  134,   78,   89,  125,
      138,   92,   79,  139,  140,  141,   86,  144,  131,   93,
      812,  206,   87,  156,   88,  726,  812,  795,  701,  132,
      133,  134,  208,   89,  274,  138,  145,   92,  139,  140,
      141,  812,  144,  795,   93,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  101,  102,  102,  102,  102,  102,
      102,  145,   53,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  809,  795,  754,  673,  735,  795,  754,  146,
      142,  102,  102,  102,  102,  102,  147,   53,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  143,  107,  107,
      107,  107,  107,  107,  146,  726,  142,  104,  787,  786,
      206,  147,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  334,  143,  148,  107,  107,  107,  107,  107,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  101,  108,
      108,  108,  108,  108,  108,  135,   60,  161,  148,  162,

      163,  164,  136,  165,  840,  137,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  108,  108,  108,  108,  108,
      135,   60,  161,  168,  162,  163,  164,  136,  165,  166,
      137,  149,  149,  149,  149,  149,  149,  149,  149,  149,
       51,  150,  150,  150,  150,  150,  150,  169,   53,  168,
      156,  206,  156,  206,  166,  785,  784,  705,  170,  754,
      726,  403,  459,  520,  566,  171,  172,  150,  150,  150,
      150,  150,  169,   53,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  170,  155,  155,  155,  155,  155,  155,
      171,  172,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  774,  766,  765,  681,  754,  752,  726,  173,  174,
      155,  155,  155,  155,  155,  156,  175,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  158,  159,  159,  159,
      159,  159,  159,  173,  174,  156,  206,  156,  673,  606,
      742,  175,  646,  726,  673,  104,  614,  646,  681,  176,
      177,  179,  182,  159,  159,  159,  159,  159,  160,  160,
      160,  160,  160,  160,  160,  160,  160,   51,  160,  160,
      160,  160,  160,  160,  176,  177,  179,  182,  184,  185,
      186,  187,  188,  189,  190,  191,  193,  194,  195,  196,
      197,  198,  199,  200,  160,  160,  160,  160,  160,  712,

      614,  701,  673,  184,  185,  186,  187,  188,  189,  190,
      191,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      201,  201,  201,  201,  201,  201,  201,  201,   51,  202,
      202,  202,  202,  202,  202,  840,   53,  209,  209,  209,
      209,  209,  209,  209,  209,  209,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  202,  202,  202,  202,  202,
      606,   53,  206,  698,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  208,  209,  209,  209,  209,  209,  209,
      840,  216,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  696,  683,  566,  673,  606,  511,  520,  217,  218,

      209,  209,  209,  209,  209,  156,  221,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  158,  212,  212,  212,
      212,  212,  212,  217,  218,  206,  156,  104,  606,  511,
      104,  221,  222,  634,  623,  459,  705,  735,  606,  223,
      224,  226,  228,  212,  212,  212,  212,  212,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  222,  214,  214,
      214,  214,  214,  214,  223,  224,  226,  228,  511,  603,
      600,  403,  104,  229,  511,  392,  392,  548,  524,  334,
      230,  231,  511,  392,  214,  214,  214,  214,  214,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  229,  215,

      215,  215,  215,  215,  215,  230,  231,  232,  237,  239,
      240,  241,  244,  245,  246,  242,  233,  234,  235,  243,
      247,  248,  249,  238,  104,  215,  215,  215,  215,  215,
      253,  257,  232,  237,  239,  240,  241,  244,  245,  246,
      242,  233,  234,  235,  243,  247,  248,  249,  238,  250,
      254,  258,  259,  276,  277,  253,  278,  257,  283,  285,
      286,  255,  284,  287,  251,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  250,  254,  258,  259,  276,  277,
      493,  278,  483,  283,  285,  286,  255,  284,  287,  251,
      206,  480,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  208,  267,  267,  267,  267,  267,  267,  840,  274,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  104,
      392,  264,  452,  406,  208,  288,  392,  264,  267,  267,
      267,  267,  267,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  292,  269,  269,  269,  269,  269,  269,  270,
      288,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      264,  387,  383,  377,  376,  373,  359,  292,  293,  269,
      269,  269,  269,  269,  156,  351,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  158,  272,  272,  272,  272,
      272,  272,  840,  293,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  272,  272,  272,  272,  272,  156,  158,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  274,  275,
      275,  275,  275,  275,  275,  840,  279,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  294,  295,  280,  296,
      297,  281,  298,  282,  289,  275,  275,  275,  275,  275,
      299,  290,  279,  300,  104,  301,  303,  304,  305,  291,
      306,  294,  295,  280,  296,  297,  281,  298,  282,  289,
      302,  307,  308,  309,  311,  299,  290,  312,  313,  300,
      301,  303,  304,  305,  291,  306,  314,  315,  316,  317,

      318,  319,  320,  321,  322,  302,  307,  308,  309,  311,
      323,  325,  312,  313,  326,  264,  153,  104,  324,  310,
      840,  314,  315,  316,  317,  318,  319,  320,  321,  322,
      264,  153,  261,  840,  840,  323,  325,  260,  330,  326,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  206,
      256,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      208,  332,  332,  332,  332,  332,  332,  840,  343,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  252,  236,
      227,  225,  220,  219,  104,  342,  153,  332,  332,  332,
      332,  332,  206,  343,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  334,  335,  335,  335,  335,  335,  335,
      840,  342,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  153,  192,  183,  178,  167,  153,  104,  130,  344,
      335,  335,  335,  335,  335,  156,  104,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  274,  339,  339,  339,
      339,  339,  339,  840,  344,  339,  339,  339,  339,  339,
      339,  339,  339,  339,   46,   47,   44,   98,   55,  345,
      346,  347,  348,  339,  339,  339,  339,  339,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  349,  341,  341,
      341,  341,  341,  341,  345,  346,  347,  348,  350,  352,

      353,  354,  355,  356,  357,  358,  360,  361,  362,  363,
      364,  365,  349,  366,  341,  341,  341,  341,  341,  367,
      368,  369,  370,  350,  352,  353,  354,  355,  356,  357,
      358,  360,  361,  362,  363,  364,  365,  371,  366,  374,
      375,  378,  379,  380,  367,  368,  369,  370,  381,  382,
      372,  384,  385,  386,  388,   47,   44,  840,   38,   38,
      840,  840,  371,  840,  374,  375,  378,  379,  380,  840,
      840,  840,  840,  381,  382,  372,  384,  385,  386,  388,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  206,
      840,  395,  395,  395,  395,  395,  395,  395,  395,  395,

      334,  396,  396,  396,  396,  396,  396,  840,  840,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  840,  840,
      840,  840,  840,  840,  405,  840,  840,  396,  396,  396,
      396,  396,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  407,  398,  398,  398,  398,  398,  398,  399,  405,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  840,
      408,  840,  840,  840,  840,  840,  407,  840,  398,  398,
      398,  398,  398,  156,  840,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  156,  408,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  274,  401,  401,  401,  401,

      401,  401,  840,  409,  401,  401,  401,  401,  401,  401,
      401,  401,  401,  840,  840,  840,  840,  840,  840,  840,
      840,  410,  401,  401,  401,  401,  401,  156,  409,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  403,  404,
      404,  404,  404,  404,  404,  840,  410,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  411,  840,  413,  414,
      418,  419,  420,  421,  415,  404,  404,  404,  404,  404,
      416,  412,  417,  422,  423,  424,  425,  426,  427,  428,
      429,  430,  411,  413,  414,  418,  419,  420,  421,  415,
      431,  432,  840,  433,  434,  416,  412,  417,  422,  423,

      424,  425,  426,  427,  428,  429,  430,  435,  436,  437,
      438,  439,  440,  441,  442,  431,  443,  432,  433,  434,
      444,  445,  446,  447,  448,  449,  450,  451,  466,  840,
      840,  840,  435,  436,  437,  438,  439,  440,  441,  487,
      442,  840,  443,  840,  840,  444,  445,  446,  447,  448,
      449,  450,  451,  455,  466,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  206,  487,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  206,  840,  456,  456,  456,
      456,  456,  456,  456,  456,  456,  334,  457,  457,  457,
      457,  457,  457,  840,  467,  457,  457,  457,  457,  457,

      457,  457,  457,  457,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  457,  457,  457,  457,  457,  206,  467,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  459,
      460,  460,  460,  460,  460,  460,  840,  468,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  840,  840,  840,
      840,  840,  840,  840,  840,  469,  460,  460,  460,  460,
      460,  156,  468,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  403,  463,  463,  463,  463,  463,  463,  840,
      469,  463,  463,  463,  463,  463,  463,  463,  463,  463,
      840,  840,  840,  840,  840,  470,  471,  472,  473,  463,

      463,  463,  463,  463,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  474,  465,  465,  465,  465,  465,  465,
      470,  471,  472,  473,  475,  476,  477,  478,  479,  481,
      482,  484,  485,  486,  488,  489,  490,  491,  474,  492,
      465,  465,  465,  465,  465,  494,  495,  496,  497,  475,
      476,  477,  478,  479,  481,  482,  484,  485,  486,  488,
      489,  490,  491,  498,  492,  499,  500,  501,  502,  503,
      494,  495,  496,  497,  504,  505,  506,  507,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  840,  498,  840,
      499,  500,  501,  502,  503,  840,  840,  522,  840,  504,

      505,  506,  507,  206,  840,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  459,  514,  514,  514,  514,  514,
      514,  840,  522,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  514,  514,  514,  514,  514,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  523,  516,  516,  516,  516,
      516,  516,  840,  525,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  840,  840,  840,  840,  840,  840,  840,
      523,  526,  516,  516,  516,  516,  516,  156,  525,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  403,  518,

      518,  518,  518,  518,  518,  840,  526,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  840,  840,  840,  840,
      840,  840,  840,  527,  528,  518,  518,  518,  518,  518,
      156,  529,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  520,  521,  521,  521,  521,  521,  521,  527,  528,
      530,  531,  532,  840,  533,  534,  840,  529,  535,  536,
      537,  538,  539,  540,  541,  542,  543,  544,  521,  521,
      521,  521,  521,  545,  549,  530,  531,  550,  532,  533,
      551,  534,  552,  535,  536,  537,  538,  539,  540,  541,
      542,  543,  544,  546,  553,  554,  555,  556,  545,  549,

      547,  557,  550,  558,  559,  551,  572,  552,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  840,  546,  553,
      554,  555,  556,  840,  573,  547,  557,  840,  558,  559,
      206,  572,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  459,  564,  564,  564,  564,  564,  564,  840,  573,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  840,
      840,  840,  840,  840,  840,  840,  840,  574,  564,  564,
      564,  564,  564,  206,  840,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  566,  567,  567,  567,  567,  567,
      567,  840,  574,  567,  567,  567,  567,  567,  567,  567,

      567,  567,  840,  840,  840,  840,  840,  840,  840,  840,
      575,  567,  567,  567,  567,  567,  156,  840,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  520,  569,  569,
      569,  569,  569,  569,  840,  575,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  840,  840,  840,  840,  840,
      576,  577,  578,  579,  569,  569,  569,  569,  569,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  580,  571,
      571,  571,  571,  571,  571,  576,  577,  578,  579,  581,
      582,  583,  584,  585,  840,  586,  587,  588,  589,  590,
      591,  594,  595,  580,  592,  571,  571,  571,  571,  571,

      596,  593,  597,  598,  581,  582,  583,  584,  599,  585,
      586,  587,  588,  589,  590,  591,  594,  595,  601,  592,
      602,  840,  616,  840,  840,  596,  593,  597,  598,  840,
      840,  840,  840,  599,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  601,  840,  602,  206,  616,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  566,  608,  608,
      608,  608,  608,  608,  840,  840,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  840,  840,  840,  840,  840,
      840,  617,  840,  840,  608,  608,  608,  608,  608,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  618,  610,

      610,  610,  610,  610,  610,  840,  617,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  840,  840,  840,  840,
      840,  840,  664,  618,  619,  610,  610,  610,  610,  610,
      156,  620,  611,  611,  611,  611,  611,  611,  611,  611,
      611,  520,  612,  612,  612,  612,  612,  612,  664,  619,
      840,  840,  840,  840,  840,  840,  620,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  621,  622,  612,  612,
      612,  612,  612,  156,  624,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  614,  615,  615,  615,  615,  615,
      615,  621,  622,  625,  626,  627,  628,  629,  630,  624,

      631,  632,  633,  635,  636,  637,  638,  639,  840,  652,
      840,  615,  615,  615,  615,  615,  840,  840,  625,  626,
      627,  628,  629,  630,  840,  631,  632,  633,  635,  636,
      637,  638,  639,  206,  652,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  566,  644,  644,  644,  644,  644,
      644,  840,  653,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  840,  840,  840,  840,  840,  840,  840,  840,
      654,  644,  644,  644,  644,  644,  206,  653,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  646,  647,  647,
      647,  647,  647,  647,  840,  654,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  840,  840,  840,  840,  840,
      840,  840,  655,  658,  647,  647,  647,  647,  647,  156,
      659,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      614,  649,  649,  649,  649,  649,  649,  655,  658,  840,
      840,  840,  840,  840,  840,  659,  660,  840,  840,  840,
      840,  840,  840,  840,  661,  662,  663,  649,  649,  649,
      649,  649,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  660,  651,  651,  651,  651,  651,  651,  656,  661,
      662,  663,  665,  840,  657,  666,  667,  668,  669,  840,
      684,  840,  840,  840,  840,  840,  840,  840,  651,  651,

      651,  651,  651,  656,  840,  840,  840,  713,  665,  657,
      666,  667,  668,  669,  206,  684,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  646,  675,  675,  675,  675,
      675,  675,  840,  713,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  840,  840,  840,  840,  840,  840,  685,
      840,  840,  675,  675,  675,  675,  675,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  686,  677,  677,  677,
      677,  677,  677,  840,  685,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  840,  840,  840,  840,  840,  840,
      840,  686,  687,  677,  677,  677,  677,  677,  156,  840,

      678,  678,  678,  678,  678,  678,  678,  678,  678,  614,
      679,  679,  679,  679,  679,  679,  840,  687,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  840,  840,  840,
      840,  840,  840,  840,  688,  689,  679,  679,  679,  679,
      679,  156,  690,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  681,  682,  682,  682,  682,  682,  682,  688,
      689,  691,  692,  693,  694,  695,  697,  690,  840,  840,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  682,
      682,  682,  682,  682,  840,  840,  691,  692,  693,  694,
      695,  697,  206,  840,  702,  702,  702,  702,  702,  702,

      702,  702,  702,  646,  703,  703,  703,  703,  703,  703,
      840,  711,  706,  706,  706,  706,  706,  706,  706,  706,
      706,  840,  840,  840,  840,  840,  840,  840,  840,  714,
      703,  703,  703,  703,  703,  206,  711,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  705,  706,  706,  706,
      706,  706,  706,  840,  714,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  840,  840,  840,  840,  840,  840,
      840,  715,  716,  706,  706,  706,  706,  706,  156,  717,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  681,
      708,  708,  708,  708,  708,  708,  715,  716,  840,  840,

      840,  840,  840,  840,  717,  718,  840,  840,  840,  840,
      840,  840,  719,  720,  721,  722,  708,  708,  708,  708,
      708,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      718,  710,  710,  710,  710,  710,  710,  719,  720,  721,
      722,  840,  840,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  840,  840,  840,  840,  737,  710,  710,  710,
      710,  710,  206,  840,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  705,  729,  729,  729,  729,  729,  729,
      840,  737,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  840,  840,  840,  840,  840,  840,  743,  840,  840,

      729,  729,  729,  729,  729,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  744,  731,  731,  731,  731,  731,
      731,  840,  743,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  840,  840,  840,  840,  840,  840,  800,  744,
      745,  731,  731,  731,  731,  731,  156,  746,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  681,  733,  733,
      733,  733,  733,  733,  800,  745,  840,  840,  840,  840,
      840,  840,  746,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  747,  748,  733,  733,  733,  733,  733,  156,
      749,  734,  734,  734,  734,  734,  734,  734,  734,  734,

      735,  736,  736,  736,  736,  736,  736,  747,  748,  840,
      840,  840,  840,  840,  840,  749,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  840,  762,  736,  736,  736,
      736,  736,  206,  840,  755,  755,  755,  755,  755,  755,
      755,  755,  755,  705,  756,  756,  756,  756,  756,  756,
      840,  762,  760,  760,  760,  760,  760,  760,  760,  760,
      760,  767,  840,  840,  840,  840,  840,  840,  768,  769,
      756,  756,  756,  756,  756,  206,  770,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  767,  758,  758,  758,
      758,  758,  758,  768,  769,  840,  840,  840,  840,  840,

      840,  770,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  771,  772,  758,  758,  758,  758,  758,  156,  773,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  735,
      760,  760,  760,  760,  760,  760,  771,  772,  840,  840,
      840,  840,  840,  840,  773,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  783,  788,  760,  760,  760,  760,
      760,  206,  789,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  790,  779,  779,  779,  779,  779,  779,  783,
      788,  840,  840,  840,  840,  840,  840,  789,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  790,  791,  779,

      779,  779,  779,  779,  156,  799,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  735,  781,  781,  781,  781,
      781,  781,  840,  791,  840,  840,  840,  840,  840,  840,
      799,  840,  840,  801,  840,  840,  840,  840,  840,  840,
      840,  806,  781,  781,  781,  781,  781,  206,  840,  796,
      796,  796,  796,  796,  796,  796,  796,  796,  801,  797,
      797,  797,  797,  797,  797,  206,  806,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  807,  808,  813,  814,
      815,  819,  840,  840,  840,  797,  797,  797,  797,  797,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      840,  807,  808,  813,  814,  815,  819,   37,   37,   37,
       37,   37,   37,   39,   39,   39,   39,   39,   39,   43,
       43,   43,   43,   43,   43,   45,  840,   45,   45,   45,
       45,   46,   46,   46,   46,   46,   46,   99,  840,   99,
       99,   99,   99,  103,  103,  103,  105,  840,  105,  151,
      151,  151,  152,  152,  152,  203,  203,  203,  204,  204,
      204,  205,  205,  205,  262,  262,  262,  263,  263,  263,
      327,  327,  327,  328,  328,  328,  329,  329,  329,  337,
      337,  337,  389,  389,  389,  390,  390,  390,  391,  391,
      391,  394,  394,  394,  453,  453,  453,  454,  454,  454,

      508,  508,  508,  509,  509,  509,  510,  510,  510,  560,
      560,  560,  561,  561,  561,  562,  562,  562,  453,  453,
      453,  604,  604,  604,  605,  605,  605,  640,  640,  640,
      641,  641,  641,  642,  642,  642,  670,  670,  670,  671,
      671,  671,  672,  672,  672,  561,  561,  561,  699,  699,
      699,  700,  700,  700,  723,  723,  723,  724,  724,  724,
      725,  725,  725,  727,  840,  727,  750,  750,  750,  751,
      751,  751,  753,  753,  753,  761,  840,  761,  641,  641,
      641,  775,  775,  775,  776,  776,  776,  777,  840,  777,
      782,  840,  782,  792,  792,  792,  793,  793,  793,  794,

      794,  794,  798,  840,  798,  802,  802,  802,  803,  803,
      803,  804,  840,  804,  805,  840,  805,  699,  699,  699,
      810,  810,  810,  811,  811,  811,  816,  816,  816,  817,
      817,  817,  818,  840,  818,  820,  820,  820,  821,  821,
      821,  822,  822,  822,  751,  751,  751,  825,  825,  825,
      826,  840,  826,  827,  827,  827,  828,  828,  828,  829,
      829,  829,  831,  840,  831,  832,  832,  832,  833,  840,
      833,  835,  835,  835,  836,  836,  836,  838,  838,  838,
      731,  840,  731,  839,  839,  839,    7,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840
    } ;

static yyconst flex_int16_t yy_chk[3961] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   10,   10,   11,   11,   15,   17,   25,
      839,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   29,   16,

       26,  838,   27,   17,   25,   26,   34,   36,   27,   58,
       35,   40,   40,   26,   35,   16,   41,   41,   16,   16,
       16,   16,   16,   29,   16,  836,   26,   27,   42,   42,
       26,   34,   36,   27,   58,  835,   35,  834,   26,   35,
       16,   19,   19,  833,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   20,  832,   20,   59,   22,
      831,   22,   61,   62,   23,   20,   23,   63,   64,   22,
       65,   30,   20,  829,   23,  739,   22,   23,  739,   22,
       20,   23,   20,   59,   22,   30,   22,   61,   62,   23,
       20,   23,   63,   64,   22,   65,   30,   20,   21,   23,
       21,   22,   23,   21,   22,   67,   23,   68,   21,   21,
       30,   69,   70,   71,   74,   21,  129,  129,  271,  828,
      713,  713,  713,   21,  713,   21,  826,  825,   21,  271,
       67,   72,   68,   21,   21,   75,   69,   70,   71,   74,
       21,   24,   24,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   72,   24,   31,
       75,   76,  824,   31,   24,   66,   73,  822,   28,  821,
       77,   24,  820,   31,  818,   66,   28,   24,   24,   24,
       24,   24,   28,   24,   73,   31,   76,   28,   31,   24,
       66,   32,   73,   79,   28,   77,   24,   32,   31,   32,
       66,   28,   33,   33,   80,   82,   83,   28,   32,   73,
       85,   33,   28,   86,   87,   88,   32,   93,   79,   33,
      817,  331,   32,  400,   32,  816,  811,  810,  809,   80,
       82,   83,  331,   32,  400,   85,   94,   33,   86,   87,
       88,  804,   93,  803,   33,   50,   50,   50,   50,   50,

       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   94,   50,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  802,  794,  793,  792,  781,  777,  776,   95,
       89,   50,   50,   50,   50,   50,   96,   50,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   89,   55,   55,
       55,   55,   55,   55,   95,  775,   89,  774,  766,  765,
      456,   96,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  456,   89,   97,   55,   55,   55,   55,   55,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   84,   57,  109,   97,  110,

      111,  112,   84,  113,  107,   84,  107,  107,  107,  107,
      107,  107,  107,  107,  107,   57,   57,   57,   57,   57,
       84,   57,  109,  116,  110,  111,  112,   84,  113,  114,
       84,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  117,  100,  116,
      517,  563,  611,  643,  114,  764,  763,  756,  118,  753,
      751,  517,  563,  611,  643,  119,  120,  100,  100,  100,
      100,  100,  117,  100,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  118,  104,  104,  104,  104,  104,  104,
      119,  120,  150,  150,  150,  150,  150,  150,  150,  150,

      150,  750,  741,  740,  733,  727,  726,  725,  122,  123,
      104,  104,  104,  104,  104,  106,  124,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  122,  123,  678,  702,  732,  724,  723,
      714,  124,  703,  700,  699,  698,  678,  702,  732,  125,
      126,  128,  130,  106,  106,  106,  106,  106,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  125,  126,  128,  130,  132,  133,
      134,  135,  136,  137,  138,  139,  141,  142,  143,  144,
      145,  146,  147,  148,  108,  108,  108,  108,  108,  685,

      679,  673,  672,  132,  133,  134,  135,  136,  137,  138,
      139,  141,  142,  143,  144,  145,  146,  147,  148,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  155,  149,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  149,  149,  149,  149,  149,
      671,  149,  154,  670,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      159,  161,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  668,  652,  644,  642,  641,  640,  612,  161,  163,

      154,  154,  154,  154,  154,  157,  166,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  161,  163,  755,  780,  606,  605,  604,
      603,  166,  167,  596,  581,  564,  755,  780,  562,  168,
      169,  171,  174,  157,  157,  157,  157,  157,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  167,  158,  158,
      158,  158,  158,  158,  168,  169,  171,  174,  561,  560,
      557,  518,  511,  175,  510,  509,  508,  494,  468,  457,
      176,  177,  454,  453,  158,  158,  158,  158,  158,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  175,  160,

      160,  160,  160,  160,  160,  176,  177,  178,  181,  182,
      183,  184,  186,  187,  188,  185,  178,  178,  178,  185,
      189,  190,  191,  181,  452,  160,  160,  160,  160,  160,
      194,  197,  178,  181,  182,  183,  184,  186,  187,  188,
      185,  178,  178,  178,  185,  189,  190,  191,  181,  192,
      195,  198,  199,  216,  217,  194,  218,  197,  220,  221,
      222,  195,  220,  223,  192,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  192,  195,  198,  199,  216,  217,
      436,  218,  423,  220,  221,  222,  195,  220,  223,  192,
      207,  419,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  209,  401,
      209,  209,  209,  209,  209,  209,  209,  209,  209,  392,
      391,  390,  389,  343,  332,  224,  329,  328,  207,  207,
      207,  207,  207,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  226,  208,  208,  208,  208,  208,  208,  210,
      224,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      327,  325,  320,  313,  312,  309,  295,  226,  227,  208,
      208,  208,  208,  208,  211,  285,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  212,  227,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  211,  211,  211,  211,  211,  213,  272,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  214,  219,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  229,  230,  219,  231,
      232,  219,  233,  219,  225,  213,  213,  213,  213,  213,
      234,  225,  219,  235,  264,  236,  237,  238,  239,  225,
      240,  229,  230,  219,  231,  232,  219,  233,  219,  225,
      236,  241,  242,  243,  245,  234,  225,  246,  247,  235,
      236,  237,  238,  239,  225,  240,  248,  249,  250,  251,

      252,  253,  254,  255,  256,  236,  241,  242,  243,  245,
      257,  259,  246,  247,  260,  263,  262,  261,  258,  244,
      215,  248,  249,  250,  251,  252,  253,  254,  255,  256,
      205,  204,  203,  202,  201,  257,  259,  200,  265,  260,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  266,
      196,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  267,  277,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  193,  180,
      172,  170,  165,  164,  153,  276,  152,  266,  266,  266,
      266,  266,  268,  277,  268,  268,  268,  268,  268,  268,

      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      269,  276,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  151,  140,  131,  127,  115,  103,  101,   78,  278,
      268,  268,  268,  268,  268,  273,   51,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  275,  278,  275,  275,  275,  275,  275,
      275,  275,  275,  275,   47,   46,   43,   38,   18,  279,
      280,  281,  282,  273,  273,  273,  273,  273,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  283,  274,  274,
      274,  274,  274,  274,  279,  280,  281,  282,  284,  286,

      288,  289,  290,  291,  292,  294,  296,  297,  298,  299,
      300,  301,  283,  302,  274,  274,  274,  274,  274,  303,
      304,  305,  306,  284,  286,  288,  289,  290,  291,  292,
      294,  296,  297,  298,  299,  300,  301,  308,  302,  310,
      311,  314,  316,  317,  303,  304,  305,  306,  318,  319,
      308,  322,  323,  324,  326,   14,   12,    7,    4,    3,
        0,    0,  308,    0,  310,  311,  314,  316,  317,    0,
        0,    0,    0,  318,  319,  308,  322,  323,  324,  326,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  333,
        0,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  335,    0,  335,
      335,  335,  335,  335,  335,  335,  335,  335,    0,    0,
        0,    0,    0,    0,  342,    0,    0,  333,  333,  333,
      333,  333,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  344,  334,  334,  334,  334,  334,  334,  336,  342,
      336,  336,  336,  336,  336,  336,  336,  336,  336,    0,
      345,    0,    0,    0,    0,    0,  344,    0,  334,  334,
      334,  334,  334,  337,    0,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  338,  345,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  339,  346,  339,  339,  339,  339,  339,  339,
      339,  339,  339,    0,    0,    0,    0,    0,    0,    0,
        0,  347,  338,  338,  338,  338,  338,  340,  346,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  340,  341,  347,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  348,    0,  349,  350,
      352,  353,  355,  356,  351,  340,  340,  340,  340,  340,
      351,  348,  351,  357,  358,  359,  360,  361,  362,  363,
      364,  365,  348,  349,  350,  352,  353,  355,  356,  351,
      366,  367,    0,  368,  369,  351,  348,  351,  357,  358,

      359,  360,  361,  362,  363,  364,  365,  370,  371,  372,
      373,  374,  375,  376,  377,  366,  379,  367,  368,  369,
      380,  381,  382,  383,  384,  386,  387,  388,  405,    0,
        0,    0,  370,  371,  372,  373,  374,  375,  376,  430,
      377,    0,  379,    0,    0,  380,  381,  382,  383,  384,
      386,  387,  388,  393,  405,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  394,  430,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  395,    0,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  396,  406,  396,  396,  396,  396,  396,

      396,  396,  396,  396,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  395,  395,  395,  395,  395,  397,  406,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  398,  407,  398,  398,
      398,  398,  398,  398,  398,  398,  398,    0,    0,    0,
        0,    0,    0,    0,    0,  408,  397,  397,  397,  397,
      397,  402,  407,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  404,
      408,  404,  404,  404,  404,  404,  404,  404,  404,  404,
        0,    0,    0,    0,    0,  409,  410,  411,  412,  402,

      402,  402,  402,  402,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  413,  403,  403,  403,  403,  403,  403,
      409,  410,  411,  412,  414,  415,  416,  417,  418,  421,
      422,  424,  426,  427,  431,  432,  433,  434,  413,  435,
      403,  403,  403,  403,  403,  437,  438,  439,  440,  414,
      415,  416,  417,  418,  421,  422,  424,  426,  427,  431,
      432,  433,  434,  441,  435,  442,  443,  444,  445,  446,
      437,  438,  439,  440,  447,  448,  449,  450,  455,  455,
      455,  455,  455,  455,  455,  455,  455,    0,  441,    0,
      442,  443,  444,  445,  446,    0,    0,  466,    0,  447,

      448,  449,  450,  458,    0,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  460,  466,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  458,  458,  458,  458,  458,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  467,  459,  459,  459,  459,
      459,  459,  463,  469,  463,  463,  463,  463,  463,  463,
      463,  463,  463,    0,    0,    0,    0,    0,    0,    0,
      467,  470,  459,  459,  459,  459,  459,  462,  469,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  462,  465,  470,  465,  465,  465,
      465,  465,  465,  465,  465,  465,    0,    0,    0,    0,
        0,    0,    0,  471,  472,  462,  462,  462,  462,  462,
      464,  473,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  471,  472,
      474,  475,  476,    0,  477,  478,    0,  473,  479,  480,
      482,  483,  484,  485,  487,  488,  489,  490,  464,  464,
      464,  464,  464,  492,  495,  474,  475,  496,  476,  477,
      497,  478,  498,  479,  480,  482,  483,  484,  485,  487,
      488,  489,  490,  493,  499,  500,  501,  502,  492,  495,

      493,  504,  496,  506,  507,  497,  522,  498,  512,  512,
      512,  512,  512,  512,  512,  512,  512,    0,  493,  499,
      500,  501,  502,    0,  523,  493,  504,    0,  506,  507,
      513,  522,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  514,  523,
      514,  514,  514,  514,  514,  514,  514,  514,  514,    0,
        0,    0,    0,    0,    0,    0,    0,  524,  513,  513,
      513,  513,  513,  515,    0,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  516,  524,  516,  516,  516,  516,  516,  516,  516,

      516,  516,    0,    0,    0,    0,    0,    0,    0,    0,
      525,  515,  515,  515,  515,  515,  519,    0,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  521,  525,  521,  521,  521,  521,
      521,  521,  521,  521,  521,    0,    0,    0,    0,    0,
      526,  527,  529,  530,  519,  519,  519,  519,  519,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  531,  520,
      520,  520,  520,  520,  520,  526,  527,  529,  530,  532,
      533,  534,  536,  537,    0,  538,  539,  541,  542,  546,
      547,  549,  550,  531,  548,  520,  520,  520,  520,  520,

      551,  548,  552,  553,  532,  533,  534,  536,  556,  537,
      538,  539,  541,  542,  546,  547,  549,  550,  558,  548,
      559,    0,  573,    0,    0,  551,  548,  552,  553,    0,
        0,    0,  567,  556,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  558,    0,  559,  565,  573,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  569,    0,  569,  569,  569,  569,
      569,  569,  569,  569,  569,    0,    0,    0,    0,    0,
        0,  574,    0,    0,  565,  565,  565,  565,  565,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  575,  566,

      566,  566,  566,  566,  566,  571,  574,  571,  571,  571,
      571,  571,  571,  571,  571,  571,    0,    0,    0,    0,
        0,    0,  632,  575,  576,  566,  566,  566,  566,  566,
      568,  577,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  632,  576,
        0,    0,    0,    0,    0,  608,  577,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  579,  580,  568,  568,
      568,  568,  568,  570,  583,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  579,  580,  584,  585,  586,  590,  591,  592,  583,

      593,  594,  595,  597,  598,  599,  600,  601,    0,  617,
        0,  570,  570,  570,  570,  570,    0,    0,  584,  585,
      586,  590,  591,  592,    0,  593,  594,  595,  597,  598,
      599,  600,  601,  607,  617,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  610,  618,  610,  610,  610,  610,  610,  610,  610,
      610,  610,    0,    0,    0,    0,    0,    0,    0,    0,
      620,  607,  607,  607,  607,  607,  609,  618,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  615,  620,  615,  615,  615,  615,

      615,  615,  615,  615,  615,    0,    0,    0,    0,    0,
        0,    0,  621,  625,  609,  609,  609,  609,  609,  613,
      627,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  621,  625,    0,
        0,    0,    0,    0,    0,  627,  628,    0,    0,    0,
        0,    0,    0,    0,  629,  630,  631,  613,  613,  613,
      613,  613,  614,  614,  614,  614,  614,  614,  614,  614,
      614,  628,  614,  614,  614,  614,  614,  614,  623,  629,
      630,  631,  634,    0,  623,  635,  636,  638,  639,    0,
      653,    0,    0,    0,    0,    0,    0,    0,  614,  614,

      614,  614,  614,  623,    0,    0,    0,  686,  634,  623,
      635,  636,  638,  639,  645,  653,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  647,  686,  647,  647,  647,  647,  647,  647,
      647,  647,  647,    0,    0,    0,    0,    0,    0,  656,
        0,    0,  645,  645,  645,  645,  645,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  657,  646,  646,  646,
      646,  646,  646,  649,  656,  649,  649,  649,  649,  649,
      649,  649,  649,  649,    0,    0,    0,    0,    0,    0,
        0,  657,  658,  646,  646,  646,  646,  646,  648,    0,

      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  651,  658,  651,  651,
      651,  651,  651,  651,  651,  651,  651,    0,    0,    0,
        0,    0,    0,    0,  660,  661,  648,  648,  648,  648,
      648,  650,  662,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  660,
      661,  663,  664,  665,  666,  667,  669,  662,  675,    0,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  650,
      650,  650,  650,  650,    0,    0,  663,  664,  665,  666,
      667,  669,  674,    0,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      677,  683,  677,  677,  677,  677,  677,  677,  677,  677,
      677,    0,    0,    0,    0,    0,    0,    0,    0,  687,
      674,  674,  674,  674,  674,  676,  683,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  682,  687,  682,  682,  682,  682,  682,
      682,  682,  682,  682,    0,    0,    0,    0,    0,    0,
        0,  688,  689,  676,  676,  676,  676,  676,  680,  690,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  688,  689,    0,    0,

        0,    0,    0,    0,  690,  691,    0,    0,    0,    0,
        0,    0,  692,  693,  695,  696,  680,  680,  680,  680,
      680,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      691,  681,  681,  681,  681,  681,  681,  692,  693,  695,
      696,  706,    0,  706,  706,  706,  706,  706,  706,  706,
      706,  706,    0,    0,    0,    0,  711,  681,  681,  681,
      681,  681,  704,    0,  704,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
      708,  711,  708,  708,  708,  708,  708,  708,  708,  708,
      708,    0,    0,    0,    0,    0,    0,  715,    0,    0,

      704,  704,  704,  704,  704,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  716,  705,  705,  705,  705,  705,
      705,  710,  715,  710,  710,  710,  710,  710,  710,  710,
      710,  710,    0,    0,    0,    0,    0,    0,  788,  716,
      717,  705,  705,  705,  705,  705,  707,  718,  707,  707,
      707,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  788,  717,    0,    0,    0,    0,
        0,  729,  718,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  719,  720,  707,  707,  707,  707,  707,  709,
      722,  709,  709,  709,  709,  709,  709,  709,  709,  709,

      709,  709,  709,  709,  709,  709,  709,  719,  720,    0,
        0,    0,    0,    0,  731,  722,  731,  731,  731,  731,
      731,  731,  731,  731,  731,    0,  737,  709,  709,  709,
      709,  709,  728,    0,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      736,  737,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  742,    0,    0,    0,    0,    0,    0,  743,  745,
      728,  728,  728,  728,  728,  730,  746,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  742,  730,  730,  730,
      730,  730,  730,  743,  745,    0,    0,    0,    0,    0,

      758,  746,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  747,  748,  730,  730,  730,  730,  730,  734,  749,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  747,  748,    0,    0,
        0,    0,    0,  760,  749,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  762,  767,  734,  734,  734,  734,
      734,  757,  769,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  772,  757,  757,  757,  757,  757,  757,  762,
      767,    0,    0,    0,    0,    0,  779,  769,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  772,  773,  757,

      757,  757,  757,  757,  759,  783,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,    0,  773,    0,    0,    0,    0,    0,    0,
      783,    0,    0,  791,    0,    0,    0,    0,    0,    0,
        0,  799,  759,  759,  759,  759,  759,  778,    0,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  791,  778,
      778,  778,  778,  778,  778,  796,  799,  796,  796,  796,
      796,  796,  796,  796,  796,  796,  800,  801,  806,  807,
      808,  814,    0,    0,    0,  778,  778,  778,  778,  778,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  800,  801,  806,  807,  808,  814,  841,  841,  841,
      841,  841,  841,  842,  842,  842,  842,  842,  842,  843,
      843,  843,  843,  843,  843,  844,    0,  844,  844,  844,
      844,  845,  845,  845,  845,  845,  845,  846,    0,  846,
      846,  846,  846,  847,  847,  847,  848,    0,  848,  849,
      849,  849,  850,  850,  850,  851,  851,  851,  852,  852,
      852,  853,  853,  853,  854,  854,  854,  855,  855,  855,
      856,  856,  856,  857,  857,  857,  858,  858,  858,  859,
      859,  859,  860,  860,  860,  861,  861,  861,  862,  862,
      862,  863,  863,  863,  864,  864,  864,  865,  865,  865,

      866,  866,  866,  867,  867,  867,  868,  868,  868,  869,
      869,  869,  870,  870,  870,  871,  871,  871,  872,  872,
      872,  873,  873,  873,  874,  874,  874,  875,  875,  875,
      876,  876,  876,  877,  877,  877,  878,  878,  878,  879,
      879,  879,  880,  880,  880,  881,  881,  881,  882,  882,
      882,  883,  883,  883,  884,  884,  884,  885,  885,  885,
      886,  886,  886,  887,    0,  887,  888,  888,  888,  889,
      889,  889,  890,  890,  890,  891,    0,  891,  892,  892,
      892,  893,  893,  893,  894,  894,  894,  895,    0,  895,
      896,    0,  896,  897,  897,  897,  898,  898,  898,  899,

      899,  899,  900,    0,  900,  901,  901,  901,  902,  902,
      902,  903,    0,  903,  904,    0,  904,  905,  905,  905,
      906,  906,  906,  907,  907,  907,  908,  908,  908,  909,
      909,  909,  910,    0,  910,  911,  911,  911,  912,  912,
      912,  913,  913,  913,  914,  914,  914,  915,  915,  915,
      916,    0,  916,  917,  917,  917,  918,  918,  918,  919,
      919,  919,  920,    0,  920,  921,  921,  921,  922,    0,
      922,  923,  923,  923,  924,  924,  924,  925,  925,  925,
      926,    0,  926,  927,  927,  927,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,

      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[100] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
        };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 841 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3887 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_KEYWORD_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::DUID_KEYWORD_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::HEX_KEYWORD_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_KEYWORD_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::SCRIPT_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::ROUTING_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::AUTH_METHODS_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::AUTH_PROTOCOL_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::AUTH_ALGORITHM_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::AUTH_REPLAY_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::AUTH_REALM_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return ClntParser::DOWNLINK_PREFIX_IFACES_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
;
	YY_BREAK
case 81:
YY_RULE_SETUP
;
	YY_BREAK
case 82:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 85:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) {
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        }
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return ClntParser::DUID_;
}
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%10x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    if(!sscanf(yytext,"%10u",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 98:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
case 99:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 841 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 841 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 840);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

