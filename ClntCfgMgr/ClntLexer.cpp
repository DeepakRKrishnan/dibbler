
#line 3 "ClntLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 96
#define YY_END_OF_BUFFER 97
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[829] =
    {   0,
        1,    1,    0,    0,    0,    0,   97,   95,    2,    1,
        1,   95,   77,   95,   95,   94,   94,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   81,   81,   96,    1,
        1,    1,    0,   89,   77,    0,   89,   79,   78,   94,
        0,    0,   93,    0,   86,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       11,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       52,   90,   90,   90,   90,   90,   90,   90,   90,   25,
       26,   12,   90,   90,   90,   90,   90,   80,   78,   94,

        0,    0,    0,   85,   91,   84,   84,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
        8,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   94,    0,
        0,    0,    0,   83,   83,    0,   84,    0,   84,   90,
       90,   73,   90,   90,   90,   90,   90,   90,   90,    7,
       90,   34,   13,   90,   90,   90,   90,   90,   10,    0,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,

       94,    0,   92,    0,    0,    0,   83,    0,   83,    0,
       84,   84,   84,   84,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,    3,   90,   90,
       90,   90,   90,   90,   90,    0,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
        0,    0,    0,    0,    0,   83,   83,   83,   83,    0,
       84,   84,   84,    0,   84,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   29,   90,   90,   90,   90,   90,
       35,   90,   90,   90,   90,   90,   90,   90,    0,    0,

       90,   90,   90,   90,   27,   90,   53,   90,   90,   90,
       90,   90,   20,   90,   90,   90,   90,   90,    6,   90,
       90,   90,   90,   90,    0,    0,    0,    0,   83,   83,
       83,    0,   83,    0,    0,   84,   84,   84,   84,   90,
        5,   90,   90,   90,   90,   90,   90,   90,   90,   57,
       55,   90,   90,   90,   90,   90,   90,   90,   90,   90,
        0,    0,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   43,   90,   90,   90,   90,   90,   90,
       49,   90,   90,   90,   92,    0,    0,    0,    0,    0,
       83,   83,   83,   83,    0,   84,   84,   84,    0,   84,

       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   56,   90,   90,   90,   90,   42,   90,   90,
       16,   17,    0,    0,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   19,    0,    0,    0,    0,   83,   83,
       83,    0,   83,   88,   84,   84,   84,   84,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       54,   90,   90,   90,   90,   15,    0,    0,   90,   90,
        4,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   14,   90,   31,   90,   90,    0,    0,    0,

        0,   87,   83,   83,   83,   83,   84,   84,   84,    0,
       84,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   28,   90,   90,   90,   90,   18,    0,    0,   39,
       38,   30,   90,   90,   90,   90,   90,   90,   90,   90,
       33,   32,   90,   90,   90,   90,   92,    0,    0,   83,
       83,   83,    0,   83,   84,   84,   84,   84,   76,   90,
       90,   90,   90,   90,   90,   90,   64,   90,   90,   90,
       90,   60,   41,   40,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   58,    0,    0,    0,
        0,   83,   83,   83,   83,   84,   84,   84,    0,   84,

        9,   90,   90,   62,   90,   37,   90,   65,   90,   75,
       90,   90,   90,   90,   90,   90,   47,   90,   90,   90,
       72,   90,   90,    0,    0,    0,   83,   83,   83,    0,
       83,   84,   84,   84,   84,   90,   90,   36,   90,   90,
       90,   61,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   92,    0,    0,    0,   83,   83,   83,   83,
       84,   84,   84,    0,   84,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   44,   90,   90,   23,
        0,    0,   82,   85,   83,   83,   83,    0,   83,   84,
       84,   84,   84,   90,   90,   66,   90,   90,   90,   90,

       90,   90,   90,   90,   24,   90,    0,    0,   82,    0,
       83,   83,   83,   83,   83,   84,   84,   84,    0,   84,
       90,   90,   67,   90,   90,   90,   90,   90,   46,   90,
       90,   90,   90,   90,   92,   82,   85,   83,    0,   83,
       83,   83,   83,   84,   84,   84,   90,   90,   90,   90,
       90,   90,   90,   21,   90,   45,   51,   90,   90,    0,
       82,   83,   83,   83,   83,   84,   84,   84,   90,   90,
       68,   69,   70,   71,   90,   22,   48,   90,    0,   83,
       83,    0,   83,   83,   84,   90,   63,   90,   90,   92,
       83,   83,   84,   90,   90,   90,    0,   83,   83,    0,

       59,   90,   50,   82,   83,   83,   74,   82,   83,   83,
        0,    0,   83,   83,    0,   83,   83,    0,   92,   83,
       83,    0,   83,   83,    0,   83,   83,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
        1,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        1,    1,    1,    1,    1,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[914] =
    {   0,
        0,    0, 1617, 1578,    0,    0, 1577, 3924, 3924,   72,
       74, 1571,    0, 1568,   71,   71,   34, 1552,  134,  183,
      227,  187,  239,  296,   54,   77,   71,  194,   65,  188,
      197,  300,  313,   68,   87,   72, 3924, 1561, 3924,  108,
      112,  115, 1567, 3924,    0, 1563, 1529, 3924,    0,  358,
     1513,  376, 3924,    0,  402,    0,  444,  186,  174,    0,
      181,  179,  186,  232,  225,  295,  237,  231,  245,  226,
      242,  251,  320,  248,  248,  245,  288, 1523,  296,  295,
        0,  311,  303,  448,  355,  365,  368,  382,  452,    0,
        0,    0,  415,  446,  444,  443,  441, 3924,    0,  506,

     1510,  427, 1509,  550,    0,  594,  524,  636,  442,  444,
      449,  456,  446,  461, 1520,  466,  454,  465,  519,  517,
        0,  528,  536,  572,  567,  579, 1519,  612,  123,  615,
     1518,  610,  614,  638,  633,  644,  635,  631,  643, 1508,
      637,  634,  646,  651,  654,  649,  655,  649,  696,  575,
     1478, 1466, 1460,  742,  714,  723,  786,  828,  760,  870,
      762,    0,  743, 1471, 1470,  757,  790,  801,  799, 1469,
      794, 1461,    0,  823,  824,  832,  832,  876,    0, 1460,
      876,  866,  863,  868,  882,  880,  871,  883,  872,  884,
      878,  918, 1364,  898,  920, 1363,  903,  920,  910, 1362,

      947, 1349, 1348, 1338, 1300,  973,  984, 1026, 1002, 1044,
     1070, 1088, 1114, 1132, 1299,  910,  908,  915,  930,  916,
      913, 1003, 1012, 1069, 1127, 1087, 1114,    0, 1125, 1115,
     1127, 1122, 1133, 1125, 1147, 1148, 1134, 1145, 1137, 1148,
     1140, 1137, 1132, 1310, 1151, 1148, 1164, 1156, 1151, 1157,
     1179, 1182, 1174, 1167, 1181, 1163, 1171, 1309, 1173, 1188,
     1296, 1295, 1293, 1292, 1210, 1230, 1248, 1274, 1292, 1257,
     1318, 1220, 1330, 1372, 1348, 1237, 1263, 1279, 1350, 1340,
     1337, 1347, 1212, 1354,    0, 1369, 1370, 1373, 1361, 1374,
        0, 1366, 1107, 1376, 1378, 1369, 1388, 1380, 1379, 1390,

     1383, 1379, 1399, 1388,    0, 1419, 1106, 1404, 1399, 1105,
     1104, 1418,    0, 1413, 1409, 1413, 1424, 1103,    0, 1415,
     1415, 1424, 1102, 1429, 1089, 1088, 1060, 1448, 1476, 1051,
     1488, 1530, 1506, 1548, 1574, 1585, 1603, 1629, 1647, 1494,
     1062, 1509, 1546, 1592, 1596, 1634, 1654, 1626, 1638,    0,
     1630, 1635, 1647, 1648, 1641, 1650, 1648, 1659, 1660, 1661,
     1654, 1651, 1670, 1650, 1673, 1661, 1680, 1680, 1682, 1672,
     1692, 1681, 1700,    0, 1701, 1681, 1690, 1686, 1688, 1693,
        0, 1705, 1696, 1698, 1049, 1048, 1047, 1046, 1754, 1765,
     1776, 1794, 1820, 1838, 1803, 1864, 1045, 1876, 1918, 1894,

     1717, 1772, 1809, 1835, 1897, 1880, 1896, 1889, 1903, 1917,
     1925, 1056,    0, 1926, 1918, 1022, 1918,    0, 1916, 1923,
        0,    0, 1935, 1915, 1929, 1934, 1933, 1936, 1021, 1938,
     1938, 1938, 1931, 1948, 1933, 1961, 1966, 1966, 1954, 1968,
     1970, 1970, 1965,    0, 1007, 1006, 1005, 1991, 2017, 1004,
     2029, 2071, 2047, 2056, 2115, 2089, 2159, 2133, 1980, 2062,
     1015, 2063, 2111, 2125, 2126, 2167, 2155, 2169, 2153, 2156,
        0, 2153, 2161, 2171, 2157,    0, 2168, 2173, 2165, 2162,
        0, 2163, 2173, 1014, 2170, 2170, 2166, 2175, 2192, 2199,
     2196, 2206,    0, 2213,    0, 2212, 2215,  992,  974,  956,

      955, 2230, 2258, 2276, 2302, 2320, 2346,  896, 2358, 2400,
     2376, 2247, 2265, 2313, 2361, 2377, 2380, 2363, 2397, 2406,
     2403,    0, 2395, 2413, 2400, 2411,    0, 2403, 2400,    0,
        0,    0, 2410, 2415, 2435, 2417, 2414, 2419, 2403, 2418,
        0,    0, 2416,  865, 2415, 2433,  850,  849,  848, 2490,
      847, 2502, 2544, 2520, 2588, 2562, 2632, 2606,    0, 2432,
     2452,  858, 2522, 2529, 2576,  857,    0, 2599, 2609, 2629,
     2638,    0, 3924, 3924, 2637, 2626, 2636, 2641, 2640, 2628,
      855, 2644, 2647, 2638, 2638, 2644,    0,  842,  841,  840,
      839, 2691, 2709, 2735, 2753, 2779,  808, 2791, 2833, 2809,

        0, 2649, 2686,    0, 2705,    0, 2827,    0, 2749,    0,
     2810, 2811, 2795, 2827, 2826, 2844,    0, 2846, 2830, 2834,
        0, 2835, 2838,  807,  806,  805, 2889,  804, 2901, 2943,
     2919, 2987, 2961, 3031, 3005,  815, 2848,    0, 2921, 2935,
     2986,    0, 2992, 3008, 3035, 3019, 3022, 3040, 3025, 3031,
      813, 3041,  800,  799,  798,  797, 3084, 3058, 3128, 3102,
     3146,  796, 3172, 3214, 3190, 3030, 3072,  799, 3109, 3130,
     3186, 3178, 3177, 3193, 3205, 3222,    0, 3220, 3209,    0,
      766,  765,  764,    0, 3239,  763, 3265, 3307, 3283, 3351,
     3325, 3395, 3369, 3224, 3239,    0,  385,  774, 3276, 3288,

     3350, 3358, 3362, 3399,    0, 3390,  761,  760,  732,  729,
      672, 3443, 3417, 3487, 3461, 3505,  671, 3531,    0, 3549,
     3390, 3436,    0,  123,  671,  677, 3452, 3464,    0, 3500,
     3530, 3536, 3535, 3531,  662,  661, 3924,  616,    0, 3590,
      615, 3602, 3575, 3646, 3620,    0, 3533, 3598,  619,  616,
      617,  618, 3604,    0, 3622,    0,    0, 3634, 3635,  609,
      608,  607,  606, 3693, 3667, 3711,  605,    0, 3652, 3648,
        0,    0,    0,    0, 3700,    0,    0, 3703,  604,  603,
      564,    0, 3737, 3924,    0, 3694,    0, 3711, 3701,  563,
      562,  561, 3924, 3696, 3712, 3711,  560,  559,  530,    0,

        0, 3700,    0,  529,  528,  527,    0,  526,  525,  480,
        0,  427,  416,  415,    0,  414,  413,    0,  412,  411,
      382,  380,  332,  331,    0,  313,  285, 3924, 3767, 3771,
     3775, 3779, 3783, 3787, 3789,  302, 3791, 3793, 3795, 3797,
     3799, 3801, 3803, 3805, 3807, 3809, 3811, 3813, 3815, 3817,
     3819, 3821, 3823, 3825, 3827, 3829, 3831, 3833, 3835, 3837,
     3839, 3841, 3843, 3845, 3847, 3849, 3851, 3853, 3855, 3857,
     3859, 3861,  285, 3863, 3865, 3867,  283, 3869, 3871, 3873,
      282,  280, 3875, 3877, 3879,  229, 3881, 3883,  226,  224,
     3885, 3887, 3889, 3891, 3893,  207, 3895, 3897, 3899, 3901,

     3903,  143, 3905, 3907, 3909,  139, 3911,  134, 3913, 3915,
     3917,   79, 3919
    } ;

static yyconst flex_int16_t yy_def[914] =
    {   0,
      828,    1,  829,  829,  830,  830,  828,  828,  828,  828,
      828,  831,  832,  833,  828,  828,   16,  828,  828,   19,
       19,   19,   19,   19,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  828,  828,  828,  828,
      828,  828,  831,  828,  832,  833,  828,  828,  834,  828,
      835,   50,  828,  836,  828,   24,   24,   57,   57,   24,
       24,   24,   57,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  828,  834,  828,

      837,  100,  838,  828,  836,  828,  106,   57,  108,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  828,  149,
      839,  840,  841,  828,  154,  828,  828,  828,  157,  108,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  828,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,

      150,  150,  840,  842,  843,  828,  828,  828,  207,  828,
      828,  211,  828,  213,  160,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,  828,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      844,  828,  845,  846,  828,  828,  266,  828,  268,  828,
      828,  828,  828,  828,  273,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  828,  828,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  847,  848,  849,  828,  828,  828,
      828,  828,  331,  828,  828,  828,  336,  828,  338,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      828,  828,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  845,  828,  850,  851,  828,  828,
      828,  391,  828,  393,  828,  828,  828,  828,  828,  398,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  828,  828,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  852,  853,  854,  828,  828,  828,
      828,  828,  451,  828,  828,  455,  828,  457,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  828,  828,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  855,  828,  856,

      857,  828,  828,  503,  828,  505,  828,  828,  828,  828,
      509,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  828,  828,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,  858,  859,  860,  828,
      828,  828,  828,  552,  828,  555,  828,  557,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  828,  828,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,  861,  828,  862,
      863,  828,  592,  828,  594,  828,  828,  828,  828,  598,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,  864,  865,  866,  828,  828,  828,  828,
      629,  828,  632,  828,  634,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,  867,  828,  868,  869,  828,  657,  828,  659,
      828,  828,  828,  828,  663,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      870,  871,  872,  873,  828,  828,  828,  828,  687,  828,
      690,  828,  692,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,  874,  828,  875,  828,
      876,  828,  712,  828,  714,  828,  828,  828,  877,  718,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  878,  879,  828,  880,  881,  828,
      828,  828,  742,  828,  744,  882,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,  883,
      828,  884,  885,  828,  764,  828,  828,  886,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  887,  828,
      888,  889,  828,  828,  890,   24,   24,   24,   24,  891,
      892,  893,  828,   24,   24,   24,  894,  828,  895,  896,

       24,   24,   24,  897,  898,  899,   24,  900,  828,  901,
      902,  903,  904,  905,  906,  828,  907,  908,  828,  909,
      910,  903,  828,  911,  912,  913,  828,    0,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,

      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828
    } ;

static yyconst flex_int16_t yy_nxt[3999] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   25,
       26,   24,   24,   27,   24,   28,   29,   30,   24,   31,
       32,   33,   34,   35,   36,   24,   24,   24,   19,   20,
       20,   21,   22,   23,   24,   25,   26,   24,   24,   27,
       24,   28,   29,   30,   24,   31,   32,   33,   34,   35,
       36,   24,   24,   24,   40,   41,   42,   41,   48,  828,
       70,  715,   49,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   51,   52,   52,   52,   52,   52,   52,   71,

       53,   74,   80,   94,   72,  828,   70,   75,   97,   95,
       40,   41,   73,   96,   42,   41,   54,   40,   41,   52,
       52,   52,   52,   52,   52,   71,   53,   74,   80,   94,
       72,  180,  181,   75,   97,   95,  821,  749,   73,   96,
      750,  819,   54,   56,   56,  814,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   51,   57,   57,   57,   58,
       57,   59,   56,   60,   56,   56,   56,   56,   56,   61,
       56,   56,   56,   56,   56,   56,   62,   56,   56,   56,
       56,   56,   57,   57,   57,   58,   57,   59,   56,   60,
       56,   56,   56,   56,   56,   61,   56,   56,   56,   56,

       56,   56,   62,   56,   56,   56,   56,   56,   57,  806,
       57,  109,   57,   81,   57,  110,   76,  111,   56,   83,
      112,  113,   56,   84,   77,   56,  793,   82,  792,   56,
       78,  785,   68,   85,   57,   79,   57,  109,   57,   81,
       57,  110,   76,  111,   56,   83,  112,  113,   56,   84,
       77,   56,   63,   82,   57,   56,   78,   64,   68,   85,
      114,   79,   65,   66,   57,  115,   57,  118,  119,   67,
      120,  121,  122,  123,   56,  126,  127,   69,   63,  128,
       57,   56,  768,   64,  763,  746,  114,  711,   65,   66,
       57,  115,   57,  118,  119,   67,  120,  121,  122,  123,

       56,  126,  127,   69,  105,  128,  825,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,  828,   56,   56,
       56,   56,   56,   56,   86,   56,   90,   91,  129,  116,
       87,   56,   88,  131,  825,   92,  132,  133,   56,  117,
      134,   89,  124,   93,   56,   56,   56,   56,   56,   56,
       86,   56,  825,  818,  129,  116,   87,   56,   88,  131,
      125,   92,  132,  133,   56,  117,  134,   89,  124,   93,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  101,
      102,  102,  102,  102,  102,  102,  125,   53,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  138,  723,  724,

      725,  828,  726,  825,  139,  140,  102,  102,  102,  102,
      102,  102,  141,   53,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  138,  107,  107,  107,  107,  107,  107,
      139,  140,  818,  822,  818,  811,  818,  811,  141,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  737,  144,
      107,  107,  107,  107,  107,  107,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  101,  108,  108,  108,  108,
      108,  108,  135,   60,  142,  144,  145,  146,  147,  136,
      148,  161,  137,  162,  163,  164,  165,  166,  168,  169,
      170,  143,  108,  108,  108,  108,  108,  108,  135,   60,

      142,  811,  145,  146,  147,  136,  148,  161,  137,  162,
      163,  164,  165,  166,  168,  169,  170,  143,  149,  149,
      149,  149,  149,  149,  149,  149,  149,   51,  150,  150,
      150,  150,  150,  150,  828,   53,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  171,  800,  812,  811,  800,
      710,  800,  172,  173,  150,  150,  150,  150,  150,  150,
      174,   53,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  171,  155,  155,  155,  155,  155,  155,  172,  173,
      782,  684,  800,  782,  797,  782,  174,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  175,  176,  155,  155,

      155,  155,  155,  155,  156,  177,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  158,  159,  159,  159,  159,
      159,  159,  175,  176,  739,  656,  719,  782,  739,  710,
      104,  177,  774,  773,  772,  771,  688,  739,  179,  182,
      184,  185,  159,  159,  159,  159,  159,  159,  160,  160,
      160,  160,  160,  160,  160,  160,  160,   51,  160,  160,
      160,  160,  160,  160,  179,  182,  184,  185,  186,  187,
      188,  189,  190,  191,  193,  194,  195,  196,  197,  198,
      199,  200,  710,  760,  160,  160,  160,  160,  160,  160,
      752,  751,  664,  739,  186,  187,  188,  189,  190,  191,

      193,  194,  195,  196,  197,  198,  199,  200,  201,  201,
      201,  201,  201,  201,  201,  201,  201,   51,  202,  202,
      202,  202,  202,  202,  828,   53,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  202,  202,  202,  202,  202,  202,
      737,   53,  206,  710,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  208,  209,  209,  209,  209,  209,  209,
      828,  216,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  656,  591,  727,  630,  710,  656,  104,  217,  218,
      209,  209,  209,  209,  209,  209,  156,  221,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  158,  212,  212,
      212,  212,  212,  212,  217,  218,  696,  599,  684,  656,
      591,  681,  679,  221,  666,  553,  656,  591,  501,  510,
      222,  223,  224,  226,  212,  212,  212,  212,  212,  212,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  228,
      214,  214,  214,  214,  214,  214,  222,  223,  224,  226,
      104,  591,  501,  104,  618,  229,  607,  603,  452,  591,
      501,  588,  230,  231,  585,  228,  214,  214,  214,  214,
      214,  214,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  229,  215,  215,  215,  215,  215,  215,  230,  231,

      232,  237,  239,  240,  241,  244,  245,  246,  242,  233,
      234,  235,  243,  247,  248,  249,  238,  399,  215,  215,
      215,  215,  215,  215,  253,  257,  232,  237,  239,  240,
      241,  244,  245,  246,  242,  233,  234,  235,  243,  247,
      248,  249,  238,  250,  254,  258,  259,  276,  277,  278,
      253,  257,  279,  281,  283,  255,  280,  282,  251,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  828,  250,
      254,  258,  259,  276,  277,  278,  104,  501,  279,  281,
      283,  255,  280,  282,  251,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  206,  388,  266,  266,  266,  266,

      266,  266,  266,  266,  266,  208,  267,  267,  267,  267,
      267,  267,  828,  388,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  535,  514,  332,  501,  388,  104,  284,
      483,  473,  267,  267,  267,  267,  267,  267,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  285,  269,  269,
      269,  269,  269,  269,  270,  284,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  470,  274,  104,  388,  264,
      445,  402,  208,  285,  269,  269,  269,  269,  269,  269,
      156,  388,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  158,  272,  272,  272,  272,  272,  272,  828,  286,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  264,
      264,  383,  379,  373,  372,  369,  355,  290,  272,  272,
      272,  272,  272,  272,  156,  286,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  274,  275,  275,  275,  275,
      275,  275,  828,  290,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  287,  291,  292,  293,  294,  295,  296,
      288,  297,  275,  275,  275,  275,  275,  275,  289,  298,
      301,  302,  303,  299,  304,  305,  306,  307,  309,  287,
      291,  292,  293,  294,  295,  296,  288,  297,  300,  310,
      311,  312,  313,  314,  289,  298,  301,  302,  303,  299,

      304,  305,  306,  307,  309,  315,  316,  317,  318,  319,
      320,  321,  323,  324,  300,  310,  311,  312,  313,  314,
      328,  347,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  315,  316,  317,  318,  319,  320,  321,  323,  324,
      206,  158,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  208,  330,  330,  330,  330,  330,  330,  828,  340,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  330,  330,
      330,  330,  330,  330,  206,  340,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  332,  333,  333,  333,  333,

      333,  333,  828,  341,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  104,  264,  342,  153,  104,  322,  308,
      828,  264,  333,  333,  333,  333,  333,  333,  156,  341,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  158,
      156,  342,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  274,  337,  337,  337,  337,  337,  337,  828,  153,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  261,
      828,  260,  256,  252,  343,  344,  345,  346,  337,  337,
      337,  337,  337,  337,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  348,  339,  339,  339,  339,  339,  339,

      343,  344,  345,  346,  349,  350,  351,  352,  353,  354,
      356,  357,  358,  359,  360,  361,  362,  363,  364,  348,
      339,  339,  339,  339,  339,  339,  365,  366,  370,  371,
      349,  350,  351,  352,  353,  354,  356,  357,  358,  359,
      360,  361,  362,  363,  364,  367,  374,  375,  376,  377,
      378,  380,  365,  366,  370,  371,  381,  382,  368,  384,
      389,  389,  389,  389,  389,  389,  389,  389,  389,  236,
      227,  367,  374,  375,  376,  377,  378,  380,  225,  220,
      219,  104,  381,  382,  368,  384,  206,  153,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  208,  206,  153,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  332,
      392,  392,  392,  392,  392,  392,  828,  192,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  183,  178,  167,
      153,  104,  130,  401,  104,   46,  392,  392,  392,  392,
      392,  392,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  403,  394,  394,  394,  394,  394,  394,  395,  401,
      334,  334,  334,  334,  334,  334,  334,  334,  334,   47,
      404,   44,   98,   55,   47,   44,  828,  403,  394,  394,
      394,  394,  394,  394,  156,   38,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  156,  404,  396,  396,  396,

      396,  396,  396,  396,  396,  396,  274,  397,  397,  397,
      397,  397,  397,  828,  405,  397,  397,  397,  397,  397,
      397,  397,  397,  397,   38,  828,  828,  828,  828,  828,
      828,  828,  406,  397,  397,  397,  397,  397,  397,  156,
      405,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      399,  400,  400,  400,  400,  400,  400,  828,  406,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  407,  411,
      412,  413,  414,  415,  416,  417,  418,  400,  400,  400,
      400,  400,  400,  408,  419,  420,  421,  422,  423,  409,
      424,  410,  425,  426,  407,  411,  412,  413,  414,  415,

      416,  417,  418,  427,  428,  429,  430,  431,  432,  408,
      419,  420,  421,  422,  423,  409,  424,  410,  425,  426,
      433,  434,  435,  436,  437,  438,  439,  440,  441,  427,
      428,  429,  430,  431,  432,  442,  443,  444,  828,  459,
      828,  828,  828,  828,  828,  828,  433,  434,  435,  436,
      437,  438,  439,  440,  441,  828,  828,  828,  828,  828,
      828,  442,  443,  444,  448,  459,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  206,  828,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  206,  828,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  332,  450,  450,

      450,  450,  450,  450,  828,  460,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  450,  450,  450,  450,  450,  450,
      206,  460,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  452,  453,  453,  453,  453,  453,  453,  828,  461,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  828,
      828,  462,  828,  828,  828,  828,  828,  828,  453,  453,
      453,  453,  453,  453,  156,  461,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  274,  156,  462,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  399,  456,  456,

      456,  456,  456,  456,  828,  828,  456,  456,  456,  456,
      456,  456,  456,  456,  456,  828,  828,  828,  828,  828,
      463,  464,  465,  466,  456,  456,  456,  456,  456,  456,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  467,
      458,  458,  458,  458,  458,  458,  463,  464,  465,  466,
      468,  469,  471,  472,  474,  475,  476,  477,  478,  479,
      480,  481,  482,  484,  485,  467,  458,  458,  458,  458,
      458,  458,  486,  487,  488,  489,  468,  469,  471,  472,
      474,  475,  476,  477,  478,  479,  480,  481,  482,  484,
      485,  490,  491,  492,  493,  494,  495,  496,  486,  487,

      488,  489,  497,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  828,  828,  512,  828,  828,  490,  491,  492,
      493,  494,  495,  496,  828,  828,  828,  206,  497,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  332,  206,
      512,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      452,  504,  504,  504,  504,  504,  504,  828,  828,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  504,  504,  504,
      504,  504,  504,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  513,  506,  506,  506,  506,  506,  506,  828,

      515,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      828,  828,  828,  828,  828,  828,  828,  828,  513,  506,
      506,  506,  506,  506,  506,  156,  515,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  399,  508,  508,  508,
      508,  508,  508,  828,  516,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  828,  828,  828,  828,  828,  828,
      828,  517,  518,  508,  508,  508,  508,  508,  508,  156,
      516,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      510,  511,  511,  511,  511,  511,  511,  517,  518,  519,
      520,  521,  522,  523,  524,  525,  526,  527,  528,  529,

      530,  531,  532,  536,  537,  538,  533,  511,  511,  511,
      511,  511,  511,  534,  539,  519,  520,  521,  522,  523,
      524,  525,  526,  527,  528,  529,  530,  531,  532,  536,
      537,  538,  533,  540,  541,  542,  543,  544,  545,  534,
      539,  546,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  828,  828,  828,  828,  828,  828,  828,  828,  540,
      541,  542,  543,  544,  545,  828,  828,  546,  206,  828,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  452,
      551,  551,  551,  551,  551,  551,  828,  559,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  828,  828,  828,

      828,  828,  828,  828,  828,  560,  551,  551,  551,  551,
      551,  551,  206,  559,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  553,  554,  554,  554,  554,  554,  554,
      828,  560,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  828,  828,  561,  828,  828,  828,  828,  828,  828,
      554,  554,  554,  554,  554,  554,  156,  828,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  399,  156,  561,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  510,
      556,  556,  556,  556,  556,  556,  828,  828,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  828,  828,  828,

      828,  828,  562,  563,  564,  565,  556,  556,  556,  556,
      556,  556,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  566,  558,  558,  558,  558,  558,  558,  562,  563,
      564,  565,  567,  568,  569,  570,  571,  572,  573,  574,
      575,  576,  828,  579,  580,  581,  582,  566,  558,  558,
      558,  558,  558,  558,  583,  584,  586,  587,  567,  568,
      569,  570,  571,  572,  573,  574,  575,  576,  577,  579,
      580,  581,  582,  601,  828,  578,  828,  828,  828,  828,
      583,  584,  586,  587,  828,  828,  828,  602,  828,  828,
      828,  828,  828,  828,  577,  828,  828,  828,  828,  601,

      206,  578,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  452,  206,  602,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  553,  593,  593,  593,  593,  593,  593,
      828,  828,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  828,  828,  828,  828,  828,  828,  604,  828,  828,
      593,  593,  593,  593,  593,  593,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  605,  595,  595,  595,  595,
      595,  595,  828,  604,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  828,  828,  828,  828,  828,  828,  828,
      828,  605,  595,  595,  595,  595,  595,  595,  156,  828,

      596,  596,  596,  596,  596,  596,  596,  596,  596,  510,
      597,  597,  597,  597,  597,  597,  828,  606,  600,  600,
      600,  600,  600,  600,  600,  600,  600,  828,  828,  828,
      828,  828,  828,  828,  608,  609,  597,  597,  597,  597,
      597,  597,  156,  606,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  599,  600,  600,  600,  600,  600,  600,
      608,  609,  610,  611,  612,  613,  614,  615,  616,  617,
      619,  620,  621,  622,  623,  828,  636,  828,  828,  828,
      600,  600,  600,  600,  600,  600,  828,  828,  610,  611,
      612,  613,  614,  615,  616,  617,  619,  620,  621,  622,

      623,  206,  636,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  553,  628,  628,  628,  628,  628,  628,  828,
      637,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      828,  828,  828,  828,  828,  828,  828,  828,  638,  628,
      628,  628,  628,  628,  628,  206,  637,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  630,  631,  631,  631,
      631,  631,  631,  828,  638,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  828,  828,  641,  828,  828,  828,
      828,  828,  828,  631,  631,  631,  631,  631,  631,  156,
      828,  335,  335,  335,  335,  335,  335,  335,  335,  335,

      510,  156,  641,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  599,  633,  633,  633,  633,  633,  633,  828,
      828,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      828,  828,  828,  828,  828,  828,  642,  643,  644,  633,
      633,  633,  633,  633,  633,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  645,  635,  635,  635,  635,  635,
      635,  639,  642,  643,  644,  646,  647,  640,  648,  649,
      650,  651,  652,  828,  667,  828,  828,  828,  828,  828,
      645,  635,  635,  635,  635,  635,  635,  639,  828,  828,
      828,  646,  647,  640,  648,  649,  650,  651,  652,  206,

      667,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      553,  206,  828,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  630,  658,  658,  658,  658,  658,  658,  828,
      828,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      828,  828,  828,  828,  828,  828,  668,  828,  828,  658,
      658,  658,  658,  658,  658,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  669,  660,  660,  660,  660,  660,
      660,  828,  668,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  828,  828,  828,  828,  828,  828,  828,  828,
      669,  660,  660,  660,  660,  660,  660,  156,  828,  661,

      661,  661,  661,  661,  661,  661,  661,  661,  599,  662,
      662,  662,  662,  662,  662,  828,  670,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  828,  828,  828,  828,
      828,  828,  828,  671,  672,  662,  662,  662,  662,  662,
      662,  156,  670,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  664,  665,  665,  665,  665,  665,  665,  671,
      672,  673,  674,  675,  676,  677,  678,  680,  828,  694,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  665,
      665,  665,  665,  665,  665,  828,  828,  673,  674,  675,
      676,  677,  678,  680,  206,  694,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  630,  686,  686,  686,  686,
      686,  686,  828,  695,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  828,  828,  828,  828,  828,  828,  828,
      828,  697,  686,  686,  686,  686,  686,  686,  206,  695,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  688,
      689,  689,  689,  689,  689,  689,  156,  697,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  599,  828,  828,
      828,  828,  828,  828,  828,  698,  689,  689,  689,  689,
      689,  689,  156,  828,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  664,  691,  691,  691,  691,  691,  691,

      828,  698,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  828,  828,  828,  828,  828,  699,  700,  701,  702,
      691,  691,  691,  691,  691,  691,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  703,  693,  693,  693,  693,
      693,  693,  699,  700,  701,  702,  704,  705,  706,  206,
      721,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      630,  703,  693,  693,  693,  693,  693,  693,  722,  828,
      828,  828,  704,  705,  706,  206,  721,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  688,  713,  713,  713,
      713,  713,  713,  828,  722,  713,  713,  713,  713,  713,

      713,  713,  713,  713,  828,  828,  828,  828,  828,  828,
      728,  828,  828,  713,  713,  713,  713,  713,  713,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  729,  715,
      715,  715,  715,  715,  715,  828,  728,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  828,  828,  828,  828,
      828,  828,  828,  828,  729,  715,  715,  715,  715,  715,
      715,  156,  828,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  664,  717,  717,  717,  717,  717,  717,  828,
      730,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      828,  828,  828,  828,  828,  828,  828,  731,  732,  717,

      717,  717,  717,  717,  717,  156,  730,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  719,  720,  720,  720,
      720,  720,  720,  731,  732,  733,  734,  828,  747,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  828,  828,
      828,  828,  828,  720,  720,  720,  720,  720,  720,  828,
      828,  733,  734,  206,  747,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  688,  741,  741,  741,  741,  741,
      741,  828,  748,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  753,  828,  828,  828,  828,  828,  828,  828,
      754,  741,  741,  741,  741,  741,  741,  206,  748,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  753,  743,
      743,  743,  743,  743,  743,  156,  754,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  664,  828,  828,  828,
      828,  828,  828,  828,  755,  743,  743,  743,  743,  743,
      743,  156,  828,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  719,  745,  745,  745,  745,  745,  745,  828,
      755,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      756,  757,  758,  759,  828,  769,  828,  828,  828,  745,
      745,  745,  745,  745,  745,  828,  828,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  756,  757,  758,  759,

      206,  769,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  688,  206,  828,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  770,  765,  765,  765,  765,  765,  765,
      828,  775,  767,  767,  767,  767,  767,  767,  767,  767,
      767,  828,  828,  828,  828,  828,  828,  828,  776,  770,
      765,  765,  765,  765,  765,  765,  156,  775,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  719,  767,  767,
      767,  767,  767,  767,  776,  777,  778,  828,  786,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  787,  828,
      828,  828,  828,  828,  767,  767,  767,  767,  767,  767,

      828,  777,  778,  206,  786,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  787,  784,  784,  784,  784,  784,
      784,  156,  788,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  719,  789,  794,  795,  796,  801,  802,  803,
      807,  784,  784,  784,  784,  784,  784,  206,  788,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  828,  789,
      794,  795,  796,  801,  802,  803,  807,   37,   37,   37,
       37,   39,   39,   39,   39,   43,   43,   43,   43,   45,
      828,   45,   45,   46,   46,   46,   46,   99,  828,   99,
       99,  103,  103,  151,  151,  152,  152,  203,  203,  204,

      204,  205,  205,  262,  262,  263,  263,  325,  325,  326,
      326,  327,  327,  385,  385,  386,  386,  387,  387,  446,
      446,  447,  447,  498,  498,  499,  499,  500,  500,  547,
      547,  548,  548,  549,  549,  446,  446,  589,  589,  590,
      590,  624,  624,  625,  625,  626,  626,  653,  653,  654,
      654,  655,  655,  548,  548,  682,  682,  683,  683,  707,
      707,  708,  708,  709,  709,  735,  735,  736,  736,  738,
      738,  625,  625,  761,  761,  762,  762,  779,  779,  780,
      780,  781,  781,  790,  790,  791,  791,  682,  682,  798,
      798,  799,  799,  804,  804,  805,  805,  808,  808,  809,

      809,  810,  810,  736,  736,  813,  813,  815,  815,  816,
      816,  817,  817,  820,  820,  823,  823,  824,  824,  826,
      826,  827,  827,    7,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828

    } ;

static yyconst flex_int16_t yy_chk[3999] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   10,   10,   11,   11,   15,   17,
       25,  912,   15,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   26,

       16,   27,   29,   34,   26,   17,   25,   27,   36,   35,
       40,   40,   26,   35,   41,   41,   16,   42,   42,   16,
       16,   16,   16,   16,   16,   26,   16,   27,   29,   34,
       26,  129,  129,   27,   36,   35,  908,  724,   26,   35,
      724,  906,   16,   19,   19,  902,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   20,  896,
       20,   58,   22,   30,   22,   59,   28,   61,   20,   31,
       62,   63,   22,   31,   28,   20,  890,   30,  889,   22,
       28,  886,   22,   31,   20,   28,   20,   58,   22,   30,
       22,   59,   28,   61,   20,   31,   62,   63,   22,   31,
       28,   20,   21,   30,   21,   22,   28,   21,   22,   31,
       64,   28,   21,   21,   23,   65,   23,   67,   68,   21,
       69,   70,   71,   72,   23,   74,   75,   23,   21,   76,
       21,   23,  882,   21,  881,  877,   64,  873,   21,   21,
       23,   65,   23,   67,   68,   21,   69,   70,   71,   72,

       23,   74,   75,   23,  836,   76,  827,   23,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   32,   24,   33,   33,   77,   66,
       32,   24,   32,   79,  826,   33,   80,   82,   24,   66,
       83,   32,   73,   33,   24,   24,   24,   24,   24,   24,
       32,   24,  824,  823,   77,   66,   32,   24,   32,   79,
       73,   33,   80,   82,   24,   66,   83,   32,   73,   33,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   73,   50,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   85,  697,  697,

      697,  822,  697,  821,   86,   87,   50,   50,   50,   50,
       50,   50,   88,   50,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   85,   55,   55,   55,   55,   55,   55,
       86,   87,  820,  819,  817,  816,  814,  813,   88,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  812,   93,
       55,   55,   55,   55,   55,   55,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   84,   57,   89,   93,   94,   95,   96,   84,
       97,  109,   84,  110,  111,  112,  113,  114,  116,  117,
      118,   89,   57,   57,   57,   57,   57,   57,   84,   57,

       89,  810,   94,   95,   96,   84,   97,  109,   84,  110,
      111,  112,  113,  114,  116,  117,  118,   89,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  107,  100,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  119,  809,  808,  806,  805,
      804,  799,  120,  122,  100,  100,  100,  100,  100,  100,
      123,  100,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  119,  104,  104,  104,  104,  104,  104,  120,  122,
      798,  797,  792,  791,  790,  781,  123,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  124,  125,  104,  104,

      104,  104,  104,  104,  106,  126,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  124,  125,  780,  779,  767,  763,  762,  761,
      760,  126,  752,  751,  750,  749,  741,  738,  128,  130,
      132,  133,  106,  106,  106,  106,  106,  106,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  128,  130,  132,  133,  134,  135,
      136,  137,  138,  139,  141,  142,  143,  144,  145,  146,
      147,  148,  736,  735,  108,  108,  108,  108,  108,  108,
      726,  725,  717,  711,  134,  135,  136,  137,  138,  139,

      141,  142,  143,  144,  145,  146,  147,  148,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  155,  149,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  149,  149,  149,  149,  149,  149,
      710,  149,  154,  709,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      159,  161,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  708,  707,  698,  686,  683,  682,  681,  161,  163,
      154,  154,  154,  154,  154,  154,  157,  166,  157,  157,

      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  161,  163,  668,  662,  656,  655,
      654,  653,  651,  166,  636,  628,  626,  625,  624,  597,
      167,  168,  169,  171,  157,  157,  157,  157,  157,  157,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  174,
      158,  158,  158,  158,  158,  158,  167,  168,  169,  171,
      591,  590,  589,  588,  581,  175,  566,  562,  551,  549,
      548,  547,  176,  177,  544,  174,  158,  158,  158,  158,
      158,  158,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  175,  160,  160,  160,  160,  160,  160,  176,  177,

      178,  181,  182,  183,  184,  186,  187,  188,  185,  178,
      178,  178,  185,  189,  190,  191,  181,  508,  160,  160,
      160,  160,  160,  160,  194,  197,  178,  181,  182,  183,
      184,  186,  187,  188,  185,  178,  178,  178,  185,  189,
      190,  191,  181,  192,  195,  198,  199,  216,  217,  218,
      194,  197,  219,  220,  221,  195,  219,  220,  192,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  192,
      195,  198,  199,  216,  217,  218,  501,  500,  219,  220,
      221,  195,  219,  220,  192,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  207,  499,  207,  207,  207,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  209,  498,  209,  209,  209,  209,  209,  209,
      209,  209,  209,  484,  461,  450,  447,  446,  445,  222,
      429,  416,  207,  207,  207,  207,  207,  207,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  223,  208,  208,
      208,  208,  208,  208,  210,  222,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  412,  397,  388,  387,  386,
      385,  341,  330,  223,  208,  208,  208,  208,  208,  208,
      211,  327,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  212,  224,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  326,
      325,  323,  318,  311,  310,  307,  293,  226,  211,  211,
      211,  211,  211,  211,  213,  224,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  214,  226,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  225,  227,  229,  230,  231,  232,  233,
      225,  234,  213,  213,  213,  213,  213,  213,  225,  235,
      237,  238,  239,  236,  240,  241,  242,  243,  245,  225,
      227,  229,  230,  231,  232,  233,  225,  234,  236,  246,
      247,  248,  249,  250,  225,  235,  237,  238,  239,  236,

      240,  241,  242,  243,  245,  251,  252,  253,  254,  255,
      256,  257,  259,  260,  236,  246,  247,  248,  249,  250,
      265,  283,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  251,  252,  253,  254,  255,  256,  257,  259,  260,
      266,  272,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  267,  276,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  266,  266,
      266,  266,  266,  266,  268,  276,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,

      268,  268,  269,  277,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  264,  263,  278,  262,  261,  258,  244,
      215,  205,  268,  268,  268,  268,  268,  268,  271,  277,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      273,  278,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  275,  204,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  203,
      202,  200,  196,  193,  279,  280,  281,  282,  273,  273,
      273,  273,  273,  273,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  284,  274,  274,  274,  274,  274,  274,

      279,  280,  281,  282,  286,  287,  288,  289,  290,  292,
      294,  295,  296,  297,  298,  299,  300,  301,  302,  284,
      274,  274,  274,  274,  274,  274,  303,  304,  308,  309,
      286,  287,  288,  289,  290,  292,  294,  295,  296,  297,
      298,  299,  300,  301,  302,  306,  312,  314,  315,  316,
      317,  320,  303,  304,  308,  309,  321,  322,  306,  324,
      328,  328,  328,  328,  328,  328,  328,  328,  328,  180,
      172,  306,  312,  314,  315,  316,  317,  320,  170,  165,
      164,  153,  321,  322,  306,  324,  329,  152,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  331,  151,

      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  333,  140,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  131,  127,  115,
      103,  101,   78,  340,   51,   47,  331,  331,  331,  331,
      331,  331,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  342,  332,  332,  332,  332,  332,  332,  334,  340,
      334,  334,  334,  334,  334,  334,  334,  334,  334,   46,
      343,   43,   38,   18,   14,   12,    7,  342,  332,  332,
      332,  332,  332,  332,  335,    4,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  336,  343,  336,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  337,  344,  337,  337,  337,  337,  337,
      337,  337,  337,  337,    3,    0,    0,    0,    0,    0,
        0,    0,  345,  336,  336,  336,  336,  336,  336,  338,
      344,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  339,  345,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  346,  348,
      349,  351,  352,  353,  354,  355,  356,  338,  338,  338,
      338,  338,  338,  347,  357,  358,  359,  360,  361,  347,
      362,  347,  363,  364,  346,  348,  349,  351,  352,  353,

      354,  355,  356,  365,  366,  367,  368,  369,  370,  347,
      357,  358,  359,  360,  361,  347,  362,  347,  363,  364,
      371,  372,  373,  375,  376,  377,  378,  379,  380,  365,
      366,  367,  368,  369,  370,  382,  383,  384,    0,  401,
        0,    0,    0,    0,    0,    0,  371,  372,  373,  375,
      376,  377,  378,  379,  380,    0,    0,    0,    0,    0,
        0,  382,  383,  384,  389,  401,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  390,    0,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  391,    0,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,

      391,  391,  391,  391,  392,  402,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  391,  391,  391,  391,  391,  391,
      393,  402,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  394,  403,
      394,  394,  394,  394,  394,  394,  394,  394,  394,    0,
        0,  404,    0,    0,    0,    0,    0,    0,  393,  393,
      393,  393,  393,  393,  396,  403,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  398,  404,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,

      398,  398,  398,  398,  400,    0,  400,  400,  400,  400,
      400,  400,  400,  400,  400,    0,    0,    0,    0,    0,
      405,  406,  407,  408,  398,  398,  398,  398,  398,  398,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  409,
      399,  399,  399,  399,  399,  399,  405,  406,  407,  408,
      410,  411,  414,  415,  417,  419,  420,  423,  424,  425,
      426,  427,  428,  430,  431,  409,  399,  399,  399,  399,
      399,  399,  432,  433,  434,  435,  410,  411,  414,  415,
      417,  419,  420,  423,  424,  425,  426,  427,  428,  430,
      431,  436,  437,  438,  439,  440,  441,  442,  432,  433,

      434,  435,  443,  448,  448,  448,  448,  448,  448,  448,
      448,  448,    0,    0,  459,    0,    0,  436,  437,  438,
      439,  440,  441,  442,    0,    0,    0,  449,  443,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  451,
      459,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  453,    0,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  451,  451,  451,
      451,  451,  451,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  460,  452,  452,  452,  452,  452,  452,  456,

      462,  456,  456,  456,  456,  456,  456,  456,  456,  456,
        0,    0,    0,    0,    0,    0,    0,    0,  460,  452,
      452,  452,  452,  452,  452,  455,  462,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  458,  463,  458,  458,  458,  458,  458,
      458,  458,  458,  458,    0,    0,    0,    0,    0,    0,
        0,  464,  465,  455,  455,  455,  455,  455,  455,  457,
      463,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  464,  465,  466,
      467,  468,  469,  470,  472,  473,  474,  475,  477,  478,

      479,  480,  482,  485,  486,  487,  483,  457,  457,  457,
      457,  457,  457,  483,  488,  466,  467,  468,  469,  470,
      472,  473,  474,  475,  477,  478,  479,  480,  482,  485,
      486,  487,  483,  489,  490,  491,  492,  494,  496,  483,
      488,  497,  502,  502,  502,  502,  502,  502,  502,  502,
      502,    0,    0,    0,    0,    0,    0,    0,    0,  489,
      490,  491,  492,  494,  496,    0,    0,  497,  503,    0,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  504,  512,  504,  504,
      504,  504,  504,  504,  504,  504,  504,    0,    0,    0,

        0,    0,    0,    0,    0,  513,  503,  503,  503,  503,
      503,  503,  505,  512,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      506,  513,  506,  506,  506,  506,  506,  506,  506,  506,
      506,    0,    0,  514,    0,    0,    0,    0,    0,    0,
      505,  505,  505,  505,  505,  505,  507,    0,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  509,  514,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  511,    0,  511,  511,
      511,  511,  511,  511,  511,  511,  511,    0,    0,    0,

        0,    0,  515,  516,  517,  518,  509,  509,  509,  509,
      509,  509,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  519,  510,  510,  510,  510,  510,  510,  515,  516,
      517,  518,  520,  521,  523,  524,  525,  526,  528,  529,
      533,  534,    0,  536,  537,  538,  539,  519,  510,  510,
      510,  510,  510,  510,  540,  543,  545,  546,  520,  521,
      523,  524,  525,  526,  528,  529,  533,  534,  535,  536,
      537,  538,  539,  560,    0,  535,    0,    0,    0,    0,
      540,  543,  545,  546,    0,    0,    0,  561,    0,    0,
        0,    0,    0,    0,  535,    0,    0,    0,    0,  560,

      550,  535,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  552,  561,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      554,    0,  554,  554,  554,  554,  554,  554,  554,  554,
      554,    0,    0,    0,    0,    0,    0,  563,    0,    0,
      552,  552,  552,  552,  552,  552,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  564,  553,  553,  553,  553,
      553,  553,  556,  563,  556,  556,  556,  556,  556,  556,
      556,  556,  556,    0,    0,    0,    0,    0,    0,    0,
        0,  564,  553,  553,  553,  553,  553,  553,  555,    0,

      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  558,  565,  558,  558,
      558,  558,  558,  558,  558,  558,  558,    0,    0,    0,
        0,    0,    0,    0,  568,  569,  555,  555,  555,  555,
      555,  555,  557,  565,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      568,  569,  570,  571,  575,  576,  577,  578,  579,  580,
      582,  583,  584,  585,  586,    0,  602,    0,    0,    0,
      557,  557,  557,  557,  557,  557,    0,    0,  570,  571,
      575,  576,  577,  578,  579,  580,  582,  583,  584,  585,

      586,  592,  602,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  593,
      603,  593,  593,  593,  593,  593,  593,  593,  593,  593,
        0,    0,    0,    0,    0,    0,    0,    0,  605,  592,
      592,  592,  592,  592,  592,  594,  603,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  595,  605,  595,  595,  595,  595,  595,
      595,  595,  595,  595,    0,    0,  609,    0,    0,    0,
        0,    0,    0,  594,  594,  594,  594,  594,  594,  596,
        0,  596,  596,  596,  596,  596,  596,  596,  596,  596,

      596,  598,  609,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  600,
        0,  600,  600,  600,  600,  600,  600,  600,  600,  600,
        0,    0,    0,    0,    0,    0,  611,  612,  613,  598,
      598,  598,  598,  598,  598,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  614,  599,  599,  599,  599,  599,
      599,  607,  611,  612,  613,  615,  616,  607,  618,  619,
      620,  622,  623,    0,  637,    0,    0,    0,    0,    0,
      614,  599,  599,  599,  599,  599,  599,  607,    0,    0,
        0,  615,  616,  607,  618,  619,  620,  622,  623,  627,

      637,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  629,    0,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  631,
        0,  631,  631,  631,  631,  631,  631,  631,  631,  631,
        0,    0,    0,    0,    0,    0,  639,    0,    0,  629,
      629,  629,  629,  629,  629,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  640,  630,  630,  630,  630,  630,
      630,  633,  639,  633,  633,  633,  633,  633,  633,  633,
      633,  633,    0,    0,    0,    0,    0,    0,    0,    0,
      640,  630,  630,  630,  630,  630,  630,  632,    0,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  635,  641,  635,  635,  635,
      635,  635,  635,  635,  635,  635,    0,    0,    0,    0,
        0,    0,    0,  643,  644,  632,  632,  632,  632,  632,
      632,  634,  641,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  643,
      644,  645,  646,  647,  648,  649,  650,  652,  658,  666,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  634,
      634,  634,  634,  634,  634,    0,    0,  645,  646,  647,
      648,  649,  650,  652,  657,  666,  657,  657,  657,  657,

      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  660,  667,  660,  660,  660,  660,  660,  660,
      660,  660,  660,    0,    0,    0,    0,    0,    0,    0,
        0,  669,  657,  657,  657,  657,  657,  657,  659,  667,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  661,  669,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,    0,    0,
        0,    0,    0,    0,    0,  670,  659,  659,  659,  659,
      659,  659,  663,    0,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      665,  670,  665,  665,  665,  665,  665,  665,  665,  665,
      665,    0,    0,    0,    0,    0,  671,  672,  673,  674,
      663,  663,  663,  663,  663,  663,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  675,  664,  664,  664,  664,
      664,  664,  671,  672,  673,  674,  676,  678,  679,  685,
      694,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  675,  664,  664,  664,  664,  664,  664,  695,    0,
        0,    0,  676,  678,  679,  687,  694,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  689,  695,  689,  689,  689,  689,  689,

      689,  689,  689,  689,    0,    0,    0,    0,    0,    0,
      699,    0,    0,  687,  687,  687,  687,  687,  687,  688,
      688,  688,  688,  688,  688,  688,  688,  688,  700,  688,
      688,  688,  688,  688,  688,  691,  699,  691,  691,  691,
      691,  691,  691,  691,  691,  691,    0,    0,    0,    0,
        0,    0,    0,    0,  700,  688,  688,  688,  688,  688,
      688,  690,    0,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  693,
      701,  693,  693,  693,  693,  693,  693,  693,  693,  693,
        0,    0,    0,    0,    0,    0,    0,  702,  703,  690,

      690,  690,  690,  690,  690,  692,  701,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
      692,  692,  692,  702,  703,  704,  706,  713,  721,  713,
      713,  713,  713,  713,  713,  713,  713,  713,    0,    0,
        0,    0,    0,  692,  692,  692,  692,  692,  692,    0,
        0,  704,  706,  712,  721,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  715,  722,  715,  715,  715,  715,  715,  715,  715,
      715,  715,  727,    0,    0,    0,    0,    0,    0,    0,
      728,  712,  712,  712,  712,  712,  712,  714,  722,  714,

      714,  714,  714,  714,  714,  714,  714,  714,  727,  714,
      714,  714,  714,  714,  714,  716,  728,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,    0,    0,    0,
        0,    0,    0,    0,  730,  714,  714,  714,  714,  714,
      714,  718,    0,  718,  718,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  720,
      730,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      731,  732,  733,  734,    0,  747,    0,    0,    0,  718,
      718,  718,  718,  718,  718,  743,    0,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  731,  732,  733,  734,

      740,  747,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  742,    0,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  748,  742,  742,  742,  742,  742,  742,
      745,  753,  745,  745,  745,  745,  745,  745,  745,  745,
      745,    0,    0,    0,    0,    0,    0,    0,  755,  748,
      742,  742,  742,  742,  742,  742,  744,  753,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  755,  758,  759,  765,  769,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  770,    0,
        0,    0,    0,    0,  744,  744,  744,  744,  744,  744,

        0,  758,  759,  764,  769,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  770,  764,  764,  764,  764,  764,
      764,  766,  775,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  778,  786,  788,  789,  794,  795,  796,
      802,  764,  764,  764,  764,  764,  764,  783,  775,  783,
      783,  783,  783,  783,  783,  783,  783,  783,    0,  778,
      786,  788,  789,  794,  795,  796,  802,  829,  829,  829,
      829,  830,  830,  830,  830,  831,  831,  831,  831,  832,
        0,  832,  832,  833,  833,  833,  833,  834,    0,  834,
      834,  835,  835,  837,  837,  838,  838,  839,  839,  840,

      840,  841,  841,  842,  842,  843,  843,  844,  844,  845,
      845,  846,  846,  847,  847,  848,  848,  849,  849,  850,
      850,  851,  851,  852,  852,  853,  853,  854,  854,  855,
      855,  856,  856,  857,  857,  858,  858,  859,  859,  860,
      860,  861,  861,  862,  862,  863,  863,  864,  864,  865,
      865,  866,  866,  867,  867,  868,  868,  869,  869,  870,
      870,  871,  871,  872,  872,  874,  874,  875,  875,  876,
      876,  878,  878,  879,  879,  880,  880,  883,  883,  884,
      884,  885,  885,  887,  887,  888,  888,  891,  891,  892,
      892,  893,  893,  894,  894,  895,  895,  897,  897,  898,

      898,  899,  899,  900,  900,  901,  901,  903,  903,  904,
      904,  905,  905,  907,  907,  909,  909,  910,  910,  911,
      911,  913,  913,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828

    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[97] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "ClntParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)

  using namespace std;

namespace std {
  unsigned ComBeg; //line, in which comment begins
  unsigned LftCnt; //how many signs : on the left side of :: sign was interpreted
  unsigned RgtCnt; //the same as above, but on the right side of ::
  char Address[16]; //address, which is analizying right now
  char AddrPart[16];
  unsigned intpos,pos;
  yy_ClntParser_stype yylval;
}

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 829 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3924 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return ClntParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return ClntParser::NO_CONFIG_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_KEYWORD_;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ClntParser::STRING_KEYWORD_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return ClntParser::DUID_KEYWORD_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ClntParser::HEX_KEYWORD_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return ClntParser::ADDRESS_LIST_KEYWORD_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return ClntParser::NAME_; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return ClntParser::IA_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return ClntParser::TA_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ClntParser::IAID_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return ClntParser::STATELESS_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ClntParser::LOGLEVEL_; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ClntParser::LOGMODE_; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return ClntParser::LOGNAME_; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ClntParser::LOGCOLORS_; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return ClntParser::WORKDIR_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ClntParser::SCRIPT_; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ClntParser::PREF_TIME_; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ClntParser::VALID_TIME_; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ClntParser::REMOTE_AUTOCONF_; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ClntParser::T1_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ClntParser::T2_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ClntParser::OPTION_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ClntParser::DNS_SERVER_;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ClntParser::DOMAIN_;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ClntParser::NTP_SERVER_;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ClntParser::TIME_ZONE_;}
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ClntParser::SIP_SERVER_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ClntParser::SIP_DOMAIN_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ClntParser::FQDN_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return ClntParser::FQDN_S_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return ClntParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return ClntParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return ClntParser::NIS_SERVER_; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return ClntParser::NIS_DOMAIN_; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return ClntParser::NISP_SERVER_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return ClntParser::NISP_DOMAIN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return ClntParser::LIFETIME_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return ClntParser::ROUTING_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ClntParser::REJECT_SERVERS_;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return ClntParser::PREFERRED_SERVERS_;}
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return ClntParser::RAPID_COMMIT_;}
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return ClntParser::RECONFIGURE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return ClntParser::UNICAST_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return ClntParser::STRICT_RFC_NO_ROUTING_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ClntParser::PD_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return ClntParser::PREFIX_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LL_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_LLT_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return ClntParser::DUID_TYPE_EN_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return ClntParser::VENDOR_SPEC_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return ClntParser::ANON_INF_REQUEST_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return ClntParser::INSIST_MODE_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return ClntParser::INACTIVE_MODE_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return ClntParser::AUTH_ENABLED_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return ClntParser::AUTH_ACCEPT_METHODS_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return ClntParser::DIGEST_NONE_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return ClntParser::DIGEST_PLAIN_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return ClntParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return ClntParser::SKIP_CONFIRM_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return ClntParser::AFTR_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return ClntParser::DOWNLINK_PREFIX_IFACES_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return ClntParser::EXPERIMENTAL_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return ClntParser::ADDR_PARAMS_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
;
	YY_BREAK
case 78:
YY_RULE_SETUP
;
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
BEGIN(INITIAL);
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
    { YYABORT; }
}
	YY_BREAK
    //IPv6 address - various forms

case 82:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    if(!inet_pton6(yytext,yylval.addrval)) {
        Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
        { YYABORT; }
    } else {
        return ClntParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
         ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return ClntParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
         ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return ClntParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return ClntParser::STRING_;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    // DUID in 0x00010203 format
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
        yytext[1]='0'; //if odd than no-meaning zero at the beginning
        len = strlen(yytext)-1;
        ptr = yytext+1;
    } else {
        len = strlen(yytext)-2;
        ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
        yylval.duidval.duid[i>>1]<<=4;
        if (!isxdigit(ptr[i])) {
             Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
             { YYABORT; }
        }
        if (isalpha(ptr[i])) {
            yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
        } else {
            yylval.duidval.duid[i>>1]|=ptr[i]-'0';
        }
   }
   return ClntParser::DUID_;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
{
   // DUID in 00:01:02:03 format
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
        x = (toupper(*pos)-'A' + 10);
      else
        x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
        x += (toupper(*(pos+1))-'A' + 10);
      else
        x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return ClntParser::DUID_;
}
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%10x",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Hex number parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::HEXNUMBER_;
}
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    if(!sscanf(yytext,"%10u",(unsigned int*)&(yylval.ival))) {
        Log(Crit) << "Integer parsing [" << yytext << "] failed." << LogEnd;
        { YYABORT; }
    }
    return ClntParser::INTNUMBER_;
}
	YY_BREAK
case 95:
YY_RULE_SETUP
{return yytext[0];}
	YY_BREAK
case 96:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 829 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 829 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 828);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

