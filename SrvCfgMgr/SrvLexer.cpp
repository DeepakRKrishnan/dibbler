#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 133
#define YY_END_OF_BUFFER 134
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1057] =
    {   0,
        1,    1,    0,    0,    0,    0,  134,  132,    2,    1,
        1,  132,  114,  132,  132,  131,  131,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  118,  118,  133,    1,    1,    1,    0,  126,
      114,    0,  126,  116,  115,  131,    0,    0,  130,    0,
      123,   97,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  111,  127,  127,   99,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,   17,   18,  127,  127,  127,  127,  127,  127,  127,
      127,  117,  115,  131,    0,    0,    0,  122,  128,  121,
      121,  127,  127,  127,  127,  127,  127,   98,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
       91,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  110,  131,    0,    0,    0,    0,  120,  120,

        0,  121,    0,  121,  127,  127,  127,   67,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  105,  127,  127,
      127,   31,  127,  127,   47,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,    0,  127,
      127,  127,  127,  127,  127,   24,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  112,  127,  127,  127,  127,  131,    0,  129,
        0,    0,    0,  120,    0,  120,    0,  121,  121,  121,
      121,  127,  127,  127,  127,  127,  104,  127,  127,  127,
        4,  127,  127,  127,  127,  127,  127,  127,  113,  127,

       94,  127,  127,    3,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,    0,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,    7,  127,
       46,  127,  127,   25,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,    0,    0,    0,    0,
        0,  120,  120,  120,  120,    0,  121,  121,  121,    0,
      121,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,   30,  127,  127,  127,  127,  127,   39,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,    0,    0,  127,  127,

      127,   37,  127,  127,  127,  127,   35,  127,  127,  127,
       63,   92,  127,  127,  127,  108,   45,  127,  127,  127,
      127,  127,  127,  127,    0,    0,    0,    0,  120,  120,
      120,    0,  120,    0,    0,  121,  121,  121,  121,  127,
      127,   34,  127,  127,  127,  127,  127,  127,  127,    0,
      127,  127,  107,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,    0,    0,  127,  127,  127,
      127,  127,   61,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,   22,  127,  127,  127,  129,    0,

        0,    0,    0,    0,  120,  120,  120,  120,    0,  121,
      121,  121,    0,  121,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,    0,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,   80,
      127,  127,  127,   48,  127,   57,  127,  127,  127,   12,
       10,   96,  127,   44,    0,    0,  127,  127,  127,   59,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,    5,  127,  127,  127,   14,    0,    0,    0,    0,
      120,  120,  120,    0,  120,  125,  121,  121,  121,  121,
      127,  127,  127,  127,  127,   93,  127,  127,  127,  127,

      127,  127,    0,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,   82,  127,  127,  127,  127,
      127,  127,  127,  127,   11,   66,    0,    0,  127,  127,
      127,   60,  127,  127,  127,  127,  127,   32,  127,  127,
        6,  106,   41,  127,  127,    0,    0,    0,    0,  124,
      120,  120,  120,  120,  121,  121,  121,    0,  121,  127,
      127,  127,  127,  127,  127,  127,  127,  127,   58,  127,
        0,  127,  127,  127,  127,  127,  127,  127,  127,   38,
      127,  127,   36,  127,  127,  127,  127,  127,  127,  127,
       33,   13,    0,    0,   54,   53,   40,  127,   23,  127,

      127,  127,   43,   42,  127,  127,  129,    0,    0,  120,
      120,  120,    0,  120,  121,  121,  121,  121,  127,   15,
      127,   65,  127,  127,  127,   74,  127,  127,    0,  127,
      127,  127,  127,  127,  127,   77,  127,  127,  127,   84,
       86,   88,   90,  127,  127,  127,   56,   55,  127,  127,
      127,  127,  127,   62,    0,    0,    0,    0,  120,  120,
      120,  120,  121,  121,  121,    0,  121,  127,  127,  109,
       76,  127,  127,  127,    0,   95,  127,  127,  127,   52,
      127,   78,   64,  127,  127,  127,    8,  127,  127,   26,
      127,  127,    0,    0,    0,  120,  120,  120,    0,  120,

      121,  121,  121,  121,  127,  127,   75,  127,  127,    0,
      127,  127,   51,  127,  127,  127,  127,   68,  127,  127,
      127,  127,  127,  129,    0,    0,    0,  120,  120,  120,
      120,  121,  121,  121,    0,  121,  127,  127,  127,  127,
        0,  127,  127,  127,  127,  127,  127,  127,  127,  127,
       16,   21,    0,    0,  119,  122,  120,  120,  120,    0,
      120,  121,  121,  121,  121,  127,  127,  127,   28,    0,
        0,  127,  127,  127,   79,  127,  127,   27,  127,  127,
      127,    0,    0,  119,    0,  120,  120,  120,  120,  120,
      121,  121,  121,    0,  121,  127,  127,  127,    0,    0,

       29,  127,  127,   81,  127,  127,  127,  127,  127,  127,
      127,  129,  119,  122,  120,    0,  120,  120,  120,  120,
      121,  121,  121,   69,  127,  127,  127,  127,    0,    0,
      127,  127,  127,  127,  127,  127,   50,  127,   20,  127,
        0,  119,  120,  120,  120,  120,  121,  121,  121,  127,
      127,  127,  127,  127,    0,    0,  127,  127,   83,   85,
       87,   89,    9,   19,    0,  120,  120,    0,  120,  120,
      121,   49,  127,  127,  127,  127,    0,    0,  127,  127,
      129,  120,  120,  121,  127,  127,  127,  127,    0,    0,
        0,  127,  127,  127,    0,  120,  120,    0,  127,  127,

      127,  127,    0,    0,    0,  100,  127,  127,  127,  100,
      119,  120,  120,   70,  127,  127,  127,    0,  102,    0,
      127,  102,  127,  119,  120,  120,    0,  127,  127,   73,
        0,  101,  127,  101,    0,  120,  120,  127,   71,  103,
      103,    0,  120,  120,    0,   72,  129,  120,  120,    0,
      120,  120,    0,  120,  120,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1147] =
    {   0,
        0,    0, 1152, 1151,    0,    0, 1157, 6030, 6030,   73,
       75, 1148,    0, 1142,   72,   72,   34, 1103, 1099,  136,
      186,  233,  280,   71,  208,  338,   66,  236,   38,   89,
      223,  240,  340,   72,  275,  373,  418,  398,   68,  251,
      180,  333, 6030, 1079, 6030,  111,  137,  213, 1077, 6030,
        0, 1062, 1034, 6030,    0,  476,  964,  464, 6030,    0,
      521, 6030,   60,  564,  188,  192,  182,  183,  279,  387,
      336,  193,  240,  397,  337,  263,  274,  389,  278,  390,
      474,  555,  335,  543,  578,  579,  580,  582,  611,  384,
      607,  597,  559,  613,  595,  381,  599,  603,  394,  499,

      630,  631,  640,  654,  429,  647,  652,  632,  653,  684,
      668,  442,  481,  685,  691,  662,  689,  676,  699,  698,
      706, 6030,    0,  764,  958,  539,  955,  809,    0,  854,
      783,  897,  698,  689,  700,  889,  890,  687,  898,  886,
      709,  893,  913,  762,  894,  701,  930,  833,  796,  938,
      941,  928,  929,  945,  934,  953,  962,  968,  949,  959,
      743,  981,  982,  980,  984,  987,  978, 1024, 1017,  986,
     1014, 1002, 1016, 1023, 1034, 1015, 1026, 1030, 1045, 1039,
     1051, 1066, 1054, 1069, 1070, 1076, 1088, 1091, 1082, 1073,
     1103, 1107,  814, 1165,  834,  922,  921,  918, 1212,  874,

     1184, 1257, 1300, 1231, 1343,  906, 1278, 1067, 1332, 1104,
     1144, 1165, 1295, 1333, 1217, 1342, 1330, 1085, 1336, 1337,
     1376, 1100, 1343, 1381, 1372, 1383, 1347, 1375, 1386, 1261,
     1384, 1382, 1388, 1378, 1424, 1431, 1433, 1419,  929, 1428,
     1397, 1435, 1434, 1438, 1436, 1125, 1465, 1480, 1458, 1467,
     1469, 1486, 1477, 1490, 1492, 1521, 1499, 1488, 1501, 1523,
     1517, 1539, 1199, 1535, 1537, 1532, 1544, 1276,  910,  909,
      880,  879, 1602, 1613, 1656, 1632, 1675, 1701, 1720, 1746,
     1765,  878, 1529, 1536, 1540, 1745, 1374, 1758, 1533, 1634,
     1688, 1744, 1763, 1765, 1747, 1778, 1768, 1779, 1447, 1783,

     1487, 1814, 1803, 1815, 1797, 1808, 1813, 1812, 1816, 1825,
     1818, 1836, 1837, 1854, 1699, 1848, 1848, 1853, 1865, 1866,
     1859, 1884, 1867, 1877, 1898, 1896, 1889, 1882, 1542, 1904,
     1592, 1901, 1906, 1617, 1917, 1918, 1929, 1923, 1913, 1919,
     1953, 1936, 1950, 1968, 1954, 1957,  877,  876,  875,  874,
     2015, 2028, 2047, 2073, 2092, 2056, 2118,  864, 2130, 2173,
     2149, 1981, 2072, 2135, 2152, 2176, 2174, 2185, 2187, 2165,
     2172, 2257, 2173, 2170, 2216, 2168, 2206, 1635, 2234, 2224,
     2239, 2244, 2241, 2245, 2246, 2249, 2258, 2251, 2261, 2268,
     2278, 2283, 2288, 2298, 2282, 2295, 1812, 1884, 2299, 2293,

     2300, 1952, 2303, 2310, 2320, 2334, 1970, 2348, 2341, 2347,
     2015, 2060, 2340, 2338, 2349, 2175, 2328, 2351, 2345, 2368,
     2353, 2372, 2376, 2382,  835,  834,  823, 2440, 2451,  822,
     2463, 2506, 2482, 2525, 2551, 2562, 2581, 2607, 2626, 2628,
     2607, 2484, 2393, 2605, 2621, 2611, 2640, 2624, 2643, 2354,
     2652, 2641, 2405, 2657, 2493, 2687, 2658, 2655, 2671, 2692,
     2688, 2693, 2695, 2705, 2707, 2694, 2725, 2716, 2710, 2727,
     2738, 2739, 2741, 2732, 2745, 2450, 2507, 2754, 2743, 2746,
     2759, 2762, 2541, 2791, 2779, 2756, 2786, 2790, 2795, 2792,
     2798, 2806, 2809, 2815, 2549, 2814, 2813, 2823,  820,  819,

      817,  790, 2881, 2892, 2903, 2922, 2948, 2967, 2931, 2993,
      789, 3005, 3048, 3024, 3026, 3034, 3042, 2947, 3046, 3047,
     3038, 3066, 3062, 3043, 3074, 3077, 2576, 3087, 3090, 3097,
     3083, 3101, 3094, 3095, 3093, 3114, 3125, 3128, 3134, 2777,
     3159, 3132, 3136, 2845, 3138, 2890, 3157, 3142, 3150, 2935,
     3045, 3145, 3149, 3146, 3173, 3154, 3178, 3186, 3190, 3156,
     3193, 3203, 3202, 3205, 3195, 3198, 3208, 3209, 3227, 3220,
     3236, 3199, 3242, 3245, 3238, 3232,  788,  787,  786, 3303,
     3314,  785, 3326, 3369, 3345, 3354, 3414, 3388, 3459, 3433,
     3367, 3447, 3455, 3356, 3458, 3239, 3457, 3241, 3456, 3475,

     3477, 3452, 3250, 3480, 3488, 3496, 3498, 3499, 3510, 3502,
     3520, 3507, 3509, 3453, 3513, 3401, 3558, 3550, 3541, 3565,
     3545, 3572, 3549, 3544, 3543, 3547, 3560, 3567, 3559, 3556,
     3557, 3555, 3595, 3603, 3594, 3596, 3601, 3564, 3599, 3600,
     3593, 3602, 3604, 3624, 3632,  751,  750,  742,  741, 3690,
     3701, 3720, 3746, 3765, 3791,  738, 3803, 3846, 3822, 3607,
     3832, 3617, 3611, 3835, 3824, 3745, 3842, 3841, 3654, 3847,
     3705, 3845, 3839, 3866, 3878, 3699, 3888, 3890, 3884, 3876,
     3897, 3899, 3880, 3908, 3907, 3912, 3918, 3920, 3893, 3895,
     3891, 3901, 3922, 3925, 3924, 3926, 3928, 3942, 3929, 3940,

     3947, 3959, 3932, 3936, 3964, 3967,  736,  687,  685, 4025,
      681, 4037, 4080, 4007, 4125, 4056, 4170, 4099, 4165, 3939,
     4162, 3945, 4059, 4164, 4112, 3960, 4016, 4174, 4047, 4161,
     4169, 4172, 4173, 4171, 4163, 4093, 4201, 4211, 4221, 4203,
     4205, 4206, 4207, 4224, 4226, 4236, 6030, 6030, 4238, 4225,
     4215, 4253, 4254, 4217,  677,  636,  620,  590, 4314, 4151,
     4359, 4333, 4378,  589, 4404, 4447, 4423, 4222, 4407, 4256,
     4267, 4441, 4442, 4459, 4278, 4312, 4450, 4440, 4445, 4346,
     4446, 4357, 4443, 4478, 4493, 4490, 4481, 4491, 4492, 4479,
     4483, 4488,  588,  587,  579, 4553,  578, 4565, 4608, 4584,

     4653, 4627, 4698, 4672, 4484, 4658, 4486, 4688, 4689,  588,
     4606, 4686, 4489, 4710, 4703, 4694, 4697, 4495, 4698, 4700,
     4738, 4730, 4743,  575,  546,  545,  544, 4803, 4822, 4848,
     4867, 4893,  543, 4905, 4948, 4924, 4926, 4735, 4733, 4943,
     4952, 4734, 4963, 4595, 4847, 4962, 4964, 4742, 4951, 4741,
     4544, 4587,  542,  541,  540,    0, 5024,  539, 5036, 5079,
     5055, 5124, 5098, 5169, 5143, 4944, 5137, 4835, 4640, 4740,
     4750, 5171, 4949, 4947, 4782, 5066, 5158, 4790, 5174, 5167,
     5172,  502,  501,  500,  499,  498, 5234, 5253, 5279, 5298,
     5324,  497, 5336,    0, 5355, 5161, 5166, 5356, 4929, 4994,

     5015, 5077, 5339, 5058, 5363, 5213, 5232, 5170, 5351, 5354,
     5341,  495,  494, 6030,  493,    0, 5421,  492, 5433, 5452,
     5478, 5497,    0, 5169, 5357, 5475, 5496, 5509, 5175, 5239,
     5352, 5495, 5385, 5412, 5492, 5266, 5231, 5481, 5278, 5498,
      491,  489,  488,  486, 5569, 5588, 5614,  452,    0, 5360,
     5511, 5567, 5499, 5556, 5377,    0, 5571, 5641, 5420, 5479,
     5480, 5490, 5500, 5547,  449,  447,  444,    0, 5641, 6030,
        0, 5568, 5623, 5600, 5655, 5638,    0, 5641, 5679, 5662,
      441,  431,  414, 6030, 5635, 5652, 5659, 5669, 5682, 5647,
     5674, 5690, 5696, 5675,  413,  402,  398,    0, 5683, 5703,

     5704, 5679, 5704, 5693, 5688, 6030, 5726, 5714, 5718, 5711,
      396,  394,  393, 5715, 5727, 5728, 5735, 5720, 6030, 5741,
     5739, 5731, 5756,  364,  363,  353,    0, 5749, 5759, 5748,
     5770, 6030, 5783, 5755,  349,  325,  314, 5769, 5766, 6030,
     5770,    0,  310,  309,    0, 5771,  307,  305,  303,  276,
      267,  260,    0,  254,  220, 6030, 5853, 5857, 5861, 5865,
     5869, 5873, 5875,  233, 5877, 5879, 5881, 5883, 5885, 5887,
     5889, 5891, 5893, 5895, 5899, 5901, 5903, 5905, 5907, 5909,
     5911, 5913, 5915, 5917, 5919, 5921, 5923, 5925, 5927, 5929,
     5931, 5933, 5935, 5937, 5939, 5941, 5943, 5945, 5947, 5949,

     5951,  232, 5953, 5955, 5957,  231, 5959, 5961, 5963,  230,
      228, 5965, 5967, 5969,  226, 5973, 5977, 5979, 5981,  223,
      219, 5985, 5989, 5991, 5993, 5995, 5997, 5999,  217, 6001,
     6003, 6005, 6007, 6009,  145, 6011, 6013, 6015,  131, 6017,
      117, 6019, 6021, 6023,   80, 6025
    } ;

static yyconst flex_int16_t yy_def[1147] =
    {   0,
     1056,    1, 1057, 1057, 1058, 1058, 1056, 1056, 1056, 1056,
     1056, 1059, 1060, 1061, 1056, 1056,   16, 1056, 1056, 1056,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1056, 1056, 1056, 1056, 1056, 1056, 1059, 1056,
     1060, 1061, 1056, 1056, 1062, 1056, 1063,   56, 1056, 1064,
     1056, 1056,   26,   26,   64,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1056, 1062, 1056, 1065,  124, 1066, 1056, 1064, 1056,
      130,   64,  132,  132,   26,   26,   26,   26,   26,   26,
      132,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1056,  194, 1067, 1068, 1069, 1056,  199,

     1056, 1056, 1056,  202,  132,  205,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1056,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  195,  195, 1068,
     1070, 1071, 1056, 1056, 1056,  274, 1056, 1056,  278, 1056,
      280,  205,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1056,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1072, 1056, 1073, 1074,
     1056, 1056,  352, 1056,  354, 1056, 1056, 1056, 1056, 1056,
      359,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1075,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1056, 1056,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1076, 1077, 1078, 1056, 1056, 1056,
     1056, 1056,  431, 1056, 1056, 1056,  436, 1056,  438,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1056,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1056, 1056,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1073, 1056,

     1079, 1080, 1056, 1056, 1056,  505, 1056,  507, 1056, 1056,
     1056, 1056, 1056,  512,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1056,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1056, 1056,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1081, 1082, 1083, 1056,
     1056, 1056, 1056, 1056,  583, 1056, 1056,  587, 1056,  589,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26, 1056,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1056, 1056,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1084, 1056, 1085, 1086, 1056,
     1056,  651, 1056,  653, 1056, 1056, 1056, 1056,  657,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1056,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1056, 1056,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26, 1087, 1088, 1089, 1056,
     1056, 1056, 1056,  712, 1056,  715, 1056,  717,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1056,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1056, 1056,   26,   26,
       26,   26,   26,   26, 1090, 1056, 1091, 1092, 1056,  759,
     1056,  761, 1056, 1056, 1056, 1056,  765,   26,   26,   26,
       26,   26,   26,   26, 1056,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1093, 1094, 1095, 1056, 1056, 1056, 1056,  798,

     1056,  801, 1056,  803,   26,   26,   26,   26,   26, 1056,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1096, 1056, 1097, 1098, 1056,  828, 1056,
      830, 1056, 1056, 1056, 1056,  834,   26,   26,   26,   26,
     1056,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1099, 1100, 1101, 1102, 1056, 1056, 1056, 1056,
      859, 1056,  862, 1056,  864,   26,   26,   26,   26, 1056,
     1056,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1103, 1056, 1104, 1056, 1105, 1056,  887, 1056,  889,
     1056, 1056, 1056, 1106,  893,   26,   26,   26, 1056, 1056,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1107, 1108, 1056, 1109, 1110, 1056, 1056, 1056,  919,
     1056,  921, 1111,   26,   26,   26,   26,   26, 1056, 1056,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1112, 1056, 1113, 1114, 1056,  945, 1056, 1056, 1115,   26,
       26,   26,   26,   26, 1056, 1116,   26, 1117,   26,   26,
       26,   26,   26,   26, 1118, 1056, 1119, 1120, 1056, 1056,
     1121,   26,   26,   26,   26,   26, 1122, 1056, 1123,   26,
     1124, 1125, 1126, 1056,   26,   26,   26,   26, 1056, 1056,
     1056,   26,   26,   26, 1127, 1056, 1128, 1129,   26,   26,

       26,   26, 1056, 1056, 1056, 1056,   26,   26,   26,   26,
     1130, 1131, 1132,   26,   26,   26,   26, 1056, 1056, 1056,
       26,   26,   26, 1133, 1056, 1134, 1135,   26,   26,   26,
     1056, 1056,   26,   26, 1136, 1137, 1138,   26,   26, 1056,
       26, 1139, 1056, 1140, 1141,   26, 1056, 1142, 1143, 1136,
     1056, 1144, 1145, 1146, 1056,    0, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056
    } ;

static yyconst flex_int16_t yy_nxt[6106] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   29,
       36,   37,   38,   39,   40,   41,   29,   42,   29,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   29,   36,   37,   38,   39,
       40,   41,   29,   42,   29,   46,   47,   48,   47,   54,
     1056,   63,  890,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   64,   58,   58,   58,   58,   58,

       58,   87,   59,   63,  117,   63, 1056,   63,   63,   63,
       98,   63,   99,   46,   47,   63,   90,   82,   60, 1049,
       64,   58,   58,   58,   58,   58,   58,   87,   59,   63,
      117,   63,   63, 1047,   63,   63,   98,   63,   99,   48,
       47,   63,   90,   82,   60,   63,   63, 1037,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   57,   63,   64,
       64,   65,   66,   64,   67,   63,   68,   63,   63,   63,
       69,   63,   70,   63,   63,   63,   63,   63,   63,   71,
       63,   63,   63,   63,   63,   64,   64,   65,   66,   64,
       67,   63,   68,   63,   63,   63,   69,   63,   70,   63,

       63,   63,   63,   63,   63,   71,   63,   63,   63,   63,
       63,   64,   64,  133,   64,   46,   47,  120,  134, 1013,
       63,  984,   63,   63,  135,  983,   63,  140,  971,   72,
      949,   83,  944,  923,  886,  129,   63,   64,   64,  133,
       64, 1053,   63,  120,  134,   63,   63,   84,   63,   63,
      135,   85,   63,  140,   91,   72,   73,   83,   64,   64,
       92,   64,   63,   93,   88,  141,   63,   74,   63,   63,
       75,   63,   89,   84,  118, 1053,   63,   85,  119,   63,
       91, 1053,   73,   63,   64,   64,   92,   64, 1045,   93,
       88,  141,   63,   74,   63,   63,   75, 1056,   89,  145,

      118,  100,   63,   64,  119,   63,   76,   77,  136,   63,
      146,   78,  101,  137,   63,  102,   79,   80,   63,  148,
       63,   63,   63,   81, 1053,  145, 1045,  100, 1050,   64,
     1045, 1027,   76,   77,  136, 1045,  146,   78,  101,  137,
       63,  102,   79,   80,   63,  148, 1027,   63,   63,   81,
       63,   63,   63,   63,   63,   63,   63,   63,   63, 1056,
      121,   63,   63,   63,   63,   63,   63,   94,   63,  152,
      914,   95,   63,  144, 1027,   63,   63,   96,  139,   63,
       63,   86,   97,   63,  998, 1035,  121,   63,   63,   63,
       63,   63,   63,   94,   63,  152,  103,   95,   63,  144,

      104,   63,   63,   96,  139,   63,   63,   86,   97,   63,
      105,  112,  113,  138, 1027,  998,   63,  885,  147,  998,
      142,  114,  103,  968,   63,  149,  104,   63,  143,  115,
       63,  161,   63,   63,  856,  998,  105,   63,  116,  138,
       63,   63,   63,  106,  147,  107,  142,  114,  108,  109,
       63,  149,  968,   63,  143,  115,   63,  161,   63,   63,
      110,  111,  995,   63,  116,  968,   63,   63,  916,  106,
      827,  107,  178,  894,  108,  109,  126,  126,  126,  126,
      126,  126,  126,  126,  126,   63,  110,  111,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  125,  178,  126,

      126,  126,  126,  126,  126,  150,   59,  968,  171,  916,
      885,   63,  128,  860,  916,  885,  941,   63,  835,  916,
      914,  885,  827,  758,   63,  126,  126,  126,  126,  126,
      126,  150,   59,  130,  130,  130,  130,  130,  130,  130,
      130,  130,   63,   63,  131,  131,  131,  131,  131,  131,
       63,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      799,  885,  827,  128,  766,  856,  827,  758,   63,  153,
      131,  131,  131,  131,  131,  131,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  125,   63,  132,  132,  132,
      132,  132,  132,  151,   68,  153,  853,  841,   63,  713,

      827,  165,   63,  156,  154,  157,  155,   63,  758,  649,
      658,  128,   63,  132,  132,  132,  132,  132,  132,  151,
       68,   63,   63,   63,   63,   63,  164,  165,   63,  156,
      154,  157,  155,   63,  158,  162,  168,  169,   63,  159,
       63,  758,   63,  163,  166,  170,   63,   63,   63,   63,
       63,   63,  164,  160,   63,  181,   63,  649,  173,  167,
      158,  162,  168,  169,   63,  159,   63,  172,   63,  163,
      166,  170,   63,   63,   63,   63,   63,  180,  174,  160,
       63,  181,   63,   63,  173,  167,  175,  179,  176,  177,
       63,  182,  185,  172,  186,   63,   63,   63,  128,   63,

       63,   63,  584,  180,  174,  188,  758,  183,  649,   63,
      190,   63,  175,  179,  176,  177,   63,  182,  185,   63,
      189,   63,   63,   63,  184,  206,  187,   63,   63,  207,
       63,  188,   63,  183,   63,  191,  190,   63,  192,  213,
      208,   63,   63,   63,   63,   63,  189,  193,  218,   63,
      184,  206,  187,   63,   63,  207,   63,  755,   63,  513,
       63,  191,  128,  649,  192,  213,  208,   63,   63,   63,
       63,  502,  502,  193,  218,   63,  194,  194,  194,  194,
      194,  194,  194,  194,  194,   57,   63,  195,  195,  195,
      195,  195,  195, 1056,   59,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  216,   63,  432,  649,  502,  128,
      360,  128,   63,  195,  195,  195,  195,  195,  195,  221,
       59,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      216,   63,  200,  200,  200,  200,  200,  200,  502,   63,
      350,  577,  220,  275,  502,  221,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  350,  350,   63,  200,  200,
      200,  200,  200,  200,  201,   63,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  203,   63,  204,  204,  204,
      204,  204,  204,   63, 1056,  203,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  128,  350,  198,  128, 1056,

      350,  198,   63,  204,  204,  204,  204,  204,  204,  205,
      205,  205,  205,  205,  205,  205,  205,  205,   57,  212,
      205,  205,  205,  205,  205,  205,  209,  210,  211,   63,
      347, 1056,   63,   63,  214,  217,   63,   63,  317,  128,
      215,   63,  198,  198,  283,  212,  205,  205,  205,  205,
      205,  205,  209,  210,  211,   63,   63,  219,   63,   63,
      214,  217,   63,   63,  222,  225,  215,   63,  223,  224,
      283,   63,   63,   63,  226,  227,  198,   63,  228,  128,
      231,   63,   63,  219,   63,  128,  232,  229,   63,  235,
      222,  225,   63,  230,  223,  224,   63,   63,   63,   63,

      226,  227,   63,   63,  228,   63,  231,   63,  233,  236,
       63,   63,  232,  229,   63,  234,  237,  242,   63,  230,
      238,   63,   63,   63,   63,   63,  241,   63,   63,   63,
       63,   63,  239,  240,  233,  236,  246,   63,  250,  243,
       52,  234,  237,  242,  247,   63,  238,   63,  244,   63,
       63,   63,  245,   63,  248,   63,   63,   63,   63,   63,
       63,  249,  246,  251,  250,  243,   63,   63,   53,   63,
      247,   63,  252,   63,  244,  256,  253,   63,  245,  254,
      248,   50,   63,   63,   63,   63,   63,  249,   63,  251,
      122,  255,   63,   63,   63,   63,  257,   63,  252,   63,

      258,  261,  253,   63,  265,  254,  259,  264,   63,   63,
       63,  260,   63,   63,   63,  262,   63,  255,  263,   63,
       63,   62,  257,   63,   61,   63,  258,  261,   63,  266,
      265,   63,  259,  264,   63,   63,   63,  260,   63,   63,
      267,  262,   63,   63,  263,   63,   63,   63,   53,  287,
       63,   63,   50,  288,   63,  266, 1056,   63,   44,   44,
       63, 1056, 1056, 1056, 1056, 1056,  267, 1056,   63,   63,
     1056, 1056,   63,   63,  289,  287,   63,  268,  268,  268,
      268,  268,  268,  268,  268,  268,   57,   63,  269,  269,
      269,  269,  269,  269,   63,   59,  277,  277,  277,  277,

      277,  277,  277,  277,  277, 1056, 1056, 1056,   63, 1056,
     1056, 1056, 1056,   63,  269,  269,  269,  269,  269,  269,
     1056,   59,  273, 1056,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  275,   63,  276,  276,  276,  276,  276,
      276, 1056,   63,  279,  279,  279,  279,  279,  279,  279,
      279,  279, 1056,  292, 1056, 1056, 1056, 1056, 1056, 1056,
       63,  276,  276,  276,  276,  276,  276,  201,   63,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  203,  292,
      279,  279,  279,  279,  279,  279,   63,  284,  268,  268,
      268,  268,  268,  268,  268,  268,  268, 1056, 1056, 1056,

     1056, 1056, 1056,  305,   63,  285,  279,  279,  279,  279,
      279,  279,  280,  280,  280,  280,  280,  280,  280,  280,
      280,   63,  290,  281,  281,  281,  281,  281,  281,  305,
       63,  285, 1056, 1056, 1056, 1056, 1056, 1056,   63,  294,
     1056, 1056, 1056, 1056, 1056, 1056, 1056,   63,  290,  281,
      281,  281,  281,  281,  281,  282,  282,  282,  282,  282,
      282,  282,  282,  282,   63,  293,  282,  282,  282,  282,
      282,  282,  286,   63,  291,   63,   63,  295,  296,   63,
       63,  300, 1056,  298,  303,   63,   63,  309,  302, 1056,
       63,  293,  282,  282,  282,  282,  282,  282,  286,   63,

      291,   63,   63,  295,  296,   63,   63,  297,  299,  298,
      301,   63,   63,  304,  302,   63,   63,   63,   63,   63,
      306,   63,  307, 1056,   63,   63,   63,   63,  316,   63,
      308,   63, 1056,  297,  299, 1056,  301, 1056,  320,  304,
       63,   63, 1056,   63,   63,   63,  306,   63,  307,  310,
       63,   63,   63,   63,  318,   63,  308,   63,  311,  312,
      313,  314,   63,  315,  320,  323,   63,   63,  322,  319,
     1056,   63,  321,  324,   63,  310,   63,   63,   63,   63,
      318,   63, 1056,  328,  311,  312,  313,  314,   63,  315,
       63,  323,  325,   63,  322,  319,  326,   63,  321,  324,

       63,   63,   63,   63,   63,   63,  327,   63,   63,  328,
       63,  330,   63,  331,  329,  332,   63,  333,  325,  334,
       63, 1056,  326,   63,  338, 1056,  337,   63,  339,   63,
       63,   63,  327,   63,   63,   63,   63,  330,   63,  331,
      329,  332,   63,  333,   63,  334,   63,  335,  342,   63,
      338,  341,  337,  346,  339,   63,   63,   63,  343,   63,
       63,   63,  336,  344,   63,  340,   63,  369,   63,  345,
       63,  362,   63,  335,  363,   63,   63,  341,   63,   63,
       63,  364,   63,   63,  343,   63,   63,   63,  336,  344,
       63,  340,   63,  369, 1056,  345, 1056,  362,   63, 1056,

      363,   63,   63, 1056,   63,   63,   63,  364,   63,   63,
     1056,   63, 1056,   63,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  273, 1056,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  275,   63,  353,  353,  353,  353,
      353,  353, 1056,  370,  353,  353,  353,  353,  353,  353,
      353,  353,  353, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
       63,   63,  353,  353,  353,  353,  353,  353,  354,  354,
      354,  354,  354,  354,  354,  354,  354,   63,   63,  355,
      355,  355,  355,  355,  355,  356,   63,  277,  277,  277,
      277,  277,  277,  277,  277,  277, 1056,  371, 1056, 1056,

     1056, 1056, 1056,   63,   63,  355,  355,  355,  355,  355,
      355,  201, 1056,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  203,  395,  358,  358,  358,  358,  358,  358,
     1056,   63,  358,  358,  358,  358,  358,  358,  358,  358,
      358, 1056,   63, 1056, 1056, 1056, 1056, 1056, 1056,  395,
      358,  358,  358,  358,  358,  358,  201,   63,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  360,   63,  361,
      361,  361,  361,  361,  361, 1056,  365,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  372,   63,   63,  376,
       63,  366,  367,  368,  373,  361,  361,  361,  361,  361,

      361,   63,  365,  374,  378,  377,   63,  375,   63,  380,
      379,   63,  372,   63,   63,  376,   63,  366,  367,  368,
      373,   63,   63,  381,  384, 1056,   63,   63,  385,  374,
      378,  377,   63,  375,   63,  380,  379,   63,  382,  386,
       63,  387, 1056,  388,  383,  391,   63,   63,   63,  476,
      389,   63,   63, 1056,  385,   63,   63,   63,   63,   63,
      393,   63,  390,  394,  382,  386,   63,  387,   63,  388,
      383,  391,   63,  392,  397,  476,  389,   63,  396,   63,
       63,   63,   63,   63,   63,   63,  393,   63,  390,  398,
      399,   63,  400,  401,   63,  402,   63,   63,  408,  392,

      397, 1056,   63,  404,  396,   63,   63,  403,   63,   63,
       63,  477, 1056, 1056,  405,  398,  399,   63,  400,  401,
       63,  402,   63,   63,  409,   63, 1056,   63,   63,  404,
     1056,  410,   63,  403,   63,   63,   63,  477,  406,   63,
      405,   63,  407,  411,   63,  414,   63,   63,  412,   63,
      409,   63,  416,   63,  413,  417,   63,  410,   63,  418,
       63,   63,   63,  415,  406,   63,   63,   63,  407,  411,
       63,  414,   63,   63,  412,   63,  419,  422,  416,   63,
      413,  417,   63,  424,  420,  418,   63,   63,   63,  415,
      440,  421,   63,   63,  423,   63,   63,   63,   63, 1056,

       63, 1056,  419, 1056, 1056,   63, 1056, 1056, 1056,  424,
      420,   63, 1056,   63, 1056, 1056, 1056,  421, 1056,   63,
      423,   63,   63,   63,   63,  428,   63,  351,  351,  351,
      351,  351,  351,  351,  351,  351, 1056,   63,  273,   63,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  275,
       63,  430,  430,  430,  430,  430,  430, 1056,   63,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  430,  430,  430,
      430,  430,  430,  273,   63,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  432,  441,  433,  433,  433,  433,

      433,  433, 1056,   63,  433,  433,  433,  433,  433,  433,
      433,  433,  433, 1056, 1056,   63, 1056, 1056, 1056, 1056,
     1056,  441,  433,  433,  433,  433,  433,  433,  201,   63,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  203,
      201,   63,  436,  436,  436,  436,  436,  436,  436,  436,
      436,  360, 1056,  437,  437,  437,  437,  437,  437, 1056,
     1056,  437,  437,  437,  437,  437,  437,  437,  437,  437,
     1056, 1056, 1056, 1056, 1056, 1056,  442,  456,   63,  437,
      437,  437,  437,  437,  437,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  443,   63,  439,  439,  439,  439,

      439,  439,  442,  444,   63,  445,  448,  449,   63,  453,
      454,   63,  446,   63,  447,   63,   63,   63,   63,   63,
      443,   63,  439,  439,  439,  439,  439,  439,   63,  444,
       63,  445,  448,  449,   63,  453,  454,   63,  446,   63,
      447,   63,   63,   63,   63,   63,  457,  455, 1056,   63,
      459, 1056, 1056, 1056,   63, 1056,   63,  450,  450,   63,
      450,  450,  450,  450,  450,  450,  451,   63,  450,  458,
      461,  462,  457,  455,  460,   63,  459,   63,  450,  450,
      463,  466,   63, 1056,   63,   63,  467,   63,   63,   63,
      464,  465,   63,   63,   63,  458,  461,  462,  468, 1056,

      460,   63,  469,   63,   63, 1056,  463,  466,   63,  471,
       63,   63,  467,   63,   63,   63,  464,  465,   63,  474,
       63,   63,  470,  472,  468,   63,   63,   63,  469,  473,
       63,   63,  475,  479,  478,  471,   63,   63,   63,  482,
      480,   63,   63,   63,  481,  474,   63,   63,  470,  472,
      487,   63,   63,   63,  483,  473,  488,   63,  475,  479,
      478,  484,   63,   63,   63,  482,  480,   63,   63,   63,
      481,   63,   63,  486,  485,  489,  491,   63,  490,   63,
      483,   63,  492,   63,   63,  497,  493,  484,   63,   63,
       63,   63,   63, 1056,   63,  495,   63,   63,  527,  486,

      485,  489,  491,   63,  490,  494,  496,   63,  492,   63,
       63,   63,  493,  498,   63,   63,   63,   63,   63,   63,
       63,  495,   63,  520,  527,   63, 1056, 1056, 1056, 1056,
     1056,  494,  496, 1056, 1056, 1056,   63,   63, 1056,  498,
     1056,   63, 1056, 1056, 1056,   63, 1056, 1056,   63,  520,
     1056,   63,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  273,   63,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  275,  273,   63,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  432,  555,  506,  506,  506,  506,
      506,  506, 1056,  519,  506,  506,  506,  506,  506,  506,

      506,  506,  506, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056,  555,  506,  506,  506,  506,  506,  506,  507,  507,
      507,  507,  507,  507,  507,  507,  507,   63,  532,  508,
      508,  508,  508,  508,  508,  509,   63,  434,  434,  434,
      434,  434,  434,  434,  434,  434, 1056,  556, 1056, 1056,
     1056, 1056, 1056,   63,  532,  508,  508,  508,  508,  508,
      508,  201,   63,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  201,  556,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  360,   63,  511,  511,  511,  511,  511,
      511, 1056,   63,  511,  511,  511,  511,  511,  511,  511,

      511,  511, 1056,  603, 1056, 1056, 1056, 1056, 1056, 1056,
       63,  511,  511,  511,  511,  511,  511,  201,   63,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  513,  603,
      514,  514,  514,  514,  514,  514, 1056, 1056,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  518,   63,  522,
       63, 1056,  521,  523,   63,  525,  514,  514,  514,  514,
      514,  514,  515,  524,   63,  516,  526,   63, 1056, 1056,
     1056,  517, 1056,  518,   63,  522,   63,  528,  521,  523,
       63,  525,  537,   63,   63,  530,   63,  529,  515,  524,
       63,  516,  526,   63,  531,   63,  530,  517,   63, 1056,

       63,   63,  536,  528, 1056,  540, 1056,  538,  537,   63,
       63,  530,   63,  529,   63, 1056,  541,  533,  542,  545,
      531,   63,  530,  534,   63,  535,   63,   63,  536,  539,
       63,   63,  543,  538,  544,   63,   63,   63,   63, 1056,
       63,  547,  541,  533,  542,  545, 1056,  548,   63,  534,
       63,  535,  546,   63,  549,  539,   63,   63,  543,   63,
      544,   63,   63,   63,   63,  550,  551,  547,   63,  552,
       63, 1056,  553,  548,   63,   63,   63,  557,  546,   63,
      549,   63,   63,  554,   63,   63,   63,  558,   63,   63,
      559,  550,  551,  565,   63,  552,   63,   63,  553,   63,

      560,   63,   63,  557,  561,   63,  564,   63,   63,  554,
       63,  566,   63,  558,   63,   63,  559,  562,  568,  565,
       63,  567,   63,   63, 1056,   63,  560,  563,   63,   63,
      561,   63,  564,   63,   63,   63,  569,  566,   63,  570,
     1056,   63,  571,  562,  568,  574,   63,  567,   63,   63,
      572,  573,   63,  563,  575,   63,   63,   63,   63,   63,
       63,   63,  569,  576,   63,  570,   63,   63,  571, 1056,
     1056,  574, 1056, 1056, 1056,   63,  572,  573,   63, 1056,
      575, 1056,   63,   63,   63, 1056, 1056, 1056,   63,  576,
     1056,  580,   63,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  273, 1056,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  273,   63,  581,  581,  581,  581,  581,
      581,  581,  581,  581,  432, 1056,  582,  582,  582,  582,
      582,  582, 1056,   63,  582,  582,  582,  582,  582,  582,
      582,  582,  582,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  582,  582,  582,  582,  582,  582,  273,   63,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  584,
      594,  585,  585,  585,  585,  585,  585, 1056,   63,  585,
      585,  585,  585,  585,  585,  585,  585,  585, 1056, 1056,
       63, 1056, 1056, 1056, 1056, 1056,  594,  585,  585,  585,

      585,  585,  585,  201,   63,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  360,  201,   63,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  513, 1056,  588,  588,
      588,  588,  588,  588, 1056, 1056,  588,  588,  588,  588,
      588,  588,  588,  588,  588, 1056, 1056,  597, 1056, 1056,
     1056, 1056, 1056,  591,  588,  588,  588,  588,  588,  588,
      589,  589,  589,  589,  589,  589,  589,  589,  589,   63,
      592,  590,  590,  590,  590,  590,  590,   63,  593,  591,
      595,   63,  596, 1056,  600,   63,   63, 1056,   63,   63,
       63, 1056,  599,  598, 1056,   63,  592,  590,  590,  590,

      590,  590,  590,   63,  593,   63,  595,   63,  596,   63,
      600,   63,   63,  605,   63,   63,   63,   63,  599,  598,
       63,  604,  601,  602,  606,  607,   63,  611,  608,  609,
       63,   63,  610,   63, 1056,   63,   63,   63,   63,  605,
       63,  612, 1056,   63,   63,  621,   63,  604,  601,  602,
      606,  607,   63,  611,  608,  609,   63,   63,  610,   63,
      615,  613,   63,   63,   63,  622,   63,  612,   63,  614,
       63,   63,  616,  617,  618,   63,  619,   63,  620,   63,
      623,   63,  624,   63,  625,   63,  615,  613,   63,   63,
      626,  622,   63,   63,   63,  614,  627,   63,  628,   63,

       63,   63,   63,   63,  620,   63,  623,   63,  624,  629,
      625,   63,  633,  630,   63,   63,  626,  631,   63,   63,
     1056,   63,  627,  632,  628,   63,   63,  634,   63,   63,
      636,  635,  637,   63,  638,  629,   63, 1056,   63,  630,
      639,   63,   63,  631, 1056,   63,   63,   63,   63,  632,
     1056,   63,   63,  634,  640,   63,  636,  635,  637,   63,
      638,  641,   63,   63,   63,  642,  639,   63,   63,  643,
       63,   63,   63,  644,   63,   63,  645,   63,   63,   63,
      640,   63,   63,  666,   63,   63,  671,  641,   63,   63,
     1056,  642, 1056, 1056, 1056,  643,   63, 1056, 1056,  644,

     1056,   63,  645, 1056, 1056,   63, 1056,   63,   63,  666,
       63,   63,  671, 1056,   63,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  273, 1056,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  432,  273, 1056,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  584, 1056,  652,
      652,  652,  652,  652,  652, 1056, 1056,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  652,  652,  652,  652,  652,
      652,  653,  653,  653,  653,  653,  653,  653,  653,  653,
      660,  663,  654,  654,  654,  654,  654,  654, 1056,   63,

      656,  656,  656,  656,  656,  656,  656,  656,  656, 1056,
       63, 1056, 1056, 1056, 1056, 1056,  660,  663,  654,  654,
      654,  654,  654,  654,  201,   63,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  513,   63,  656,  656,  656,
      656,  656,  656, 1056,   63,  659,  659,  659,  659,  659,
      659,  659,  659,  659, 1056, 1056, 1056, 1056, 1056, 1056,
     1056,  670,  682,  656,  656,  656,  656,  656,  656,  201,
       63,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      658,  661,  659,  659,  659,  659,  659,  659,  662,  664,
       63,  665, 1056,  667, 1056,   63,   63, 1056,   63,   63,

       63,   63,  668,  672,  669, 1056, 1056,  661,  659,  659,
      659,  659,  659,  659,  662,  664,   63,  665,   63,  667,
       63,   63,   63,   63,   63,   63,   63,   63,  668,  672,
      669,   63,  674,  677,  673,  675,  676, 1056,  678,   63,
      683,   63,   63,  679,   63,   63,   63,  680, 1056,   63,
       63,  681,   63,   63,  687, 1056,   63,   63,  674,  677,
      673,  675,  676,   63,  678,   63,  683,   63,   63,  679,
      686,   63,  684,  680,  688,  685,   63,  681,   63,   63,
      689,  690,   63,  691,   63,  692,   63,   63,   63,   63,
       63,  693,   63,   63,  694,  695,  696,  697,   63,   63,

       63,   63,   63,  700, 1056, 1056,  689,   63,   63,  691,
       63,  692,   63,   63,   63,   63,   63,  693,   63,   63,
      694,  695,  696,  697,   63,   63,   63,   63,   63,  698,
      699,  701,  702,   63,   63,  703,   63,   63,   63,   63,
      704,   63,   63,   63,   63,   63,   63,   63,  719, 1056,
       63,  705,  722,  721,   63,  698,  699,  701,  702,  706,
       63,  703,   63,   63,   63,   63,  704,   63,   63,   63,
       63,   63,   63,   63,  719,   63,   63,  705,  722,  721,
       63, 1056, 1056, 1056, 1056,  706,   63, 1056, 1056, 1056,
     1056, 1056, 1056,   63, 1056, 1056, 1056,   63, 1056, 1056,

     1056,   63,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  273, 1056,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  584,   63,  711,  711,  711,  711,  711,  711,
     1056,  729,  711,  711,  711,  711,  711,  711,  711,  711,
      711, 1056,  734, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
      711,  711,  711,  711,  711,  711,  273,  729,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  713,  734,  714,
      714,  714,  714,  714,  714, 1056,  725,  714,  714,  714,
      714,  714,  714,  714,  714,  714, 1056, 1056,   63, 1056,
     1056, 1056, 1056, 1056, 1056,  714,  714,  714,  714,  714,

      714,  201,  725,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  513,  201,   63,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  658, 1056,  716,  716,  716,  716,
      716,  716, 1056, 1056,  716,  716,  716,  716,  716,  716,
      716,  716,  716, 1056, 1056, 1056, 1056, 1056,  731, 1056,
     1056,  724,  716,  716,  716,  716,  716,  716,  717,  717,
      717,  717,  717,  717,  717,  717,  717,   63,  726,  718,
      718,  718,  718,  718,  718,   63,  723,  724,   63,  720,
      727,  728,   63, 1056,   63,   63,  730, 1056,   63, 1056,
       63, 1056,  732,   63,  726,  718,  718,  718,  718,  718,

      718,   63,  723,  733,   63,  720,  727,  728,   63,   63,
       63,   63,  730,  735,   63,  737,   63,  736,  732,   63,
      738,   63,  739,   63,  740,  741,  746,   63,  742,  733,
      745,   63,  743,   63,   63,   63,   63, 1056,   63,  735,
       63,  737,   63,  736,   63,   63,  738,   63,  739,   63,
       63,   63,  746,   63,  744,   63,  745,   63,  747,   63,
       63,   63,   63,   63,   63,  748,   63,   63,   63,   63,
       63,   63,   63,  749,  750,   63,   63,   63,  751,   63,
      744,   63,   63,   63,  747,   63,  752,   63,   63,   63,
       63,  748,  754,   63, 1056,   63, 1056,   63,   63,  749,

      750,   63,   63,   63,  751,   63,  753,   63,   63,   63,
       63,   63,  752, 1056,   63, 1056,   63, 1056,  754,  760,
      760,  760,  760,  760,  760,  760,  760,  760,   63,   63,
     1056, 1056,  753,   63, 1056,  273,   63,  504,  504,  504,
      504,  504,  504,  504,  504,  504,  584,  273, 1056,  759,
      759,  759,  759,  759,  759,  759,  759,  759,  713,  773,
      760,  760,  760,  760,  760,  760, 1056, 1056,  764,  764,
      764,  764,  764,  764,  764,  764,  764, 1056, 1056, 1056,
     1056, 1056, 1056, 1056,  775,  773,  760,  760,  760,  760,
      760,  760,  761,  761,  761,  761,  761,  761,  761,  761,

      761,  770,   63,  762,  762,  762,  762,  762,  762, 1056,
      775,  767,  767,  767,  767,  767,  767,  767,  767,  767,
     1056, 1056, 1056, 1056, 1056, 1056, 1056,  770,   63,  762,
      762,  762,  762,  762,  762,  201,   63,  763,  763,  763,
      763,  763,  763,  763,  763,  763,  658,  772,  764,  764,
      764,  764,  764,  764, 1056,   63, 1056, 1056, 1056, 1056,
     1056, 1056,   63,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  781,  772,  764,  764,  764,  764,  764,  764,
      201,   63,  765,  765,  765,  765,  765,  765,  765,  765,
      765,  766,  768,  767,  767,  767,  767,  767,  767,  769,

      771,  774,  776,  777,   63,   63,   63,   63,   63,  778,
      779, 1056,   63,  780,   63,   63,   63,   63,  768,  767,
      767,  767,  767,  767,  767,  769,  771,  774,  776,  777,
       63,   63,   63,   63,   63,  778,  779,  782,   63,  780,
       63,   63,   63,   63,   63,  783,   63,  784,   63,   63,
       63,  785,  786, 1056,   63, 1056,  789,  790,   63, 1056,
       63,  805,  787,  782,   63,   63,  788,   63,   63,   63,
       63,  783,   63,  784,   63,   63,   63,  785,  786,   63,
       63,   63,  789,  790,   63,  792,   63,  805,  787,  791,
       63,   63,  788,   63,   63,   63,   63,   63, 1056,   63,

     1056, 1056, 1056, 1056, 1056,   63, 1056,   63, 1056, 1056,
       63,  792, 1056, 1056, 1056,  791, 1056, 1056,  810, 1056,
     1056, 1056,   63,   63,  273,   63,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  713,   63,  797,  797,  797,
      797,  797,  797, 1056,  810,  800,  800,  800,  800,  800,
      800,  800,  800,  800, 1056,   63, 1056, 1056, 1056, 1056,
     1056, 1056, 1056,  797,  797,  797,  797,  797,  797,  273,
     1056,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      799,   63,  800,  800,  800,  800,  800,  800,  201,   63,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  658,

       63, 1056, 1056, 1056, 1056, 1056, 1056, 1056,  800,  800,
      800,  800,  800,  800,  201,   63,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  766,   63,  802,  802,  802,
      802,  802,  802, 1056, 1056,  802,  802,  802,  802,  802,
      802,  802,  802,  802, 1056, 1056, 1056, 1056, 1056, 1056,
       63, 1056,  806,  802,  802,  802,  802,  802,  802,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  807,  808,
      804,  804,  804,  804,  804,  804,   63,  811,  806,  813,
      812,  814,  809,   63,   63,   63,   63,  815,   63,   63,
      819, 1056, 1056,   63,  807,  808,  804,  804,  804,  804,

      804,  804,   63,  811,  816,  813,  812,  814,  809,   63,
       63,   63,   63,  815,   63,   63,  817,  818,  820,   63,
      821,   63,   63,  823,   63,  822,   63,  837,   63,   63,
      816,   63,   63,   63,   63,   63,   63, 1056,   63, 1056,
     1056, 1056,  817,  818,  820, 1056,  821,   63,   63,  823,
       63,  822,   63,  837, 1056,   63, 1056,   63,   63,   63,
       63,   63,   63,  273,   63,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  713,  273, 1056,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  799,   63,  829,  829,
      829,  829,  829,  829, 1056, 1056,  829,  829,  829,  829,

      829,  829,  829,  829,  829, 1056, 1056, 1056, 1056, 1056,
     1056, 1056,  875,   63,  829,  829,  829,  829,  829,  829,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  842,
       63,  831,  831,  831,  831,  831,  831, 1056,   63,  833,
      833,  833,  833,  833,  833,  833,  833,  833, 1056,   63,
     1056, 1056, 1056, 1056, 1056,  842,   63,  831,  831,  831,
      831,  831,  831,  201,   63,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  766,   63,  833,  833,  833,  833,
      833,  833, 1056,   63,  836,  836,  836,  836,  836,  836,
      836,  836,  836, 1056,  838,  843, 1056, 1056, 1056, 1056,

     1056,   63,  833,  833,  833,  833,  833,  833,  201,   63,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  835,
      838,  836,  836,  836,  836,  836,  836,   63,  839,   63,
      840,   63,   63,  845,  846,  848,  844,   63,  847, 1056,
       63,   63,  849,   63,  867, 1056,   63,  836,  836,  836,
      836,  836,  836,   63,  839,   63,  840,   63,   63,  845,
      846,  848,  844,   63,  847,  850,   63,   63,  849,   63,
      852,  851,   63,   63,  899,  872,   63,   63,   63,   63,
      868,   63,  879,  881,   63,   63,   63, 1056,  900, 1056,
     1056,  850, 1056, 1056, 1056, 1056,  852,  851, 1056,   63,

      899,  872,   63,   63,   63, 1056,  868,   63,  879,  881,
       63,   63,   63,  273,  900,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  799,   63,  858,  858,  858,  858,
      858,  858, 1056,   63,  858,  858,  858,  858,  858,  858,
      858,  858,  858, 1056,  898, 1056, 1056, 1056, 1056, 1056,
     1056,   63,  858,  858,  858,  858,  858,  858,  273,   63,
      859,  859,  859,  859,  859,  859,  859,  859,  859,  860,
      876,  861,  861,  861,  861,  861,  861, 1056,   63,  861,
      861,  861,  861,  861,  861,  861,  861,  861, 1056, 1056,
       63, 1056, 1056, 1056, 1056, 1056,  876,  861,  861,  861,

      861,  861,  861,  201,   63,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  766,  201,   63,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  835, 1056,  863,  863,
      863,  863,  863,  863, 1056, 1056,  863,  863,  863,  863,
      863,  863,  863,  863,  863, 1056, 1056, 1056, 1056, 1056,
     1056, 1056,  929,  866,  863,  863,  863,  863,  863,  863,
      864,  864,  864,  864,  864,  864,  864,  864,  864,   63,
      869,  865,  865,  865,  865,  865,  865,  870,  929,  866,
     1056, 1056,  880,  902,  896,  903,   63,   63,  873,  877,
       63,  878,   63,  871,   63,   63,  869,  865,  865,  865,

      865,  865,  865,  870,  874,   63,   63,   63,  880,  902,
      896,  903,   63,   63,  873,  877,   63,  878,   63,  871,
       63,  930, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
      874,   63,   63,   63,  273, 1056,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  799,  273,  930,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  860,   63,  888,
      888,  888,  888,  888,  888, 1056, 1056,  888,  888,  888,
      888,  888,  888,  888,  888,  888, 1056, 1056, 1056,  904,
      905,  906, 1056,  907,   63,  888,  888,  888,  888,  888,
      888,  889,  889,  889,  889,  889,  889,  889,  889,  889,

      931,   63,  890,  890,  890,  890,  890,  890, 1056,   63,
      892,  892,  892,  892,  892,  892,  892,  892,  892, 1056,
       63, 1056, 1056, 1056, 1056, 1056,  931,   63,  890,  890,
      890,  890,  890,  890,  201,   63,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  835,   63,  892,  892,  892,
      892,  892,  892, 1056, 1056,  895,  895,  895,  895,  895,
      895,  895,  895,  895, 1056,  897, 1056, 1056, 1056, 1056,
     1056, 1056, 1056,  892,  892,  892,  892,  892,  892,  201,
       63,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      894,  897,  895,  895,  895,  895,  895,  895,  901,  908,

      909,   63,  910,  911,   63,  925,   63, 1056,  924,   63,
       63,  937,   63,   63,   63,   63,  955,   63,  895,  895,
      895,  895,  895,  895,  901,  908,  909,   63,  910,  911,
       63,  925, 1056,  935,  924,   63,   63,  937,   63,   63,
       63,   63,  955,   63,  273,  936,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  860,   63,  918,  918,  918,
      918,  918,  918, 1056,  956,  918,  918,  918,  918,  918,
      918,  918,  918,  918,   63,   63, 1056, 1056, 1056, 1056,
      962, 1056,   63,  918,  918,  918,  918,  918,  918,  273,
      956,  919,  919,  919,  919,  919,  919,  919,  919,  919,

       63,   63,  920,  920,  920,  920,  920,  920, 1056,   63,
      920,  920,  920,  920,  920,  920,  920,  920,  920, 1056,
     1056,   63, 1056, 1056, 1056, 1056, 1056, 1056,  920,  920,
      920,  920,  920,  920,  201,   63,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  835,  201,   63,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  894, 1056,  922,
      922,  922,  922,  922,  922, 1056,  932,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  940,  933,  938,  926,
      934,  939,   63,  950,   63,  922,  922,  922,  922,  922,
      922,  927,  932,  957,   63,   63,  972,   63,  928,   63,

       63,  959,  940,   63,  938,  926,   63,  939,   63,  950,
       63, 1056, 1056, 1056, 1056, 1056, 1056,  927,  977,  957,
       63,   63,  972,   63,  928,   63,   63, 1056,   63,   63,
      960,  273,   63,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  860,  273,  977,  945,  945,  945,  945,  945,
      945,  945,  945,  945,   63,   63,  946,  946,  946,  946,
      946,  946, 1056,   63,  946,  946,  946,  946,  946,  946,
      946,  946,  946, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056,   63,  946,  946,  946,  946,  946,  946,  201,   63,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  894,

      951,  948,  948,  948,  948,  948,  948, 1056,  961,  948,
      948,  948,  948,  948,  948,  948,  948,  948,   63,  952,
      958,  963,   63,   63,   63,  964,  951,  948,  948,  948,
      948,  948,  948,   63,  953,   63,  973,  975,   63,   63,
      954,   63,   63,   63,   63,  952,  958,  963,   63,   63,
       63,  964,   63, 1056,   63, 1056, 1056, 1056, 1056,   63,
      953,   63,  973,  975,   63,   63,  954,   63,   63,   63,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,   63,  273,
       63,  969,  969,  969,  969,  969,  969,  969,  969,  969,
       63,  976,  970,  970,  970,  970,  970,  970, 1056,   63,

      970,  970,  970,  970,  970,  970,  970,  970,  970,  986,
       63,   63,  979,  974,   63, 1056,   63,  976,  970,  970,
      970,  970,  970,  970,  201,   63,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  894,   63,   63,  979,  974,
       63,  978,  978,   63,  978,  978,  978,  978,  978,  978,
      985,  273,  978,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  978,  978,  987,  988,   63,  990,  991,   63,
     1005, 1056, 1056,  999, 1056, 1056,  985, 1000,   63,  989,
      989,   63,  989,  989,  989,  989,  989,  989,  993,  994,
      989,  988,   63,  990,  991,   63, 1005, 1001,   63,  999,

      989,  989,   63, 1000,   63,   63, 1002,   63, 1003, 1004,
     1006, 1010,   63, 1056,  993,  994, 1007, 1008,   63, 1009,
     1056,   63, 1017, 1001,   63, 1014,   63, 1018,   63, 1019,
     1020,   63, 1002,   63, 1003, 1004, 1006, 1010,   63,   63,
     1015, 1016, 1007, 1008,   63, 1009,   63,   63, 1017, 1021,
     1022, 1014,   63, 1018,   63, 1019, 1020,   63,   63,   63,
     1023,   63, 1031, 1028, 1032,   63, 1015, 1016, 1029,   63,
       63,   63,   63,   63,   63, 1021, 1022, 1030,   63, 1034,
       63, 1033,   63,   63,   63, 1038, 1023,   63, 1031, 1028,
     1032,   63,   63, 1040, 1029,   63,   63,   63,   63,   63,

       63, 1039,   63, 1030,   63, 1034, 1041, 1033,   63,   63,
     1046, 1038,   63,   63,   63, 1056, 1056,   63,   63, 1040,
     1056, 1056, 1056, 1056,   63,   63,   63, 1039,   63, 1056,
     1056, 1056, 1041, 1056, 1056,   63, 1046, 1056,   63,   63,
       63, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056,   63,   43,   43,   43,   43,   45,   45,   45,
       45,   49,   49,   49,   49,   51, 1056,   51,   51,   52,
       52,   52,   52,  123, 1056,  123,  123,  127,  127,  196,
      196,  197,  197,  270,  270,  271,  271,  272,  272,  348,
      348,  349,  349,  425,  425,  426,  426,  427,  427,  452,

     1056,  452,  452,  499,  499,  500,  500,  501,  501,  578,
      578,  579,  579,  646,  646,  647,  647,  648,  648,  707,
      707,  708,  708,  709,  709,  578,  578,  756,  756,  757,
      757,  793,  793,  794,  794,  795,  795,  824,  824,  825,
      825,  826,  826,  708,  708,  854,  854,  855,  855,  882,
      882,  883,  883,  884,  884,  912,  912,  913,  913,  915,
      915,  794,  794,  942,  942,  943,  943,  965,  965,  966,
      966,  967,  967,  978, 1056,  978,  978,  980, 1056,  980,
      980,  981,  981,  982,  982,  989, 1056,  989,  989,  992,
     1056,  992,  992,  854,  854,  996,  996,  997,  997, 1011,

     1011, 1012, 1012, 1024, 1024, 1025, 1025, 1026, 1026,  913,
      913, 1036, 1036, 1042, 1042, 1043, 1043, 1044, 1044, 1048,
     1048, 1051, 1051, 1052, 1052, 1054, 1054, 1055, 1055,    7,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056
    } ;

static yyconst flex_int16_t yy_chk[6106] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   29, 1145,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   27,   16,   63,   39,   24,   17,   29,   24,   27,
       34,   39,   34,   46,   46,   34,   30,   24,   16, 1141,
       24,   16,   16,   16,   16,   16,   16,   27,   16,   63,
       39,   24,   30, 1139,   24,   27,   34,   39,   34,   47,
       47,   34,   30,   24,   16,   20,   20, 1135,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   65,   21,   48,   48,   41,   66, 1129,
       21, 1121,   21,   41,   67, 1120,   68,   72, 1115,   21,
     1111,   25, 1110, 1106, 1102, 1064,   72,   21,   21,   65,
       21, 1055,   25,   41,   66,   25,   21,   25,   21,   41,
       67,   25,   68,   72,   31,   21,   22,   25,   22,   22,
       31,   22,   72,   32,   28,   73,   31,   22,   25,   22,
       22,   25,   28,   25,   40, 1054,   22,   25,   40,   28,
       31, 1052,   22,   32,   22,   22,   31,   22, 1051,   32,
       28,   73,   31,   22,   40,   22,   22, 1050,   28,   76,

       40,   35,   22,   23,   40,   28,   23,   23,   69,   32,
       77,   23,   35,   69,   23,   35,   23,   23,   35,   79,
       40,   79,   69,   23, 1049,   76, 1048,   35, 1047,   23,
     1044, 1043,   23,   23,   69, 1037,   77,   23,   35,   69,
       23,   35,   23,   23,   35,   79, 1036,   79,   69,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       42,   26,   26,   26,   26,   26,   26,   33,   26,   83,
     1035,   33,   26,   75, 1026,   26,   42,   33,   71,   71,
       75,   26,   33,   33, 1025, 1024,   42,   26,   26,   26,
       26,   26,   26,   33,   26,   83,   36,   33,   26,   75,

       36,   26,   42,   33,   71,   71,   75,   26,   33,   33,
       36,   38,   38,   70, 1013, 1012,   36, 1011,   78,  997,
       74,   38,   36,  996,   96,   80,   36,   90,   74,   38,
       70,   90,   78,   80,  995,  983,   36,   99,   38,   70,
       74,   38,   36,   37,   78,   37,   74,   38,   37,   37,
       96,   80,  982,   90,   74,   38,   70,   90,   78,   80,
       37,   37,  981,   99,   38,  967,   74,   38,  966,   37,
      965,   37,  105,  948,   37,   37,   58,   58,   58,   58,
       58,   58,   58,   58,   58,  112,   37,   37,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,  105,   56,

       56,   56,   56,   56,   56,   81,   56,  944,  100,  943,
      942,  112,  941,  918,  915,  913,  912,   81,  892,  886,
      885,  884,  883,  882,  113,   56,   56,   56,   56,   56,
       56,   81,   56,   61,   61,   61,   61,   61,   61,   61,
       61,   61,  100,   81,   61,   61,   61,   61,   61,   61,
      113,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      858,  855,  854,  853,  833,  827,  826,  825,  100,   84,
       61,   61,   61,   61,   61,   61,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   84,   64,   64,   64,
       64,   64,   64,   82,   64,   84,  824,  810,   82,  797,

      795,   93,   93,   87,   85,   88,   86,   64,  794,  793,
      764,  758,   84,   64,   64,   64,   64,   64,   64,   82,
       64,   85,   86,   87,   82,   88,   92,   93,   93,   87,
       85,   88,   86,   64,   89,   91,   95,   97,   95,   89,
       92,  757,   97,   91,   94,   98,   98,   85,   86,   87,
       91,   88,   92,   89,   89,  108,   94,  756,  102,   94,
       89,   91,   95,   97,   95,   89,   92,  101,   97,   91,
       94,   98,   98,  101,  102,  108,   91,  107,  103,   89,
       89,  108,   94,  103,  102,   94,  104,  106,  104,  104,
      106,  109,  111,  101,  114,  107,  109,  104,  755,  101,

      102,  108,  711,  107,  103,  116,  709,  110,  708,  103,
      118,  111,  104,  106,  104,  104,  106,  109,  111,  118,
      117,  107,  109,  104,  110,  133,  115,  110,  114,  134,
      138,  116,  117,  110,  115,  119,  118,  111,  120,  141,
      135,  120,  119,  135,  146,  118,  117,  121,  146,  121,
      110,  133,  115,  110,  114,  134,  138,  707,  117,  656,
      115,  119,  649,  648,  120,  141,  135,  120,  119,  135,
      146,  647,  646,  121,  146,  121,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  161,  124,  124,  124,
      124,  124,  124,  131,  124,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  144,  144,  582,  579,  578,  577,
      511,  502,  161,  124,  124,  124,  124,  124,  124,  149,
      124,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      144,  144,  128,  128,  128,  128,  128,  128,  501,  149,
      500,  499,  148,  430,  427,  149,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  426,  425,  193,  128,  128,
      128,  128,  128,  128,  130,  149,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  148,  130,  130,  130,
      130,  130,  130,  193,  200,  358,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  350,  349,  348,  347,  282,

      272,  271,  148,  130,  130,  130,  130,  130,  130,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  140,
      132,  132,  132,  132,  132,  132,  136,  137,  139,  140,
      270,  269,  136,  137,  142,  145,  142,  145,  239,  198,
      143,  139,  197,  196,  206,  140,  132,  132,  132,  132,
      132,  132,  136,  137,  139,  140,  143,  147,  136,  137,
      142,  145,  142,  145,  150,  153,  143,  139,  151,  152,
      206,  152,  153,  147,  154,  155,  127,  155,  156,  125,
      159,  150,  143,  147,  151,   57,  160,  157,  154,  164,
      150,  153,  159,  158,  151,  152,  156,  152,  153,  147,

      154,  155,  160,  155,  156,  157,  159,  150,  162,  165,
      151,  158,  160,  157,  154,  163,  166,  170,  159,  158,
      167,  167,  156,  164,  162,  163,  169,  165,  160,  170,
      166,  157,  168,  168,  162,  165,  172,  158,  176,  171,
       53,  163,  166,  170,  173,  172,  167,  167,  171,  164,
      162,  163,  171,  165,  174,  170,  166,  171,  176,  173,
      169,  175,  172,  177,  176,  171,  174,  168,   52,  177,
      173,  172,  178,  178,  171,  182,  179,  175,  171,  180,
      174,   49,  180,  171,  176,  173,  169,  175,  179,  177,
       44,  181,  174,  168,  181,  177,  183,  183,  178,  178,

      184,  186,  179,  175,  190,  180,  185,  189,  180,  182,
      208,  185,  184,  185,  179,  187,  190,  181,  188,  186,
      181,   19,  183,  183,   18,  189,  184,  186,  218,  191,
      190,  187,  185,  189,  188,  182,  208,  185,  184,  185,
      192,  187,  190,  222,  188,  186,  191,  210,   14,  210,
      192,  189,   12,  211,  218,  191,    7,  187,    4,    3,
      188,    0,    0,    0,    0,    0,  192,    0,  246,  222,
        0,    0,  191,  210,  212,  210,  192,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  211,  194,  194,
      194,  194,  194,  194,  246,  194,  201,  201,  201,  201,

      201,  201,  201,  201,  201,    0,    0,    0,  212,    0,
        0,    0,    0,  211,  194,  194,  194,  194,  194,  194,
        0,  194,  199,    0,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  212,  199,  199,  199,  199,  199,
      199,  204,  263,  204,  204,  204,  204,  204,  204,  204,
      204,  204,    0,  215,    0,    0,    0,    0,    0,    0,
      215,  199,  199,  199,  199,  199,  199,  202,  263,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  215,
      202,  202,  202,  202,  202,  202,  215,  207,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,    0,    0,

        0,    0,    0,  230,  230,  207,  202,  202,  202,  202,
      202,  202,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  207,  213,  203,  203,  203,  203,  203,  203,  230,
      230,  207,    0,    0,    0,    0,    0,    0,  213,  217,
        0,    0,    0,    0,    0,    0,    0,  207,  213,  203,
      203,  203,  203,  203,  203,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  213,  216,  205,  205,  205,  205,
      205,  205,  209,  217,  214,  209,  214,  219,  220,  219,
      220,  225,    0,  223,  228,  216,  223,  234,  227,    0,
      227,  216,  205,  205,  205,  205,  205,  205,  209,  217,

      214,  209,  214,  219,  220,  219,  220,  221,  224,  223,
      226,  216,  223,  229,  227,  225,  227,  287,  228,  221,
      231,  234,  232,    0,  224,  232,  226,  231,  238,  229,
      233,  233,    0,  221,  224,    0,  226,    0,  241,  229,
      241,  225,    0,  287,  228,  221,  231,  234,  232,  235,
      224,  232,  226,  231,  240,  229,  233,  233,  235,  235,
      235,  236,  238,  237,  241,  244,  241,  235,  243,  240,
        0,  240,  242,  245,  236,  235,  237,  243,  242,  245,
      240,  244,    0,  249,  235,  235,  235,  236,  238,  237,
      299,  244,  247,  235,  243,  240,  247,  240,  242,  245,

      236,  249,  237,  243,  242,  245,  248,  244,  247,  249,
      250,  251,  251,  252,  250,  253,  299,  254,  247,  255,
      253,    0,  247,  248,  258,    0,  257,  249,  259,  252,
      301,  258,  248,  254,  247,  255,  250,  251,  251,  252,
      250,  253,  257,  254,  259,  255,  253,  256,  262,  248,
      258,  261,  257,  267,  259,  252,  301,  258,  264,  254,
      261,  255,  256,  265,  256,  260,  260,  289,  257,  266,
      259,  283,  283,  256,  284,  266,  289,  261,  264,  284,
      265,  285,  262,  285,  264,  329,  261,  267,  256,  265,
      256,  260,  260,  289,    0,  266,    0,  283,  283,    0,

      284,  266,  289,    0,  264,  284,  265,  285,  262,  285,
        0,  329,    0,  267,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  274,    0,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  331,  274,  274,  274,  274,
      274,  274,  276,  290,  276,  276,  276,  276,  276,  276,
      276,  276,  276,    0,    0,    0,    0,    0,    0,    0,
      334,  331,  274,  274,  274,  274,  274,  274,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  290,  378,  275,
      275,  275,  275,  275,  275,  277,  334,  277,  277,  277,
      277,  277,  277,  277,  277,  277,    0,  291,    0,    0,

        0,    0,    0,  290,  378,  275,  275,  275,  275,  275,
      275,  278,    0,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  315,  278,  278,  278,  278,  278,  278,
      279,  291,  279,  279,  279,  279,  279,  279,  279,  279,
      279,    0,  315,    0,    0,    0,    0,    0,    0,  315,
      278,  278,  278,  278,  278,  278,  280,  291,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  315,  280,
      280,  280,  280,  280,  280,  281,  286,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  292,  292,  286,  295,
      295,  288,  288,  288,  293,  280,  280,  280,  280,  280,

      280,  288,  286,  294,  297,  296,  293,  294,  294,  300,
      298,  297,  292,  292,  286,  295,  295,  288,  288,  288,
      293,  296,  298,  302,  304,    0,  300,  288,  305,  294,
      297,  296,  293,  294,  294,  300,  298,  297,  303,  306,
      305,  307,    0,  308,  303,  311,  303,  296,  298,  397,
      309,  306,  300,    0,  305,  308,  307,  302,  304,  309,
      313,  311,  310,  314,  303,  306,  305,  307,  310,  308,
      303,  311,  303,  312,  317,  397,  309,  306,  316,  312,
      313,  308,  307,  302,  304,  309,  313,  311,  310,  317,
      318,  316,  319,  320,  310,  321,  318,  314,  327,  312,

      317,    0,  321,  323,  316,  312,  313,  322,  319,  320,
      323,  398,    0,    0,  324,  317,  318,  316,  319,  320,
      324,  321,  318,  314,  328,  328,    0,  322,  321,  323,
        0,  330,  327,  322,  319,  320,  323,  398,  325,  326,
      324,  325,  326,  332,  332,  336,  324,  330,  333,  333,
      328,  328,  338,  322,  335,  339,  339,  330,  327,  340,
      335,  336,  340,  337,  325,  326,  338,  325,  326,  332,
      332,  336,  337,  330,  333,  333,  341,  344,  338,  342,
      335,  339,  339,  346,  342,  340,  335,  336,  340,  337,
      362,  343,  338,  343,  345,  402,  341,  345,  337,    0,

      346,    0,  341,    0,    0,  342,    0,    0,    0,  346,
      342,  344,    0,  407,    0,    0,    0,  343,    0,  343,
      345,  402,  341,  345,  362,  351,  346,  351,  351,  351,
      351,  351,  351,  351,  351,  351,    0,  344,  352,  407,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      362,  352,  352,  352,  352,  352,  352,  353,  411,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  352,  352,  352,
      352,  352,  352,  354,  411,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  363,  354,  354,  354,  354,

      354,  354,  355,  412,  355,  355,  355,  355,  355,  355,
      355,  355,  355,    0,    0,  363,    0,    0,    0,    0,
        0,  363,  354,  354,  354,  354,  354,  354,  357,  412,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      359,  363,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  359,    0,  359,  359,  359,  359,  359,  359,  361,
        0,  361,  361,  361,  361,  361,  361,  361,  361,  361,
        0,    0,    0,    0,    0,    0,  364,  376,  364,  359,
      359,  359,  359,  359,  359,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  365,  365,  360,  360,  360,  360,

      360,  360,  364,  366,  364,  367,  370,  371,  370,  373,
      374,  376,  368,  374,  369,  371,  373,  367,  416,  366,
      365,  365,  360,  360,  360,  360,  360,  360,  368,  366,
      369,  367,  370,  371,  370,  373,  374,  376,  368,  374,
      369,  371,  373,  367,  416,  366,  377,  375,    0,  377,
      380,    0,    0,    0,  368,    0,  369,  372,  372,  375,
      372,  372,  372,  372,  372,  372,  372,  380,  372,  379,
      382,  383,  377,  375,  381,  377,  380,  379,  372,  372,
      384,  387,  381,    0,  383,  375,  388,  382,  384,  385,
      385,  386,  386,  380,  388,  379,  382,  383,  389,    0,

      381,  387,  390,  379,  389,    0,  384,  387,  381,  392,
      383,  390,  388,  382,  384,  385,  385,  386,  386,  395,
      388,  391,  391,  393,  389,  395,  392,  387,  390,  394,
      389,  393,  396,  400,  399,  392,  400,  390,  396,  404,
      401,  394,  399,  401,  403,  395,  403,  391,  391,  393,
      409,  395,  392,  404,  405,  394,  410,  393,  396,  400,
      399,  406,  400,  405,  396,  404,  401,  394,  399,  401,
      403,  417,  403,  408,  406,  413,  415,  406,  414,  404,
      405,  414,  418,  413,  409,  423,  419,  406,  419,  405,
      410,  408,  415,    0,  418,  421,  421,  417,  450,  408,

      406,  413,  415,  406,  414,  420,  422,  414,  418,  413,
      409,  420,  419,  424,  419,  422,  410,  408,  415,  423,
      418,  421,  421,  443,  450,  424,    0,    0,    0,    0,
        0,  420,  422,    0,    0,    0,  443,  420,    0,  424,
        0,  422,    0,    0,    0,  423,    0,    0,  453,  443,
        0,  424,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  429,  443,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  431,  453,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  476,  431,  431,  431,  431,
      431,  431,  433,  442,  433,  433,  433,  433,  433,  433,

      433,  433,  433,    0,    0,    0,    0,    0,    0,    0,
        0,  476,  431,  431,  431,  431,  431,  431,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  442,  455,  432,
      432,  432,  432,  432,  432,  434,  455,  434,  434,  434,
      434,  434,  434,  434,  434,  434,    0,  477,    0,    0,
        0,    0,    0,  442,  455,  432,  432,  432,  432,  432,
      432,  435,  455,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  436,  477,  436,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  483,  436,  436,  436,  436,  436,
      436,  437,  495,  437,  437,  437,  437,  437,  437,  437,

      437,  437,    0,  527,    0,    0,    0,    0,    0,    0,
      483,  436,  436,  436,  436,  436,  436,  438,  495,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  527,
      438,  438,  438,  438,  438,  438,  439,    0,  439,  439,
      439,  439,  439,  439,  439,  439,  439,  441,  444,  445,
      441,    0,  444,  446,  446,  448,  438,  438,  438,  438,
      438,  438,  440,  447,  445,  440,  449,  448,    0,    0,
        0,  440,    0,  441,  444,  445,  441,  451,  444,  446,
      446,  448,  458,  447,  452,  452,  449,  451,  440,  447,
      445,  440,  449,  448,  454,  451,  451,  440,  458,    0,

      454,  457,  457,  451,    0,  461,    0,  459,  458,  447,
      452,  452,  449,  451,  459,    0,  462,  456,  463,  466,
      454,  451,  451,  456,  458,  456,  454,  457,  457,  460,
      456,  461,  464,  459,  465,  460,  462,  466,  463,    0,
      459,  468,  462,  456,  463,  466,    0,  469,  464,  456,
      465,  456,  467,  469,  470,  460,  456,  461,  464,  468,
      465,  460,  462,  466,  463,  471,  472,  468,  467,  473,
      470,    0,  474,  469,  464,  474,  465,  478,  467,  469,
      470,  471,  472,  475,  473,  468,  479,  479,  475,  480,
      480,  471,  472,  486,  467,  473,  470,  478,  474,  486,

      481,  474,  481,  478,  482,  482,  485,  471,  472,  475,
      473,  487,  479,  479,  475,  480,  480,  484,  489,  486,
      540,  488,  485,  478,    0,  486,  481,  484,  481,  487,
      482,  482,  485,  488,  484,  490,  490,  487,  489,  491,
        0,  491,  492,  484,  489,  496,  540,  488,  485,  492,
      493,  494,  493,  484,  497,  487,  497,  496,  494,  488,
      484,  490,  490,  498,  489,  491,  498,  491,  492,    0,
        0,  496,    0,    0,    0,  492,  493,  494,  493,    0,
      497,    0,  497,  496,  494,    0,    0,    0,  544,  498,
        0,  503,  498,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  504,    0,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  505,  544,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,    0,  505,  505,  505,  505,
      505,  505,  506,  546,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  505,  505,  505,  505,  505,  505,  507,  546,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      518,  507,  507,  507,  507,  507,  507,  508,  550,  508,
      508,  508,  508,  508,  508,  508,  508,  508,    0,    0,
      518,    0,    0,    0,    0,    0,  518,  507,  507,  507,

      507,  507,  507,  510,  550,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  512,  518,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,    0,  512,  512,
      512,  512,  512,  512,  514,    0,  514,  514,  514,  514,
      514,  514,  514,  514,  514,    0,    0,  521,    0,    0,
        0,    0,    0,  515,  512,  512,  512,  512,  512,  512,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  515,
      516,  513,  513,  513,  513,  513,  513,  516,  517,  515,
      519,  521,  520,    0,  524,  517,  524,    0,  551,  519,
      520,    0,  523,  522,    0,  515,  516,  513,  513,  513,

      513,  513,  513,  516,  517,  523,  519,  521,  520,  522,
      524,  517,  524,  529,  551,  519,  520,  525,  523,  522,
      526,  528,  525,  526,  530,  531,  531,  535,  532,  533,
      528,  523,  534,  529,    0,  522,  535,  533,  534,  529,
      530,  536,    0,  525,  532,  543,  526,  528,  525,  526,
      530,  531,  531,  535,  532,  533,  528,  536,  534,  529,
      539,  537,  535,  533,  534,  545,  530,  536,  537,  538,
      532,  538,  541,  541,  541,  542,  541,  539,  542,  543,
      547,  545,  548,  536,  549,  548,  539,  537,  552,  554,
      553,  545,  553,  549,  537,  538,  555,  538,  556,  560,

      547,  542,  541,  539,  542,  543,  547,  545,  548,  557,
      549,  548,  562,  558,  552,  554,  553,  559,  553,  549,
        0,  557,  555,  561,  556,  560,  547,  563,  541,  558,
      565,  564,  566,  559,  567,  557,  561,    0,  565,  558,
      568,  566,  572,  559,    0,  563,  562,  557,  564,  561,
        0,  567,  568,  563,  569,  558,  565,  564,  566,  559,
      567,  570,  561,  570,  565,  571,  568,  566,  572,  573,
      569,  563,  562,  574,  564,  576,  575,  567,  568,  571,
      569,  575,  596,  598,  598,  573,  603,  570,  574,  570,
        0,  571,    0,    0,    0,  573,  569,    0,    0,  574,

        0,  576,  575,    0,    0,  571,    0,  575,  596,  598,
      598,  573,  603,    0,  574,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  581,    0,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  581,  583,    0,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,    0,  583,
      583,  583,  583,  583,  583,  585,    0,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  583,  583,  583,  583,  583,
      583,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      591,  594,  584,  584,  584,  584,  584,  584,  588,  594,

      588,  588,  588,  588,  588,  588,  588,  588,  588,    0,
      591,    0,    0,    0,    0,    0,  591,  594,  584,  584,
      584,  584,  584,  584,  587,  594,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  591,  587,  587,  587,
      587,  587,  587,  590,  616,  590,  590,  590,  590,  590,
      590,  590,  590,  590,    0,    0,    0,    0,    0,    0,
        0,  602,  614,  587,  587,  587,  587,  587,  587,  589,
      616,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  592,  589,  589,  589,  589,  589,  589,  593,  595,
      592,  597,    0,  599,    0,  602,  614,    0,  593,  599,

      597,  595,  600,  604,  601,    0,    0,  592,  589,  589,
      589,  589,  589,  589,  593,  595,  592,  597,  600,  599,
      601,  602,  614,  604,  593,  599,  597,  595,  600,  604,
      601,  605,  606,  609,  605,  607,  608,    0,  610,  606,
      615,  607,  608,  611,  600,  610,  601,  612,    0,  604,
      612,  613,  613,  609,  619,    0,  615,  605,  606,  609,
      605,  607,  608,  611,  610,  606,  615,  607,  608,  611,
      618,  610,  617,  612,  620,  617,  612,  613,  613,  609,
      621,  622,  615,  623,  619,  624,  625,  624,  621,  611,
      626,  627,  623,  618,  628,  629,  630,  631,  632,  630,

      631,  617,  629,  635,    0,    0,  621,  638,  620,  623,
      619,  624,  625,  624,  621,  622,  626,  627,  623,  618,
      628,  629,  630,  631,  632,  630,  631,  617,  629,  633,
      634,  636,  637,  638,  620,  639,  641,  635,  633,  636,
      640,  622,  639,  640,  637,  642,  634,  643,  660,    0,
      660,  644,  663,  662,  663,  633,  634,  636,  637,  645,
      662,  639,  641,  635,  633,  636,  640,  644,  639,  640,
      637,  642,  634,  643,  660,  645,  660,  644,  663,  662,
      663,    0,    0,    0,    0,  645,  662,    0,    0,    0,
        0,    0,    0,  644,    0,    0,    0,  669,    0,    0,

        0,  645,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  651,    0,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  669,  651,  651,  651,  651,  651,  651,
      652,  671,  652,  652,  652,  652,  652,  652,  652,  652,
      652,    0,  676,    0,    0,    0,    0,    0,    0,    0,
      651,  651,  651,  651,  651,  651,  653,  671,  653,  653,
      653,  653,  653,  653,  653,  653,  653,  653,  676,  653,
      653,  653,  653,  653,  653,  654,  666,  654,  654,  654,
      654,  654,  654,  654,  654,  654,    0,    0,  666,    0,
        0,    0,    0,    0,    0,  653,  653,  653,  653,  653,

      653,  655,  666,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  657,  666,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,    0,  657,  657,  657,  657,
      657,  657,  659,    0,  659,  659,  659,  659,  659,  659,
      659,  659,  659,    0,    0,    0,    0,    0,  673,    0,
        0,  665,  657,  657,  657,  657,  657,  657,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  665,  667,  658,
      658,  658,  658,  658,  658,  661,  664,  665,  664,  661,
      668,  670,  673,    0,  668,  667,  672,    0,  672,    0,
      670,    0,  674,  665,  667,  658,  658,  658,  658,  658,

      658,  661,  664,  675,  664,  661,  668,  670,  673,  674,
      668,  667,  672,  677,  672,  679,  670,  678,  674,  680,
      681,  675,  682,  683,  684,  685,  690,  679,  686,  675,
      689,  677,  687,  678,  691,  674,  689,    0,  690,  677,
      681,  679,  682,  678,  692,  680,  681,  675,  682,  683,
      685,  684,  690,  679,  688,  686,  689,  677,  693,  678,
      691,  687,  689,  688,  690,  694,  681,  695,  682,  696,
      692,  697,  699,  698,  700,  703,  685,  684,  701,  704,
      688,  686,  720,  700,  693,  698,  702,  687,  722,  688,
      701,  694,  706,  695,    0,  696,    0,  697,  699,  698,

      700,  703,  702,  726,  701,  704,  705,  705,  720,  700,
      706,  698,  702,    0,  722,    0,  701,  714,  706,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  702,  726,
        0,    0,  705,  705,    0,  710,  706,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  712,    0,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  727,
      712,  712,  712,  712,  712,  712,  716,    0,  716,  716,
      716,  716,  716,  716,  716,  716,  716,    0,    0,    0,
        0,    0,    0,    0,  729,  727,  712,  712,  712,  712,
      712,  712,  713,  713,  713,  713,  713,  713,  713,  713,

      713,  723,  723,  713,  713,  713,  713,  713,  713,  718,
      729,  718,  718,  718,  718,  718,  718,  718,  718,  718,
        0,    0,    0,    0,    0,    0,    0,  723,  723,  713,
      713,  713,  713,  713,  713,  715,  736,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  725,  715,  715,
      715,  715,  715,  715,    0,  725,    0,    0,    0,    0,
        0,  760,  736,  760,  760,  760,  760,  760,  760,  760,
      760,  760,  735,  725,  715,  715,  715,  715,  715,  715,
      717,  725,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  719,  717,  717,  717,  717,  717,  717,  721,

      724,  728,  730,  731,  730,  721,  735,  724,  719,  732,
      733,    0,  731,  734,  734,  732,  733,  728,  719,  717,
      717,  717,  717,  717,  717,  721,  724,  728,  730,  731,
      730,  721,  735,  724,  719,  732,  733,  737,  731,  734,
      734,  732,  733,  728,  737,  738,  740,  739,  741,  742,
      743,  744,  745,    0,  738,    0,  750,  751,  751,    0,
      754,  768,  746,  737,  739,  768,  749,  744,  750,  745,
      737,  738,  740,  739,  741,  742,  743,  744,  745,  746,
      738,  749,  750,  751,  751,  753,  754,  768,  746,  752,
      739,  768,  749,  744,  750,  745,  752,  753,    0,  770,

        0,    0,    0,    0,    0,  746,    0,  749,    0,    0,
      771,  753,    0,    0,    0,  752,    0,    0,  775,    0,
        0,    0,  752,  753,  759,  770,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  771,  759,  759,  759,
      759,  759,  759,  762,  775,  762,  762,  762,  762,  762,
      762,  762,  762,  762,    0,  776,    0,    0,    0,    0,
        0,    0,    0,  759,  759,  759,  759,  759,  759,  761,
        0,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  776,  761,  761,  761,  761,  761,  761,  763,  780,
      763,  763,  763,  763,  763,  763,  763,  763,  763,  763,

      782,    0,    0,    0,    0,    0,    0,    0,  761,  761,
      761,  761,  761,  761,  765,  780,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  782,  765,  765,  765,
      765,  765,  765,  767,    0,  767,  767,  767,  767,  767,
      767,  767,  767,  767,    0,    0,    0,    0,    0,    0,
      769,    0,  769,  765,  765,  765,  765,  765,  765,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  772,  773,
      766,  766,  766,  766,  766,  766,  769,  777,  769,  779,
      778,  781,  774,  778,  772,  773,  783,  781,  779,  781,
      787,    0,    0,  777,  772,  773,  766,  766,  766,  766,

      766,  766,  774,  777,  784,  779,  778,  781,  774,  778,
      772,  773,  783,  781,  779,  781,  785,  786,  788,  777,
      789,  784,  790,  792,  787,  791,  791,  805,  774,  807,
      784,  792,  813,  786,  788,  789,  785,    0,  818,    0,
        0,    0,  785,  786,  788,    0,  789,  784,  790,  792,
      787,  791,  791,  805,    0,  807,    0,  792,  813,  786,
      788,  789,  785,  796,  818,  796,  796,  796,  796,  796,
      796,  796,  796,  796,  796,  798,    0,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  851,  798,  798,
      798,  798,  798,  798,  800,    0,  800,  800,  800,  800,

      800,  800,  800,  800,  800,    0,    0,    0,    0,    0,
        0,    0,  844,  851,  798,  798,  798,  798,  798,  798,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  811,
      852,  799,  799,  799,  799,  799,  799,  802,  844,  802,
      802,  802,  802,  802,  802,  802,  802,  802,    0,  811,
        0,    0,    0,    0,    0,  811,  852,  799,  799,  799,
      799,  799,  799,  801,  844,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  811,  801,  801,  801,  801,
      801,  801,  804,  869,  804,  804,  804,  804,  804,  804,
      804,  804,  804,    0,  806,  812,    0,    0,    0,    0,

        0,  806,  801,  801,  801,  801,  801,  801,  803,  869,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      806,  803,  803,  803,  803,  803,  803,  806,  808,  812,
      809,  808,  809,  815,  816,  819,  814,  816,  817,    0,
      817,  819,  820,  820,  838,    0,  815,  803,  803,  803,
      803,  803,  803,  814,  808,  812,  809,  808,  809,  815,
      816,  819,  814,  816,  817,  821,  817,  819,  820,  820,
      823,  822,  815,  822,  870,  842,  839,  842,  838,  814,
      839,  821,  848,  850,  850,  848,  823,    0,  871,    0,
        0,  821,    0,    0,    0,    0,  823,  822,    0,  822,

      870,  842,  839,  842,  838,    0,  839,  821,  848,  850,
      850,  848,  823,  828,  871,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  875,  828,  828,  828,  828,
      828,  828,  829,  878,  829,  829,  829,  829,  829,  829,
      829,  829,  829,    0,  868,    0,    0,    0,    0,    0,
        0,  875,  828,  828,  828,  828,  828,  828,  830,  878,
      830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      845,  830,  830,  830,  830,  830,  830,  831,  868,  831,
      831,  831,  831,  831,  831,  831,  831,  831,    0,    0,
      845,    0,    0,    0,    0,    0,  845,  830,  830,  830,

      830,  830,  830,  832,  868,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  834,  845,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,    0,  834,  834,
      834,  834,  834,  834,  836,    0,  836,  836,  836,  836,
      836,  836,  836,  836,  836,    0,    0,    0,    0,    0,
        0,    0,  899,  837,  834,  834,  834,  834,  834,  834,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  837,
      840,  835,  835,  835,  835,  835,  835,  841,  899,  837,
        0,    0,  849,  873,  866,  874,  840,  866,  843,  846,
      874,  847,  873,  841,  849,  837,  840,  835,  835,  835,

      835,  835,  835,  841,  843,  846,  843,  847,  849,  873,
      866,  874,  840,  866,  843,  846,  874,  847,  873,  841,
      849,  900,    0,    0,    0,    0,    0,    0,    0,    0,
      843,  846,  843,  847,  857,    0,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  857,  859,  900,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  901,  859,
      859,  859,  859,  859,  859,  861,    0,  861,  861,  861,
      861,  861,  861,  861,  861,  861,    0,    0,    0,  876,
      876,  876,    0,  876,  901,  859,  859,  859,  859,  859,
      859,  860,  860,  860,  860,  860,  860,  860,  860,  860,

      902,  904,  860,  860,  860,  860,  860,  860,  863,  876,
      863,  863,  863,  863,  863,  863,  863,  863,  863,    0,
      902,    0,    0,    0,    0,    0,  902,  904,  860,  860,
      860,  860,  860,  860,  862,  876,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  862,  902,  862,  862,  862,
      862,  862,  862,  865,    0,  865,  865,  865,  865,  865,
      865,  865,  865,  865,    0,  867,    0,    0,    0,    0,
        0,    0,    0,  862,  862,  862,  862,  862,  862,  864,
      867,  864,  864,  864,  864,  864,  864,  864,  864,  864,
      864,  867,  864,  864,  864,  864,  864,  864,  872,  877,

      879,  877,  880,  881,  896,  897,  867,    0,  896,  897,
      880,  908,  924,  908,  872,  881,  929,  879,  864,  864,
      864,  864,  864,  864,  872,  877,  879,  877,  880,  881,
      896,  897,    0,  906,  896,  897,  880,  908,  924,  908,
      872,  881,  929,  879,  887,  907,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  906,  887,  887,  887,
      887,  887,  887,  888,  930,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  937,  907,    0,    0,    0,    0,
      936,    0,  906,  887,  887,  887,  887,  887,  887,  889,
      930,  889,  889,  889,  889,  889,  889,  889,  889,  889,

      937,  907,  889,  889,  889,  889,  889,  889,  890,  936,
      890,  890,  890,  890,  890,  890,  890,  890,  890,    0,
        0,  939,    0,    0,    0,    0,    0,    0,  889,  889,
      889,  889,  889,  889,  891,  936,  891,  891,  891,  891,
      891,  891,  891,  891,  891,  891,  893,  939,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,    0,  893,
      893,  893,  893,  893,  893,  895,  903,  895,  895,  895,
      895,  895,  895,  895,  895,  895,  911,  905,  909,  898,
      905,  910,  903,  925,  911,  893,  893,  893,  893,  893,
      893,  898,  903,  931,  909,  931,  950,  910,  898,  898,

      925,  933,  911,  950,  909,  898,  905,  910,  903,  925,
      911,    0,    0,    0,    0,    0,    0,  898,  955,  931,
      909,  931,  950,  910,  898,  898,  925,    0,  933,  950,
      934,  917,  905,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  919,  955,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  933,  934,  919,  919,  919,  919,
      919,  919,  920,  959,  920,  920,  920,  920,  920,  920,
      920,  920,  920,    0,    0,    0,    0,    0,    0,    0,
        0,  934,  919,  919,  919,  919,  919,  919,  921,  959,
      921,  921,  921,  921,  921,  921,  921,  921,  921,  921,

      926,  921,  921,  921,  921,  921,  921,  922,  935,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  926,  927,
      932,  938,  960,  961,  938,  940,  926,  921,  921,  921,
      921,  921,  921,  962,  928,  935,  951,  953,  932,  927,
      928,  940,  953,  963,  926,  927,  932,  938,  960,  961,
      938,  940,  928,    0,  951,    0,    0,    0,    0,  962,
      928,  935,  951,  953,  932,  927,  928,  940,  953,  963,
        0,    0,    0,    0,    0,    0,    0,    0,  928,  945,
      951,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      964,  954,  945,  945,  945,  945,  945,  945,  946,  954,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  974,
      952,  972,  957,  952,  957,    0,  964,  954,  945,  945,
      945,  945,  945,  945,  947,  954,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  952,  972,  957,  952,
      957,  958,  958,  974,  958,  958,  958,  958,  958,  958,
      973,  969,  958,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  958,  958,  975,  976,  973,  978,  978,  974,
      990,    0,    0,  985,    0,    0,  973,  986,  985,  979,
      979,  976,  979,  979,  979,  979,  979,  979,  980,  980,
      979,  976,  973,  978,  978,  986,  990,  987,  975,  985,

      979,  979,  987,  986,  985,  980,  988,  976,  989,  989,
      991,  994,  988,    0,  980,  980,  992,  992,  994,  993,
        0,  986, 1002,  987,  975,  999,  999, 1003,  987, 1004,
     1005,  980,  988,  992,  989,  989,  991,  994,  988,  993,
     1000, 1001,  992,  992,  994,  993, 1000, 1001, 1002, 1007,
     1008,  999,  999, 1003, 1010, 1004, 1005, 1008, 1014,  992,
     1009, 1009, 1018, 1015, 1020,  993, 1000, 1001, 1016, 1007,
     1015, 1016, 1000, 1001, 1022, 1007, 1008, 1017, 1017, 1023,
     1010, 1021, 1021, 1008, 1014, 1028, 1009, 1009, 1018, 1015,
     1020, 1030, 1028, 1031, 1016, 1007, 1015, 1016, 1034, 1023,

     1022, 1029, 1029, 1017, 1017, 1023, 1033, 1021, 1021, 1039,
     1038, 1028, 1038, 1041, 1046,    0,    0, 1030, 1028, 1031,
        0,    0,    0,    0, 1034, 1023, 1033, 1029, 1029,    0,
        0,    0, 1033,    0,    0, 1039, 1038,    0, 1038, 1041,
     1046,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1033, 1057, 1057, 1057, 1057, 1058, 1058, 1058,
     1058, 1059, 1059, 1059, 1059, 1060,    0, 1060, 1060, 1061,
     1061, 1061, 1061, 1062,    0, 1062, 1062, 1063, 1063, 1065,
     1065, 1066, 1066, 1067, 1067, 1068, 1068, 1069, 1069, 1070,
     1070, 1071, 1071, 1072, 1072, 1073, 1073, 1074, 1074, 1075,

        0, 1075, 1075, 1076, 1076, 1077, 1077, 1078, 1078, 1079,
     1079, 1080, 1080, 1081, 1081, 1082, 1082, 1083, 1083, 1084,
     1084, 1085, 1085, 1086, 1086, 1087, 1087, 1088, 1088, 1089,
     1089, 1090, 1090, 1091, 1091, 1092, 1092, 1093, 1093, 1094,
     1094, 1095, 1095, 1096, 1096, 1097, 1097, 1098, 1098, 1099,
     1099, 1100, 1100, 1101, 1101, 1103, 1103, 1104, 1104, 1105,
     1105, 1107, 1107, 1108, 1108, 1109, 1109, 1112, 1112, 1113,
     1113, 1114, 1114, 1116,    0, 1116, 1116, 1117,    0, 1117,
     1117, 1118, 1118, 1119, 1119, 1122,    0, 1122, 1122, 1123,
        0, 1123, 1123, 1124, 1124, 1125, 1125, 1126, 1126, 1127,

     1127, 1128, 1128, 1130, 1130, 1131, 1131, 1132, 1132, 1133,
     1133, 1134, 1134, 1136, 1136, 1137, 1137, 1138, 1138, 1140,
     1140, 1142, 1142, 1143, 1143, 1144, 1144, 1146, 1146, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[134] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2176 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2281 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1057 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6030 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LINK_LOCAL_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::SUBNET_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::KEY_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::SECRET_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::ALGORITHM_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::FUDGE_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 173 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 174 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 175 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 179 "SrvLexer.l"
;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 181 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 186 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 187 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 188 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 119:
YY_RULE_SETUP
#line 195 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 204 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 213 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 222 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 231 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 240 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 249 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 261 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 268 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 289 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 321 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 349 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%20x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 359 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%20u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 368 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 371 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3200 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1057 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1057 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1056);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 371 "SrvLexer.l"



