#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 136
#define YY_END_OF_BUFFER 137
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1075] =
    {   0,
        1,    1,    0,    0,    0,    0,  137,  135,    2,    1,
        1,  135,  117,  135,  135,  134,  134,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  121,  121,  136,    1,    1,    1,    0,  129,
      117,    0,  129,  119,  118,  134,    0,    0,  133,    0,
      126,  100,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  114,  130,  130,  102,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,   17,   18,  130,  130,  130,  130,  130,  130,  130,
      130,  120,  118,  134,    0,    0,    0,  125,  131,  124,
      124,  130,  130,  130,  130,  130,  130,  101,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
       94,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  113,  134,    0,    0,    0,    0,  123,  123,

        0,  124,    0,  124,  130,  130,  130,   67,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  108,  130,  130,
      130,   31,  130,  130,   47,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,    0,  130,
      130,  130,  130,  130,  130,   24,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  115,  130,  130,  130,  130,  134,    0,  132,
        0,    0,    0,  123,    0,  123,    0,  124,  124,  124,
      124,  130,  130,  130,  130,  130,  107,  130,  130,  130,
        4,  130,  130,  130,  130,  130,  130,  130,  116,  130,

       97,  130,  130,    3,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,    0,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,    7,  130,
       46,  130,  130,   25,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,    0,    0,    0,    0,
        0,  123,  123,  123,  123,    0,  124,  124,  124,    0,
      124,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,   30,  130,  130,  130,  130,  130,   39,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,    0,    0,  130,

      130,  130,   37,  130,  130,  130,  130,   35,  130,  130,
      130,   63,   95,  130,  130,  130,  111,   45,  130,  130,
      130,  130,  130,  130,  130,    0,    0,    0,    0,  123,
      123,  123,    0,  123,    0,    0,  124,  124,  124,  124,
      130,  130,   34,  130,  130,  130,  130,  130,  130,  130,
      130,    0,  130,  130,  110,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,    0,    0,  130,
      130,  130,  130,  130,   61,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,   22,  130,  130,  130,

      132,    0,    0,    0,    0,    0,  123,  123,  123,  123,
        0,  124,  124,  124,    0,  124,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,    0,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,   83,  130,  130,  130,   48,  130,
       57,  130,  130,  130,   12,   10,   99,  130,   44,    0,
        0,  130,  130,  130,   59,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,    5,  130,  130,  130,
       14,    0,    0,    0,    0,  123,  123,  123,    0,  123,
      128,  124,  124,  124,  124,  130,  130,  130,  130,  130,

       96,  130,  130,  130,  130,  130,  130,  130,  130,  130,
        0,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,   85,  130,  130,  130,  130,  130,  130,
      130,  130,   11,   66,    0,    0,  130,  130,  130,   60,
      130,  130,  130,  130,  130,   32,  130,  130,    6,  109,
       41,  130,  130,    0,    0,    0,    0,  127,  123,  123,
      123,  123,  124,  124,  124,    0,  124,  130,  130,  130,
      130,  130,  130,  130,  130,   77,  130,  130,  130,   58,
      130,    0,  130,  130,  130,  130,  130,  130,  130,  130,
       38,  130,  130,   36,  130,  130,  130,  130,  130,  130,

      130,   33,   13,    0,    0,   54,   53,   40,  130,   23,
      130,  130,  130,   43,   42,  130,  130,  132,    0,    0,
      123,  123,  123,    0,  123,  124,  124,  124,  124,  130,
       15,  130,   65,  130,  130,  130,  130,   76,  130,  130,
      130,    0,  130,  130,  130,  130,  130,  130,   80,  130,
      130,  130,   87,   89,   91,   93,  130,  130,  130,   56,
       55,  130,  130,  130,  130,  130,   62,    0,    0,    0,
        0,  123,  123,  123,  123,  124,  124,  124,    0,  124,
      130,  130,  112,  130,   78,  130,  130,  130,  130,    0,
       98,  130,  130,  130,   52,  130,   81,   64,  130,  130,

      130,    8,  130,  130,   26,  130,  130,    0,    0,    0,
      123,  123,  123,    0,  123,  124,  124,  124,  124,  130,
      130,  130,   74,   79,  130,  130,    0,  130,  130,   51,
      130,  130,  130,  130,   68,  130,  130,  130,  130,  130,
      132,    0,    0,    0,  123,  123,  123,  123,  124,  124,
      124,    0,  124,  130,  130,   75,  130,  130,    0,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   16,   21,
        0,    0,  122,  125,  123,  123,  123,    0,  123,  124,
      124,  124,  124,  130,  130,  130,   28,    0,    0,  130,
      130,  130,   82,  130,  130,   27,  130,  130,  130,    0,

        0,  122,    0,  123,  123,  123,  123,  123,  124,  124,
      124,    0,  124,  130,  130,  130,    0,    0,   29,  130,
      130,   84,  130,  130,  130,  130,  130,  130,  130,  132,
      122,  125,  123,    0,  123,  123,  123,  123,  124,  124,
      124,   69,  130,  130,  130,  130,    0,    0,  130,  130,
      130,  130,  130,  130,   50,  130,   20,  130,    0,  122,
      123,  123,  123,  123,  124,  124,  124,  130,  130,  130,
      130,  130,    0,    0,  130,  130,   86,   88,   90,   92,
        9,   19,    0,  123,  123,    0,  123,  123,  124,   49,
      130,  130,  130,  130,    0,    0,  130,  130,  132,  123,

      123,  124,  130,  130,  130,  130,    0,    0,    0,  130,
      130,  130,    0,  123,  123,    0,  130,  130,  130,  130,
        0,    0,    0,  103,  130,  130,  130,  103,  122,  123,
      123,   70,  130,  130,  130,    0,  105,    0,  130,  105,
      130,  122,  123,  123,    0,  130,  130,   73,    0,  104,
      130,  104,    0,  123,  123,  130,   71,  106,  106,    0,
      123,  123,    0,   72,  132,  123,  123,    0,  123,  123,
        0,  123,  123,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1165] =
    {   0,
        0,    0, 1152, 1151,    0,    0, 1157, 6089, 6089,   73,
       75, 1148,    0, 1142,   72,   72,   34, 1103, 1099,  136,
      186,  233,  280,   71,  208,  338,   66,  236,   38,   89,
      223,  240,  340,   72,  275,  373,  418,  398,   68,  251,
      180,  333, 6089, 1079, 6089,  111,  137,  213, 1077, 6089,
        0, 1062, 1034, 6089,    0,  476,  964,  464, 6089,    0,
      521, 6089,   60,  564,  188,  192,  182,  183,  279,  387,
      336,  193,  240,  397,  337,  263,  274,  389,  278,  390,
      474,  555,  335,  543,  578,  579,  580,  582,  611,  384,
      607,  597,  559,  613,  595,  381,  599,  603,  394,  499,

      630,  631,  640,  654,  429,  647,  652,  632,  653,  684,
      668,  442,  481,  685,  691,  662,  689,  676,  699,  698,
      706, 6089,    0,  764,  958,  539,  955,  809,    0,  854,
      783,  897,  698,  689,  700,  889,  890,  687,  898,  886,
      709,  893,  913,  762,  894,  701,  930,  833,  796,  938,
      941,  928,  929,  945,  934,  953,  962,  968,  949,  959,
      743,  981,  982,  980,  984,  987,  978, 1024, 1017,  986,
     1014, 1002, 1016, 1023, 1034, 1015, 1026, 1030, 1045, 1039,
     1051, 1066, 1054, 1069, 1070, 1076, 1088, 1091, 1082, 1073,
     1103, 1107,  814, 1165,  834,  922,  921,  918, 1212,  874,

     1184, 1257, 1300, 1231, 1343,  906, 1278, 1067, 1332, 1104,
     1144, 1165, 1295, 1333, 1217, 1342, 1330, 1085, 1336, 1337,
     1376, 1100, 1343, 1381, 1372, 1383, 1347, 1375, 1386, 1261,
     1384, 1382, 1388, 1378, 1424, 1431, 1433, 1419,  929, 1428,
     1397, 1435, 1434, 1438, 1436, 1125, 1465, 1480, 1458, 1467,
     1469, 1486, 1477, 1490, 1492, 1521, 1499, 1488, 1501, 1523,
     1517, 1539, 1199, 1535, 1537, 1532, 1544, 1276,  910,  909,
      880,  879, 1602, 1613, 1656, 1632, 1675, 1701, 1720, 1746,
     1765,  878, 1529, 1536, 1540, 1745, 1374, 1766, 1533, 1634,
     1688, 1744, 1760, 1778, 1750, 1780, 1788, 1779, 1447, 1782,

     1487, 1785, 1802, 1796, 1795, 1810, 1812, 1813, 1825, 1835,
     1831, 1840, 1837, 1852, 1699, 1832, 1850, 1850, 1846, 1865,
     1854, 1882, 1871, 1883, 1884, 1886, 1887, 1868, 1542, 1885,
     1592, 1899, 1901, 1617, 1902, 1920, 1914, 1906, 1917, 1936,
     1939, 1929, 1923, 1969, 1941, 1954,  877,  876,  875,  874,
     2001, 2029, 2012, 2074, 2048, 2057, 2093,  864, 2119, 2162,
     2138, 1990, 2160, 2124, 2152, 2158, 2157, 2156, 2180, 2181,
     2161, 2061, 2251, 2199, 2197, 2174, 2210, 2198, 1635, 2234,
     2222, 2235, 2245, 2246, 2240, 2237, 2242, 2269, 2247, 2250,
     2283, 2255, 2279, 2285, 2290, 2286, 2293, 1972, 2088, 2292,

     2294, 2299, 2163, 2323, 2315, 2307, 2342, 2302, 2332, 2331,
     2363, 2308, 2330, 2343, 2348, 2354, 2336, 2344, 2367, 2353,
     2366, 2373, 2359, 2409, 2390,  835,  834,  823, 2448, 2467,
      822, 2479, 2522, 2498, 2541, 2567, 2578, 2597, 2623, 2642,
     2644, 2387, 2500, 2401, 2624, 2403, 2406, 2645, 2622, 2639,
     2643, 2381, 2655, 2657, 2405, 2626, 2509, 2685, 2674, 2676,
     2694, 2695, 2688, 2697, 2699, 2707, 2708, 2727, 2712, 2728,
     2730, 2732, 2745, 2747, 2741, 2740, 2744, 2415, 2461, 2768,
     2759, 2761, 2751, 2779, 2520, 2789, 2780, 2797, 2799, 2795,
     2796, 2792, 2803, 2820, 2812, 2831, 2557, 2826, 2830, 2835,

      820,  819,  817,  790, 2893, 2904, 2915, 2934, 2960, 2979,
     2943, 3005,  789, 3017, 3060, 3036, 3038, 3046, 3054, 2959,
     3058, 3059, 3056, 3074, 3053, 3090, 3092, 2565, 3062, 2811,
     3091, 2658, 3098, 3113, 3111, 3097, 3126, 3112, 3105, 3141,
     3143, 3135, 3142, 3146, 2693, 3177, 3156, 3178, 2743, 3150,
     2833, 3165, 3173, 3183, 2902, 2947, 3162, 3181, 3163, 3184,
     3174, 3192, 3202, 3210, 3187, 3208, 3227, 3215, 3231, 3219,
     3225, 3239, 3229, 3246, 3226, 3247, 3232, 3254, 3275, 3266,
     3244,  788,  787,  786, 3333, 3344,  785, 3356, 3399, 3375,
     3384, 3444, 3418, 3489, 3463, 3397, 3271, 3478, 3386, 3487,

     3263, 3479, 3274, 3483, 3488, 3510, 3493, 3508, 3527, 3269,
     3274, 3532, 3517, 3522, 3529, 3530, 3545, 3528, 3559, 3560,
     3562, 3567, 3542, 3298, 3592, 3595, 3431, 3574, 3578, 3598,
     3582, 3577, 3576, 3579, 3592, 3597, 3591, 3597, 3612, 3589,
     3622, 3627, 3650, 3633, 3626, 3619, 3636, 3631, 3630, 3632,
     3634, 3663, 3665,  751,  750,  742,  741, 3472, 3725, 3710,
     3770, 3744, 3789,  738, 3815, 3858, 3834, 3643, 3642, 3844,
     3847, 3848, 3861, 3853, 3876, 3644, 3851, 3857, 3856, 3664,
     3894, 3695, 3888, 3757, 3906, 3908, 3712, 3909, 3913, 3904,
     3749, 3919, 3921, 3768, 3922, 3928, 3937, 3929, 3907, 3942,

     3938, 3905, 3940, 3948, 3946, 3944, 3946, 3949, 3965, 3950,
     3960, 3971, 3973, 3956, 3958, 3981, 3992,  736,  687,  685,
     4050,  681, 4062, 4105, 4081, 4150, 4124, 4195, 4169, 4004,
     3961, 4187, 3989, 4084, 4183, 4186, 4191, 3990, 4190, 4041,
     4214, 4072, 4194, 4228, 4195, 4229, 4226, 4137, 4129, 4234,
     4231, 4247, 4232, 4233, 4235, 4236, 4266, 4263, 4281, 6089,
     6089, 4280, 4279, 4243, 4277, 4283, 4274,  677,  636,  620,
      590, 4343, 4362, 4388, 4407, 4433,  589, 4445, 4488, 4464,
     4282, 4448, 4275, 4479, 4285, 4484, 4500, 4493, 4387, 4325,
     4330, 4502, 4481, 4489, 4375, 4490, 4485, 4487, 4534, 4538,

     4536, 4525, 4537, 4539, 4522, 4530, 4531,  588,  587,  579,
     4599,  578, 4611, 4654, 4630, 4699, 4673, 4744, 4718, 4527,
     4704, 4541, 4532, 4535, 4734, 4735,  588, 4652, 4732, 4590,
     4756, 4749, 4740, 4743, 4615, 4744, 4746, 4784, 4776, 4789,
      575,  546,  545,  544, 4849, 4868, 4894, 4913, 4939,  543,
     4951, 4994, 4970, 4972, 4781, 4633, 4779, 4989, 4998, 4780,
     5009, 4873, 5008, 5010, 5011, 4788, 4893, 4787, 4686, 4777,
      542,  541,  540,    0, 5071,  539, 5083, 5126, 5102, 5171,
     5145, 5216, 5190, 4990, 5184, 4986, 4791, 4837, 4841, 5218,
     5113, 4997, 4955, 5233, 5208, 4993, 5229, 5217, 5231,  502,

      501,  500,  499,  498, 5293, 5312, 5338, 5357, 5383,  497,
     5395,    0, 5414, 5211, 5220, 5415, 5045, 5078, 5105, 5337,
     5230, 5124, 5280, 5272, 5325, 5394, 5398, 5409, 5221,  495,
      494, 6089,  493,    0, 5475,  492, 5487, 5506, 5532, 5551,
        0, 5290, 5413, 5417, 5485, 5547, 5376, 5415, 5412, 5429,
     5519, 5556, 5557, 5562, 5474, 5537, 5532, 5564,  491,  489,
      488,  486, 5624, 5643, 5669,  452,    0, 5551, 5603, 5546,
     5627, 5657, 5552,    0, 5554, 5698, 5553, 5566, 5602, 5624,
     5625, 5626,  449,  447,  444,    0, 5715, 6089,    0, 5654,
     5694, 5671, 5698, 5695,    0, 5690, 5749, 5732,  441,  431,

      414, 6089, 5708, 5736, 5730, 5737, 5739, 5687, 5677, 5755,
     5746, 5740,  413,  402,  398,    0, 5754, 5767, 5774, 5719,
     5763, 5754, 5751, 6089, 5790, 5778, 5783, 5760,  396,  394,
      393, 5775, 5784, 5788, 5792, 5790, 6089, 5815, 5799, 5802,
     5826,  364,  363,  353,    0, 5812, 5820, 5807, 5833, 6089,
     5842, 5823,  349,  325,  314, 5829, 5830, 6089, 5834,    0,
      310,  309,    0, 5835,  307,  305,  303,  276,  267,  260,
        0,  254,  220, 6089, 5912, 5916, 5920, 5924, 5928, 5932,
     5934,  233, 5936, 5938, 5940, 5942, 5944, 5946, 5948, 5950,
     5952, 5954, 5958, 5960, 5962, 5964, 5966, 5968, 5970, 5972,

     5974, 5976, 5978, 5980, 5982, 5984, 5986, 5988, 5990, 5992,
     5994, 5996, 5998, 6000, 6002, 6004, 6006, 6008, 6010,  232,
     6012, 6014, 6016,  231, 6018, 6020, 6022,  230,  228, 6024,
     6026, 6028,  226, 6032, 6036, 6038, 6040,  223,  219, 6044,
     6048, 6050, 6052, 6054, 6056, 6058,  217, 6060, 6062, 6064,
     6066, 6068,  145, 6070, 6072, 6074,  131, 6076,  117, 6078,
     6080, 6082,   80, 6084
    } ;

static yyconst flex_int16_t yy_def[1165] =
    {   0,
     1074,    1, 1075, 1075, 1076, 1076, 1074, 1074, 1074, 1074,
     1074, 1077, 1078, 1079, 1074, 1074,   16, 1074, 1074, 1074,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1074, 1074, 1074, 1074, 1074, 1074, 1077, 1074,
     1078, 1079, 1074, 1074, 1080, 1074, 1081,   56, 1074, 1082,
     1074, 1074,   26,   26,   64,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1074, 1080, 1074, 1083,  124, 1084, 1074, 1082, 1074,
      130,   64,  132,  132,   26,   26,   26,   26,   26,   26,
      132,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1074,  194, 1085, 1086, 1087, 1074,  199,

     1074, 1074, 1074,  202,  132,  205,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1074,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  195,  195, 1086,
     1088, 1089, 1074, 1074, 1074,  274, 1074, 1074,  278, 1074,
      280,  205,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1074,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1090, 1074, 1091, 1092,
     1074, 1074,  352, 1074,  354, 1074, 1074, 1074, 1074, 1074,
      359,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1093,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1074, 1074,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1094, 1095, 1096, 1074, 1074,
     1074, 1074, 1074,  432, 1074, 1074, 1074,  437, 1074,  439,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1074,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1074, 1074,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

     1091, 1074, 1097, 1098, 1074, 1074, 1074,  507, 1074,  509,
     1074, 1074, 1074, 1074, 1074,  514,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1074,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1074,
     1074,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1099, 1100, 1101, 1074, 1074, 1074, 1074, 1074,  588,
     1074, 1074,  592, 1074,  594,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1074,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1074, 1074,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1102, 1074, 1103, 1104, 1074, 1074,  659,
     1074,  661, 1074, 1074, 1074, 1074,  665,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1074,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26, 1074, 1074,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1105, 1106, 1107,
     1074, 1074, 1074, 1074,  723, 1074,  726, 1074,  728,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1074,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1074,
     1074,   26,   26,   26,   26,   26,   26, 1108, 1074, 1109,
     1110, 1074,  772, 1074,  774, 1074, 1074, 1074, 1074,  778,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1074,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26, 1111, 1112, 1113,
     1074, 1074, 1074, 1074,  813, 1074,  816, 1074,  818,   26,
       26,   26,   26,   26,   26,   26, 1074,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1114, 1074, 1115, 1116, 1074,  845, 1074,  847, 1074, 1074,
     1074, 1074,  851,   26,   26,   26,   26,   26, 1074,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1117, 1118, 1119, 1120, 1074, 1074, 1074, 1074,  877, 1074,
      880, 1074,  882,   26,   26,   26,   26, 1074, 1074,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1121,

     1074, 1122, 1074, 1123, 1074,  905, 1074,  907, 1074, 1074,
     1074, 1124,  911,   26,   26,   26, 1074, 1074,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1125,
     1126, 1074, 1127, 1128, 1074, 1074, 1074,  937, 1074,  939,
     1129,   26,   26,   26,   26,   26, 1074, 1074,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1130, 1074,
     1131, 1132, 1074,  963, 1074, 1074, 1133,   26,   26,   26,
       26,   26, 1074, 1134,   26, 1135,   26,   26,   26,   26,
       26,   26, 1136, 1074, 1137, 1138, 1074, 1074, 1139,   26,
       26,   26,   26,   26, 1140, 1074, 1141,   26, 1142, 1143,

     1144, 1074,   26,   26,   26,   26, 1074, 1074, 1074,   26,
       26,   26, 1145, 1074, 1146, 1147,   26,   26,   26,   26,
     1074, 1074, 1074, 1074,   26,   26,   26,   26, 1148, 1149,
     1150,   26,   26,   26,   26, 1074, 1074, 1074,   26,   26,
       26, 1151, 1074, 1152, 1153,   26,   26,   26, 1074, 1074,
       26,   26, 1154, 1155, 1156,   26,   26, 1074,   26, 1157,
     1074, 1158, 1159,   26, 1074, 1160, 1161, 1154, 1074, 1162,
     1163, 1164, 1074,    0, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074
    } ;

static yyconst flex_int16_t yy_nxt[6165] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   29,
       36,   37,   38,   39,   40,   41,   29,   42,   29,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   29,   36,   37,   38,   39,
       40,   41,   29,   42,   29,   46,   47,   48,   47,   54,
     1074,   63,  908,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   64,   58,   58,   58,   58,   58,

       58,   87,   59,   63,  117,   63, 1074,   63,   63,   63,
       98,   63,   99,   46,   47,   63,   90,   82,   60, 1067,
       64,   58,   58,   58,   58,   58,   58,   87,   59,   63,
      117,   63,   63, 1065,   63,   63,   98,   63,   99,   48,
       47,   63,   90,   82,   60,   63,   63, 1055,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   57,   63,   64,
       64,   65,   66,   64,   67,   63,   68,   63,   63,   63,
       69,   63,   70,   63,   63,   63,   63,   63,   63,   71,
       63,   63,   63,   63,   63,   64,   64,   65,   66,   64,
       67,   63,   68,   63,   63,   63,   69,   63,   70,   63,

       63,   63,   63,   63,   63,   71,   63,   63,   63,   63,
       63,   64,   64,  133,   64,   46,   47,  120,  134, 1031,
       63, 1002,   63,   63,  135, 1001,   63,  140,  989,   72,
      967,   83,  962,  941,  904,  129,   63,   64,   64,  133,
       64, 1071,   63,  120,  134,   63,   63,   84,   63,   63,
      135,   85,   63,  140,   91,   72,   73,   83,   64,   64,
       92,   64,   63,   93,   88,  141,   63,   74,   63,   63,
       75,   63,   89,   84,  118, 1071,   63,   85,  119,   63,
       91, 1071,   73,   63,   64,   64,   92,   64, 1063,   93,
       88,  141,   63,   74,   63,   63,   75, 1074,   89,  145,

      118,  100,   63,   64,  119,   63,   76,   77,  136,   63,
      146,   78,  101,  137,   63,  102,   79,   80,   63,  148,
       63,   63,   63,   81, 1071,  145, 1063,  100, 1068,   64,
     1063, 1045,   76,   77,  136, 1063,  146,   78,  101,  137,
       63,  102,   79,   80,   63,  148, 1045,   63,   63,   81,
       63,   63,   63,   63,   63,   63,   63,   63,   63, 1074,
      121,   63,   63,   63,   63,   63,   63,   94,   63,  152,
      932,   95,   63,  144, 1045,   63,   63,   96,  139,   63,
       63,   86,   97,   63, 1016, 1053,  121,   63,   63,   63,
       63,   63,   63,   94,   63,  152,  103,   95,   63,  144,

      104,   63,   63,   96,  139,   63,   63,   86,   97,   63,
      105,  112,  113,  138, 1045, 1016,   63,  903,  147, 1016,
      142,  114,  103,  986,   63,  149,  104,   63,  143,  115,
       63,  161,   63,   63,  874, 1016,  105,   63,  116,  138,
       63,   63,   63,  106,  147,  107,  142,  114,  108,  109,
       63,  149,  986,   63,  143,  115,   63,  161,   63,   63,
      110,  111, 1013,   63,  116,  986,   63,   63,  934,  106,
      844,  107,  178,  912,  108,  109,  126,  126,  126,  126,
      126,  126,  126,  126,  126,   63,  110,  111,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  125,  178,  126,

      126,  126,  126,  126,  126,  150,   59,  986,  171,  934,
      903,   63,  128,  878,  934,  903,  959,   63,  852,  934,
      932,  903,  844,  771,   63,  126,  126,  126,  126,  126,
      126,  150,   59,  130,  130,  130,  130,  130,  130,  130,
      130,  130,   63,   63,  131,  131,  131,  131,  131,  131,
       63,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      814,  903,  844,  128,  779,  874,  844,  771,   63,  153,
      131,  131,  131,  131,  131,  131,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  125,   63,  132,  132,  132,
      132,  132,  132,  151,   68,  153,  871,  859,   63,  724,

      844,  165,   63,  156,  154,  157,  155,   63,  771,  657,
      666,  128,   63,  132,  132,  132,  132,  132,  132,  151,
       68,   63,   63,   63,   63,   63,  164,  165,   63,  156,
      154,  157,  155,   63,  158,  162,  168,  169,   63,  159,
       63,  771,   63,  163,  166,  170,   63,   63,   63,   63,
       63,   63,  164,  160,   63,  181,   63,  657,  173,  167,
      158,  162,  168,  169,   63,  159,   63,  172,   63,  163,
      166,  170,   63,   63,   63,   63,   63,  180,  174,  160,
       63,  181,   63,   63,  173,  167,  175,  179,  176,  177,
       63,  182,  185,  172,  186,   63,   63,   63,  128,   63,

       63,   63,  589,  180,  174,  188,  771,  183,  657,   63,
      190,   63,  175,  179,  176,  177,   63,  182,  185,   63,
      189,   63,   63,   63,  184,  206,  187,   63,   63,  207,
       63,  188,   63,  183,   63,  191,  190,   63,  192,  213,
      208,   63,   63,   63,   63,   63,  189,  193,  218,   63,
      184,  206,  187,   63,   63,  207,   63,  768,   63,  515,
       63,  191,  128,  657,  192,  213,  208,   63,   63,   63,
       63,  504,  504,  193,  218,   63,  194,  194,  194,  194,
      194,  194,  194,  194,  194,   57,   63,  195,  195,  195,
      195,  195,  195, 1074,   59,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  216,   63,  433,  657,  504,  128,
      360,  128,   63,  195,  195,  195,  195,  195,  195,  221,
       59,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      216,   63,  200,  200,  200,  200,  200,  200,  504,   63,
      350,  582,  220,  275,  504,  221,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  350,  350,   63,  200,  200,
      200,  200,  200,  200,  201,   63,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  203,   63,  204,  204,  204,
      204,  204,  204,   63, 1074,  203,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  128,  350,  198,  128, 1074,

      350,  198,   63,  204,  204,  204,  204,  204,  204,  205,
      205,  205,  205,  205,  205,  205,  205,  205,   57,  212,
      205,  205,  205,  205,  205,  205,  209,  210,  211,   63,
      347, 1074,   63,   63,  214,  217,   63,   63,  317,  128,
      215,   63,  198,  198,  283,  212,  205,  205,  205,  205,
      205,  205,  209,  210,  211,   63,   63,  219,   63,   63,
      214,  217,   63,   63,  222,  225,  215,   63,  223,  224,
      283,   63,   63,   63,  226,  227,  198,   63,  228,  128,
      231,   63,   63,  219,   63,  128,  232,  229,   63,  235,
      222,  225,   63,  230,  223,  224,   63,   63,   63,   63,

      226,  227,   63,   63,  228,   63,  231,   63,  233,  236,
       63,   63,  232,  229,   63,  234,  237,  242,   63,  230,
      238,   63,   63,   63,   63,   63,  241,   63,   63,   63,
       63,   63,  239,  240,  233,  236,  246,   63,  250,  243,
       52,  234,  237,  242,  247,   63,  238,   63,  244,   63,
       63,   63,  245,   63,  248,   63,   63,   63,   63,   63,
       63,  249,  246,  251,  250,  243,   63,   63,   53,   63,
      247,   63,  252,   63,  244,  256,  253,   63,  245,  254,
      248,   50,   63,   63,   63,   63,   63,  249,   63,  251,
      122,  255,   63,   63,   63,   63,  257,   63,  252,   63,

      258,  261,  253,   63,  265,  254,  259,  264,   63,   63,
       63,  260,   63,   63,   63,  262,   63,  255,  263,   63,
       63,   62,  257,   63,   61,   63,  258,  261,   63,  266,
      265,   63,  259,  264,   63,   63,   63,  260,   63,   63,
      267,  262,   63,   63,  263,   63,   63,   63,   53,  287,
       63,   63,   50,  288,   63,  266, 1074,   63,   44,   44,
       63, 1074, 1074, 1074, 1074, 1074,  267, 1074,   63,   63,
     1074, 1074,   63,   63,  289,  287,   63,  268,  268,  268,
      268,  268,  268,  268,  268,  268,   57,   63,  269,  269,
      269,  269,  269,  269,   63,   59,  277,  277,  277,  277,

      277,  277,  277,  277,  277, 1074, 1074, 1074,   63, 1074,
     1074, 1074, 1074,   63,  269,  269,  269,  269,  269,  269,
     1074,   59,  273, 1074,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  275,   63,  276,  276,  276,  276,  276,
      276, 1074,   63,  279,  279,  279,  279,  279,  279,  279,
      279,  279, 1074,  292, 1074, 1074, 1074, 1074, 1074, 1074,
       63,  276,  276,  276,  276,  276,  276,  201,   63,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  203,  292,
      279,  279,  279,  279,  279,  279,   63,  284,  268,  268,
      268,  268,  268,  268,  268,  268,  268, 1074, 1074, 1074,

     1074, 1074, 1074,  305,   63,  285,  279,  279,  279,  279,
      279,  279,  280,  280,  280,  280,  280,  280,  280,  280,
      280,   63,  290,  281,  281,  281,  281,  281,  281,  305,
       63,  285, 1074, 1074, 1074, 1074, 1074, 1074,   63,  294,
     1074, 1074, 1074, 1074, 1074, 1074, 1074,   63,  290,  281,
      281,  281,  281,  281,  281,  282,  282,  282,  282,  282,
      282,  282,  282,  282,   63,  293,  282,  282,  282,  282,
      282,  282,  286,   63,  291,   63,   63,  295,  296,   63,
       63,  300, 1074,  298,  303,   63,   63,  309,  302, 1074,
       63,  293,  282,  282,  282,  282,  282,  282,  286,   63,

      291,   63,   63,  295,  296,   63,   63,  297,  299,  298,
      301,   63,   63,  304,  302,   63,   63,   63,   63,   63,
      306,   63,  307, 1074,   63,   63,   63,   63,  316,   63,
      308,   63, 1074,  297,  299, 1074,  301, 1074,  320,  304,
       63,   63, 1074,   63,   63,   63,  306,   63,  307,  310,
       63,   63,   63,   63,  318,   63,  308,   63,  311,  312,
      313,  314,   63,  315,  320,  323,   63,   63,  322,  319,
     1074,   63,  321,  324,   63,  310,   63,   63,   63,   63,
      318,   63, 1074,  328,  311,  312,  313,  314,   63,  315,
       63,  323,  325,   63,  322,  319,  326,   63,  321,  324,

       63,   63,   63,   63,   63,   63,  327,   63,   63,  328,
       63,  330,   63,  331,  329,  332,   63,  333,  325,  334,
       63, 1074,  326,   63,  338, 1074,  337,   63,  339,   63,
       63,   63,  327,   63,   63,   63,   63,  330,   63,  331,
      329,  332,   63,  333,   63,  334,   63,  335,  342,   63,
      338,  341,  337,  346,  339,   63,   63,   63,  343,   63,
       63,   63,  336,  344,   63,  340,   63,  370,   63,  345,
       63,  362,   63,  335,  363,   63,   63,  341,   63,   63,
       63,  364,   63,   63,  343,   63,   63,   63,  336,  344,
       63,  340,   63,  370, 1074,  345, 1074,  362,   63, 1074,

      363,   63,   63, 1074,   63,   63,   63,  364,   63,   63,
     1074,   63, 1074,   63,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  273, 1074,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  275,   63,  353,  353,  353,  353,
      353,  353, 1074,  371,  353,  353,  353,  353,  353,  353,
      353,  353,  353, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
       63,   63,  353,  353,  353,  353,  353,  353,  354,  354,
      354,  354,  354,  354,  354,  354,  354,   63,   63,  355,
      355,  355,  355,  355,  355,  356,   63,  277,  277,  277,
      277,  277,  277,  277,  277,  277, 1074,  372, 1074, 1074,

     1074, 1074, 1074,   63,   63,  355,  355,  355,  355,  355,
      355,  201, 1074,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  203,  396,  358,  358,  358,  358,  358,  358,
     1074,   63,  358,  358,  358,  358,  358,  358,  358,  358,
      358, 1074,   63, 1074, 1074, 1074, 1074, 1074, 1074,  396,
      358,  358,  358,  358,  358,  358,  201,   63,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  360,   63,  361,
      361,  361,  361,  361,  361, 1074,  365,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  373,   63,   63,  366,
     1074,  374,  377,   63,  382,  361,  361,  361,  361,  361,

      361,  367,  365,   63,  368,  385,  369,  378,  381,   63,
      380, 1074,  373,   63,   63,  366,  375,  374,  377,   63,
      376,   63,   63,   63,  379,   63,  386,  367,   63,   63,
      368,   63,  369,  378,  381,   63,  380,  383,   63,   63,
      388,  387,  375,  384,  389,   63,  376,   63,   63,   63,
      379,   63,  386,   63,   63,   63,   63,   63,  392,  390,
      394,  395,  397,  383,   63,   63,  388,  387,   63,  384,
      389,   63,  391,  401,   63,   63,  398,  393,   63,   63,
       63,   63,   63,   63,  392,  390,  394,  400,  397,   63,
      403,  399,  402,   63,   63,   63,  409,   63,  391,  401,

       63,   63,  398,  393,   63,  404,   63,  405,   63,   63,
      410,   63,  411,  400,   63,   63,  403,  399,  402,   63,
      406,   63, 1074,   63,  407,   63,   63,   63,   63,   63,
       63,  404,  408,  405,   63,  417,  410,   63,  411,  414,
       63,  412,   63,  413,   63,   63,  406,  415,  416,   63,
      407,   63,   63,   63,   63,   63,   63,   63,  408,  418,
       63,  417,  420,   63,  422,  414,   63,  412,   63,  413,
       63,   63,   63,  415,  416,   63,  419,  421,  423,   63,
      425,  424,   63,   63,   63,  418,   63, 1074,  420,   63,
      422, 1074,   63, 1074, 1074, 1074, 1074,   63,   63,  441,

     1074, 1074,  419,  421, 1074,   63,  425,  424,   63,  478,
       63,  429,   63,  351,  351,  351,  351,  351,  351,  351,
      351,  351, 1074,   63,  431,  431,  431,  431,  431,  431,
      431,  431,  431,   63, 1074,  478, 1074, 1074,   63,  273,
     1074,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      275, 1074,  431,  431,  431,  431,  431,  431, 1074,   63,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  431,  431,
      431,  431,  431,  431,  273, 1074,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  433,  451,  434,  434,  434,

      434,  434,  434,  201,   63,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  203,  479, 1074, 1074, 1074, 1074,
     1074, 1074,  451,  434,  434,  434,  434,  434,  434,  201,
       63,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      360,  479,  438,  438,  438,  438,  438,  438, 1074, 1074,
      438,  438,  438,  438,  438,  438,  438,  438,  438, 1074,
     1074, 1074, 1074, 1074, 1074,  443, 1074,   63,  438,  438,
      438,  438,  438,  438,  439,  439,  439,  439,  439,  439,
      439,  439,  439,  442,  446,  440,  440,  440,  440,  440,
      440,  443,  445,   63,  444,   63,  447, 1074, 1074,   63,

       63,   63,  450,   63,   63,  457,   63,  448,  449,  442,
      446,  440,  440,  440,  440,  440,  440,   63,  445,  458,
      444,   63,  447,   63,   63,   63,   63,   63,  450,   63,
       63,  457,   63,  448,  449,  455, 1074,  456,  459, 1074,
       63,   63,   63,   63, 1074, 1074, 1074, 1074,  461,   63,
       63,  452,  452,   63,  452,  452,  452,  452,  452,  452,
      453,  455,  452,  456,  459,   63,   63,   63,   63,  460,
      462,  463,  452,  452,  461,  465,  464,   63,   63,   63,
       63,  466,  469,   63,  467,   63, 1074,  470,   63,   63,
       63,   63,  468,   63, 1074,  460,  462,  463,   63,  472,

     1074,  465,  464,   63,   63,  473,   63,  466,  469,   63,
      467,   63,   63,  470,   63,   63,   63,  471,  468,   63,
      474,  475,   63,  476,   63,  472,   63,  480,   63,   63,
      477,  473, 1074,   63,  481,   63,   63,   63,   63,  482,
      489,  485,   63,  471,  484,   63,  474,  475,   63,  476,
       63,   63,   63,  480,   63,   63,  477,  488,   63,   63,
      481,   63,   63,   63,  483,  482,   63,  485,   63,  486,
      484,   63,  490,   63,   63,   63,   63,   63,  491,   63,
     1074,  493,  487,  488,   63,   63,   63,   63,  492, 1074,
      483,   63,   63,  498,  495,  486,   63,   63,  494,   63,

       63,   63,   63,  496,  491,   63,   63,  493,  487,   63,
       63,   63,   63,   63,  492,  497,   63,   63,  499,  498,
      495,  500,   63,   63,  494,  532, 1074,  520,   63,  496,
       63,  522,   63,   63, 1074,   63,   63, 1074, 1074, 1074,
     1074,  497,   63,  525,   63,  524,   63,  500,   63,   63,
      560,  532,   63,  520, 1074, 1074,   63,  522, 1074,   63,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  525,
       63,  524,   63, 1074,   63,   63,  560,  273,   63,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  275,  273,
     1074,  507,  507,  507,  507,  507,  507,  507,  507,  507,

      433,  561,  508,  508,  508,  508,  508,  508, 1074,  521,
      508,  508,  508,  508,  508,  508,  508,  508,  508, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074,  561,  508,  508,
      508,  508,  508,  508,  509,  509,  509,  509,  509,  509,
      509,  509,  509,   63,  537,  510,  510,  510,  510,  510,
      510,  511,   63,  435,  435,  435,  435,  435,  435,  435,
      435,  435, 1074,   63, 1074, 1074, 1074, 1074, 1074,   63,
      537,  510,  510,  510,  510,  510,  510,  201,   63,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  201,   63,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  360,

       63,  513,  513,  513,  513,  513,  513, 1074,  607,  513,
      513,  513,  513,  513,  513,  513,  513,  513, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074,   63,  513,  513,  513,
      513,  513,  513,  201,  607,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  515,  529,  516,  516,  516,  516,
      516,  516, 1074,  523,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  536, 1074,   63,  531,   63,  526,   63,
      530,  529,  516,  516,  516,  516,  516,  516,  517,  523,
      533,  518,   63,  527,  528,  611,   63,  519,   63,  536,
      534,   63,  531,   63,  526,   63,  530, 1074,   63,  535,

       63,  535, 1074,  542,  517,  545,  533,  518,   63,  527,
      528,  611,   63,  519,   63,  538,  534,   63,  541,   63,
      546,  539,  547,  540,   63,  535,   63,  535,   63,  542,
      543,   63,  544, 1074,  548,  549,   63,   63,   63,  551,
       63,  538,   63,   63,  541,   63,  546,  539,  547,  540,
       63,   63,  550,  552,   63,   63,  543,   63,  544,  554,
      548,  549,   63,   63,   63,  551,   63,  553,   63,  557,
       63,   63,  555,   63,  556,   63,   63,   63,  550,  552,
      558,   63,  559,   63,   63,  554,   63,   63,   63, 1074,
       63,  562,  565,  553,   63,  557,   63,   63,  555,   63,

      556,   63,   63,  563,   63,  564,  558,  569,  559,   63,
       63,   63,   63,   63,   63,  567,   63,  562,  565,  573,
       63,  566,   63,   63,  571,  568,  572, 1074,   63,  563,
       63,  564,   63,  569,  570,   63,  574,   63,   63,   63,
       63,  567,   63, 1074,  575,  573,   63,  566,   63,   63,
      571,  568,  572,  577,   63,   63,  576,  579,   63,  609,
      570,   63,  574,   63,   63,   63,   63,  578,   63,   63,
      575,  580,   63,   63,   63,  581,   63, 1074,   63,  577,
       63,   63,  576,  579, 1074,  609, 1074, 1074, 1074,   63,
     1074, 1074, 1074,  578, 1074,   63, 1074,  580, 1074,   63,

       63,  581,   63,  585,   63,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  273, 1074,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  273, 1074,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  433, 1074,  587,  587,
      587,  587,  587,  587, 1074,   63,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  587,  587,  587,  587,  587,  587,
      273,   63,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  589,  599,  590,  590,  590,  590,  590,  590, 1074,
       63,  590,  590,  590,  590,  590,  590,  590,  590,  590,

     1074, 1074,   63, 1074, 1074, 1074, 1074, 1074,  599,  590,
      590,  590,  590,  590,  590,  201,   63,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  360,  201,   63,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  515, 1074,
      593,  593,  593,  593,  593,  593, 1074, 1074,  593,  593,
      593,  593,  593,  593,  593,  593,  593, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074,  596,  593,  593,  593,  593,
      593,  593,  594,  594,  594,  594,  594,  594,  594,  594,
      594,   63,  597,  595,  595,  595,  595,  595,  595,   63,
      598,  596,  600,  602,  601,  604,   63,   63, 1074,   63,

     1074,   63,   63,  608,  603,   63, 1074,   63,  597,  595,
      595,  595,  595,  595,  595,   63,  598,   63,  600,  602,
      601,  604,   63,   63,  605,   63,  606,   63,   63,  608,
      603,   63,  612,   63,   63,   63,  613,  610,  614,  615,
       63,   63,  618,   63, 1074, 1074, 1074,  617,   63, 1074,
      605, 1074,  606,  616,   63,   63,   63, 1074,  612,   63,
       63,   63,  613,  610,  614,  615,   63,   63,  618,   63,
      620,  621,  623,  617,   63,  619, 1074,  630,   63,  616,
       63,   63,   63,  622,   63,   63,   63,  629,  631,   63,
      624,  625,  626,   63,  627,   63,  620,  621,  623,   63,

     1074,  619,  628,  630,   63,   63,   63,  635,   63,  622,
       63,   63,   63,  632,  631,   63,   63,  633,  636,   63,
       63,   63,  634,  637,   63,   63,   63, 1074,  628,  638,
       63,   63,   63,  635,   63,   63,  641,  639,  640,  632,
      642, 1074,   63,  633,  636,   63,   63,   63,  634,  637,
       63,   63,   63,   63,  644,  638,   63,  643,   63,  645,
      647,   63,   63,  639,  640,  646,  642,  649,   63,   63,
       63,   63,   63,  648,   63,   63,  650,   63,  681,   63,
      644,  651,   63,  643,   63,  645,  647,   63,   63,   63,
       63,  646, 1074,  649,   63,   63,   63,   63,   63,  648,

       63,   63,  650,  652,  653,  669,   63,  651,   63,   63,
      682,  674,   63,   63,   63,   63,   63,   63,   63, 1074,
     1074, 1074, 1074,   63, 1074, 1074, 1074, 1074, 1074,  652,
      653,  669,   63, 1074, 1074,   63,  682,  674,   63, 1074,
       63,   63, 1074,   63,   63,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  273, 1074,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  433,  273,   63,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  589, 1074,  660,
      660,  660,  660,  660,  660, 1074, 1074,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  660,  660,  660,  660,  660,
      660,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      668,  671,  662,  662,  662,  662,  662,  662, 1074,   63,
      664,  664,  664,  664,  664,  664,  664,  664,  664, 1074,
       63, 1074, 1074, 1074,  698, 1074,  668,  671,  662,  662,
      662,  662,  662,  662,  201,   63,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  515,   63,  664,  664,  664,
      664,  664,  664, 1074,   63,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  664,  664,  664,  664,  664,  664,  201,

       63,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      666,  670,  667,  667,  667,  667,  667,  667,  672,  673,
      675,   63,   63,  676,  678, 1074,   63, 1074, 1074, 1074,
       63,   63, 1074,  677, 1074,  679,   63,  670,  667,  667,
      667,  667,  667,  667,  672,  673,  675,   63,   63,  676,
      678,   63,   63,   63,  680,  683,   63,   63,  685,  677,
       63,  679,   63,  684,  689,   63,  686,  687,  688,  694,
       63,   63,   63,   63, 1074,   63,  693,   63, 1074,   63,
      680,  683,  690,  699,  685,   63,   63, 1074,   63,  684,
      689,   63,  686,  687,  688,  694,   63,   63,   63,   63,

      691,   63,   63,   63,  692,   63,  695,  701,  690,  696,
       63,   63, 1074,  700,   63,  697,  702,   63,  703,   63,
       63,   63,   63,  704,  705,   63,  691,  706,   63,   63,
      692,   63,   63, 1074,   63,   63,   63,  707,   63,  700,
       63,   63,  702,   63,  703,   63,   63,   63,   63,  704,
      705,   63,  708,  706,  710,   63,  709,  713,   63,  711,
       63,   63,   63,  707,   63,   63,   63,   63,  712,   63,
       63,  715,  714,   63,   63,   63,   63,   63,  708,   63,
      710,   63,  709,  713,  730,   63,   63,   63,   63,  731,
      716,   63,  717,   63,  712,   63,   63,  715,  714,   63,

       63,   63,   63,   63, 1074,   63,   63,   63,   63, 1074,
      730,   63,   63,   63, 1074,  731,  716, 1074,  717,   63,
     1074,  742,  722,  722,  722,  722,  722,  722,  722,  722,
      722, 1074,   63,   63,   63,  273, 1074,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  589,  742,  722,  722,
      722,  722,  722,  722, 1074,  747,  725,  725,  725,  725,
      725,  725,  725,  725,  725, 1074,  744, 1074, 1074, 1074,
     1074, 1074, 1074, 1074,  722,  722,  722,  722,  722,  722,
      273,  747,  723,  723,  723,  723,  723,  723,  723,  723,
      723,  724,   63,  725,  725,  725,  725,  725,  725,  201,

       63,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      515,   63, 1074, 1074, 1074, 1074, 1074, 1074,   63,  725,
      725,  725,  725,  725,  725,  201,   63,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  666,   63,  727,  727,
      727,  727,  727,  727, 1074, 1074,  727,  727,  727,  727,
      727,  727,  727,  727,  727, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074,  727,  727,  727,  727,  727,  727,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  736,
      732,  729,  729,  729,  729,  729,  729,   63,  733,  734,
       63,   63,  735, 1074,   63,  740,   63,  739,  738,   63,

       63,  737, 1074, 1074,   63,  736,  732,  729,  729,  729,
      729,  729,  729,   63,  733,  734,   63,   63,  735,   63,
       63,  740,   63,  739,  738,   63,   63,  737,  741,  743,
       63,   63,  745,  746,  748,  750, 1074,   63,  753, 1074,
      749,  757,  751,  756,  752,   63,  754,   63,   63,   63,
       63,   63,   63,  755,  741,  743,   63,   63,  745,  746,
      748,  750,   63,   63,   63,   63,  749,  757,  751,  759,
      752,   63,   63,   63,   63,   63,   63,   63,   63,  758,
       63,   63,   63,   63,  760,   63,  761,   63,   63,   63,
       63,   63,   63,   63,  763,  759,  762,   63,   63,   63,

      765,   63,  764,   63,   63,  758,   63,   63,   63,   63,
      760,   63,  761,   63,   63,   63,   63,  767,   63,   63,
      763, 1074,  762,  766,   63,   63,  765,   63,  764,   63,
       63,  781,   63,   63,   63,   63, 1074, 1074, 1074, 1074,
       63, 1074,   63,  767, 1074, 1074, 1074,   63, 1074,  766,
       63, 1074, 1074, 1074, 1074, 1074, 1074,  781,   63,   63,
      273,   63,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  589,  273,   63,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  724,  788,  773,  773,  773,  773,  773,
      773, 1074, 1074,  773,  773,  773,  773,  773,  773,  773,

      773,  773, 1074, 1074, 1074, 1074, 1074, 1074, 1074,  790,
      788,  773,  773,  773,  773,  773,  773,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  783,   63,  775,  775,
      775,  775,  775,  775, 1074,  790,  777,  777,  777,  777,
      777,  777,  777,  777,  777, 1074,  796, 1074, 1074, 1074,
     1074, 1074,  783,   63,  775,  775,  775,  775,  775,  775,
      201, 1074,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  666,   63,  777,  777,  777,  777,  777,  777, 1074,
       63,  780,  780,  780,  780,  780,  780,  780,  780,  780,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,   63,  777,

      777,  777,  777,  777,  777,  201,   63,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  779,  787,  780,  780,
      780,  780,  780,  780,  782,  784,   63,  785,  786,   63,
       63, 1074,  793,   63,   63,  791, 1074,   63,   63, 1074,
     1074,  789, 1074,  787,  780,  780,  780,  780,  780,  780,
      782,  784,   63,  785,  786,   63,   63,   63,  793,   63,
       63,  791,  792,   63,   63,  798,  794,  789,  795,   63,
      797,   63,   63,  799,   63,   63,   63,   63,   63,   63,
     1074, 1074, 1074,   63, 1074,  805,   63, 1074,  792,  801,
       63,  798,  794,  800,  795,   63,  797,   63,   63,  799,

       63,   63,   63,   63,   63,   63,   63,  802,  803,   63,
      804,  805,   63,  806,  807,  801,   63,   63,   63,  800,
       63,  820,   63,   63,   63,   63,   63, 1074,   63, 1074,
     1074, 1074,   63,  802,  803,   63,  804, 1074, 1074,  806,
      807, 1074, 1074,   63,   63, 1074,   63,  820,   63,   63,
       63,   63,   63,  273,   63,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  724,  827,  812,  812,  812,  812,
      812,  812, 1074,   63,  812,  812,  812,  812,  812,  812,
      812,  812,  812, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074,  827,  812,  812,  812,  812,  812,  812,  273,   63,

      813,  813,  813,  813,  813,  813,  813,  813,  813,  814,
      826,  815,  815,  815,  815,  815,  815, 1074,   63,  815,
      815,  815,  815,  815,  815,  815,  815,  815, 1074, 1074,
       63, 1074, 1074, 1074, 1074, 1074,  826,  815,  815,  815,
      815,  815,  815,  201,   63,  436,  436,  436,  436,  436,
      436,  436,  436,  436,  666,  201,   63,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  779, 1074,  817,  817,
      817,  817,  817,  817, 1074, 1074,  817,  817,  817,  817,
      817,  817,  817,  817,  817, 1074, 1074, 1074, 1074, 1074,
     1074,   63, 1074,  821,  817,  817,  817,  817,  817,  817,

      818,  818,  818,  818,  818,  818,  818,  818,  818,  822,
     1074,  819,  819,  819,  819,  819,  819,   63,  823,  821,
      825,  829,   63,  830,   63,  831,  824,   63,   63,  828,
       63,  832,   63,   63,  836,  822,   63,  819,  819,  819,
      819,  819,  819,   63,  823,   63,  825,  829,   63,  830,
       63,  831,  824,   63,   63,  828,   63,  832,   63,   63,
      833,  834,   63,  835,  837,   63,  840,  838,   63,   63,
      854,   63,  839,   63,   63,   63,  856,   63,   63,   63,
       63,   63,   63, 1074,   63, 1074,  833,  834, 1074,  835,
      837,   63,  840,  838,   63, 1074,  854, 1074,  839,   63,

       63,   63,  856,   63,   63,   63,   63,   63,   63,  273,
       63,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      724,  273, 1074,  845,  845,  845,  845,  845,  845,  845,
      845,  845,  814,   63,  846,  846,  846,  846,  846,  846,
     1074, 1074,  846,  846,  846,  846,  846,  846,  846,  846,
      846, 1074, 1074, 1074, 1074, 1074, 1074, 1074,   63,   63,
      846,  846,  846,  846,  846,  846,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  860,   63,  848,  848,  848,
      848,  848,  848, 1074,   63,  850,  850,  850,  850,  850,
      850,  850,  850,  850, 1074,   63, 1074, 1074, 1074, 1074,

     1074,  860,   63,  848,  848,  848,  848,  848,  848,  201,
     1074,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      779,   63,  850,  850,  850,  850,  850,  850, 1074,   63,
      853,  853,  853,  853,  853,  853,  853,  853,  853, 1074,
      855,  861, 1074, 1074, 1074, 1074, 1074,   63,  850,  850,
      850,  850,  850,  850,  201,   63,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  852,  855,  853,  853,  853,
      853,  853,  853,   63,  857,   63,  858,   63,   63,  863,
      864,  866,  862,   63,  865, 1074,   63,   63,  867,   63,
      885, 1074,   63,  853,  853,  853,  853,  853,  853,   63,

      857,   63,  858,   63,   63,  863,  864,  866,  862,   63,
      865,  868,   63,   63,  867,   63,  870,  869,   63,   63,
       63,  890,   63,   63,   63,   63,  886,   63,  897,  899,
       63,   63,   63, 1074,   63, 1074, 1074,  868, 1074, 1074,
     1074, 1074,  870,  869, 1074,   63,   63,  890,   63,   63,
       63, 1074,  886,   63,  897,  899,   63,   63,   63,  273,
       63,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      814,  917,  876,  876,  876,  876,  876,  876, 1074,  918,
      876,  876,  876,  876,  876,  876,  876,  876,  876, 1074,
      893, 1074, 1074, 1074, 1074, 1074, 1074,  917,  876,  876,

      876,  876,  876,  876,  273,  918,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  878,   63,  879,  879,  879,
      879,  879,  879, 1074,  898,  879,  879,  879,  879,  879,
      879,  879,  879,  879, 1074, 1074,   63, 1074, 1074, 1074,
     1074, 1074,   63,  879,  879,  879,  879,  879,  879,  201,
      898,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      779,  201,   63,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  852, 1074,  881,  881,  881,  881,  881,  881,
     1074, 1074,  881,  881,  881,  881,  881,  881,  881,  881,
      881, 1074, 1074, 1074, 1074,  916, 1074, 1074,   63,  884,

      881,  881,  881,  881,  881,  881,  882,  882,  882,  882,
      882,  882,  882,  882,  882,   63,  887,  883,  883,  883,
      883,  883,  883,  888,   63,  884, 1074, 1074, 1074,   63,
      914,  894,   63,   63,  891,  921,   63,  895,  896,  889,
       63,   63,  887,  883,  883,  883,  883,  883,  883,  888,
      892,   63,   63,   63,   63,   63,  914,  894,   63,   63,
      891,  921,   63,  895,  896,  889,   63, 1074,  947, 1074,
     1074, 1074, 1074, 1074, 1074, 1074,  892,   63,   63,   63,
       63,  273, 1074,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  814,  273,  947,  905,  905,  905,  905,  905,

      905,  905,  905,  905,  878,  948,  906,  906,  906,  906,
      906,  906, 1074, 1074,  906,  906,  906,  906,  906,  906,
      906,  906,  906, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074,  948,  906,  906,  906,  906,  906,  906,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  920,   63,  908,
      908,  908,  908,  908,  908, 1074,   63,  910,  910,  910,
      910,  910,  910,  910,  910,  910, 1074,   63, 1074, 1074,
     1074, 1074, 1074,  920,   63,  908,  908,  908,  908,  908,
      908,  201,   63,  909,  909,  909,  909,  909,  909,  909,
      909,  909,  852,   63,  910,  910,  910,  910,  910,  910,

     1074, 1074,  913,  913,  913,  913,  913,  913,  913,  913,
      913, 1074,  915, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
      910,  910,  910,  910,  910,  910,  201,   63,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  912,  915,  913,
      913,  913,  913,  913,  913,  919,  922,  923,  924,  926,
      925,   63,  928,   63,   63,  927,  958,  950,  942,  943,
       63,   63,  929,   63,   63,  913,  913,  913,  913,  913,
      913,  919,   63,   63,   63,  926,   63,   63,  928, 1074,
       63,  927,  958,  950,  942,  943,   63,   63,  929,   63,
       63, 1074,  953, 1074,  951, 1074, 1074,  952,   63,   63,

       63, 1074,   63,  273, 1074,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  878,   63,  936,  936,  936,  936,
      936,  936, 1074,   63,  936,  936,  936,  936,  936,  936,
      936,  936,  936,   63, 1074, 1074, 1074, 1074,  954, 1074,
     1074,   63,  936,  936,  936,  936,  936,  936,  273,   63,
      937,  937,  937,  937,  937,  937,  937,  937,  937,   63,
      949,  938,  938,  938,  938,  938,  938, 1074,   63,  938,
      938,  938,  938,  938,  938,  938,  938,  938, 1074, 1074,
       63, 1074, 1074, 1074, 1074, 1074,  949,  938,  938,  938,
      938,  938,  938,  201,   63,  436,  436,  436,  436,  436,

      436,  436,  436,  436,  852,  201,   63,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  912,  973,  940,  940,
      940,  940,  940,  940, 1074,  956,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  955,  957,   63,  944,  968,
      974,   63,  969,  973,  940,  940,  940,  940,  940,  940,
      945,  956,   63,  975,  976,   63,   63,  946,   63, 1074,
       63,  955,  957,   63,  944,  968,  974,   63,  969, 1074,
     1074, 1074,   63, 1074, 1074, 1074,  945, 1074,   63,  975,
      976,   63,   63,  946,   63,  273,   63,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  878,  273,   63,  963,

      963,  963,  963,  963,  963,  963,  963,  963,  970, 1074,
      964,  964,  964,  964,  964,  964, 1074,   63,  964,  964,
      964,  964,  964,  964,  964,  964,  964, 1074,   63, 1074,
     1074, 1074, 1074, 1074,  970,  977,  964,  964,  964,  964,
      964,  964,  201,   63,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  912,   63,  966,  966,  966,  966,  966,
      966, 1074,   63,  966,  966,  966,  966,  966,  966,  966,
      966,  966,  971,  979,  978,   63,  980,  981,  972, 1074,
       63,  966,  966,  966,  966,  966,  966,  990,   63,   63,
       63,  982,  992,  995,   63,  997,   63,   63,  971,   63,

       63,   63, 1074,  981,  972,   63,   63,   63, 1074,   63,
     1074, 1074, 1074,  990, 1074,   63,   63,  982,  992,  995,
       63,  997,   63,   63, 1074,   63,   63, 1074,  991, 1074,
     1074,   63, 1074,   63,  273,   63,  987,  987,  987,  987,
      987,  987,  987,  987,  987,   63,   63,  988,  988,  988,
      988,  988,  988, 1074,  991,  988,  988,  988,  988,  988,
      988,  988,  988,  988, 1074,  993, 1074,   63,   63,   63,
       63,   63,   63,  988,  988,  988,  988,  988,  988,  201,
     1004,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      912,  993,  994,   63,   63,   63,   63,   63,  996,  996,

       63,  996,  996,  996,  996,  996,  996, 1005, 1074,  996,
     1023, 1074, 1074, 1024,   63, 1074, 1008, 1009,  994,  996,
      996, 1003, 1006,   63, 1074,  273,   63,  506,  506,  506,
      506,  506,  506,  506,  506,  506, 1023,   63,   63, 1024,
       63,   63, 1008, 1009, 1074, 1074, 1017, 1003, 1006, 1007,
     1007,   63, 1007, 1007, 1007, 1007, 1007, 1007, 1011, 1012,
     1007, 1018, 1035,   63,   63, 1021, 1022,   63, 1019, 1027,
     1007, 1007, 1017,   63, 1020,   63, 1028,   63, 1074,   63,
       63, 1025, 1026,   63, 1011, 1012, 1036, 1018, 1035,   63,
     1037, 1021, 1022, 1038, 1019, 1027, 1032,   63,   63,   63,

     1020,   63, 1028,   63, 1033,   63,   63, 1025, 1026,   63,
       63, 1034, 1036, 1039, 1040,   63, 1037,   63,   63, 1038,
     1046,   63, 1032,   63,   63, 1041,   63,   63, 1047,   63,
     1033,   63, 1049,   63, 1048,   63,   63, 1034, 1050, 1039,
     1040, 1051,   63,   63,   63,   63, 1046,   63, 1056, 1052,
       63, 1041,   63,   63, 1047,   63, 1058,   63, 1049,   63,
     1048,   63, 1057,   63, 1050, 1059,   63, 1051,   63,   63,
     1064,   63,   63,   63, 1056, 1052,   63,   63,   63, 1074,
     1074,   63, 1058, 1074, 1074,   63, 1074, 1074, 1057,   63,
     1074, 1059,   63, 1074, 1074,   63, 1064, 1074,   63,   63,

     1074, 1074, 1074,   63,   63, 1074, 1074, 1074, 1074, 1074,
     1074,   63,   43,   43,   43,   43,   45,   45,   45,   45,
       49,   49,   49,   49,   51, 1074,   51,   51,   52,   52,
       52,   52,  123, 1074,  123,  123,  127,  127,  196,  196,
      197,  197,  270,  270,  271,  271,  272,  272,  348,  348,
      349,  349,  426,  426,  427,  427,  428,  428,  454, 1074,
      454,  454,  501,  501,  502,  502,  503,  503,  583,  583,
      584,  584,  654,  654,  655,  655,  656,  656,  718,  718,
      719,  719,  720,  720,  583,  583,  769,  769,  770,  770,
      808,  808,  809,  809,  810,  810,  841,  841,  842,  842,

      843,  843,  719,  719,  872,  872,  873,  873,  900,  900,
      901,  901,  902,  902,  930,  930,  931,  931,  933,  933,
      809,  809,  960,  960,  961,  961,  983,  983,  984,  984,
      985,  985,  996, 1074,  996,  996,  998, 1074,  998,  998,
      999,  999, 1000, 1000, 1007, 1074, 1007, 1007, 1010, 1074,
     1010, 1010,  872,  872, 1014, 1014, 1015, 1015, 1029, 1029,
     1030, 1030, 1042, 1042, 1043, 1043, 1044, 1044,  931,  931,
     1054, 1054, 1060, 1060, 1061, 1061, 1062, 1062, 1066, 1066,
     1069, 1069, 1070, 1070, 1072, 1072, 1073, 1073,    7, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074
    } ;

static yyconst flex_int16_t yy_chk[6165] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   29, 1163,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   27,   16,   63,   39,   24,   17,   29,   24,   27,
       34,   39,   34,   46,   46,   34,   30,   24,   16, 1159,
       24,   16,   16,   16,   16,   16,   16,   27,   16,   63,
       39,   24,   30, 1157,   24,   27,   34,   39,   34,   47,
       47,   34,   30,   24,   16,   20,   20, 1153,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   65,   21,   48,   48,   41,   66, 1147,
       21, 1139,   21,   41,   67, 1138,   68,   72, 1133,   21,
     1129,   25, 1128, 1124, 1120, 1082,   72,   21,   21,   65,
       21, 1073,   25,   41,   66,   25,   21,   25,   21,   41,
       67,   25,   68,   72,   31,   21,   22,   25,   22,   22,
       31,   22,   72,   32,   28,   73,   31,   22,   25,   22,
       22,   25,   28,   25,   40, 1072,   22,   25,   40,   28,
       31, 1070,   22,   32,   22,   22,   31,   22, 1069,   32,
       28,   73,   31,   22,   40,   22,   22, 1068,   28,   76,

       40,   35,   22,   23,   40,   28,   23,   23,   69,   32,
       77,   23,   35,   69,   23,   35,   23,   23,   35,   79,
       40,   79,   69,   23, 1067,   76, 1066,   35, 1065,   23,
     1062, 1061,   23,   23,   69, 1055,   77,   23,   35,   69,
       23,   35,   23,   23,   35,   79, 1054,   79,   69,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       42,   26,   26,   26,   26,   26,   26,   33,   26,   83,
     1053,   33,   26,   75, 1044,   26,   42,   33,   71,   71,
       75,   26,   33,   33, 1043, 1042,   42,   26,   26,   26,
       26,   26,   26,   33,   26,   83,   36,   33,   26,   75,

       36,   26,   42,   33,   71,   71,   75,   26,   33,   33,
       36,   38,   38,   70, 1031, 1030,   36, 1029,   78, 1015,
       74,   38,   36, 1014,   96,   80,   36,   90,   74,   38,
       70,   90,   78,   80, 1013, 1001,   36,   99,   38,   70,
       74,   38,   36,   37,   78,   37,   74,   38,   37,   37,
       96,   80, 1000,   90,   74,   38,   70,   90,   78,   80,
       37,   37,  999,   99,   38,  985,   74,   38,  984,   37,
      983,   37,  105,  966,   37,   37,   58,   58,   58,   58,
       58,   58,   58,   58,   58,  112,   37,   37,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,  105,   56,

       56,   56,   56,   56,   56,   81,   56,  962,  100,  961,
      960,  112,  959,  936,  933,  931,  930,   81,  910,  904,
      903,  902,  901,  900,  113,   56,   56,   56,   56,   56,
       56,   81,   56,   61,   61,   61,   61,   61,   61,   61,
       61,   61,  100,   81,   61,   61,   61,   61,   61,   61,
      113,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      876,  873,  872,  871,  850,  844,  843,  842,  100,   84,
       61,   61,   61,   61,   61,   61,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   84,   64,   64,   64,
       64,   64,   64,   82,   64,   84,  841,  827,   82,  812,

      810,   93,   93,   87,   85,   88,   86,   64,  809,  808,
      777,  771,   84,   64,   64,   64,   64,   64,   64,   82,
       64,   85,   86,   87,   82,   88,   92,   93,   93,   87,
       85,   88,   86,   64,   89,   91,   95,   97,   95,   89,
       92,  770,   97,   91,   94,   98,   98,   85,   86,   87,
       91,   88,   92,   89,   89,  108,   94,  769,  102,   94,
       89,   91,   95,   97,   95,   89,   92,  101,   97,   91,
       94,   98,   98,  101,  102,  108,   91,  107,  103,   89,
       89,  108,   94,  103,  102,   94,  104,  106,  104,  104,
      106,  109,  111,  101,  114,  107,  109,  104,  768,  101,

      102,  108,  722,  107,  103,  116,  720,  110,  719,  103,
      118,  111,  104,  106,  104,  104,  106,  109,  111,  118,
      117,  107,  109,  104,  110,  133,  115,  110,  114,  134,
      138,  116,  117,  110,  115,  119,  118,  111,  120,  141,
      135,  120,  119,  135,  146,  118,  117,  121,  146,  121,
      110,  133,  115,  110,  114,  134,  138,  718,  117,  664,
      115,  119,  657,  656,  120,  141,  135,  120,  119,  135,
      146,  655,  654,  121,  146,  121,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  161,  124,  124,  124,
      124,  124,  124,  131,  124,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  144,  144,  587,  584,  583,  582,
      513,  504,  161,  124,  124,  124,  124,  124,  124,  149,
      124,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      144,  144,  128,  128,  128,  128,  128,  128,  503,  149,
      502,  501,  148,  431,  428,  149,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  427,  426,  193,  128,  128,
      128,  128,  128,  128,  130,  149,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  148,  130,  130,  130,
      130,  130,  130,  193,  200,  358,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  350,  349,  348,  347,  282,

      272,  271,  148,  130,  130,  130,  130,  130,  130,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  140,
      132,  132,  132,  132,  132,  132,  136,  137,  139,  140,
      270,  269,  136,  137,  142,  145,  142,  145,  239,  198,
      143,  139,  197,  196,  206,  140,  132,  132,  132,  132,
      132,  132,  136,  137,  139,  140,  143,  147,  136,  137,
      142,  145,  142,  145,  150,  153,  143,  139,  151,  152,
      206,  152,  153,  147,  154,  155,  127,  155,  156,  125,
      159,  150,  143,  147,  151,   57,  160,  157,  154,  164,
      150,  153,  159,  158,  151,  152,  156,  152,  153,  147,

      154,  155,  160,  155,  156,  157,  159,  150,  162,  165,
      151,  158,  160,  157,  154,  163,  166,  170,  159,  158,
      167,  167,  156,  164,  162,  163,  169,  165,  160,  170,
      166,  157,  168,  168,  162,  165,  172,  158,  176,  171,
       53,  163,  166,  170,  173,  172,  167,  167,  171,  164,
      162,  163,  171,  165,  174,  170,  166,  171,  176,  173,
      169,  175,  172,  177,  176,  171,  174,  168,   52,  177,
      173,  172,  178,  178,  171,  182,  179,  175,  171,  180,
      174,   49,  180,  171,  176,  173,  169,  175,  179,  177,
       44,  181,  174,  168,  181,  177,  183,  183,  178,  178,

      184,  186,  179,  175,  190,  180,  185,  189,  180,  182,
      208,  185,  184,  185,  179,  187,  190,  181,  188,  186,
      181,   19,  183,  183,   18,  189,  184,  186,  218,  191,
      190,  187,  185,  189,  188,  182,  208,  185,  184,  185,
      192,  187,  190,  222,  188,  186,  191,  210,   14,  210,
      192,  189,   12,  211,  218,  191,    7,  187,    4,    3,
      188,    0,    0,    0,    0,    0,  192,    0,  246,  222,
        0,    0,  191,  210,  212,  210,  192,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  211,  194,  194,
      194,  194,  194,  194,  246,  194,  201,  201,  201,  201,

      201,  201,  201,  201,  201,    0,    0,    0,  212,    0,
        0,    0,    0,  211,  194,  194,  194,  194,  194,  194,
        0,  194,  199,    0,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  212,  199,  199,  199,  199,  199,
      199,  204,  263,  204,  204,  204,  204,  204,  204,  204,
      204,  204,    0,  215,    0,    0,    0,    0,    0,    0,
      215,  199,  199,  199,  199,  199,  199,  202,  263,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  215,
      202,  202,  202,  202,  202,  202,  215,  207,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,    0,    0,

        0,    0,    0,  230,  230,  207,  202,  202,  202,  202,
      202,  202,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  207,  213,  203,  203,  203,  203,  203,  203,  230,
      230,  207,    0,    0,    0,    0,    0,    0,  213,  217,
        0,    0,    0,    0,    0,    0,    0,  207,  213,  203,
      203,  203,  203,  203,  203,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  213,  216,  205,  205,  205,  205,
      205,  205,  209,  217,  214,  209,  214,  219,  220,  219,
      220,  225,    0,  223,  228,  216,  223,  234,  227,    0,
      227,  216,  205,  205,  205,  205,  205,  205,  209,  217,

      214,  209,  214,  219,  220,  219,  220,  221,  224,  223,
      226,  216,  223,  229,  227,  225,  227,  287,  228,  221,
      231,  234,  232,    0,  224,  232,  226,  231,  238,  229,
      233,  233,    0,  221,  224,    0,  226,    0,  241,  229,
      241,  225,    0,  287,  228,  221,  231,  234,  232,  235,
      224,  232,  226,  231,  240,  229,  233,  233,  235,  235,
      235,  236,  238,  237,  241,  244,  241,  235,  243,  240,
        0,  240,  242,  245,  236,  235,  237,  243,  242,  245,
      240,  244,    0,  249,  235,  235,  235,  236,  238,  237,
      299,  244,  247,  235,  243,  240,  247,  240,  242,  245,

      236,  249,  237,  243,  242,  245,  248,  244,  247,  249,
      250,  251,  251,  252,  250,  253,  299,  254,  247,  255,
      253,    0,  247,  248,  258,    0,  257,  249,  259,  252,
      301,  258,  248,  254,  247,  255,  250,  251,  251,  252,
      250,  253,  257,  254,  259,  255,  253,  256,  262,  248,
      258,  261,  257,  267,  259,  252,  301,  258,  264,  254,
      261,  255,  256,  265,  256,  260,  260,  289,  257,  266,
      259,  283,  283,  256,  284,  266,  289,  261,  264,  284,
      265,  285,  262,  285,  264,  329,  261,  267,  256,  265,
      256,  260,  260,  289,    0,  266,    0,  283,  283,    0,

      284,  266,  289,    0,  264,  284,  265,  285,  262,  285,
        0,  329,    0,  267,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  274,    0,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  331,  274,  274,  274,  274,
      274,  274,  276,  290,  276,  276,  276,  276,  276,  276,
      276,  276,  276,    0,    0,    0,    0,    0,    0,    0,
      334,  331,  274,  274,  274,  274,  274,  274,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  290,  379,  275,
      275,  275,  275,  275,  275,  277,  334,  277,  277,  277,
      277,  277,  277,  277,  277,  277,    0,  291,    0,    0,

        0,    0,    0,  290,  379,  275,  275,  275,  275,  275,
      275,  278,    0,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  315,  278,  278,  278,  278,  278,  278,
      279,  291,  279,  279,  279,  279,  279,  279,  279,  279,
      279,    0,  315,    0,    0,    0,    0,    0,    0,  315,
      278,  278,  278,  278,  278,  278,  280,  291,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  315,  280,
      280,  280,  280,  280,  280,  281,  286,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  292,  292,  286,  288,
        0,  293,  295,  295,  302,  280,  280,  280,  280,  280,

      280,  288,  286,  293,  288,  304,  288,  296,  300,  288,
      298,    0,  292,  292,  286,  288,  294,  293,  295,  295,
      294,  294,  298,  296,  297,  300,  305,  288,  302,  293,
      288,  297,  288,  296,  300,  288,  298,  303,  305,  304,
      307,  306,  294,  303,  308,  303,  294,  294,  298,  296,
      297,  300,  305,  306,  302,  307,  308,  297,  311,  309,
      313,  314,  316,  303,  305,  304,  307,  306,  309,  303,
      308,  303,  310,  319,  311,  316,  317,  312,  310,  306,
      313,  307,  308,  312,  311,  309,  313,  318,  316,  319,
      321,  317,  320,  318,  309,  314,  327,  321,  310,  319,

      311,  316,  317,  312,  310,  322,  313,  323,  320,  312,
      328,  328,  330,  318,  323,  319,  321,  317,  320,  318,
      324,  314,    0,  321,  325,  322,  324,  325,  330,  326,
      327,  322,  326,  323,  320,  338,  328,  328,  330,  335,
      323,  332,  332,  333,  333,  335,  324,  336,  337,  338,
      325,  322,  324,  325,  330,  326,  327,  337,  326,  339,
      339,  338,  341,  336,  343,  335,  343,  332,  332,  333,
      333,  335,  342,  336,  337,  338,  340,  342,  344,  340,
      346,  345,  341,  337,  345,  339,  339,    0,  341,  336,
      343,    0,  343,    0,    0,    0,    0,  346,  342,  362,

        0,    0,  340,  342,    0,  340,  346,  345,  341,  398,
      345,  351,  344,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  353,  346,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  362,    0,  398,    0,    0,  344,  352,
        0,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,    0,  352,  352,  352,  352,  352,  352,  355,  362,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  352,  352,
      352,  352,  352,  352,  354,    0,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  372,  354,  354,  354,

      354,  354,  354,  357,  372,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  399,    0,    0,    0,    0,
        0,    0,  372,  354,  354,  354,  354,  354,  354,  359,
      372,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  399,  359,  359,  359,  359,  359,  359,  361,    0,
      361,  361,  361,  361,  361,  361,  361,  361,  361,    0,
        0,    0,    0,    0,    0,  364,    0,  364,  359,  359,
      359,  359,  359,  359,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  363,  367,  360,  360,  360,  360,  360,
      360,  364,  366,  364,  365,  365,  368,    0,    0,  368,

      367,  366,  371,  363,  371,  376,  403,  369,  370,  363,
      367,  360,  360,  360,  360,  360,  360,  376,  366,  377,
      365,  365,  368,  369,  370,  368,  367,  366,  371,  363,
      371,  376,  403,  369,  370,  374,    0,  375,  378,    0,
      375,  378,  374,  376,    0,    0,    0,    0,  381,  369,
      370,  373,  373,  377,  373,  373,  373,  373,  373,  373,
      373,  374,  373,  375,  378,  381,  375,  378,  374,  380,
      382,  383,  373,  373,  381,  385,  384,  380,  382,  377,
      386,  386,  389,  385,  387,  387,    0,  390,  383,  384,
      389,  381,  388,  390,    0,  380,  382,  383,  392,  392,

        0,  385,  384,  380,  382,  393,  386,  386,  389,  385,
      387,  387,  388,  390,  383,  384,  389,  391,  388,  390,
      394,  395,  393,  396,  392,  392,  391,  400,  394,  396,
      397,  393,    0,  395,  401,  400,  397,  401,  388,  402,
      410,  406,  402,  391,  405,  408,  394,  395,  393,  396,
      406,  412,  391,  400,  394,  396,  397,  409,  405,  395,
      401,  400,  397,  401,  404,  402,  404,  406,  402,  407,
      405,  408,  411,  413,  410,  409,  406,  412,  414,  417,
        0,  416,  407,  409,  405,  407,  414,  418,  415,    0,
      404,  415,  404,  423,  420,  407,  420,  416,  419,  413,

      410,  409,  423,  421,  414,  417,  411,  416,  407,  421,
      419,  407,  414,  418,  415,  422,  422,  415,  424,  423,
      420,  425,  420,  416,  419,  452,    0,  442,  423,  421,
      442,  444,  411,  425,    0,  421,  419,    0,    0,    0,
        0,  422,  422,  447,  444,  446,  446,  425,  455,  447,
      478,  452,  424,  442,    0,    0,  442,  444,    0,  425,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  447,
      444,  446,  446,    0,  455,  447,  478,  430,  424,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  432,
        0,  432,  432,  432,  432,  432,  432,  432,  432,  432,

      432,  479,  432,  432,  432,  432,  432,  432,  434,  443,
      434,  434,  434,  434,  434,  434,  434,  434,  434,    0,
        0,    0,    0,    0,    0,    0,    0,  479,  432,  432,
      432,  432,  432,  432,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  443,  457,  433,  433,  433,  433,  433,
      433,  435,  457,  435,  435,  435,  435,  435,  435,  435,
      435,  435,    0,  485,    0,    0,    0,    0,    0,  443,
      457,  433,  433,  433,  433,  433,  433,  436,  457,  436,
      436,  436,  436,  436,  436,  436,  436,  436,  437,  485,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      497,  437,  437,  437,  437,  437,  437,  438,  528,  438,
      438,  438,  438,  438,  438,  438,  438,  438,    0,    0,
        0,    0,    0,    0,    0,    0,  497,  437,  437,  437,
      437,  437,  437,  439,  528,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  449,  439,  439,  439,  439,
      439,  439,  440,  445,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  456,    0,  449,  451,  445,  448,  456,
      450,  449,  439,  439,  439,  439,  439,  439,  441,  445,
      453,  441,  450,  448,  448,  532,  451,  441,  448,  456,
      453,  449,  451,  445,  448,  456,  450,    0,  453,  453,

      454,  454,    0,  460,  441,  463,  453,  441,  450,  448,
      448,  532,  451,  441,  448,  458,  453,  459,  459,  460,
      464,  458,  465,  458,  453,  453,  454,  454,  458,  460,
      461,  463,  462,    0,  466,  467,  545,  461,  462,  469,
      464,  458,  465,  459,  459,  460,  464,  458,  465,  458,
      466,  467,  468,  470,  458,  469,  461,  463,  462,  472,
      466,  467,  545,  461,  462,  469,  464,  471,  465,  475,
      468,  470,  473,  471,  474,  472,  466,  467,  468,  470,
      476,  469,  477,  476,  475,  472,  549,  477,  473,    0,
      474,  480,  483,  471,  483,  475,  468,  470,  473,  471,

      474,  472,  481,  481,  482,  482,  476,  487,  477,  476,
      475,  480,  549,  477,  473,  486,  474,  480,  483,  491,
      483,  484,  484,  487,  489,  486,  490,    0,  481,  481,
      482,  482,  486,  487,  488,  492,  492,  480,  490,  491,
      488,  486,  489,    0,  493,  491,  493,  484,  484,  487,
      489,  486,  490,  495,  530,  495,  494,  498,  486,  530,
      488,  492,  492,  494,  490,  491,  488,  496,  489,  498,
      493,  499,  493,  499,  496,  500,  551,    0,  500,  495,
      530,  495,  494,  498,    0,  530,    0,    0,    0,  494,
        0,    0,    0,  496,    0,  498,    0,  499,    0,  499,

      496,  500,  551,  505,  500,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  506,    0,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  507,    0,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,    0,  507,  507,
      507,  507,  507,  507,  508,  555,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  507,  507,  507,  507,  507,  507,
      509,  555,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  520,  509,  509,  509,  509,  509,  509,  510,
      556,  510,  510,  510,  510,  510,  510,  510,  510,  510,

        0,    0,  520,    0,    0,    0,    0,    0,  520,  509,
      509,  509,  509,  509,  509,  512,  556,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  514,  520,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,    0,
      514,  514,  514,  514,  514,  514,  516,    0,  516,  516,
      516,  516,  516,  516,  516,  516,  516,    0,    0,    0,
        0,    0,    0,    0,    0,  517,  514,  514,  514,  514,
      514,  514,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  517,  518,  515,  515,  515,  515,  515,  515,  518,
      519,  517,  521,  523,  522,  525,  525,  519,    0,  523,

        0,  521,  522,  529,  524,  529,    0,  517,  518,  515,
      515,  515,  515,  515,  515,  518,  519,  524,  521,  523,
      522,  525,  525,  519,  526,  523,  527,  521,  522,  529,
      524,  529,  533,  526,  531,  527,  534,  531,  535,  536,
      536,  533,  539,  524,    0,    0,    0,  538,  539,    0,
      526,    0,  527,  537,  535,  538,  534,    0,  533,  526,
      531,  527,  534,  531,  535,  536,  536,  533,  539,  537,
      541,  542,  544,  538,  539,  540,    0,  550,  542,  537,
      535,  538,  534,  543,  540,  543,  541,  548,  552,  544,
      546,  546,  546,  550,  546,  537,  541,  542,  544,  547,

        0,  540,  547,  550,  542,  557,  559,  560,  552,  543,
      540,  543,  541,  553,  552,  544,  553,  554,  561,  550,
      546,  548,  558,  562,  558,  547,  554,    0,  547,  563,
      565,  557,  559,  560,  552,  562,  567,  564,  566,  553,
      568,    0,  553,  554,  561,  563,  546,  548,  558,  562,
      558,  566,  554,  564,  570,  563,  565,  569,  568,  571,
      573,  562,  570,  564,  566,  572,  568,  575,  571,  575,
      567,  563,  573,  574,  569,  577,  576,  566,  610,  564,
      570,  578,  572,  569,  568,  571,  573,  581,  570,  574,
      576,  572,    0,  575,  571,  575,  567,  578,  573,  574,

      569,  577,  576,  579,  580,  597,  601,  578,  572,  580,
      611,  603,  610,  581,  597,  574,  576,  603,  579,    0,
        0,    0,    0,  578,    0,    0,    0,    0,    0,  579,
      580,  597,  601,    0,    0,  580,  611,  603,  610,    0,
      597,  624,    0,  603,  579,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  586,    0,  586,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  588,  624,  588,  588,
      588,  588,  588,  588,  588,  588,  588,  588,    0,  588,
      588,  588,  588,  588,  588,  590,    0,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  588,  588,  588,  588,  588,
      588,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      596,  599,  589,  589,  589,  589,  589,  589,  593,  599,
      593,  593,  593,  593,  593,  593,  593,  593,  593,    0,
      596,    0,    0,    0,  627,    0,  596,  599,  589,  589,
      589,  589,  589,  589,  592,  599,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  596,  592,  592,  592,
      592,  592,  592,  595,  627,  595,  595,  595,  595,  595,
      595,  595,  595,  595,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  592,  592,  592,  592,  592,  592,  594,

      627,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  598,  594,  594,  594,  594,  594,  594,  600,  602,
      604,  598,  602,  605,  607,    0,  604,    0,    0,    0,
      600,  605,    0,  606,    0,  608,  607,  598,  594,  594,
      594,  594,  594,  594,  600,  602,  604,  598,  602,  605,
      607,  608,  604,  606,  609,  612,  600,  605,  614,  606,
      613,  608,  607,  613,  618,  614,  615,  616,  617,  623,
      609,  618,  615,  616,    0,  612,  622,  608,    0,  606,
      609,  612,  619,  628,  614,  623,  613,    0,  617,  613,
      618,  614,  615,  616,  617,  623,  609,  618,  615,  616,

      620,  612,  619,  620,  621,  621,  625,  630,  619,  625,
      622,  623,    0,  629,  617,  626,  631,  628,  632,  633,
      632,  629,  634,  635,  636,  631,  620,  637,  619,  620,
      621,  621,  640,    0,  637,  625,  622,  638,  626,  629,
      638,  630,  631,  628,  632,  633,  632,  629,  634,  635,
      636,  631,  639,  637,  642,  639,  641,  645,  640,  643,
      637,  625,  646,  638,  626,  641,  638,  630,  644,  645,
      642,  648,  647,  649,  648,  650,  644,  651,  639,  647,
      642,  639,  641,  645,  668,  669,  668,  676,  646,  669,
      652,  641,  653,  643,  644,  645,  642,  648,  647,  649,

      648,  650,  644,  651,    0,  647,  652,  680,  653,    0,
      668,  669,  668,  676,    0,  669,  652,    0,  653,  643,
      660,  682,  660,  660,  660,  660,  660,  660,  660,  660,
      660,    0,  652,  680,  653,  659,    0,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  682,  659,  659,
      659,  659,  659,  659,  662,  687,  662,  662,  662,  662,
      662,  662,  662,  662,  662,    0,  684,    0,    0,    0,
        0,    0,    0,    0,  659,  659,  659,  659,  659,  659,
      661,  687,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  691,  661,  661,  661,  661,  661,  661,  663,

      684,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  694,    0,    0,    0,    0,    0,    0,  691,  661,
      661,  661,  661,  661,  661,  665,  684,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  694,  665,  665,
      665,  665,  665,  665,  667,    0,  667,  667,  667,  667,
      667,  667,  667,  667,  667,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  665,  665,  665,  665,  665,  665,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  674,
      670,  666,  666,  666,  666,  666,  666,  670,  671,  672,
      671,  672,  673,    0,  677,  679,  674,  678,  677,  679,

      678,  675,    0,    0,  673,  674,  670,  666,  666,  666,
      666,  666,  666,  670,  671,  672,  671,  672,  673,  675,
      677,  679,  674,  678,  677,  679,  678,  675,  681,  683,
      673,  683,  685,  686,  688,  690,    0,  681,  695,    0,
      689,  699,  692,  698,  693,  675,  696,  690,  702,  685,
      699,  686,  688,  697,  681,  683,  689,  683,  685,  686,
      688,  690,  692,  681,  693,  695,  689,  699,  692,  701,
      693,  696,  698,  690,  702,  685,  699,  686,  688,  700,
      697,  701,  689,  703,  704,  700,  705,  706,  692,  707,
      693,  695,  708,  710,  711,  701,  709,  696,  698,  714,

      713,  715,  712,  711,  731,  700,  697,  701,  709,  703,
      704,  700,  705,  706,  712,  707,  713,  717,  708,  710,
      711,    0,  709,  716,  716,  714,  713,  715,  712,  711,
      731,  730,  733,  738,  709,  717,    0,    0,    0,    0,
      712,    0,  713,  717,    0,    0,    0,  730,    0,  716,
      716,    0,    0,    0,    0,    0,    0,  730,  733,  738,
      721,  717,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  723,  730,  723,  723,  723,  723,  723,  723,
      723,  723,  723,  723,  740,  723,  723,  723,  723,  723,
      723,  725,    0,  725,  725,  725,  725,  725,  725,  725,

      725,  725,    0,    0,    0,    0,    0,    0,    0,  742,
      740,  723,  723,  723,  723,  723,  723,  724,  724,  724,
      724,  724,  724,  724,  724,  724,  734,  734,  724,  724,
      724,  724,  724,  724,  727,  742,  727,  727,  727,  727,
      727,  727,  727,  727,  727,    0,  748,    0,    0,    0,
        0,    0,  734,  734,  724,  724,  724,  724,  724,  724,
      726,    0,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  749,  726,  726,  726,  726,  726,  726,  729,
      748,  729,  729,  729,  729,  729,  729,  729,  729,  729,
        0,    0,    0,    0,    0,    0,    0,    0,  749,  726,

      726,  726,  726,  726,  726,  728,  748,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  739,  728,  728,
      728,  728,  728,  728,  732,  735,  735,  736,  737,  736,
      732,    0,  745,  739,  737,  743,    0,  743,  745,    0,
        0,  741,    0,  739,  728,  728,  728,  728,  728,  728,
      732,  735,  735,  736,  737,  736,  732,  741,  745,  739,
      737,  743,  744,  743,  745,  751,  746,  741,  747,  747,
      750,  744,  746,  752,  751,  753,  754,  750,  755,  756,
        0,    0,    0,  741,    0,  764,  764,    0,  744,  758,
      752,  751,  746,  757,  747,  747,  750,  744,  746,  752,

      751,  753,  754,  750,  755,  756,  758,  759,  762,  757,
      763,  764,  764,  765,  766,  758,  752,  767,  783,  757,
      765,  781,  763,  762,  759,  781,  766,    0,  785,    0,
        0,    0,  758,  759,  762,  757,  763,    0,    0,  765,
      766,    0,    0,  767,  783,    0,  765,  781,  763,  762,
      759,  781,  766,  772,  785,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  790,  772,  772,  772,  772,
      772,  772,  773,  791,  773,  773,  773,  773,  773,  773,
      773,  773,  773,    0,    0,    0,    0,    0,    0,    0,
        0,  790,  772,  772,  772,  772,  772,  772,  774,  791,

      774,  774,  774,  774,  774,  774,  774,  774,  774,  774,
      789,  774,  774,  774,  774,  774,  774,  775,  795,  775,
      775,  775,  775,  775,  775,  775,  775,  775,    0,    0,
      789,    0,    0,    0,    0,    0,  789,  774,  774,  774,
      774,  774,  774,  776,  795,  776,  776,  776,  776,  776,
      776,  776,  776,  776,  776,  778,  789,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,    0,  778,  778,
      778,  778,  778,  778,  780,    0,  780,  780,  780,  780,
      780,  780,  780,  780,  780,    0,    0,    0,    0,    0,
        0,  782,    0,  782,  778,  778,  778,  778,  778,  778,

      779,  779,  779,  779,  779,  779,  779,  779,  779,  784,
        0,  779,  779,  779,  779,  779,  779,  782,  786,  782,
      788,  793,  784,  794,  793,  796,  787,  786,  797,  792,
      798,  796,  794,  796,  802,  784,  788,  779,  779,  779,
      779,  779,  779,  787,  786,  792,  788,  793,  784,  794,
      793,  796,  787,  786,  797,  792,  798,  796,  794,  796,
      799,  800,  788,  801,  803,  805,  807,  804,  802,  787,
      820,  792,  806,  806,  807,  823,  822,  799,  824,  801,
      803,  800,  804,    0,  822,    0,  799,  800,    0,  801,
      803,  805,  807,  804,  802,    0,  820,    0,  806,  806,

      807,  823,  822,  799,  824,  801,  803,  800,  804,  811,
      822,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  813,    0,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  813,  830,  813,  813,  813,  813,  813,  813,
      815,    0,  815,  815,  815,  815,  815,  815,  815,  815,
      815,    0,    0,    0,    0,    0,    0,    0,  835,  830,
      813,  813,  813,  813,  813,  813,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  828,  856,  814,  814,  814,
      814,  814,  814,  817,  835,  817,  817,  817,  817,  817,
      817,  817,  817,  817,    0,  828,    0,    0,    0,    0,

        0,  828,  856,  814,  814,  814,  814,  814,  814,  816,
        0,  816,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  828,  816,  816,  816,  816,  816,  816,  819,  869,
      819,  819,  819,  819,  819,  819,  819,  819,  819,    0,
      821,  829,    0,    0,    0,    0,    0,  821,  816,  816,
      816,  816,  816,  816,  818,  869,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  821,  818,  818,  818,
      818,  818,  818,  821,  825,  829,  826,  825,  826,  832,
      833,  836,  831,  833,  834,    0,  834,  836,  837,  837,
      855,    0,  832,  818,  818,  818,  818,  818,  818,  831,

      825,  829,  826,  825,  826,  832,  833,  836,  831,  833,
      834,  838,  834,  836,  837,  837,  840,  839,  832,  839,
      870,  860,  857,  860,  855,  831,  857,  838,  866,  868,
      868,  866,  840,    0,  887,    0,    0,  838,    0,    0,
        0,    0,  840,  839,    0,  839,  870,  860,  857,  860,
      855,    0,  857,  838,  866,  868,  868,  866,  840,  845,
      887,  845,  845,  845,  845,  845,  845,  845,  845,  845,
      845,  888,  845,  845,  845,  845,  845,  845,  846,  889,
      846,  846,  846,  846,  846,  846,  846,  846,  846,    0,
      862,    0,    0,    0,    0,    0,    0,  888,  845,  845,

      845,  845,  845,  845,  847,  889,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  847,  862,  847,  847,  847,
      847,  847,  847,  848,  867,  848,  848,  848,  848,  848,
      848,  848,  848,  848,    0,    0,  867,    0,    0,    0,
        0,    0,  862,  847,  847,  847,  847,  847,  847,  849,
      867,  849,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  851,  867,  851,  851,  851,  851,  851,  851,  851,
      851,  851,  851,    0,  851,  851,  851,  851,  851,  851,
      853,    0,  853,  853,  853,  853,  853,  853,  853,  853,
      853,    0,    0,    0,    0,  886,    0,    0,  893,  854,

      851,  851,  851,  851,  851,  851,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  854,  858,  852,  852,  852,
      852,  852,  852,  859,  893,  854,    0,    0,    0,  886,
      884,  863,  858,  884,  861,  892,  896,  864,  865,  859,
      892,  854,  858,  852,  852,  852,  852,  852,  852,  859,
      861,  863,  861,  864,  865,  886,  884,  863,  858,  884,
      861,  892,  896,  864,  865,  859,  892,    0,  917,    0,
        0,    0,    0,    0,    0,    0,  861,  863,  861,  864,
      865,  875,    0,  875,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  877,  917,  877,  877,  877,  877,  877,

      877,  877,  877,  877,  877,  918,  877,  877,  877,  877,
      877,  877,  879,    0,  879,  879,  879,  879,  879,  879,
      879,  879,  879,    0,    0,    0,    0,    0,    0,    0,
        0,  918,  877,  877,  877,  877,  877,  877,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  891,  919,  878,
      878,  878,  878,  878,  878,  881,  891,  881,  881,  881,
      881,  881,  881,  881,  881,  881,    0,  922,    0,    0,
        0,    0,    0,  891,  919,  878,  878,  878,  878,  878,
      878,  880,  891,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  922,  880,  880,  880,  880,  880,  880,

      883,    0,  883,  883,  883,  883,  883,  883,  883,  883,
      883,    0,  885,    0,    0,    0,    0,    0,    0,    0,
      880,  880,  880,  880,  880,  880,  882,  885,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  885,  882,
      882,  882,  882,  882,  882,  890,  894,  894,  894,  895,
      894,  895,  898,  885,  914,  897,  929,  921,  914,  915,
      898,  890,  899,  915,  929,  882,  882,  882,  882,  882,
      882,  890,  897,  921,  899,  895,  894,  895,  898,    0,
      914,  897,  929,  921,  914,  915,  898,  890,  899,  915,
      929,    0,  924,    0,  923,    0,    0,  923,  897,  921,

      899,    0,  894,  905,    0,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  924,  905,  905,  905,  905,
      905,  905,  906,  923,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  942,    0,    0,    0,    0,  925,    0,
        0,  924,  905,  905,  905,  905,  905,  905,  907,  923,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  942,
      920,  907,  907,  907,  907,  907,  907,  908,  925,  908,
      908,  908,  908,  908,  908,  908,  908,  908,    0,    0,
      920,    0,    0,    0,    0,    0,  920,  907,  907,  907,
      907,  907,  907,  909,  925,  909,  909,  909,  909,  909,

      909,  909,  909,  909,  909,  911,  920,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  947,  911,  911,
      911,  911,  911,  911,  913,  927,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  926,  928,  926,  916,  943,
      948,  927,  944,  947,  911,  911,  911,  911,  911,  911,
      916,  927,  928,  949,  950,  949,  943,  916,  916,    0,
      944,  926,  928,  926,  916,  943,  948,  927,  944,    0,
        0,    0,  950,    0,    0,    0,  916,    0,  928,  949,
      950,  949,  943,  916,  916,  935,  944,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  937,  950,  937,

      937,  937,  937,  937,  937,  937,  937,  937,  945,    0,
      937,  937,  937,  937,  937,  937,  938,  955,  938,  938,
      938,  938,  938,  938,  938,  938,  938,    0,  945,    0,
        0,    0,    0,    0,  945,  951,  937,  937,  937,  937,
      937,  937,  939,  955,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  945,  939,  939,  939,  939,  939,
      939,  940,  951,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  946,  953,  952,  957,  954,  956,  946,    0,
      956,  939,  939,  939,  939,  939,  939,  968,  951,  970,
      946,  958,  970,  973,  968,  975,  977,  975,  946,  952,

      953,  957,    0,  956,  946,  954,  956,  958,    0,  978,
        0,    0,    0,  968,    0,  970,  946,  958,  970,  973,
      968,  975,  977,  975,    0,  952,  953,    0,  969,    0,
        0,  954,    0,  958,  963,  978,  963,  963,  963,  963,
      963,  963,  963,  963,  963,  979,  969,  963,  963,  963,
      963,  963,  963,  964,  969,  964,  964,  964,  964,  964,
      964,  964,  964,  964,    0,  971,    0,  980,  981,  982,
      971,  979,  969,  963,  963,  963,  963,  963,  963,  965,
      992,  965,  965,  965,  965,  965,  965,  965,  965,  965,
      965,  971,  972,  980,  981,  982,  971,  990,  976,  976,

      972,  976,  976,  976,  976,  976,  976,  993,    0,  976,
     1008,    0,    0, 1009,  992,    0,  996,  996,  972,  976,
      976,  991,  994,  990,    0,  987,  972,  987,  987,  987,
      987,  987,  987,  987,  987,  987, 1008,  991,  994, 1009,
      992,  993,  996,  996,    0,    0, 1003,  991,  994,  997,
      997, 1003,  997,  997,  997,  997,  997,  997,  998,  998,
      997, 1004, 1020,  991,  994, 1007, 1007,  993, 1005, 1011,
      997,  997, 1003, 1005, 1006,  998, 1012, 1003,    0, 1004,
     1006, 1010, 1010, 1012,  998,  998, 1021, 1004, 1020, 1011,
     1022, 1007, 1007, 1023, 1005, 1011, 1017, 1017, 1010, 1005,

     1006,  998, 1012, 1028, 1018, 1004, 1006, 1010, 1010, 1012,
     1018, 1019, 1021, 1025, 1026, 1011, 1022, 1019, 1032, 1023,
     1033, 1026, 1017, 1017, 1010, 1027, 1027, 1033, 1034, 1028,
     1018, 1034, 1036, 1025, 1035, 1035, 1018, 1019, 1038, 1025,
     1026, 1039, 1039, 1019, 1032, 1040, 1033, 1026, 1046, 1041,
     1048, 1027, 1027, 1033, 1034, 1046, 1049, 1034, 1036, 1025,
     1035, 1035, 1047, 1047, 1038, 1051, 1052, 1039, 1039, 1041,
     1056, 1040, 1056, 1057, 1046, 1041, 1048, 1059, 1064,    0,
        0, 1046, 1049,    0,    0, 1051,    0,    0, 1047, 1047,
        0, 1051, 1052,    0,    0, 1041, 1056,    0, 1056, 1057,

        0,    0,    0, 1059, 1064,    0,    0,    0,    0,    0,
        0, 1051, 1075, 1075, 1075, 1075, 1076, 1076, 1076, 1076,
     1077, 1077, 1077, 1077, 1078,    0, 1078, 1078, 1079, 1079,
     1079, 1079, 1080,    0, 1080, 1080, 1081, 1081, 1083, 1083,
     1084, 1084, 1085, 1085, 1086, 1086, 1087, 1087, 1088, 1088,
     1089, 1089, 1090, 1090, 1091, 1091, 1092, 1092, 1093,    0,
     1093, 1093, 1094, 1094, 1095, 1095, 1096, 1096, 1097, 1097,
     1098, 1098, 1099, 1099, 1100, 1100, 1101, 1101, 1102, 1102,
     1103, 1103, 1104, 1104, 1105, 1105, 1106, 1106, 1107, 1107,
     1108, 1108, 1109, 1109, 1110, 1110, 1111, 1111, 1112, 1112,

     1113, 1113, 1114, 1114, 1115, 1115, 1116, 1116, 1117, 1117,
     1118, 1118, 1119, 1119, 1121, 1121, 1122, 1122, 1123, 1123,
     1125, 1125, 1126, 1126, 1127, 1127, 1130, 1130, 1131, 1131,
     1132, 1132, 1134,    0, 1134, 1134, 1135,    0, 1135, 1135,
     1136, 1136, 1137, 1137, 1140,    0, 1140, 1140, 1141,    0,
     1141, 1141, 1142, 1142, 1143, 1143, 1144, 1144, 1145, 1145,
     1146, 1146, 1148, 1148, 1149, 1149, 1150, 1150, 1151, 1151,
     1152, 1152, 1154, 1154, 1155, 1155, 1156, 1156, 1158, 1158,
     1160, 1160, 1161, 1161, 1162, 1162, 1164, 1164, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[137] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2194 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2299 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1075 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6089 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LINK_LOCAL_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::SUBNET_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::AUTH_PROTOCOL_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::AUTH_ALGORITHM_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::AUTH_REPLAY_;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::AUTH_REALM_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::AUTH_METHODS_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::AUTH_DROP_UNAUTH_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::KEY_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::SECRET_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::ALGORITHM_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::FUDGE_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 175 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 176 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 180 "SrvLexer.l"
;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 182 "SrvLexer.l"
;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 184 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 189 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 190 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 191 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 122:
YY_RULE_SETUP
#line 198 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 207 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 216 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 225 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 234 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 243 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 252 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 264 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 271 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 292 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 324 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 351 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%20x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << "] parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 361 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%20u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << "] parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 370 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 373 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3232 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1075 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1075 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1074);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 373 "SrvLexer.l"



