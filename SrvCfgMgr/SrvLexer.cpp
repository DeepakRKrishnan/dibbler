#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 138
#define YY_END_OF_BUFFER 139
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1107] =
    {   0,
        1,    1,    0,    0,    0,    0,  139,  137,    2,    1,
        1,  137,  119,  137,  137,  136,  136,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  123,  123,  138,    1,    1,    1,    0,  131,
      119,    0,  131,  121,  120,  136,    0,    0,  135,    0,
      128,  101,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  116,  132,  132,  103,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,   17,   18,  132,  132,  132,  132,  132,  132,
      132,  132,  122,  120,  136,    0,    0,    0,  127,  133,
      126,  126,  132,  132,  132,  132,  132,  132,  102,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,   94,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  115,  136,    0,    0,    0,

        0,  125,  125,    0,  126,    0,  126,  132,  132,  132,
       67,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      109,  132,  132,  132,   31,  132,  132,   47,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,    0,  132,  132,  132,  132,  132,  132,  132,   24,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  117,  132,  132,
      132,  132,  136,    0,  134,    0,    0,    0,  125,    0,
      125,    0,  126,  126,  126,  126,  132,  132,  132,  132,
      132,  108,  132,  132,  132,    4,  132,  132,  132,  132,

      132,  132,  132,  118,  132,   98,  132,  132,    3,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,    0,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,    7,  132,   46,  132,  132,
       25,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,    0,    0,    0,    0,    0,  125,  125,
      125,  125,    0,  126,  126,  126,    0,  126,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,   30,
      132,  132,  132,  132,  132,   39,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,    0,    0,  132,  132,  132,   37,
      132,  132,  132,  132,  132,   35,  132,  132,  132,  132,
       63,   95,  132,  132,  132,  112,   45,  132,  132,  132,
      132,  132,  132,  132,    0,    0,    0,    0,  125,  125,
      125,    0,  125,    0,    0,  126,  126,  126,  126,  132,
      132,   34,  132,  132,  132,  132,  132,  132,  132,  132,
        0,  132,  132,  111,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,    0,    0,  132,  132,
      132,  132,  132,   61,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,   22,  132,  132,
      132,  134,    0,    0,    0,    0,    0,  125,  125,  125,
      125,    0,  126,  126,  126,    0,  126,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,    0,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,   83,  132,  132,  132,   48,
      132,   57,  132,  132,  132,   12,   10,  100,  132,   44,
        0,    0,  132,  132,  132,   59,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,    5,
      132,  132,  132,   14,    0,    0,    0,    0,  125,  125,

      125,    0,  125,  130,  126,  126,  126,  126,  132,  132,
      132,  132,  132,   96,  132,  132,  132,  132,  132,  132,
      132,  132,  132,    0,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,   85,  132,  132,  132,
      132,  132,  132,  132,  132,   11,   66,    0,    0,  132,
      132,  132,   60,  132,  132,  132,  132,  132,  132,  132,
       32,  132,  132,    6,  110,   41,  132,  132,    0,    0,
        0,    0,  129,  125,  125,  125,  125,  126,  126,  126,
        0,  126,  132,  132,  132,  132,  132,  132,  132,  132,
       77,  132,  132,  132,   58,  132,    0,  132,  132,  132,

      132,  132,  132,  132,  132,   38,  132,  132,   36,  132,
      132,  132,  132,  132,  132,  132,   33,   13,    0,    0,
       54,   53,   40,  132,  132,   23,  132,  132,  132,  132,
       43,   42,  132,  132,  134,    0,    0,  125,  125,  125,
        0,  125,  126,  126,  126,  126,  132,   15,  132,   65,
      132,  132,  132,  132,   76,  132,  132,  132,    0,  132,
      132,  132,  132,  132,  132,   80,  132,  132,  132,   87,
       89,   91,   93,  132,  132,  132,   56,   55,  132,  132,
      132,  132,  132,  132,  132,   62,    0,    0,    0,    0,
      125,  125,  125,  125,  126,  126,  126,    0,  126,  132,

      132,  113,  132,   78,  132,  132,  132,  132,    0,   99,
      132,  132,  132,   52,  132,   81,   64,  132,  132,  132,
        8,  132,  132,  132,   26,  132,  132,  132,    0,    0,
        0,  125,  125,  125,    0,  125,  126,  126,  126,  126,
      132,  132,  132,   74,   79,  132,  132,    0,  132,  132,
       51,  132,  132,  132,  132,   68,  132,  132,  132,  132,
      132,  132,  132,  134,    0,    0,    0,  125,  125,  125,
      125,  126,  126,  126,    0,  126,  132,  132,   75,  132,
      132,    0,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,   16,   21,    0,    0,  124,  127,  125,

      125,  125,    0,  125,  126,  126,  126,  126,  132,  132,
      132,   28,    0,    0,  132,  132,  132,   82,  132,  132,
       27,  132,  132,  132,  132,  132,    0,    0,  124,    0,
      125,  125,  125,  125,  125,  126,  126,  126,    0,  126,
      132,  132,  132,    0,    0,   29,  132,  132,   84,  132,
      132,  132,  132,  132,  114,  132,  132,  132,  134,  124,
      127,  125,    0,  125,  125,  125,  125,  126,  126,  126,
       69,  132,  132,  132,  132,    0,    0,  132,  132,  132,
      132,  132,  132,   50,  132,   20,  132,  132,    0,  124,
      125,  125,  125,  125,  126,  126,  126,  132,  132,  132,

      132,  132,    0,    0,  132,  132,   86,   88,   90,   92,
        9,   19,  132,    0,  125,  125,    0,  125,  125,  126,
       49,  132,  132,  132,  132,    0,    0,  132,  132,   97,
      134,  125,  125,  126,  132,  132,  132,  132,    0,    0,
        0,  132,  132,  132,    0,  125,  125,    0,  132,  132,
      132,  132,    0,    0,    0,  104,  132,  132,  132,  104,
      124,  125,  125,   70,  132,  132,  132,    0,  106,    0,
      132,  106,  132,  124,  125,  125,    0,  132,  132,   73,
        0,  105,  132,  105,    0,  125,  125,  132,   71,  107,
      107,    0,  125,  125,    0,   72,  134,  125,  125,    0,

      125,  125,    0,  125,  125,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1197] =
    {   0,
        0,    0, 1160, 1157,    0,    0, 1161, 6258, 6258,   73,
       75, 1117,    0, 1112,   72,   72,   34, 1021, 1019,  136,
      186,  233,  280,   71,  208,  338,   66,  236,   38,   89,
      223,  240,  340,   72,  359,  377,  422,  419,   68,  251,
      180,  272, 6258, 1025, 6258,  111,  137,  213, 1014, 6258,
        0,  980,  979, 6258,    0,  480,  961,  499, 6258,    0,
      525, 6258,   60,  568,  188,  192,  182,  183,  279,  275,
      337,  193,  240,  412,  276,  274,  285,  402,  372,  375,
      417,  413,  335,  411,  521,  570,  582,  583,  586,  561,
      492,  572,  600,  602,  569,  415,  606,  604,  440,  607,

      613,  620,  634,  622,  663,  615,  624,  653,  658,  656,
      662,  676,  623,  665,  700,  675,  669,  698,  696,  697,
      706,  694, 6258,    0,  764,  960,  783,  958,  809,    0,
      854,  828,  897,  689,  707,  886,  890,  891,  705,  889,
      897,  730,  894,  914,  762,  895,  896,  941,  933,  947,
      945,  946,  931,  814,  948,  937,  950,  962,  982,  977,
      968,  750,  985,  989,  983,  984, 1000,  981, 1031, 1021,
     1013, 1034, 1017, 1023, 1019, 1032, 1024, 1038, 1053, 1041,
     1037, 1066, 1068, 1072, 1086, 1071, 1085, 1083, 1074, 1093,
     1104, 1105, 1101, 1123, 1118,  796, 1181,  872,  923,  910,

      881, 1228, 1166,  881, 1273, 1316, 1200, 1359, 1089, 1294,
     1090, 1196, 1120, 1160, 1181, 1311, 1347, 1233, 1358, 1346,
     1215, 1350, 1351, 1390, 1276, 1356, 1396, 1386, 1397, 1359,
     1388, 1403, 1392, 1400, 1398, 1402, 1389, 1443, 1433, 1444,
     1439,  847, 1447, 1440, 1448, 1441, 1453, 1455, 1478, 1277,
     1492, 1494, 1489, 1501, 1484, 1486, 1507, 1495, 1513, 1535,
     1542, 1538, 1531, 1544, 1530, 1541, 1534, 1526, 1563, 1553,
     1565, 1571, 1292,  834,  833,  832,  831, 1629, 1640, 1683,
     1659, 1702, 1728, 1747, 1773, 1792,  830, 1547, 1775, 1773,
     1772, 1549, 1808, 1670, 1715, 1810, 1790, 1804, 1807, 1794,

     1811, 1824, 1825, 1582, 1840, 1593, 1812, 1854, 1856, 1847,
     1853, 1857, 1860, 1864, 1865, 1887, 1869, 1896, 1892, 1726,
     1875, 1901, 1900, 1893, 1914, 1911, 1927, 1912, 1915, 1932,
     1939, 1942, 1950, 1923, 1944, 1662, 1963, 1844, 1952, 1957,
     1928, 1966, 1964, 1981, 1975, 1980, 1988, 2004, 1991, 1995,
     2028, 2000, 2016,  828,  791,  790,  789, 2062, 2088, 2074,
     2133, 2107, 1668, 2152,  788, 2178, 2221, 2197, 2086, 2219,
     2183, 2211, 2217, 2216, 2215, 2239, 2240, 2220, 2075, 2310,
     2258, 2256, 2233, 2269, 2257, 2027, 2293, 2281, 2294, 2304,
     2305, 2299, 2296, 2301, 2328, 2306, 2309, 2342, 2314, 2338,

     2344, 2349, 2345, 2352, 2126, 2147, 2351, 2353, 2358, 2222,
     2382, 2374, 2366, 2393, 2404, 2361, 2391, 2402, 2423, 2429,
     2394, 2396, 2413, 2410, 2425, 2398, 2412, 2444, 2442, 2421,
     2446, 2443, 2437, 2462,  787,  786,  785, 2508, 2520,  750,
     2532, 2575, 2551, 2594, 2620, 2631, 2650, 2676, 2695, 2697,
     2676, 2553, 2690, 2689, 2679, 2680, 2712, 2713, 2710, 2729,
     2425, 2740, 2694, 2448, 2731, 2562, 2750, 2726, 2744, 2749,
     2762, 2655, 2779, 2780, 2777, 2781, 2764, 2789, 2792, 2784,
     2809, 2811, 2812, 2813, 2797, 2830, 2519, 2576, 2828, 2816,
     2826, 2831, 2833, 2610, 2860, 2878, 2862, 2847, 2863, 2868,

     2877, 2864, 2879, 2883, 2892, 2884, 2900, 2618, 2913, 2898,
     2902,  749,  747,  743,  741, 2971, 2982, 2993, 3012, 3038,
     3057, 2960, 3083,  737, 3095, 3138, 3114, 3116, 3124, 3132,
     3037, 3136, 2980, 3134, 3152, 3130, 3140, 3168, 2848, 3137,
     3164, 3167, 2885, 3180, 3192, 3189, 3175, 3202, 3187, 3183,
     3191, 3204, 3223, 3221, 3224, 3025, 3255, 3231, 3210, 3211,
     3238, 3220, 3252, 3243, 3244, 3239, 3241, 3251, 3256, 3253,
     3279, 3261, 3275, 3284, 3287, 3272, 3286, 3283, 3308, 3311,
     3307, 3300, 3291, 3304, 3320, 3327, 3322, 3325, 3328, 3305,
     3352, 3339, 3343, 3335,  736,  733,  732, 3410, 3421,  731,

     3433, 3476, 3452, 3461, 3521, 3495, 3566, 3540, 3474, 3554,
     3562, 3463, 3375, 3342, 3347, 3559, 3561, 3564, 3583, 3570,
     3602, 3607, 3568, 3352, 3613, 3566, 3604, 3605, 3606, 3618,
     3608, 3635, 3614, 3621, 3650, 3638, 3603, 3671, 3659, 3673,
     3683, 3660, 3687, 3663, 3658, 3651, 3655, 3674, 3681, 3674,
     3669, 3675, 3668, 3708, 3679, 3718, 3737, 3712, 3710, 3726,
     3706, 3722, 3720, 3719, 3721, 3723, 3751, 3755,  730,  729,
      696,  694, 3549, 3815, 3797, 3860, 3834, 3879,  692, 3905,
     3948, 3924, 3910, 3727, 3942, 3939, 3940, 3953, 3943, 3794,
     3724, 3944, 3949, 3951, 3754, 3971, 3830, 3978, 3984, 3998,

     4000, 3847, 4001, 3996, 3999, 3858, 4005, 4012, 3960, 4016,
     4015, 4020, 4023, 4028, 4035, 4033, 3991, 4014, 4037, 4035,
     4034, 4036, 4037, 4064, 4051, 4043, 4053, 4078, 4073, 4084,
     4050, 4067, 4072, 4100,  659,  641,  586, 4142,  582, 4160,
     4203, 4179, 4248, 4222, 4293, 4267, 4096, 4075, 4285, 4081,
     4182, 4281, 4284, 4289, 4095, 4288, 4102, 4312, 4145, 4292,
     4326, 4293, 4327, 4324, 4235, 4164, 4332, 4329, 4345, 4227,
     4330, 4331, 4333, 4360, 4365, 4378, 6258, 6258, 4368, 4377,
     4375, 4341, 4369, 4379, 4376, 4373,  581,  579,  578,  551,
     4439, 4458, 4484, 4503, 4529,  550, 4541, 4584, 4560, 4574,

     4571, 4381, 4575, 4392, 4572, 4602, 4603, 4483, 4403, 4471,
     4620, 4582, 4615, 4520, 4618, 4581, 4583, 4631, 4637, 4635,
     4612, 4633, 4639, 4662, 4622, 4650, 4627, 4664,  549,  548,
      547, 4722,  546, 4734, 4777, 4753, 4822, 4796, 4867, 4841,
     4654, 4827, 4764, 4655, 4658, 4857, 4858,  557, 4775, 4713,
     4809, 4872, 4879, 4862, 4863, 4860, 4870, 4871, 4868, 4911,
     4906, 4902, 4917,  544,  542,  541,  539, 4977, 4996, 5022,
     5041, 5067,  538, 5079, 5122, 5098, 4919, 4938, 4907, 4909,
     4930, 5102, 4910, 5119, 5001, 5134, 5125, 5136, 5115, 5139,
     5021, 4916, 5144, 5082, 5111,  537,  536,  535,    0, 5202,

      534, 5214, 5257, 5233, 5302, 5276, 5347, 5321, 5336, 5315,
     5193, 5116, 5130, 5128, 5350, 5244, 5340, 5156, 5372, 5339,
     5236, 5364, 5367, 5378, 5380, 5388,  506,  505,  504,  503,
      502, 5448, 5467, 5493, 5512, 5538,  501, 5550,    0, 5569,
     5345, 5383, 5570, 5275, 5364, 5381, 5492, 5401, 5382, 5577,
     5435, 5480, 5549, 5553, 5384, 5568, 5572, 5574,  500,  481,
     6258,  468,    0, 5635,  466, 5647, 5666, 5692, 5711,    0,
     5387, 5571, 5689, 5710, 5723, 5447, 5547, 5693, 5712, 5626,
     5704, 5722, 5721, 5566, 5709, 5567, 5724, 5729,  451,  449,
      446,  445, 5789, 5808, 5834,  417,    0, 5714, 5794, 5725,

     5792, 5726, 5591,    0, 5790, 5864, 5625, 5634, 5727, 5741,
     5742, 5789, 5836,  413,  408,  406,    0, 5877, 6258,    0,
     5791, 5855, 5857, 5864, 5856,    0, 5850, 5910, 5893, 5835,
      403,  402,  400, 6258, 5884, 5887, 5885, 5892, 5913, 5857,
     5898, 5915, 5914, 5907,  398,  396,  395,    0, 5909, 5927,
     5936, 5916, 5948, 5936, 5932, 6258, 5952, 5944, 5939, 5943,
      363,  357,  355, 5945, 5966, 5949, 5951, 5949, 6258, 5980,
     5968, 5961, 5999,  353,  352,  349,    0, 5988, 5983, 5980,
     6004, 6258, 6011, 5989,  339,  325,  314, 5997, 5990, 6258,
     5996,    0,  310,  309,    0, 5998,  307,  305,  303,  276,

      267,  260,    0,  254,  220, 6258, 6081, 6085, 6089, 6093,
     6097, 6101, 6103,  233, 6105, 6107, 6109, 6111, 6113, 6115,
     6117, 6119, 6121, 6123, 6127, 6129, 6131, 6133, 6135, 6137,
     6139, 6141, 6143, 6145, 6147, 6149, 6151, 6153, 6155, 6157,
     6159, 6161, 6163, 6165, 6167, 6169, 6171, 6173, 6175, 6177,
     6179,  232, 6181, 6183, 6185,  231, 6187, 6189, 6191,  230,
      228, 6193, 6195, 6197,  226, 6201, 6205, 6207, 6209,  223,
      219, 6213, 6217, 6219, 6221, 6223, 6225, 6227,  217, 6229,
     6231, 6233, 6235, 6237,  145, 6239, 6241, 6243,  131, 6245,
      117, 6247, 6249, 6251,   80, 6253

    } ;

static yyconst flex_int16_t yy_def[1197] =
    {   0,
     1106,    1, 1107, 1107, 1108, 1108, 1106, 1106, 1106, 1106,
     1106, 1109, 1110, 1111, 1106, 1106,   16, 1106, 1106, 1106,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1106, 1106, 1106, 1106, 1106, 1106, 1109, 1106,
     1110, 1111, 1106, 1106, 1112, 1106, 1113,   56, 1106, 1114,
     1106, 1106,   26,   26,   64,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1106, 1112, 1106, 1115,  125, 1116, 1106, 1114,
     1106,  131,   64,  133,  133,   26,   26,   26,   26,   26,
       26,  133,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1106,  197, 1117, 1118,

     1119, 1106,  202, 1106, 1106, 1106,  205,  133,  208,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1106,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  198,  198, 1118, 1120, 1121, 1106, 1106, 1106,
      279, 1106, 1106,  283, 1106,  285,  208,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1106,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1122, 1106, 1123, 1124, 1106, 1106,  359,
     1106,  361, 1106, 1106, 1106, 1106, 1106,  366,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1125,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26, 1106, 1106,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1126, 1127, 1128, 1106, 1106, 1106,
     1106, 1106,  441, 1106, 1106, 1106,  446, 1106,  448,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1106,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1106, 1106,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1123, 1106, 1129, 1130, 1106, 1106, 1106,  518, 1106,
      520, 1106, 1106, 1106, 1106, 1106,  525,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1106,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1106, 1106,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1131, 1132, 1133, 1106, 1106, 1106,

     1106, 1106,  601, 1106, 1106,  605, 1106,  607,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1106,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1106, 1106,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1134, 1106,
     1135, 1136, 1106, 1106,  674, 1106,  676, 1106, 1106, 1106,
     1106,  680,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1106,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1106, 1106,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1137, 1138, 1139, 1106, 1106, 1106,
     1106,  740, 1106,  743, 1106,  745,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1106,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1106, 1106,   26,   26,
       26,   26,   26,   26,   26,   26, 1140, 1106, 1141, 1142,
     1106,  791, 1106,  793, 1106, 1106, 1106, 1106,  797,   26,

       26,   26,   26,   26,   26,   26,   26,   26, 1106,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1143, 1144,
     1145, 1106, 1106, 1106, 1106,  834, 1106,  837, 1106,  839,
       26,   26,   26,   26,   26,   26,   26, 1106,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1146, 1106, 1147, 1148, 1106,  868, 1106,
      870, 1106, 1106, 1106, 1106,  874,   26,   26,   26,   26,
       26, 1106,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1149, 1150, 1151, 1152, 1106,

     1106, 1106, 1106,  902, 1106,  905, 1106,  907,   26,   26,
       26,   26, 1106, 1106,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1153, 1106, 1154, 1106,
     1155, 1106,  932, 1106,  934, 1106, 1106, 1106, 1156,  938,
       26,   26,   26, 1106, 1106,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1157, 1158,
     1106, 1159, 1160, 1106, 1106, 1106,  966, 1106,  968, 1161,
       26,   26,   26,   26,   26, 1106, 1106,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1162, 1106,
     1163, 1164, 1106,  993, 1106, 1106, 1165,   26,   26,   26,

       26,   26, 1106, 1166,   26, 1167,   26,   26,   26,   26,
       26,   26,   26, 1168, 1106, 1169, 1170, 1106, 1106, 1171,
       26,   26,   26,   26,   26, 1172, 1106, 1173,   26,   26,
     1174, 1175, 1176, 1106,   26,   26,   26,   26, 1106, 1106,
     1106,   26,   26,   26, 1177, 1106, 1178, 1179,   26,   26,
       26,   26, 1106, 1106, 1106, 1106,   26,   26,   26,   26,
     1180, 1181, 1182,   26,   26,   26,   26, 1106, 1106, 1106,
       26,   26,   26, 1183, 1106, 1184, 1185,   26,   26,   26,
     1106, 1106,   26,   26, 1186, 1187, 1188,   26,   26, 1106,
       26, 1189, 1106, 1190, 1191,   26, 1106, 1192, 1193, 1186,

     1106, 1194, 1195, 1196, 1106,    0, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106

    } ;

static yyconst flex_int16_t yy_nxt[6334] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   29,
       36,   37,   38,   39,   40,   41,   29,   42,   29,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   29,   36,   37,   38,   39,
       40,   41,   29,   42,   29,   46,   47,   48,   47,   54,
     1106,   63,  935,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   64,   58,   58,   58,   58,   58,

       58,   87,   59,   63,  118,   63, 1106,   63,   63,   63,
       98,   63,   99,   46,   47,   63,   90,   82,   60, 1099,
       64,   58,   58,   58,   58,   58,   58,   87,   59,   63,
      118,   63,   63, 1097,   63,   63,   98,   63,   99,   48,
       47,   63,   90,   82,   60,   63,   63, 1087,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   57,   63,   64,
       64,   65,   66,   64,   67,   63,   68,   63,   63,   63,
       69,   63,   70,   63,   63,   63,   63,   63,   63,   71,
       63,   63,   63,   63,   63,   64,   64,   65,   66,   64,
       67,   63,   68,   63,   63,   63,   69,   63,   70,   63,

       63,   63,   63,   63,   63,   71,   63,   63,   63,   63,
       63,   64,   64,  134,   64,   46,   47,  121,  135, 1063,
       63, 1034,   63,   63,  136, 1033,   63,  141, 1020,   72,
      997,   83,  992,  970,  931,  130,   63,   64,   64,  134,
       64, 1103,   63,  121,  135,   63,   63,   84,   63,   63,
      136,   85,   63,  141,   91,   72,   73,   83,   64,   64,
       92,   64,   63,   93,   88,  142,   63,   74,   63,   63,
       75,   63,   89,   84,  119, 1103,   63,   85,  120,   63,
       91, 1103,   73,   63,   64,   64,   92,   64, 1095,   93,
       88,  142,   63,   74,   63,   63,   75, 1106,   89,  122,

      119,  139,   63,   64,  120,   63,   76,   77,  137,   63,
      146,   78,  145,  138,   63,   63,   79,   80,   63,   63,
       63,  147,   63,   81, 1103,  122, 1095,  139, 1100,   64,
     1095, 1077,   76,   77,  137, 1095,  146,   78,  145,  138,
       63,   63,   79,   80,   63,   63, 1077,  147,   63,   81,
       63,   63,   63,   63,   63,   63,   63,   63,   63, 1106,
      961,   63,   63,   63,   63,   63,   63,   94,   63,  153,
     1077,   95,   63, 1048, 1085,   63, 1077,   96, 1048,  140,
       63,   86,   97,   63,  930,  100,  101,   63,   63,   63,
       63,   63,   63,   94,   63,  153,  102,   95,   63,  103,

      104,   63,   63,   96,  105,  140,   63,   86,   97,   63,
      150,  100,  101,  149,  106,   63, 1048, 1017,   63,  899,
       63, 1048,  102, 1017, 1045,  103,  104, 1017,   63,  963,
      105,  148,  113,  114,  867,  143,  150,  154,  939,  149,
      106,   63,  115,  144,   63,   63,   63,  107,  151,  108,
      116,  152,  109,  110,   63,   63,   63,  148,   63,  117,
       63,  143,   63,  154,  111,  112, 1017,  963,  115,  144,
      930,   63,  129,  107,  151,  108,  116,  152,  109,  110,
       63,   63,   63,   63,   63,  117,   63,  903,   63,  963,
      111,  112,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  126,  930,  127,  127,  127,  127,  127,  127,   63,
       59,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      163,  989,  875,  963,  961,  930,  867,  790,  164,  127,
      127,  127,  127,  127,  127,   63,   59,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  163,  155,  132,  132,
      132,  132,  132,  132,  164,  835,  930,  867,  129,  798,
      899,   63,  867,  790,   63,  896,  882,  741,  867,  790,
      672,  681,  129,  155,  132,  132,  132,  132,  132,  132,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  126,
       63,  133,  133,  133,  133,  133,  133,  156,   68,  790,

      672,  165,  129,  602,   63,  157,  158,  790,  162,  159,
      169,   63,   63,   63,  160,   63,  172,  133,  133,  133,
      133,  133,  133,  156,   68,   63,   63,  165,  161,   63,
       63,  157,  158,  167,  162,  159,  169,   63,   63,   63,
      160,   63,  166,   63,  170,   63,  171,   63,  168,   63,
       63,   63,   63,  173,  161,   63,   63,  174,  181,  167,
      176,  175,  672,   63,  182,   63,   63,   63,  166,   63,
      170,   63,  171,   63,  168,   63,   63,   63,  183,  173,
      787,  184,   63,  174,  181,  186,  176,  175,  177,   63,
      182,   63,   63,   63,  185,  178,   63,  179,  180,   63,

      188,   63,  187,   63,  183,   63,   63,  184,   63,  189,
      190,  186,  191,  526,  177,  129,  209,  672,   63,   63,
      185,  178,   63,  179,  180,   63,  188,   63,  187,  192,
      193,   63,   63,  194,   63,  196,  190,   63,  191,   63,
       63,   63,  209,   63,   63,   63,  195,  210,   63,   63,
      515,  515,  442,  672,  515,  192,  193,  129,  367,  194,
      216,  196,  129,   63,  515,   63,   63,   63,  357,   63,
      595,  280,  195,  210,   63,   63,  197,  197,  197,  197,
      197,  197,  197,  197,  197,   57,  216,  198,  198,  198,
      198,  198,  198,   63,   59,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  219,   63,  515,  357,  357,  206,
      129,  357,  201,  198,  198,  198,  198,  198,  198,   63,
       59,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      219,   63,  203,  203,  203,  203,  203,  203, 1106,   63,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  129,
      228, 1106,  357,  201,  354, 1106,  322,   63,  203,  203,
      203,  203,  203,  203,  204,   63,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  206,  228,  207,  207,  207,
      207,  207,  207,   63,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  129,  207,  207,  207,  207,  207,  207,  208,
      208,  208,  208,  208,  208,  208,  208,  208,   57,  214,
      208,  208,  208,  208,  208,  208,  211,  212,  213,   63,
      215,  201,   63,   63,   63,  217,  220,   63,   63,   63,
       63,  218,  223,  221,  201,  214,  208,  208,  208,  208,
      208,  208,  211,  212,  213,   63,  215,   63,   63,   63,
       63,  217,  220,   63,   63,   63,   63,  218,  222,  221,
      224,  225,  227,  226,   63,  231,   63,  229,  230,  201,
       63,  129,  129,   63,   63,   52,   53,  232,   63,   63,
       63,   63,  238,   63,  222,  235,  224,  225,  227,  226,

       63,  231,   63,  229,  230,   63,   63,  233,  234,  239,
       63,   63,  236,  232,   63,   63,   63,   63,   50,   63,
       63,  235,  237,  241,   63,   63,   63,   63,   63,  240,
      244,   63,   63,  233,  234,  239,  123,   63,  236,  242,
      243,   62,   61,   63,  245,  249,   63,  251,  237,  241,
       63,   63,   63,   63,   63,  240,   63,  250,   63,  246,
       63,  253,   63,  252,   63,  254,   63,   63,  247,   63,
      245,  249,  248,  251,   63,   63,  255,   63,  256,  257,
       63,   63,   63,  250,   63,  246,   63,  253,   63,  252,
       63,  254,   63,   63,  247,  261,   63,  258,  248,  266,

       63,   63,  255,   63,  256,  257,   63,   63,  259,   63,
       63,   63,  260,  262,   63,   63,  263,   63,   53,  264,
      267,   50,   63,  258,  265,  266,   63,  288,   63,   63,
      269,  268,  270,   63,  259,   63,   63,   63,  260,  262,
       63,   63,  263,   63,   63,  264,  267,   63,   63,  271,
      265,  272,   63,  288,   63,   63,  269,  268,  270,   63,
     1106,   63,   63,   63,   44,  292,   63,   44, 1106,  293,
       63, 1106, 1106,   63,   63,  271, 1106,  272,  281,  281,
      281,  281,  281,  281,  281,  281,  281,   63, 1106,   63,
      294,  292,   63,  273,  273,  273,  273,  273,  273,  273,

      273,  273,   57,   63,  274,  274,  274,  274,  274,  274,
     1106,   59,  284,  284,  284,  284,  284,  284,  284,  284,
      284, 1106, 1106, 1106,   63, 1106, 1106, 1106, 1106,   63,
      274,  274,  274,  274,  274,  274,  291,   59,  278,   63,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  280,
       63,  281,  281,  281,  281,  281,  281, 1106,   63, 1106,
     1106, 1106,  291, 1106, 1106,   63, 1106, 1106, 1106,  297,
     1106, 1106, 1106, 1106, 1106, 1106,   63,  281,  281,  281,
      281,  281,  281,  204,   63,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  206,  297,  284,  284,  284,  284,

      284,  284,   63,  289,  273,  273,  273,  273,  273,  273,
      273,  273,  273, 1106, 1106, 1106, 1106, 1106, 1106,   63,
       63,  290,  284,  284,  284,  284,  284,  284,  285,  285,
      285,  285,  285,  285,  285,  285,  285,   63,  295,  286,
      286,  286,  286,  286,  286,   63,   63,  290, 1106, 1106,
     1106, 1106, 1106, 1106,   63,  299, 1106, 1106, 1106, 1106,
     1106, 1106, 1106,   63,  295,  286,  286,  286,  286,  286,
      286,  287,  287,  287,  287,  287,  287,  287,  287,  287,
       63,  298,  287,  287,  287,  287,  287,  287,  296,   63,
       63,  300,  301,   63,   63,  305,  303,  308,  314,   63,

      307,   63,   63, 1106, 1106, 1106, 1106,  298,  287,  287,
      287,  287,  287,  287,  296,   63,   63,  300,  301,   63,
       63,  302,  303,  304,  306,   63,  307,   63,   63,   63,
      309,   63,   63,   63,  310,   63,  311, 1106,  312,   63,
       63,   63, 1106,   63,  313,   63,   63,  302,  321,  304,
      306, 1106, 1106, 1106, 1106,   63,  309,   63,   63,   63,
      310,   63,  311,  319,  312,   63,   63,   63,  315,   63,
      313,   63,   63,  323,  320,  327,   63,  316,  317,  318,
      328,  325,   63,   63,   63,  326,   63,   63,  324,  319,
       63,   63,  329, 1106,  315, 1106,   63, 1106,   63,  323,

      320,  327,   63,  316,  317,  318,  328,  325,   63,   63,
       63,  326,   63,   63,  324,  330,   63,   63,  329,  331,
      333,   63,   63,  332,   63,  334,  335,   63,  337,   63,
     1106,  336,   63,  339,  338,   63, 1106,   63,   63, 1106,
      340,  330, 1106,  349,   63,  331,  333,   63, 1106,  332,
       63,  334,  335,   63,  337,   63,   63,  336,   63,  339,
      338,   63,  341,   63,   63,  344,  340,  345,  342,   63,
       63,  346,  347,   63,   63,  348,   63,   63,   63,  351,
      353,   63,   63,  343,   63,   63,  350,   63,  341,  369,
       63,  344,   63,  345,  342,   63,   63,  346,  347,   63,

       63,  348,  352,   63,   63,  351,   63,   63,   63,  343,
       63,   63,  350,   63,   63,  369,   63, 1106,   63, 1106,
     1106, 1106,   63, 1106, 1106,   63, 1106, 1106,  352, 1106,
     1106, 1106,   63, 1106,   63, 1106,   63, 1106, 1106, 1106,
       63,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      278,   63,  359,  359,  359,  359,  359,  359,  359,  359,
      359,  280,   63,  360,  360,  360,  360,  360,  360, 1106,
     1106,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  360,
      360,  360,  360,  360,  360,  361,  361,  361,  361,  361,

      361,  361,  361,  361,  377,   63,  362,  362,  362,  362,
      362,  362,  363,   63,  282,  282,  282,  282,  282,  282,
      282,  282,  282, 1106,  378, 1106, 1106, 1106, 1106, 1106,
      377,   63,  362,  362,  362,  362,  362,  362,  204,   63,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  206,
      403,  365,  365,  365,  365,  365,  365, 1106,   63,  365,
      365,  365,  365,  365,  365,  365,  365,  365, 1106,   63,
     1106, 1106, 1106, 1106, 1106, 1106,  403,  365,  365,  365,
      365,  365,  365,  204,   63,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  367,   63,  368,  368,  368,  368,

      368,  368, 1106,  372,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  370,  371,   63,   63, 1106,   63,  379,
     1106,  389,  368,  368,  368,  368,  368,  368, 1106,  372,
     1106,  373,  380,   63, 1106,  381,  384,   63,  385,  370,
      371,   63,   63,  374,   63,  382,  375,   63,  376,  383,
       63,   63, 1106,   63,   63,   63,  387,  373,  380,   63,
      386,  381,  384,   63,  385,  392,  388,   63,   63,  374,
     1106,  382,  375,   63,  376,  383,   63,   63,  393,   63,
       63,   63,  387,   63,  394,  395,  386,   63, 1106,  390,
       63,  396,  388,   63,   63,  391,   63,   63,  397,   63,

       63,  402,  398,   63,  393,  404,  400,   63,   63,   63,
      394,  395,   63,   63,  399,  390,   63,  396,   63,  401,
      408,  391,   63,   63,  397,   63,   63,  405,  398,   63,
       63,  404,  400,   63,   63,   63,   63,  407,   63,   63,
      399,  409,  406,   63,   63,  401,  408,  410,  412, 1106,
      411,  418,  413,  405,   63,   63,   63,   63,   63,  417,
     1106,   63,   63,  407, 1106,   63,   63,  409,  406,   63,
       63,   63,  414,  410,  412,   63,  411,  418,  413,  415,
       63,   63,   63,   63,   63,   63,  419,   63,  416, 1106,
      420,  424,   63,   63,  421,   63,   63,   63,  414,  422,

       63,   63, 1106,  423,  426,  415,   63,   63,   63,   63,
     1106,   63,  419,   63,  416,  425,  420,  424,   63,   63,
      421,   63,  427,   63,   63,  422,   63,  429,  428,  423,
      426,   63,   63,   63,   63,   63,  431,  432,   63,  430,
      433,  425,  434,   63,   63, 1106, 1106,   63,  427,   63,
       63, 1106, 1106,  429,  428, 1106, 1106,   63, 1106,   63,
       63, 1106,  431, 1106,   63,  430,  433, 1106,  434,   63,
       63,   63,  438,   63,  358,  358,  358,  358,  358,  358,
      358,  358,  358, 1106, 1106,   63,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  450,   63,   63,  278, 1106,

      439,  439,  439,  439,  439,  439,  439,  439,  439,  280,
      460,  440,  440,  440,  440,  440,  440, 1106,   63,  443,
      443,  443,  443,  443,  443,  443,  443,  443, 1106,   63,
     1106, 1106, 1106, 1106, 1106, 1106,  460,  440,  440,  440,
      440,  440,  440,  278,   63,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  442,   63,  443,  443,  443,  443,
      443,  443,  204,  487,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  206,  488, 1106, 1106, 1106, 1106, 1106,
     1106, 1106,  443,  443,  443,  443,  443,  443,  204,  487,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  367,

      488,  447,  447,  447,  447,  447,  447, 1106, 1106,  447,
      447,  447,  447,  447,  447,  447,  447,  447, 1106, 1106,
     1106, 1106, 1106, 1106,  452, 1106,   63,  447,  447,  447,
      447,  447,  447,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  451,  455,  449,  449,  449,  449,  449,  449,
      452,  454,   63,  453,   63,  456, 1106, 1106,   63,   63,
       63,  459,   63,   63,  466,   63,  457,  458,  451,  455,
      449,  449,  449,  449,  449,  449,   63,  454,  467,  453,
       63,  456,   63,   63,   63,   63,   63,  459,   63,   63,
      466,   63,  457,  458,  464, 1106,  465,  468, 1106,   63,

       63,   63,   63, 1106, 1106, 1106, 1106,  470,   63,   63,
      461,  461,   63,  461,  461,  461,  461,  461,  461,  462,
      464,  461,  465,  468,   63,   63,   63,   63,  469,  471,
      472,  461,  461,  470,  474,  473,   63,   63,   63,   63,
      475,  478,   63,  476,   63, 1106,  479,   63,   63,   63,
       63,  477,   63, 1106,  469,  471,  472,   63,  481, 1106,
      474,  473,   63,   63,  482,   63,  475,  478,   63,  476,
       63,   63,  479,   63,   63,   63,  480,  477,   63,  483,
      484,   63,  485,   63,  481,   63,  489,   63,   63,  486,
      482, 1106,   63,  490,   63,   63,   63,   63,  491, 1106,

      494,   63,  480,  493,   63,  483,  484,   63,  485,   63,
     1106,   63,  489,   63,   63,  486,  498,   63,   63,  490,
       63,   63,   63,  492,  491,   63,  494,   63,  495,  493,
       63,  496,  500,  499,   63,   63,   63,   63,  501,   63,
     1106,   63,  498,   63,  497,   63,  510,   63,  502,  492,
      503,   63,  504,   63,  495,   63,   63,  496,  507,  499,
       63, 1106,   63,   63,   63,   63,   63,   63,   63,  543,
      497,   63,   63,   63,  502,  505,  503,  509,  504,   63,
       63,   63,   63,  506,  507,   63,   63,   63,  508,   63,
       63,   63,   63,  511,   63,  543, 1106, 1106,   63, 1106,

     1106,  505, 1106,  509, 1106,   63,   63, 1106, 1106,  506,
     1106,   63,   63,   63,  508,   63, 1106,   63, 1106,  511,
      516,  516,  516,  516,  516,  516,  516,  516,  516, 1106,
      278,   63,  517,  517,  517,  517,  517,  517,  517,  517,
      517,  280,  278, 1106,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  442,  571,  519,  519,  519,  519,  519,
      519, 1106,  532,  519,  519,  519,  519,  519,  519,  519,
      519,  519, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
      571,  519,  519,  519,  519,  519,  519,  520,  520,  520,
      520,  520,  520,  520,  520,  520,   63,  548,  521,  521,

      521,  521,  521,  521,  522,   63,  444,  444,  444,  444,
      444,  444,  444,  444,  444, 1106,  572, 1106, 1106, 1106,
     1106, 1106,   63,  548,  521,  521,  521,  521,  521,  521,
      204,   63,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  204,  572,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  367,   63,  524,  524,  524,  524,  524,  524,
     1106,   63,  524,  524,  524,  524,  524,  524,  524,  524,
      524, 1106,  556, 1106, 1106, 1106, 1106, 1106, 1106,   63,
      524,  524,  524,  524,  524,  524,  204,   63,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  526,   63,  527,

      527,  527,  527,  527,  527, 1106, 1106,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  531,  536,  534,   63,
      533,  535,   63,   63,   63,  527,  527,  527,  527,  527,
      527,  528,   63,   63,  529,  537,  540,   63,  546, 1106,
      530,  541,  531,  536,  534,   63,  533,  535,   63,   63,
      538,  539,  542,   63, 1106,   63,   63,  528,   63,   63,
      529,  537,  540,   63,  546,  544,  530,  541,  547,   63,
      552,  553,   63, 1106,   63,  545,  538,  539,  542,   63,
      549,   63,   63,   63,  546,  554,  550,   63,  551,  561,
     1106,  544,   63,   63,  547,   63,  552,  553,   63,  555,

       63,  545,  557,  558,  559,   63,  549,   63,  560,   63,
      546,  554,  550,   63,  551,  561,  562,  563,   63,   63,
       63,  564,   63,   63,   63,  555, 1106,   63,  557,  558,
      559,   63,   63,   63,  560,   63,  565,  569,  566,  567,
       63,  568,  562,  563, 1106, 1106,   63,  564,   63,   63,
       63,  573,   63,   63,   63,   63,   63, 1106,   63,   63,
      574,   63,  565,  569,  566,  567,   63,  568,  570,   63,
      575,   63,  576,   63,   63,  577,   63,  573,   63, 1106,
       63,   63,   63,  578,  582,   63,  574,  586, 1106,  581,
       63,  620,  583,  584,  570,   63,  575,   63,  576,   63,

       63,  577,   63,   63,  579,   63,   63,   63,  585,  578,
      582,   63,  624,  586,  580,  581,   63,  620,  583,  584,
       63,   63,   63,  587,  588,  590,   63,   63,  589,   63,
      579,   63,   63,   63,  585,   63,  591,   63,  624,  593,
      580,   63,  594,   63,  592,   63,   63,   63,   63,  587,
      588,  590,   63,   63,  589, 1106,   63, 1106, 1106, 1106,
     1106,   63,  591, 1106, 1106,  593, 1106,   63,  594,   63,
      592,   63,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  598,   63,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  278, 1106,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  278, 1106,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  442,  614,  600,  600,  600,  600,
      600,  600, 1106,   63,  600,  600,  600,  600,  600,  600,
      600,  600,  600, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106,  614,  600,  600,  600,  600,  600,  600,  278,   63,
      601,  601,  601,  601,  601,  601,  601,  601,  601,  602,
      612,  603,  603,  603,  603,  603,  603, 1106,   63,  603,
      603,  603,  603,  603,  603,  603,  603,  603, 1106, 1106,
       63, 1106, 1106, 1106, 1106, 1106,  612,  603,  603,  603,
      603,  603,  603,  204,   63,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  367,  204,   63,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  526, 1106,  606,  606,
      606,  606,  606,  606, 1106, 1106,  606,  606,  606,  606,
      606,  606,  606,  606,  606, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106,  609,  606,  606,  606,  606,  606,  606,
      607,  607,  607,  607,  607,  607,  607,  607,  607,   63,
      610,  608,  608,  608,  608,  608,  608,   63,  611,  609,
      613,  615,  617,   63,  618,   63, 1106,   63,  621,   63,
       63, 1106,  616,   63, 1106,   63,  610,  608,  608,  608,
      608,  608,  608,   63,  611,   63,  613,  615,  617,   63,

      618,   63,  619,   63,  621,   63,   63,   63,  616,   63,
       63,   63,  622,  623,  625,  626,  627,  628,   63,  642,
      631,   63,  630,   63, 1106,  632,   63, 1106,  619,  629,
       63,  633,   63,   63,   63,   63,   63,   63,  622,  623,
      625,  626,  627,  628,   63,   63,  631,   63,  630,   63,
      636,  632,   63,   63,   63,  629,   63,  633,   63,  634,
       63,   63,  635,   63,   63,  643,   63,   63,  637,  638,
      639,   63,  640,   63,   63,  644,  636,  641,  646,   63,
       63,   63,   63,  645,   63,  634,   63,   63,  635,   63,
       63,  643,   63,   63,   63,   63,   63,  647,   63,   63,

       63,  644,  648,  641,  646,  649,  650,   63,   63,  645,
       63,  651,   63,   63,  652,   63,  653,  655,   63,  654,
       63,   63,   63,  647,   63,   63,   63,   63,  648,   63,
       63,  649,  650,  657,  659,  658,  656,  651,  660, 1106,
      652,   63,  653,   63,   63,  654,  661,   63,   63,  663,
       63,   63,   63,   63,   63,   63,   63,  665,  662,  657,
      659,  658,  656,   63,  660,   63,  664,  667,   63,   63,
       63,   63,  661,   63,   63,  663,   63,   63,   63,  666,
       63,  668,   63,  665,  662,   63,   63,  688,  697,   63,
       63,   63,  664,  667,   63,   63,   63,   63, 1106, 1106,

     1106, 1106, 1106, 1106,   63,  666,  687,  668,   63, 1106,
     1106,   63,   63,  688,  697, 1106,   63, 1106,   63, 1106,
     1106,   63,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  278,  687,  517,  517,  517,  517,  517,  517,  517,
      517,  517,  442,  278,   63,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  602, 1106,  675,  675,  675,  675,
      675,  675, 1106, 1106,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  675,  675,  675,  675,  675,  675,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  683,  686,  677,

      677,  677,  677,  677,  677, 1106,   63,  679,  679,  679,
      679,  679,  679,  679,  679,  679, 1106,   63, 1106, 1106,
     1106, 1106, 1106,  683,  686,  677,  677,  677,  677,  677,
      677,  204,   63,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  526,   63,  679,  679,  679,  679,  679,  679,
     1106, 1106,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      679,  679,  679,  679,  679,  679,  204,  696,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  681,  684,  682,
      682,  682,  682,  682,  682,  685,  689,   63,  690,  691,

     1106,  693,   63, 1106,   63,   63,  692,   63, 1106,   63,
     1106,   63,  699,   63,  684,  682,  682,  682,  682,  682,
      682,  685,  689,   63,  690,  691,   63,  693,   63,  694,
       63,   63,  692,   63,  695,   63,  698,   63,  699,   63,
      700,  703,  701,  702,  704,   63,   63,   63,   63,   63,
       63,   63,   63, 1106,  706,  694,   63,   63,  705,  708,
      695,   63,  698,  707,   63,  709,  700,  703,  701,  702,
      704,   63,   63,   63,   63,   63,   63,   63,   63,  712,
      706,   63,   63,   63,  705,  710,  713,   63,  711,  707,
       63,  709,  714,   63,   63,  715,  716,  717,   63,  718,

     1106,   63,   63,   63,   63,  719,   63,   63,  720,  722,
      721,   63,   63,  725,   63,  723,   63,   63,   63,   63,
       63,  715,   63,  717,   63,  718,   63,   63,   63,   63,
       63,  719,   63,  724,  720,  722,  721,   63,   63,  725,
       63,  723,   63,   63,   63,  726,  727,  728,   63,   63,
      729,   63,   63,   63, 1106,   63,   63,  730,  731,  724,
      732,   63,   63,   63,   63,   63,   63,   63, 1106,   63,
       63,  726, 1106,  728,  748,   63,  729,   63,  733,   63,
       63,   63,  734,  730,  731, 1106,  732,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63, 1106,

      748, 1106, 1106, 1106,  733, 1106,   63, 1106,  734,  739,
      739,  739,  739,  739,  739,  739,  739,  739, 1106,  754,
       63, 1106, 1106,   63,   63,  278, 1106,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  602,   63,  739,  739,
      739,  739,  739,  739, 1106,  754,  742,  742,  742,  742,
      742,  742,  742,  742,  742, 1106,  759, 1106, 1106, 1106,
     1106, 1106, 1106,   63,  739,  739,  739,  739,  739,  739,
      278, 1106,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  741,  759,  742,  742,  742,  742,  742,  742,  204,
      764,  445,  445,  445,  445,  445,  445,  445,  445,  445,

      526,   63, 1106, 1106, 1106, 1106, 1106, 1106, 1106,  742,
      742,  742,  742,  742,  742,  204,  764,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  681,   63,  744,  744,
      744,  744,  744,  744, 1106, 1106,  744,  744,  744,  744,
      744,  744,  744,  744,  744, 1106, 1106, 1106, 1106, 1106,
     1106,  747, 1106,   63,  744,  744,  744,  744,  744,  744,
      745,  745,  745,  745,  745,  745,  745,  745,  745,  753,
     1106,  746,  746,  746,  746,  746,  746,  747,  749,   63,
      750,  751,   63,   63,  752,   63,   63,   63, 1106,  756,
      757,  755,   63,  761,   63,  753,   63,  746,  746,  746,

      746,  746,  746,   63,  749,  758,  750,  751,   63,   63,
      752,   63,   63,   63,   63,  756,  757,  755,   63,  760,
       63,   63,   63,  766,  762,  763,  765,   63,  768,   63,
      767,  758,  770,  771,   63,  769,  772,  773, 1106,   63,
       63,   63,   63,   63,   63,  760, 1106,   63,   63,  766,
      762,  763,  765,   63,  768,   63,  767,   63,   63,   63,
       63,  769,  774,   63,  776,   63,   63,   63,   63,   63,
       63,   63,  775,  777,   63,  778,   63,   63,   63,   63,
       63,   63,  780,   63,   63,   63,   63,  781,  774,   63,
      776,  779,   63,   63,   63, 1106,   63,   63,  775,  777,

      783,  778,   63,   63,   63,   63,   63,   63,  780,  782,
       63,  784,   63,  781,  785,   63,   63,  779,   63,   63,
       63,   63,   63,  800,   63,  786,  783,   63, 1106, 1106,
     1106, 1106, 1106,   63, 1106,  782,   63,  784,   63,   63,
      785,   63,   63,   63,   63,  807, 1106,   63, 1106,  800,
       63,  786,  278,   63,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  602,   63,   63, 1106, 1106, 1106,   63,
      278,  807,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  741,  809,  792,  792,  792,  792,  792,  792, 1106,
     1106,  792,  792,  792,  792,  792,  792,  792,  792,  792,

     1106, 1106, 1106, 1106, 1106, 1106, 1106,   63,  809,  792,
      792,  792,  792,  792,  792,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  802,   63,  794,  794,  794,  794,
      794,  794, 1106,   63,  796,  796,  796,  796,  796,  796,
      796,  796,  796, 1106,  815, 1106, 1106, 1106, 1106, 1106,
      802,   63,  794,  794,  794,  794,  794,  794,  204, 1106,
      795,  795,  795,  795,  795,  795,  795,  795,  795,  681,
       63,  796,  796,  796,  796,  796,  796, 1106,   63,  799,
      799,  799,  799,  799,  799,  799,  799,  799, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106,   63,  796,  796,  796,

      796,  796,  796,  204,   63,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  798,  806,  799,  799,  799,  799,
      799,  799,  801,  803,   63,  804,  805,   63,   63, 1106,
      812,   63,   63,  810, 1106,   63,   63, 1106, 1106,  808,
     1106,  806,  799,  799,  799,  799,  799,  799,  801,  803,
       63,  804,  805,   63,   63,   63,  812,   63,   63,  810,
      811,   63,   63,  817,  813,  808,  814,   63,  816,   63,
       63,  818,   63,   63,   63,   63,   63,  822,  826, 1106,
     1106,   63, 1106,  825,   63, 1106,  811,  819,   63,  817,
      813,  820,  814,   63,  816,   63,   63,  818,   63,   63,

       63,   63,   63,   63,  821,  823,  824,  828,   63,  825,
       63,   63,   63,  819,   63,  827,   63,  820,   63,   63,
       63,   63,   63, 1106,   63, 1106, 1106, 1106, 1106,   63,
      821,  823,  824,  828,   63,   63, 1106,   63,   63, 1106,
     1106,  827,   63,  848,   63,   63,   63,   63,   63,  278,
       63,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      741,   63,  833,  833,  833,  833,  833,  833, 1106,  848,
      833,  833,  833,  833,  833,  833,  833,  833,  833, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,  833,  833,
      833,  833,  833,  833,  278, 1106,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  835,  847,  836,  836,  836,
      836,  836,  836, 1106,   63,  836,  836,  836,  836,  836,
      836,  836,  836,  836, 1106, 1106,   63, 1106, 1106, 1106,
     1106, 1106,  847,  836,  836,  836,  836,  836,  836,  204,
       63,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      681,  204,   63,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  798,   63,  838,  838,  838,  838,  838,  838,
     1106, 1106,  838,  838,  838,  838,  838,  838,  838,  838,
      838, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,   63,
      838,  838,  838,  838,  838,  838,  839,  839,  839,  839,

      839,  839,  839,  839,  839,  843,  844,  840,  840,  840,
      840,  840,  840,  841,   63,   63,  842,   63,   63, 1106,
     1106,  857,  850, 1106,   63,   63,   63, 1106,  845, 1106,
      846,  843,  844,  840,  840,  840,  840,  840,  840,  841,
       63,   63,  842,   63,   63,   63,   63,  849,  850,  851,
       63,   63,   63,  852,  845,   63,  846,  854,   63,  853,
      855,   63,  856,   63, 1106,   63,  859, 1106,  858,  862,
       63,   63,   63,  849,   63,  851,   63,  861,   63,  852,
       63,   63,   63,  854,   63,  853,  855,   63,  856,   63,
      860,   63,  859,   63,  858,  862,   63,  877,   63,  863,

       63,   63,   63,  861,   63,   63,   63,   63,   63, 1106,
     1106, 1106, 1106, 1106, 1106, 1106,  860, 1106, 1106,   63,
     1106, 1106,  884,  877,   63,  863, 1106,   63, 1106, 1106,
     1106,   63,  278,   63,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  741,  278, 1106,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  835,   63,  869,  869,  869,
      869,  869,  869, 1106, 1106,  869,  869,  869,  869,  869,
      869,  869,  869,  869, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106,   63,  869,  869,  869,  869,  869,  869,  870,
      870,  870,  870,  870,  870,  870,  870,  870,  883,  879,

      871,  871,  871,  871,  871,  871, 1106,   63,  873,  873,
      873,  873,  873,  873,  873,  873,  873, 1106,   63, 1106,
     1106, 1106, 1106, 1106,  883,  879,  871,  871,  871,  871,
      871,  871,  204,   63,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  798,   63,  873,  873,  873,  873,  873,
      873, 1106,   63,  876,  876,  876,  876,  876,  876,  876,
      876,  876, 1106,  878, 1106, 1106, 1106, 1106, 1106, 1106,
       63,  873,  873,  873,  873,  873,  873,  204,   63,  874,
      874,  874,  874,  874,  874,  874,  874,  874,  875,  878,
      876,  876,  876,  876,  876,  876,   63,  880,  885,  881,

       63,   63,  887,   63,  888,   63,   63,  889,  890,  886,
      891,   63, 1106,   63,   63,   63,  876,  876,  876,  876,
      876,  876,   63,  880,  885,  881,   63,   63,  887,   63,
      888,   63,   63,  889,  890,  886,  891,   63,  892,   63,
       63,   63,  893,  894,  895,   63,  909,  910,   63,   63,
       63,  915,   63,   63,   63, 1106,  911,  912,  925,   63,
       63, 1106,   63, 1106,  892, 1106, 1106, 1106,  893,  894,
      895,   63,  909,   63, 1106,   63,   63,  915,   63,   63,
       63,   63,  911,  912,  925,   63,   63,  278,   63,  900,
      900,  900,  900,  900,  900,  900,  900,  900,  835,   63,

      901,  901,  901,  901,  901,  901, 1106,   63,  901,  901,
      901,  901,  901,  901,  901,  901,  901, 1106,  918, 1106,
     1106, 1106, 1106, 1106, 1106, 1106,  901,  901,  901,  901,
      901,  901,  278, 1106,  902,  902,  902,  902,  902,  902,
      902,  902,  902,  903,   63,  904,  904,  904,  904,  904,
      904, 1106,  924,  904,  904,  904,  904,  904,  904,  904,
      904,  904, 1106, 1106,   63, 1106, 1106, 1106, 1106, 1106,
       63,  904,  904,  904,  904,  904,  904,  204,  924,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  798,  204,
       63,  905,  905,  905,  905,  905,  905,  905,  905,  905,

      875, 1106,  906,  906,  906,  906,  906,  906, 1106, 1106,
      906,  906,  906,  906,  906,  906,  906,  906,  906, 1106,
     1106, 1106, 1106, 1106, 1106,   63, 1106,  913,  906,  906,
      906,  906,  906,  906,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  914,  916,  908,  908,  908,  908,  908,
      908,   63,  920,  913,   63,  922, 1106,  919,   63,   63,
      917, 1106,   63,  921,  944,  923,  945,  926,   63,  914,
      916,  908,  908,  908,  908,  908,  908,   63,  920,   63,
       63,  922,   63,  919,   63,   63,  917,   63,   63,  921,
      944,  923,  945,  926,   63, 1106, 1106, 1106, 1106,   63,

     1106, 1106,  943,   63, 1106,   63, 1106, 1106,   63, 1106,
     1106, 1106,  278,   63,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  835,  278,   63,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  903,   63,  933,  933,  933,
      933,  933,  933, 1106, 1106,  933,  933,  933,  933,  933,
      933,  933,  933,  933, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106,   63,  933,  933,  933,  933,  933,  933,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  947,   63,
      935,  935,  935,  935,  935,  935, 1106,   63,  937,  937,
      937,  937,  937,  937,  937,  937,  937, 1106,  976, 1106,

     1106, 1106, 1106, 1106,  947,   63,  935,  935,  935,  935,
      935,  935,  204,   63,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  875,  976,  937,  937,  937,  937,  937,
      937, 1106, 1106,  940,  940,  940,  940,  940,  940,  940,
      940,  940, 1106,  942, 1106, 1106, 1106, 1106, 1106, 1106,
     1106,  937,  937,  937,  937,  937,  937,  204,   63,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  939,  942,
      940,  940,  940,  940,  940,  940,  941,  946,  948,   63,
      953, 1106,   63,   63,   63,  949,  950,  951,   63,  952,
      954,  977,  971,   63,  955, 1106,  940,  940,  940,  940,

      940,  940,  941,  946,  948,   63,  953,   63,   63,   63,
       63,  957,  958,  956,   63,   63,  954,  977,  971,   63,
      955,   63,  972,   63,   63,   63,   63,   63,  979, 1106,
       63,   63, 1106,   63, 1106, 1106,   63,  957,  958,  956,
     1106,   63, 1106, 1106,   63, 1106, 1106,   63,  972,   63,
       63,   63,   63,   63,  979,  982,   63,   63,  278, 1106,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  903,
       63,  965,  965,  965,  965,  965,  965, 1106,   63,  965,
      965,  965,  965,  965,  965,  965,  965,  965, 1003, 1106,
     1106, 1106, 1106,  983, 1106, 1106, 1106,  965,  965,  965,

      965,  965,  965,  278,   63,  966,  966,  966,  966,  966,
      966,  966,  966,  966, 1003,  978,  967,  967,  967,  967,
      967,  967, 1106,   63,  967,  967,  967,  967,  967,  967,
      967,  967,  967, 1106, 1106,   63, 1106, 1106, 1106, 1106,
     1106,  978,  967,  967,  967,  967,  967,  967,  204,   63,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  875,
      204,   63,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  939, 1004,  969,  969,  969,  969,  969,  969, 1106,
      985,  969,  969,  969,  969,  969,  969,  969,  969,  969,
      984,  980,   63,  973,  981,  986,   63,  998, 1004,  969,

      969,  969,  969,  969,  969,  974,  985,  987,  988,   63,
       63,   63,  975,   63,   63,   63,  984,   63,   63,  973,
       63,  986,   63,  998, 1106, 1106, 1106, 1106, 1106, 1106,
     1106,  974, 1026,  987,  988,   63,   63,   63,  975,   63,
       63,   63, 1007,   63, 1106,  278,   63,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  903,  278, 1026,  993,
      993,  993,  993,  993,  993,  993,  993,  993,   63,   63,
      994,  994,  994,  994,  994,  994, 1106,   63,  994,  994,
      994,  994,  994,  994,  994,  994,  994, 1106, 1106, 1106,
     1106, 1106, 1106, 1106,   63,   63,  994,  994,  994,  994,

      994,  994,  204,   63,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  939,  999,  996,  996,  996,  996,  996,
      996, 1106, 1008,  996,  996,  996,  996,  996,  996,  996,
      996,  996,   63, 1000, 1005, 1010,   63, 1006, 1009, 1106,
      999,  996,  996,  996,  996,  996,  996,   63, 1001, 1011,
     1021, 1012,   63,   63, 1002,   63, 1013,   63,   63, 1000,
     1005, 1025,   63, 1006,   63,   63,   63,   63,   63,   63,
       63, 1023,   63,   63, 1001, 1011, 1021, 1012,   63,   63,
     1002,   63, 1013,   63,   63,   63, 1106, 1025, 1106, 1106,
       63,   63,   63,   63,   63,   63,   63, 1023,   63,  278,

     1106, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
       63,   63, 1019, 1019, 1019, 1019, 1019, 1019, 1106, 1022,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1106,
     1024, 1028,   63,   63,   63,   63, 1106,   63, 1019, 1019,
     1019, 1019, 1019, 1019,  204, 1022,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  939, 1024, 1028,   63,   63,
       63,   63, 1030,   63, 1027, 1027, 1036, 1027, 1027, 1027,
     1027, 1027, 1027, 1037, 1106, 1027, 1040, 1041,   63,   63,
     1055, 1106, 1035, 1038, 1106, 1027, 1027,  278, 1030,  517,
      517,  517,  517,  517,  517,  517,  517,  517,   63,   63,

       63, 1106, 1040, 1041,   63,   63, 1055,   63, 1035, 1038,
     1039, 1039, 1050, 1039, 1039, 1039, 1039, 1039, 1039, 1043,
     1044, 1039, 1049, 1051,   63,   63,   63,   63,   63, 1052,
       63, 1039, 1039,   63, 1056,   63,   63, 1059, 1050, 1053,
     1054, 1057, 1058, 1060, 1106, 1043, 1044, 1106, 1049, 1051,
       63, 1064,   63,   63,   63, 1052,   63,   63,   63, 1067,
     1056,   63,   63, 1059, 1065, 1053, 1054, 1057, 1058, 1060,
       63, 1068, 1069, 1066, 1070, 1071,   63, 1064,   63,   63,
     1072, 1073,   63,   63,   63, 1067,   63,   63,   63, 1079,
     1065, 1081,   63, 1080,   63,   63,   63, 1068, 1069, 1066,

     1070, 1071, 1078, 1082,   63,   63, 1072, 1073,   63,   63,
     1083,   63,   63,   63,   63, 1079, 1106, 1081,   63, 1080,
       63,   63, 1084,   63, 1088, 1089,   63, 1090, 1078, 1082,
       63,   63,   63,   63, 1091,   63, 1083,   63, 1096,   63,
       63,   63,   63, 1106, 1106, 1106, 1106, 1106, 1084,   63,
     1088, 1089,   63, 1090,   63, 1106, 1106,   63,   63,   63,
     1091, 1106, 1106, 1106, 1096,   63,   63,   63,   63, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
       63,   43,   43,   43,   43,   45,   45,   45,   45,   49,
       49,   49,   49,   51, 1106,   51,   51,   52,   52,   52,

       52,  124, 1106,  124,  124,  128,  128,  199,  199,  200,
      200,  275,  275,  276,  276,  277,  277,  355,  355,  356,
      356,  435,  435,  436,  436,  437,  437,  463, 1106,  463,
      463,  512,  512,  513,  513,  514,  514,  596,  596,  597,
      597,  669,  669,  670,  670,  671,  671,  735,  735,  736,
      736,  737,  737,  596,  596,  788,  788,  789,  789,  829,
      829,  830,  830,  831,  831,  864,  864,  865,  865,  866,
      866,  736,  736,  897,  897,  898,  898,  927,  927,  928,
      928,  929,  929,  959,  959,  960,  960,  962,  962,  830,
      830,  990,  990,  991,  991, 1014, 1014, 1015, 1015, 1016,

     1016, 1027, 1106, 1027, 1027, 1029, 1106, 1029, 1029, 1031,
     1031, 1032, 1032, 1039, 1106, 1039, 1039, 1042, 1106, 1042,
     1042,  897,  897, 1046, 1046, 1047, 1047, 1061, 1061, 1062,
     1062, 1074, 1074, 1075, 1075, 1076, 1076,  960,  960, 1086,
     1086, 1092, 1092, 1093, 1093, 1094, 1094, 1098, 1098, 1101,
     1101, 1102, 1102, 1104, 1104, 1105, 1105,    7, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,

     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106
    } ;

static yyconst flex_int16_t yy_chk[6334] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   29, 1195,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   27,   16,   63,   39,   24,   17,   29,   24,   27,
       34,   39,   34,   46,   46,   34,   30,   24,   16, 1191,
       24,   16,   16,   16,   16,   16,   16,   27,   16,   63,
       39,   24,   30, 1189,   24,   27,   34,   39,   34,   47,
       47,   34,   30,   24,   16,   20,   20, 1185,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   65,   21,   48,   48,   41,   66, 1179,
       21, 1171,   21,   41,   67, 1170,   68,   72, 1165,   21,
     1161,   25, 1160, 1156, 1152, 1114,   72,   21,   21,   65,
       21, 1105,   25,   41,   66,   25,   21,   25,   21,   41,
       67,   25,   68,   72,   31,   21,   22,   25,   22,   22,
       31,   22,   72,   32,   28,   73,   31,   22,   25,   22,
       22,   25,   28,   25,   40, 1104,   22,   25,   40,   28,
       31, 1102,   22,   32,   22,   22,   31,   22, 1101,   32,
       28,   73,   31,   22,   40,   22,   22, 1100,   28,   42,

       40,   70,   22,   23,   40,   28,   23,   23,   69,   32,
       76,   23,   75,   69,   23,   42,   23,   23,   70,   75,
       40,   77,   69,   23, 1099,   42, 1098,   70, 1097,   23,
     1094, 1093,   23,   23,   69, 1087,   76,   23,   75,   69,
       23,   42,   23,   23,   70,   75, 1086,   77,   69,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1085,   26,   26,   26,   26,   26,   26,   33,   26,   83,
     1076,   33,   26, 1075, 1074,   26, 1063,   33, 1062,   71,
       71,   26,   33,   33, 1061,   35,   35,   26,   26,   26,
       26,   26,   26,   33,   26,   83,   35,   33,   26,   35,

       36,   26,   35,   33,   36,   71,   71,   26,   33,   33,
       80,   35,   35,   79,   36,   79, 1047, 1046,   80, 1045,
       36, 1033,   35, 1032, 1031,   35,   36, 1016,   35, 1015,
       36,   78,   38,   38, 1014,   74,   80,   84,  996,   79,
       36,   79,   38,   74,   80,   78,   36,   37,   81,   37,
       38,   82,   37,   37,   84,   74,   82,   78,   96,   38,
       81,   74,   38,   84,   37,   37,  992,  991,   38,   74,
      990,   78,  989,   37,   81,   37,   38,   82,   37,   37,
       84,   74,   82,   99,   96,   38,   81,  965,   38,  962,
       37,   37,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,  960,   56,   56,   56,   56,   56,   56,   99,
       56,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       91,  959,  937,  931,  930,  929,  928,  927,   91,   56,
       56,   56,   56,   56,   56,   91,   56,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   91,   85,   61,   61,
       61,   61,   61,   61,   91,  901,  898,  897,  896,  873,
      867,   91,  866,  865,   85,  864,  848,  833,  831,  830,
      829,  796,  790,   85,   61,   61,   61,   61,   61,   61,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       85,   64,   64,   64,   64,   64,   64,   86,   64,  789,

      788,   92,  787,  739,   90,   87,   88,  737,   90,   89,
       95,   64,   95,   86,   89,   92,  100,   64,   64,   64,
       64,   64,   64,   86,   64,   87,   88,   92,   89,   89,
       90,   87,   88,   94,   90,   89,   95,   64,   95,   86,
       89,   92,   93,   93,   97,   94,   98,   98,   94,   97,
      100,   87,   88,  101,   89,   89,  101,  102,  106,   94,
      104,  103,  736,  102,  107,  104,  113,  107,   93,   93,
       97,   94,   98,   98,   94,   97,  100,  103,  108,  101,
      735,  109,  101,  102,  106,  111,  104,  103,  105,  102,
      107,  104,  113,  107,  110,  105,  108,  105,  105,  110,

      112,  109,  111,  103,  108,  111,  105,  109,  114,  115,
      116,  111,  117,  679,  105,  672,  134,  671,  116,  112,
      110,  105,  108,  105,  105,  110,  112,  109,  111,  118,
      119,  111,  105,  120,  114,  122,  116,  122,  117,  119,
      120,  118,  134,  115,  116,  112,  121,  135,  139,  121,
      670,  669,  600,  597,  596,  118,  119,  595,  524,  120,
      142,  122,  515,  122,  514,  119,  120,  118,  513,  115,
      512,  440,  121,  135,  139,  121,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  142,  125,  125,  125,
      125,  125,  125,  162,  125,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  145,  145,  437,  436,  435,  365,
      357,  356,  355,  125,  125,  125,  125,  125,  125,  162,
      125,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      145,  145,  129,  129,  129,  129,  129,  129,  132,  196,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  354,
      154,  287,  277,  276,  275,  274,  242,  154,  129,  129,
      129,  129,  129,  129,  131,  196,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  154,  131,  131,  131,
      131,  131,  131,  154,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  204,  204,  204,  204,  204,  204,  204,

      204,  204,  201,  131,  131,  131,  131,  131,  131,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  140,
      133,  133,  133,  133,  133,  133,  136,  137,  138,  136,
      141,  200,  140,  137,  138,  143,  146,  143,  146,  147,
      141,  144,  149,  147,  199,  140,  133,  133,  133,  133,
      133,  133,  136,  137,  138,  136,  141,  144,  140,  137,
      138,  143,  146,  143,  146,  147,  141,  144,  148,  147,
      150,  151,  153,  152,  153,  157,  149,  155,  156,  128,
      156,  126,   57,  144,  148,   53,   52,  158,  151,  152,
      150,  155,  165,  157,  148,  161,  150,  151,  153,  152,

      153,  157,  149,  155,  156,  158,  156,  159,  160,  166,
      148,  161,  163,  158,  151,  152,  150,  155,   49,  157,
      160,  161,  164,  168,  168,  159,  165,  166,  163,  167,
      170,  158,  164,  159,  160,  166,   44,  161,  163,  169,
      169,   19,   18,  167,  171,  173,  160,  175,  164,  168,
      168,  159,  165,  166,  163,  167,  171,  174,  164,  172,
      173,  177,  175,  176,  170,  178,  174,  177,  172,  167,
      171,  173,  172,  175,  169,  176,  179,  172,  180,  181,
      181,  178,  171,  174,  180,  172,  173,  177,  175,  176,
      170,  178,  174,  177,  172,  185,  179,  182,  172,  189,

      169,  176,  179,  172,  180,  181,  181,  178,  183,  182,
      180,  183,  184,  186,  186,  184,  187,  189,   14,  188,
      190,   12,  179,  182,  188,  189,  188,  209,  187,  185,
      192,  191,  193,  211,  183,  182,  190,  183,  184,  186,
      186,  184,  187,  189,  193,  188,  190,  191,  192,  194,
      188,  195,  188,  209,  187,  185,  192,  191,  193,  211,
        7,  195,  190,  213,    4,  213,  194,    3,    0,  214,
      193,    0,    0,  191,  192,  194,  203,  195,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  195,    0,  213,
      215,  213,  194,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  214,  197,  197,  197,  197,  197,  197,
      207,  197,  207,  207,  207,  207,  207,  207,  207,  207,
      207,    0,    0,    0,  215,    0,    0,    0,    0,  214,
      197,  197,  197,  197,  197,  197,  212,  197,  202,  212,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      215,  202,  202,  202,  202,  202,  202,    0,  221,    0,
        0,    0,  212,    0,    0,  212,    0,    0,    0,  218,
        0,    0,    0,    0,    0,    0,  218,  202,  202,  202,
      202,  202,  202,  205,  221,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  218,  205,  205,  205,  205,

      205,  205,  218,  210,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,    0,    0,    0,    0,    0,  225,
      250,  210,  205,  205,  205,  205,  205,  205,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  210,  216,  206,
      206,  206,  206,  206,  206,  225,  250,  210,    0,    0,
        0,    0,    0,    0,  216,  220,    0,    0,    0,    0,
        0,    0,    0,  210,  216,  206,  206,  206,  206,  206,
      206,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      216,  219,  208,  208,  208,  208,  208,  208,  217,  220,
      217,  222,  223,  222,  223,  228,  226,  231,  237,  226,

      230,  219,  230,    0,    0,    0,    0,  219,  208,  208,
      208,  208,  208,  208,  217,  220,  217,  222,  223,  222,
      223,  224,  226,  227,  229,  226,  230,  219,  230,  228,
      232,  231,  237,  224,  233,  233,  234,    0,  235,  227,
      229,  235,    0,  234,  236,  236,  232,  224,  241,  227,
      229,    0,    0,    0,    0,  228,  232,  231,  237,  224,
      233,  233,  234,  239,  235,  227,  229,  235,  238,  234,
      236,  236,  232,  243,  240,  246,  239,  238,  238,  238,
      247,  244,  241,  244,  246,  245,  238,  240,  243,  239,
      243,  245,  248,    0,  238,    0,  247,    0,  248,  243,

      240,  246,  239,  238,  238,  238,  247,  244,  241,  244,
      246,  245,  238,  240,  243,  249,  243,  245,  248,  251,
      252,  249,  247,  251,  248,  253,  254,  255,  256,  256,
        0,  255,  253,  258,  257,  251,    0,  252,  258,    0,
      259,  249,    0,  267,  254,  251,  252,  249,    0,  251,
      257,  253,  254,  255,  256,  256,  259,  255,  253,  258,
      257,  251,  260,  252,  258,  262,  259,  263,  261,  268,
      254,  264,  265,  265,  263,  266,  257,  267,  260,  270,
      272,  262,  259,  261,  266,  261,  269,  264,  260,  288,
      288,  262,  292,  263,  261,  268,  270,  264,  265,  265,

      263,  266,  271,  267,  260,  270,  269,  262,  271,  261,
      266,  261,  269,  264,  272,  288,  288,    0,  292,    0,
        0,    0,  270,    0,    0,  304,    0,    0,  271,    0,
        0,    0,  269,    0,  271,    0,  306,    0,    0,    0,
      272,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      279,  304,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  306,  279,  279,  279,  279,  279,  279,  281,
        0,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  279,
      279,  279,  279,  279,  279,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  294,  336,  280,  280,  280,  280,
      280,  280,  282,  294,  282,  282,  282,  282,  282,  282,
      282,  282,  282,    0,  295,    0,    0,    0,    0,    0,
      294,  336,  280,  280,  280,  280,  280,  280,  283,  294,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      320,  283,  283,  283,  283,  283,  283,  284,  295,  284,
      284,  284,  284,  284,  284,  284,  284,  284,    0,  320,
        0,    0,    0,    0,    0,    0,  320,  283,  283,  283,
      283,  283,  283,  285,  295,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  320,  285,  285,  285,  285,

      285,  285,  286,  291,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  289,  290,  291,  290,    0,  289,  296,
        0,  307,  285,  285,  285,  285,  285,  285,    0,  291,
        0,  293,  297,  297,    0,  298,  300,  300,  301,  289,
      290,  291,  290,  293,  289,  299,  293,  298,  293,  299,
      299,  293,    0,  296,  301,  307,  303,  293,  297,  297,
      302,  298,  300,  300,  301,  309,  305,  302,  303,  293,
        0,  299,  293,  298,  293,  299,  299,  293,  310,  296,
      301,  307,  303,  305,  311,  312,  302,  338,    0,  308,
      310,  313,  305,  302,  303,  308,  311,  308,  314,  309,

      312,  319,  315,  313,  310,  321,  317,  314,  315,  305,
      311,  312,  317,  338,  316,  308,  310,  313,  321,  318,
      324,  308,  311,  308,  314,  309,  312,  322,  315,  313,
      316,  321,  317,  314,  315,  319,  324,  323,  317,  318,
      316,  325,  322,  323,  321,  318,  324,  326,  328,    0,
      327,  334,  329,  322,  326,  328,  316,  325,  329,  333,
        0,  319,  324,  323,    0,  318,  334,  325,  322,  323,
      327,  341,  330,  326,  328,  330,  327,  334,  329,  331,
      326,  328,  331,  325,  329,  332,  335,  335,  332,    0,
      337,  343,  334,  333,  339,  339,  327,  341,  330,  340,

      340,  330,    0,  342,  345,  331,  337,  343,  331,  342,
        0,  332,  335,  335,  332,  344,  337,  343,  345,  333,
      339,  339,  346,  346,  344,  340,  340,  348,  347,  342,
      345,  347,  337,  343,  349,  342,  350,  351,  350,  349,
      352,  344,  353,  352,  345,    0,    0,  348,  346,  346,
      344,    0,    0,  348,  347,    0,    0,  347,    0,  353,
      349,    0,  350,    0,  350,  349,  352,    0,  353,  352,
      386,  351,  358,  348,  358,  358,  358,  358,  358,  358,
      358,  358,  358,    0,  360,  353,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  369,  386,  351,  359,    0,

      359,  359,  359,  359,  359,  359,  359,  359,  359,  359,
      379,  359,  359,  359,  359,  359,  359,  362,  379,  362,
      362,  362,  362,  362,  362,  362,  362,  362,    0,  369,
        0,    0,    0,    0,    0,    0,  379,  359,  359,  359,
      359,  359,  359,  361,  379,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  369,  361,  361,  361,  361,
      361,  361,  364,  405,  364,  364,  364,  364,  364,  364,
      364,  364,  364,  364,  406,    0,    0,    0,    0,    0,
        0,    0,  361,  361,  361,  361,  361,  361,  366,  405,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      406,  366,  366,  366,  366,  366,  366,  368,    0,  368,
      368,  368,  368,  368,  368,  368,  368,  368,    0,    0,
        0,    0,    0,    0,  371,    0,  371,  366,  366,  366,
      366,  366,  366,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  370,  374,  367,  367,  367,  367,  367,  367,
      371,  373,  371,  372,  372,  375,    0,    0,  375,  374,
      373,  378,  370,  378,  383,  410,  376,  377,  370,  374,
      367,  367,  367,  367,  367,  367,  383,  373,  384,  372,
      372,  375,  376,  377,  375,  374,  373,  378,  370,  378,
      383,  410,  376,  377,  381,    0,  382,  385,    0,  382,

      385,  381,  383,    0,    0,    0,    0,  388,  376,  377,
      380,  380,  384,  380,  380,  380,  380,  380,  380,  380,
      381,  380,  382,  385,  388,  382,  385,  381,  387,  389,
      390,  380,  380,  388,  392,  391,  387,  389,  384,  393,
      393,  396,  392,  394,  394,    0,  397,  390,  391,  396,
      388,  395,  397,    0,  387,  389,  390,  399,  399,    0,
      392,  391,  387,  389,  400,  393,  393,  396,  392,  394,
      394,  395,  397,  390,  391,  396,  398,  395,  397,  401,
      402,  400,  403,  399,  399,  398,  407,  401,  403,  404,
      400,    0,  402,  408,  407,  404,  408,  395,  409,    0,

      413,  409,  398,  412,  416,  401,  402,  400,  403,  413,
        0,  398,  407,  401,  403,  404,  417,  412,  402,  408,
      407,  404,  408,  411,  409,  411,  413,  409,  414,  412,
      416,  415,  419,  418,  417,  413,  414,  421,  420,  422,
        0,  426,  417,  412,  415,  418,  433,  415,  423,  411,
      424,  411,  425,  424,  414,  427,  423,  415,  430,  418,
      417,    0,  414,  421,  430,  422,  419,  426,  425,  461,
      415,  418,  420,  415,  423,  428,  424,  432,  425,  424,
      433,  427,  423,  429,  430,  429,  432,  428,  431,  431,
      430,  464,  419,  434,  425,  461,    0,    0,  420,    0,

        0,  428,    0,  432,    0,  434,  433,    0,    0,  429,
        0,  429,  432,  428,  431,  431,    0,  464,    0,  434,
      438,  438,  438,  438,  438,  438,  438,  438,  438,    0,
      439,  434,  439,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  441,    0,  441,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  487,  441,  441,  441,  441,  441,
      441,  443,  452,  443,  443,  443,  443,  443,  443,  443,
      443,  443,    0,    0,    0,    0,    0,    0,    0,    0,
      487,  441,  441,  441,  441,  441,  441,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  452,  466,  442,  442,

      442,  442,  442,  442,  444,  466,  444,  444,  444,  444,
      444,  444,  444,  444,  444,    0,  488,    0,    0,    0,
        0,    0,  452,  466,  442,  442,  442,  442,  442,  442,
      445,  466,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  446,  488,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  446,  494,  446,  446,  446,  446,  446,  446,
      447,  508,  447,  447,  447,  447,  447,  447,  447,  447,
      447,    0,  472,    0,    0,    0,    0,    0,    0,  494,
      446,  446,  446,  446,  446,  446,  448,  508,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  472,  448,

      448,  448,  448,  448,  448,  449,    0,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  451,  456,  454,  451,
      453,  455,  455,  456,  472,  448,  448,  448,  448,  448,
      448,  450,  454,  453,  450,  457,  458,  463,  463,    0,
      450,  459,  451,  456,  454,  451,  453,  455,  455,  456,
      457,  457,  460,  459,    0,  457,  458,  450,  454,  453,
      450,  457,  458,  463,  463,  462,  450,  459,  465,  468,
      468,  469,  460,    0,  465,  462,  457,  457,  460,  459,
      467,  457,  458,  462,  462,  470,  467,  469,  467,  477,
        0,  462,  470,  467,  465,  468,  468,  469,  460,  471,

      465,  462,  473,  474,  475,  471,  467,  477,  476,  462,
      462,  470,  467,  469,  467,  477,  478,  479,  470,  467,
      475,  480,  473,  474,  476,  471,    0,  480,  473,  474,
      475,  471,  478,  477,  476,  479,  481,  485,  482,  483,
      485,  484,  478,  479,    0,    0,  475,  480,  473,  474,
      476,  489,  481,  480,  482,  483,  484,    0,  478,  490,
      490,  479,  481,  485,  482,  483,  485,  484,  486,  491,
      491,  489,  492,  486,  492,  493,  493,  489,  481,    0,
      482,  483,  484,  495,  498,  490,  490,  502,    0,  497,
      498,  539,  499,  500,  486,  491,  491,  489,  492,  486,

      492,  493,  493,  495,  496,  497,  499,  502,  501,  495,
      498,  500,  543,  502,  496,  497,  498,  539,  499,  500,
      501,  496,  503,  503,  504,  506,  504,  506,  505,  495,
      496,  497,  499,  502,  501,  505,  507,  500,  543,  510,
      496,  510,  511,  507,  509,  511,  501,  496,  503,  503,
      504,  506,  504,  506,  505,    0,  509,    0,    0,    0,
        0,  505,  507,    0,    0,  510,    0,  510,  511,  507,
      509,  511,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  516,  509,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  517,    0,  517,  517,  517,  517,  517,  517,

      517,  517,  517,  518,    0,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  533,  518,  518,  518,  518,
      518,  518,  519,  533,  519,  519,  519,  519,  519,  519,
      519,  519,  519,    0,    0,    0,    0,    0,    0,    0,
        0,  533,  518,  518,  518,  518,  518,  518,  520,  533,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      531,  520,  520,  520,  520,  520,  520,  521,  556,  521,
      521,  521,  521,  521,  521,  521,  521,  521,    0,    0,
      531,    0,    0,    0,    0,    0,  531,  520,  520,  520,
      520,  520,  520,  523,  556,  523,  523,  523,  523,  523,

      523,  523,  523,  523,  523,  525,  531,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,    0,  525,  525,
      525,  525,  525,  525,  527,    0,  527,  527,  527,  527,
      527,  527,  527,  527,  527,    0,    0,    0,    0,    0,
        0,    0,    0,  528,  525,  525,  525,  525,  525,  525,
      526,  526,  526,  526,  526,  526,  526,  526,  526,  528,
      529,  526,  526,  526,  526,  526,  526,  529,  530,  528,
      532,  534,  536,  536,  537,  530,    0,  534,  540,  532,
      540,    0,  535,  537,    0,  528,  529,  526,  526,  526,
      526,  526,  526,  529,  530,  535,  532,  534,  536,  536,

      537,  530,  538,  534,  540,  532,  540,  541,  535,  537,
      542,  538,  541,  542,  544,  545,  546,  547,  547,  559,
      550,  535,  549,  544,    0,  551,  550,    0,  538,  548,
      549,  552,  546,  541,  551,  545,  542,  538,  541,  542,
      544,  545,  546,  547,  547,  548,  550,  552,  549,  544,
      555,  551,  550,  559,  560,  548,  549,  552,  546,  553,
      551,  545,  554,  562,  554,  561,  553,  555,  557,  557,
      557,  548,  557,  552,  558,  563,  555,  558,  565,  559,
      560,  561,  566,  564,  567,  553,  564,  565,  554,  562,
      554,  561,  553,  555,  568,  563,  570,  569,  557,  569,

      558,  563,  571,  558,  565,  572,  573,  561,  566,  564,
      567,  574,  564,  565,  575,  576,  577,  579,  573,  578,
      568,  563,  570,  569,  557,  569,  578,  574,  571,  577,
      575,  572,  573,  581,  583,  582,  580,  574,  584,    0,
      575,  576,  577,  582,  573,  578,  585,  584,  590,  587,
      581,  579,  578,  574,  580,  577,  575,  589,  586,  581,
      583,  582,  580,  585,  584,  587,  588,  592,  588,  582,
      586,  589,  585,  584,  590,  587,  581,  579,  594,  591,
      580,  593,  592,  589,  586,  614,  593,  615,  624,  585,
      615,  587,  588,  592,  588,  591,  586,  589,    0,    0,

        0,    0,    0,    0,  594,  591,  613,  593,  592,    0,
        0,  614,  593,  615,  624,    0,  615,    0,  613,    0,
        0,  591,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  599,  613,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  601,  613,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  601,    0,  601,  601,  601,  601,
      601,  601,  603,    0,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  601,  601,  601,  601,  601,  601,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  609,  612,  602,

      602,  602,  602,  602,  602,  606,  612,  606,  606,  606,
      606,  606,  606,  606,  606,  606,    0,  609,    0,    0,
        0,    0,    0,  609,  612,  602,  602,  602,  602,  602,
      602,  605,  612,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  609,  605,  605,  605,  605,  605,  605,
      608,    0,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      605,  605,  605,  605,  605,  605,  607,  623,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  610,  607,
      607,  607,  607,  607,  607,  611,  616,  610,  617,  618,

        0,  620,  616,    0,  617,  611,  619,  618,    0,  626,
        0,  623,  626,  620,  610,  607,  607,  607,  607,  607,
      607,  611,  616,  610,  617,  618,  619,  620,  616,  621,
      617,  611,  619,  618,  622,  626,  625,  623,  626,  620,
      627,  630,  628,  629,  631,  621,  637,  627,  628,  629,
      622,  631,  619,    0,  633,  621,  625,  633,  632,  635,
      622,  630,  625,  634,  634,  636,  627,  630,  628,  629,
      631,  621,  637,  627,  628,  629,  622,  631,  632,  639,
      633,  636,  625,  633,  632,  638,  640,  630,  638,  634,
      634,  636,  641,  635,  646,  642,  643,  644,  647,  645,

        0,  645,  639,  642,  632,  648,  644,  636,  649,  651,
      650,  653,  651,  655,  638,  652,  640,  650,  652,  635,
      646,  642,  655,  644,  647,  645,  641,  645,  639,  642,
      643,  648,  644,  654,  649,  651,  650,  653,  651,  655,
      638,  652,  640,  650,  652,  656,  657,  658,  655,  661,
      659,  654,  641,  659,    0,  658,  643,  660,  662,  654,
      663,  656,  664,  663,  665,  662,  666,  691,    0,  660,
      684,  656,    0,  658,  684,  661,  659,  654,  667,  659,
      657,  658,  668,  660,  662,    0,  663,  656,  664,  663,
      665,  662,  666,  691,  667,  660,  684,  695,  668,    0,

      684,    0,    0,    0,  667,    0,  657,  675,  668,  675,
      675,  675,  675,  675,  675,  675,  675,  675,    0,  690,
      667,    0,    0,  695,  668,  674,    0,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  690,  674,  674,
      674,  674,  674,  674,  677,  690,  677,  677,  677,  677,
      677,  677,  677,  677,  677,    0,  697,    0,    0,    0,
        0,    0,    0,  690,  674,  674,  674,  674,  674,  674,
      676,    0,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  697,  676,  676,  676,  676,  676,  676,  678,
      702,  678,  678,  678,  678,  678,  678,  678,  678,  678,

      678,  706,    0,    0,    0,    0,    0,    0,    0,  676,
      676,  676,  676,  676,  676,  680,  702,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  706,  680,  680,
      680,  680,  680,  680,  682,    0,  682,  682,  682,  682,
      682,  682,  682,  682,  682,    0,    0,    0,    0,    0,
        0,  683,    0,  683,  680,  680,  680,  680,  680,  680,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  689,
        0,  681,  681,  681,  681,  681,  681,  683,  685,  683,
      686,  687,  686,  687,  688,  685,  689,  692,    0,  693,
      694,  692,  693,  699,  694,  689,  688,  681,  681,  681,

      681,  681,  681,  709,  685,  696,  686,  687,  686,  687,
      688,  685,  689,  692,  696,  693,  694,  692,  693,  698,
      694,  698,  688,  704,  700,  701,  703,  699,  707,  709,
      705,  696,  710,  711,  717,  708,  712,  713,    0,  704,
      696,  700,  705,  701,  703,  698,    0,  698,  707,  704,
      700,  701,  703,  699,  707,  708,  705,  718,  711,  710,
      717,  708,  714,  712,  716,  704,  713,  700,  705,  701,
      703,  714,  715,  719,  707,  720,  716,  721,  715,  722,
      723,  708,  725,  718,  711,  710,  726,  727,  714,  712,
      716,  724,  713,  731,  725,    0,  727,  714,  715,  719,

      729,  720,  716,  721,  715,  722,  723,  724,  725,  728,
      732,  730,  726,  727,  733,  733,  729,  724,  748,  731,
      725,  728,  727,  747,  750,  734,  729,  730,    0,    0,
        0,    0,    0,  724,    0,  728,  732,  730,  755,  747,
      733,  733,  729,  734,  748,  757,    0,  728,    0,  747,
      750,  734,  738,  730,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  755,  747,    0,    0,    0,  734,
      740,  757,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  759,  740,  740,  740,  740,  740,  740,  742,
        0,  742,  742,  742,  742,  742,  742,  742,  742,  742,

        0,    0,    0,    0,    0,    0,    0,  766,  759,  740,
      740,  740,  740,  740,  740,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  751,  751,  741,  741,  741,  741,
      741,  741,  744,  766,  744,  744,  744,  744,  744,  744,
      744,  744,  744,    0,  765,    0,    0,    0,    0,    0,
      751,  751,  741,  741,  741,  741,  741,  741,  743,    0,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      770,  743,  743,  743,  743,  743,  743,  746,  765,  746,
      746,  746,  746,  746,  746,  746,  746,  746,    0,    0,
        0,    0,    0,    0,    0,    0,  770,  743,  743,  743,

      743,  743,  743,  745,  765,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  756,  745,  745,  745,  745,
      745,  745,  749,  752,  752,  753,  754,  753,  749,    0,
      762,  756,  754,  760,    0,  760,  762,    0,    0,  758,
        0,  756,  745,  745,  745,  745,  745,  745,  749,  752,
      752,  753,  754,  753,  749,  758,  762,  756,  754,  760,
      761,  760,  762,  768,  763,  758,  764,  764,  767,  761,
      763,  769,  768,  771,  772,  767,  773,  779,  783,    0,
        0,  758,    0,  782,  782,    0,  761,  774,  769,  768,
      763,  775,  764,  764,  767,  761,  763,  769,  768,  771,

      772,  767,  773,  774,  776,  780,  781,  785,  775,  782,
      782,  779,  783,  774,  769,  784,  786,  775,  781,  785,
      780,  776,  784,    0,  802,    0,    0,    0,    0,  774,
      776,  780,  781,  785,  775,  804,    0,  779,  783,    0,
        0,  784,  786,  809,  781,  785,  780,  776,  784,  791,
      802,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  804,  791,  791,  791,  791,  791,  791,  792,  809,
      792,  792,  792,  792,  792,  792,  792,  792,  792,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  791,  791,
      791,  791,  791,  791,  793,    0,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  808,  793,  793,  793,
      793,  793,  793,  794,  810,  794,  794,  794,  794,  794,
      794,  794,  794,  794,    0,    0,  808,    0,    0,    0,
        0,    0,  808,  793,  793,  793,  793,  793,  793,  795,
      810,  795,  795,  795,  795,  795,  795,  795,  795,  795,
      795,  797,  808,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  814,  797,  797,  797,  797,  797,  797,
      799,    0,  799,  799,  799,  799,  799,  799,  799,  799,
      799,    0,    0,    0,    0,    0,    0,    0,    0,  814,
      797,  797,  797,  797,  797,  797,  798,  798,  798,  798,

      798,  798,  798,  798,  798,  803,  805,  798,  798,  798,
      798,  798,  798,  800,  801,  805,  801,  800,  803,    0,
        0,  821,  812,    0,  816,  812,  817,    0,  806,    0,
      807,  803,  805,  798,  798,  798,  798,  798,  798,  800,
      801,  805,  801,  800,  803,  806,  807,  811,  812,  813,
      816,  812,  817,  815,  806,  821,  807,  818,  813,  815,
      819,  815,  820,  811,    0,  825,  823,    0,  822,  827,
      827,  806,  807,  811,  818,  813,  822,  826,  820,  815,
      819,  821,  823,  818,  813,  815,  819,  815,  820,  811,
      824,  825,  823,  826,  822,  827,  827,  841,  844,  828,

      818,  845,  822,  826,  820,  824,  819,  828,  823,    0,
        0,    0,    0,    0,    0,    0,  824,    0,    0,  826,
        0,    0,  850,  841,  844,  828,    0,  845,    0,    0,
        0,  824,  832,  828,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  834,    0,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  850,  834,  834,  834,
      834,  834,  834,  836,    0,  836,  836,  836,  836,  836,
      836,  836,  836,  836,    0,    0,    0,    0,    0,    0,
        0,    0,  850,  834,  834,  834,  834,  834,  834,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  849,  843,

      835,  835,  835,  835,  835,  835,  838,  843,  838,  838,
      838,  838,  838,  838,  838,  838,  838,    0,  849,    0,
        0,    0,    0,    0,  849,  843,  835,  835,  835,  835,
      835,  835,  837,  843,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  849,  837,  837,  837,  837,  837,
      837,  840,  851,  840,  840,  840,  840,  840,  840,  840,
      840,  840,    0,  842,    0,    0,    0,    0,    0,    0,
      842,  837,  837,  837,  837,  837,  837,  839,  851,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  842,
      839,  839,  839,  839,  839,  839,  842,  846,  852,  847,

      846,  847,  854,  856,  855,  854,  855,  857,  858,  853,
      859,  859,    0,  857,  858,  852,  839,  839,  839,  839,
      839,  839,  853,  846,  852,  847,  846,  847,  854,  856,
      855,  854,  855,  857,  858,  853,  859,  859,  860,  857,
      858,  852,  861,  862,  863,  862,  877,  878,  853,  861,
      879,  883,  880,  883,  860,    0,  880,  881,  892,  892,
      863,    0,  877,    0,  860,    0,    0,    0,  861,  862,
      863,  862,  877,  881,    0,  861,  879,  883,  880,  883,
      860,  878,  880,  881,  892,  892,  863,  868,  877,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  881,

      868,  868,  868,  868,  868,  868,  869,  878,  869,  869,
      869,  869,  869,  869,  869,  869,  869,    0,  885,    0,
        0,    0,    0,    0,    0,    0,  868,  868,  868,  868,
      868,  868,  870,    0,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  885,  870,  870,  870,  870,  870,
      870,  871,  891,  871,  871,  871,  871,  871,  871,  871,
      871,  871,    0,    0,  891,    0,    0,    0,    0,    0,
      885,  870,  870,  870,  870,  870,  870,  872,  891,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  874,
      891,  874,  874,  874,  874,  874,  874,  874,  874,  874,

      874,    0,  874,  874,  874,  874,  874,  874,  876,    0,
      876,  876,  876,  876,  876,  876,  876,  876,  876,    0,
        0,    0,    0,    0,    0,  894,    0,  882,  874,  874,
      874,  874,  874,  874,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  882,  884,  875,  875,  875,  875,  875,
      875,  894,  887,  882,  895,  889,    0,  886,  889,  912,
      884,    0,  884,  888,  913,  890,  914,  893,  887,  882,
      884,  875,  875,  875,  875,  875,  875,  886,  887,  888,
      895,  889,  890,  886,  889,  912,  884,  893,  884,  888,
      913,  890,  914,  893,  887,    0,    0,    0,    0,  918,

        0,    0,  911,  886,    0,  888,    0,    0,  890,    0,
        0,    0,  900,  893,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  902,  918,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  902,  911,  902,  902,  902,
      902,  902,  902,  904,    0,  904,  904,  904,  904,  904,
      904,  904,  904,  904,    0,    0,    0,    0,    0,    0,
        0,    0,  911,  902,  902,  902,  902,  902,  902,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  916,  921,
      903,  903,  903,  903,  903,  903,  906,  916,  906,  906,
      906,  906,  906,  906,  906,  906,  906,    0,  944,    0,

        0,    0,    0,    0,  916,  921,  903,  903,  903,  903,
      903,  903,  905,  916,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  944,  905,  905,  905,  905,  905,
      905,  908,    0,  908,  908,  908,  908,  908,  908,  908,
      908,  908,    0,  910,    0,    0,    0,    0,    0,    0,
        0,  905,  905,  905,  905,  905,  905,  907,  910,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  910,
      907,  907,  907,  907,  907,  907,  909,  915,  917,  909,
      920,    0,  920,  917,  910,  919,  919,  919,  941,  919,
      922,  945,  941,  915,  923,    0,  907,  907,  907,  907,

      907,  907,  909,  915,  917,  909,  920,  922,  920,  917,
      923,  925,  926,  924,  941,  919,  922,  945,  941,  915,
      923,  924,  942,  925,  946,  949,  942,  955,  948,    0,
      971,  926,    0,  922,    0,    0,  923,  925,  926,  924,
        0,  919,    0,    0,  948,    0,    0,  924,  942,  925,
      946,  949,  942,  955,  948,  951,  971,  926,  932,    0,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      948,  932,  932,  932,  932,  932,  932,  933,  951,  933,
      933,  933,  933,  933,  933,  933,  933,  933,  976,    0,
        0,    0,    0,  952,    0,    0,    0,  932,  932,  932,

      932,  932,  932,  934,  951,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  976,  947,  934,  934,  934,  934,
      934,  934,  935,  952,  935,  935,  935,  935,  935,  935,
      935,  935,  935,    0,    0,  947,    0,    0,    0,    0,
        0,  947,  934,  934,  934,  934,  934,  934,  936,  952,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      938,  947,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  977,  938,  938,  938,  938,  938,  938,  940,
      954,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      953,  950,  953,  943,  950,  956,  954,  972,  977,  938,

      938,  938,  938,  938,  938,  943,  954,  957,  958,  984,
      986,  956,  943,  943,  972,  957,  953,  958,  953,  943,
      950,  956,  954,  972,    0,    0,    0,    0,    0,    0,
        0,  943, 1003,  957,  958,  984,  986,  956,  943,  943,
      972,  957,  980,  958,    0,  964,  950,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  966, 1003,  966,
      966,  966,  966,  966,  966,  966,  966,  966, 1007,  980,
      966,  966,  966,  966,  966,  966,  967, 1008,  967,  967,
      967,  967,  967,  967,  967,  967,  967,    0,    0,    0,
        0,    0,    0,    0, 1007,  980,  966,  966,  966,  966,

      966,  966,  968, 1008,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  973,  968,  968,  968,  968,  968,
      968,  969,  981,  969,  969,  969,  969,  969,  969,  969,
      969,  969,  973,  974,  978,  983,  978,  979,  982,    0,
      973,  968,  968,  968,  968,  968,  968,  981,  975,  985,
      998,  987,  985,  974,  975,  979,  988,  998,  973,  974,
      978, 1002,  978,  979,  983,  982,  975,  987, 1000, 1002,
     1009, 1000,  988,  981,  975,  985,  998,  987,  985,  974,
      975,  979,  988,  998, 1010, 1011,    0, 1002,    0,    0,
      983,  982,  975,  987, 1000, 1002, 1009, 1000,  988,  993,

        0,  993,  993,  993,  993,  993,  993,  993,  993,  993,
     1010, 1011,  993,  993,  993,  993,  993,  993,  994,  999,
      994,  994,  994,  994,  994,  994,  994,  994,  994,    0,
     1001, 1005, 1012, 1005, 1021, 1001,    0,  999,  993,  993,
      993,  993,  993,  993,  995,  999,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995, 1001, 1005, 1012, 1005,
     1021, 1001, 1013,  999, 1006, 1006, 1023, 1006, 1006, 1006,
     1006, 1006, 1006, 1024,    0, 1006, 1027, 1027, 1030, 1013,
     1040,    0, 1022, 1025,    0, 1006, 1006, 1018, 1013, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1022, 1025,

     1023,    0, 1027, 1027, 1030, 1013, 1040, 1024, 1022, 1025,
     1028, 1028, 1036, 1028, 1028, 1028, 1028, 1028, 1028, 1029,
     1029, 1028, 1035, 1037, 1022, 1025, 1023, 1035, 1037, 1038,
     1036, 1028, 1028, 1024, 1041, 1038, 1029, 1043, 1036, 1039,
     1039, 1042, 1042, 1044,    0, 1029, 1029,    0, 1035, 1037,
     1044, 1049, 1049, 1035, 1037, 1038, 1036, 1043, 1042, 1052,
     1041, 1038, 1029, 1043, 1050, 1039, 1039, 1042, 1042, 1044,
     1050, 1053, 1054, 1051, 1055, 1057, 1044, 1049, 1049, 1051,
     1058, 1059, 1059, 1043, 1042, 1052, 1060, 1058, 1064, 1066,
     1050, 1068, 1066, 1067, 1067, 1057, 1050, 1053, 1054, 1051,

     1055, 1057, 1065, 1070, 1072, 1051, 1058, 1059, 1059, 1065,
     1071, 1071, 1060, 1058, 1064, 1066,    0, 1068, 1066, 1067,
     1067, 1057, 1073, 1080, 1078, 1079, 1079, 1081, 1065, 1070,
     1072, 1078, 1084, 1089, 1083, 1065, 1071, 1071, 1088, 1091,
     1088, 1096, 1073,    0,    0,    0,    0,    0, 1073, 1080,
     1078, 1079, 1079, 1081, 1083,    0,    0, 1078, 1084, 1089,
     1083,    0,    0,    0, 1088, 1091, 1088, 1096, 1073,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1083, 1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108, 1109,
     1109, 1109, 1109, 1110,    0, 1110, 1110, 1111, 1111, 1111,

     1111, 1112,    0, 1112, 1112, 1113, 1113, 1115, 1115, 1116,
     1116, 1117, 1117, 1118, 1118, 1119, 1119, 1120, 1120, 1121,
     1121, 1122, 1122, 1123, 1123, 1124, 1124, 1125,    0, 1125,
     1125, 1126, 1126, 1127, 1127, 1128, 1128, 1129, 1129, 1130,
     1130, 1131, 1131, 1132, 1132, 1133, 1133, 1134, 1134, 1135,
     1135, 1136, 1136, 1137, 1137, 1138, 1138, 1139, 1139, 1140,
     1140, 1141, 1141, 1142, 1142, 1143, 1143, 1144, 1144, 1145,
     1145, 1146, 1146, 1147, 1147, 1148, 1148, 1149, 1149, 1150,
     1150, 1151, 1151, 1153, 1153, 1154, 1154, 1155, 1155, 1157,
     1157, 1158, 1158, 1159, 1159, 1162, 1162, 1163, 1163, 1164,

     1164, 1166,    0, 1166, 1166, 1167,    0, 1167, 1167, 1168,
     1168, 1169, 1169, 1172,    0, 1172, 1172, 1173,    0, 1173,
     1173, 1174, 1174, 1175, 1175, 1176, 1176, 1177, 1177, 1178,
     1178, 1180, 1180, 1181, 1181, 1182, 1182, 1183, 1183, 1184,
     1184, 1186, 1186, 1187, 1187, 1188, 1188, 1190, 1190, 1192,
     1192, 1193, 1193, 1194, 1194, 1196, 1196, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,

     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[139] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2244 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2349 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1107 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6258 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LINK_LOCAL_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::SUBNET_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::AUTH_PROTOCOL_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::AUTH_ALGORITHM_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::AUTH_REPLAY_;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::AUTH_REALM_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::AUTH_METHODS_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::AUTH_DROP_UNAUTH_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::KEY_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::SECRET_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::ALGORITHM_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::RECONFIGURE_ENABLED_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::FUDGE_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "SrvLexer.l"
{ return SrvParser::PERFORMANCE_MODE_; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 181 "SrvLexer.l"
;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 183 "SrvLexer.l"
;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 185 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 190 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 191 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 192 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 124:
YY_RULE_SETUP
#line 199 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 208 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 217 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 226 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 235 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 244 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 253 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 265 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 272 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 293 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 325 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 352 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%20x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << "] parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 362 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%20u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << "] parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 371 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 374 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3292 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1107 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1107 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1106);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 374 "SrvLexer.l"



