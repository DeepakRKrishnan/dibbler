#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 129
#define YY_END_OF_BUFFER 130
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1040] =
    {   0,
        1,    1,    0,    0,    0,    0,  130,  128,    2,    1,
        1,  128,  110,  128,  128,  127,  127,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  114,  114,  129,    1,    1,    1,    0,  122,
      110,    0,  122,  112,  111,  127,    0,    0,  126,    0,
      119,   93,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  107,  123,  123,   95,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
       17,   18,  123,  123,  123,  123,  123,  123,  123,  123,
      113,  111,  127,    0,    0,    0,  118,  124,  117,  117,
      123,  123,  123,  123,  123,  123,   94,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,   88,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  106,
      127,    0,    0,    0,    0,  116,  116,    0,  117,    0,

      117,  123,  123,  123,   64,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  101,  123,  123,  123,   31,  123,
      123,   44,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,    0,  123,  123,  123,  123,  123,  123,
       24,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  108,  123,  123,  123,
      123,  127,    0,  125,    0,    0,    0,  116,    0,  116,
        0,  117,  117,  117,  117,  123,  123,  123,  123,  123,
      100,  123,  123,  123,    4,  123,  123,  123,  123,  123,
      123,  123,  109,  123,  123,  123,    3,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,    0,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,    7,
      123,   43,  123,  123,   25,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,    0,    0,    0,    0,
        0,  116,  116,  116,  116,    0,  117,  117,  117,    0,
      117,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,   30,  123,  123,  123,  123,  123,   37,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,    0,    0,  123,  123,  123,
       35,  123,  123,  123,  123,  123,  123,  123,   60,   89,

      123,  123,  123,  104,  123,  123,  123,  123,  123,  123,
      123,    0,    0,    0,    0,  116,  116,  116,    0,  116,
        0,    0,  117,  117,  117,  117,  123,  123,   33,  123,
      123,  123,  123,  123,  123,  123,    0,  123,  123,  103,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,    0,    0,  123,  123,  123,  123,  123,   58,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
       22,  123,  123,  123,  125,    0,    0,    0,    0,    0,
      116,  116,  116,  116,    0,  117,  117,  117,    0,  117,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,    0,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,   77,  123,  123,  123,   45,
      123,   54,  123,  123,   12,   10,   92,  123,   42,    0,
        0,  123,  123,  123,   56,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,    5,  123,  123,  123,
       14,    0,    0,    0,    0,  116,  116,  116,    0,  116,
      121,  117,  117,  117,  117,  123,  123,  123,  123,  123,
       90,  123,  123,  123,  123,  123,  123,    0,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

       79,  123,  123,  123,  123,  123,  123,  123,   11,   63,
        0,    0,  123,  123,  123,   57,  123,  123,  123,  123,
      123,   32,  123,  123,    6,  102,   39,  123,  123,    0,
        0,    0,    0,  120,  116,  116,  116,  116,  117,  117,
      117,    0,  117,  123,  123,  123,  123,  123,  123,  123,
      123,  123,   55,  123,    0,  123,  123,  123,  123,  123,
      123,  123,  123,   36,  123,  123,   34,  123,  123,  123,
      123,  123,  123,  123,   13,    0,    0,   51,   50,   38,
      123,   23,  123,  123,  123,   41,   40,  123,  123,  125,
        0,    0,  116,  116,  116,    0,  116,  117,  117,  117,

      117,  123,   15,  123,   62,  123,  123,  123,   71,  123,
      123,    0,  123,  123,  123,  123,  123,  123,   74,  123,
      123,  123,   81,   83,   85,   87,  123,  123,  123,   53,
       52,  123,  123,  123,  123,  123,   59,    0,    0,    0,
        0,  116,  116,  116,  116,  117,  117,  117,    0,  117,
      123,  123,  105,   73,  123,  123,  123,    0,   91,  123,
      123,  123,   49,  123,   75,   61,  123,  123,  123,    8,
      123,  123,   26,  123,  123,    0,    0,    0,  116,  116,
      116,    0,  116,  117,  117,  117,  117,  123,  123,   72,
      123,  123,    0,  123,  123,   48,  123,  123,  123,  123,

       65,  123,  123,  123,  123,  123,  125,    0,    0,    0,
      116,  116,  116,  116,  117,  117,  117,    0,  117,  123,
      123,  123,  123,    0,  123,  123,  123,  123,  123,  123,
      123,  123,  123,   16,   21,    0,    0,  115,  118,  116,
      116,  116,    0,  116,  117,  117,  117,  117,  123,  123,
      123,   28,    0,    0,  123,  123,  123,   76,  123,  123,
       27,  123,  123,  123,    0,    0,  115,    0,  116,  116,
      116,  116,  116,  117,  117,  117,    0,  117,  123,  123,
      123,    0,    0,   29,  123,  123,   78,  123,  123,  123,
      123,  123,  123,  123,  125,  115,  118,  116,    0,  116,

      116,  116,  116,  117,  117,  117,   66,  123,  123,  123,
      123,    0,    0,  123,  123,  123,  123,  123,  123,   47,
      123,   20,  123,    0,  115,  116,  116,  116,  116,  117,
      117,  117,  123,  123,  123,  123,  123,    0,    0,  123,
      123,   80,   82,   84,   86,    9,   19,    0,  116,  116,
        0,  116,  116,  117,   46,  123,  123,  123,  123,    0,
        0,  123,  123,  125,  116,  116,  117,  123,  123,  123,
      123,    0,    0,    0,  123,  123,  123,    0,  116,  116,
        0,  123,  123,  123,  123,    0,    0,    0,   96,  123,
      123,  123,   96,  115,  116,  116,   67,  123,  123,  123,

        0,   98,    0,  123,   98,  123,  115,  116,  116,    0,
      123,  123,   70,    0,   97,  123,   97,    0,  116,  116,
      123,   68,   99,   99,    0,  116,  116,    0,   69,  125,
      116,  116,    0,  116,  116,    0,  116,  116,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1130] =
    {   0,
        0,    0, 1184, 1182,    0,    0, 1189, 5982, 5982,   73,
       75, 1183,    0, 1151,   72,   72,   34, 1132, 1130,  136,
      186,  233,  280,   71,  208,  338,   66,  236,   38,   89,
      223,  240,  340,   72,  275,  373,  418,  398,   68,  251,
      180,  333, 5982, 1139, 5982,  111,  137,  213, 1145, 5982,
        0, 1142, 1139, 5982,    0,  476, 1122,  464, 5982,    0,
      521, 5982,   60,  564,  188,  192,  182,  182,  279,  387,
      184,  276,  211,  397,  337,  229,  263,  389,  384,  481,
      474,  555,  287,  543,  578,  579,  580,  583,  390,  599,
      601,  336,  612,  567,  326,  597,  596,  381,  632,  617,

      619,  607,  655,  388,  634,  642,  656,  640,  674,  678,
      429,  442,  664,  675,  639,  663,  688,  676,  686,  694,
     5982,    0,  752, 1121,  539, 1120,  797,    0,  842,  771,
      885,  700,  690,  874,  878,  879,  691,  877,  885,  744,
      882,  902,  750,  883,  884,  929,  821,  784,  932,  933,
      918,  926,  922,  949,  953,  954,  937,  940,  802,  972,
      921,  978,  981,  965, 1003, 1005,  985,  992,  997, 1010,
     1001, 1012, 1026, 1008, 1017, 1037, 1033, 1044, 1053, 1040,
     1047, 1048, 1068, 1071, 1078, 1075, 1089, 1086, 1064,  994,
     1147,  548, 1118, 1115, 1113, 1194,  822,  860, 1239, 1282,

     1166, 1325, 1063, 1260, 1082, 1162, 1085, 1126, 1181, 1277,
     1313, 1199, 1324, 1312, 1242, 1316, 1317, 1356, 1243, 1322,
     1362, 1352, 1323, 1354, 1367, 1358, 1360, 1364, 1366, 1403,
     1376, 1410, 1405, 1094, 1415, 1375, 1406, 1416, 1425, 1414,
     1329, 1428, 1444, 1437, 1443, 1449, 1446, 1455, 1468, 1477,
     1482, 1483, 1466, 1489, 1495, 1496, 1458, 1499, 1507, 1504,
     1531, 1258, 1071, 1067, 1046, 1006,  869, 1591, 1634, 1565,
     1576, 1679, 1610, 1724, 1653,  999, 1501, 1715, 1713, 1724,
     1502, 1726, 1621, 1544, 1666, 1720, 1740, 1756, 1722, 1765,
     1760, 1769, 1529, 1776, 1703, 1770, 1761, 1784, 1790, 1789,

     1792, 1773, 1813, 1807, 1825, 1837, 1658, 1821, 1826, 1820,
     1828, 1842, 1829, 1856, 1860, 1849, 1844, 1845, 1858, 1859,
     1877, 1864, 1866, 1873, 1874, 1894, 1896, 1902, 1895, 1904,
     1909, 1905, 1913, 1912, 1926, 1925,  998,  992,  960,  956,
     1701, 1986, 2005, 2031, 2050, 1619, 2076,  952, 2088, 2131,
     2107, 1984, 2129, 1918, 2092, 2126, 2030, 2143, 2144, 2121,
     1973, 2214, 2130, 2125, 2132, 2067, 2134, 1917, 2173, 2181,
     2194, 2200, 2197, 2195, 2162, 2202, 2205, 2204, 2133, 2214,
     2225, 2206, 2229, 2239, 2242, 2224, 2235, 2246, 2250, 2252,
     2235, 2256, 2267, 2257, 2287, 2281, 2292, 2294, 2269, 2270,

     2285, 2291, 2302, 2290, 2321, 2300, 2305, 2323, 2315, 2338,
     2339,  949,  945,  911, 2385, 2399,  898, 2411, 2454, 2430,
     2473, 2499, 2510, 2529, 2555, 2574, 2576, 2555, 2432, 2569,
     2553, 2573, 2560, 2574, 2587, 2588, 2307, 2615, 2591, 2319,
     2604, 2441, 2632, 2608, 2621, 2610, 2626, 2637, 2648, 2659,
     2656, 2660, 2661, 2671, 2668, 2673, 2680, 2691, 2692, 2679,
     2672, 2345, 2393, 2704, 2695, 2707, 2711, 2713, 2452, 2731,
     2716, 2725, 2741, 2732, 2747, 2728, 2761, 2743, 2765, 2771,
     2489, 2756, 2768, 2775,  823,  822,  810,  808, 2833, 2844,
     2855, 2874, 2900, 2919, 2883, 2945,  807, 2957, 3000, 2976,

     2978, 2986, 2994, 2899, 2998, 2760, 2990, 3017, 3031, 2995,
     2997, 2996, 2513, 3035, 3034, 3045, 3033, 3046, 3047, 3042,
     3050, 3053, 3077, 3066, 3086, 2508, 3110, 3075, 3083, 2612,
     3105, 2689, 3088, 3100, 2748, 2842, 2887, 3099, 3048, 3107,
     3092, 3106, 3118, 3124, 3107, 3129, 3156, 3139, 3152, 3145,
     3149, 3158, 3160, 3143, 3159, 3168, 3138, 3162, 3191, 3192,
     3151,  805,  778,  777, 3234, 3252,  776, 3264, 3307, 3283,
     3292, 3352, 3326, 3397, 3371, 3190, 3294, 3386, 3339, 3395,
     3173, 3393, 3388, 3391, 3415, 3416, 3423, 3196, 3418, 3427,
     3429, 3434, 3437, 3440, 3439, 3467, 3436, 3451, 3435, 3468,

     3286, 3498, 3487, 3475, 3504, 3479, 3508, 3483, 3480, 3484,
     3497, 3502, 3495, 3492, 3499, 3490, 3500, 3519, 3536, 3528,
     3535, 3527, 3538, 3540, 3532, 3533, 3539, 3560, 3567,  775,
      774,  773,  741, 3625, 3636, 3655, 3681, 3700, 3726,  738,
     3738, 3781, 3757, 3550, 3543, 3767, 3770, 3771, 3775, 3680,
     3798, 3556, 3542, 3782, 3572, 3776, 3623, 3820, 3822, 3615,
     3823, 3825, 3818, 3634, 3833, 3834, 3717, 3810, 3837, 3838,
     3845, 3826, 3821, 3854, 3827, 3857, 3858, 3856, 3857, 3858,
     3873, 3862, 3874, 3878, 3885, 3867, 3870, 3890, 3897,  737,
      733,  730, 3955,  729, 3967, 4010, 3986, 4055, 4029, 4100,

     4074, 4095, 3872, 4092, 3875, 3989, 4094, 3894, 3877, 3909,
     4104, 3952, 4091, 4099, 4102, 4103, 4101, 4042, 3971, 4131,
     4141, 4136, 4034, 4133, 4134, 4135, 4153, 4155, 4156, 5982,
     5982, 4166, 4154, 4144, 4178, 4184, 4147,  728,  725,  721,
      720, 4244, 4263, 4289, 4308, 4334,  718, 4346, 4389, 4365,
     4379, 4174, 4149, 4183, 4367, 4384, 4288, 4189, 4205, 4392,
     4381, 4389, 4223, 4390, 4276, 4383, 4403, 4411, 4435, 4421,
     4436, 4428, 4422, 4424, 4433,  675,  674,  671, 4496,  670,
     4508, 4551, 4527, 4596, 4570, 4641, 4615, 4426, 4434, 4430,
     4630, 4631,  654, 4549, 4628, 4431, 4637, 4645, 4636, 4640,

     4432, 4641, 4643, 4660, 4674, 4681,  638,  636,  588,  583,
     4741, 4760, 4786, 4805, 4831,  580, 4843, 4886, 4862, 4694,
     4673, 4675, 4864, 4883, 4875, 4900, 4538, 4785, 4902, 4903,
     4680, 4916, 4880, 4438, 4487,  579,  578,  576,    0, 4974,
      575, 4986, 5029, 5005, 5074, 5048, 5119, 5093, 4888, 5087,
     4773, 4530, 4592, 4681, 5121, 5016, 4889, 4683, 4965, 5108,
     4728, 5124, 5117, 5122,  502,  501,  500,  499,  498, 5184,
     5203, 5229, 5248, 5274,  497, 5286,    0, 5305, 5111, 5116,
     5306, 4866, 4899, 5008, 5228, 5289, 5027, 5313, 5163, 5216,
     5120, 5301, 5304, 5291,  494,  493, 5982,  492,    0, 5371,

      491, 5383, 5402, 5428, 5447,    0, 5119, 5307, 5425, 5446,
     5459, 5125, 5189, 5302, 5445, 5335, 5207, 5442, 5457, 5303,
     5432, 5310, 5456,  489,  488,  487,  486, 5519, 5538, 5564,
      452,    0, 5450, 5498, 5517, 5449, 5370, 5327,    0, 5521,
     5591, 5448, 5461, 5497, 5518, 5532, 5550,  449,  447,  444,
        0, 5608, 5982,    0, 5560, 5587, 5591, 5595, 5588,    0,
     5580, 5644, 5610,  441,  431,  414, 5982, 5616, 5592, 5629,
     5631, 5643, 5593, 5622, 5649, 5648, 5645,  413,  402,  398,
        0, 5635, 5646, 5662, 5639, 5663, 5651, 5648, 5982, 5683,
     5684, 5668, 5676,  396,  394,  393, 5678, 5686, 5690, 5681,

     5686, 5982, 5711, 5696, 5692, 5719,  364,  363,  353,    0,
     5708, 5698, 5700, 5734, 5982, 5735, 5720,  349,  325,  314,
     5730, 5729, 5982, 5731,    0,  310,  309,    0, 5732,  307,
      305,  303,  276,  267,  260,    0,  256,  254, 5982, 5805,
     5809, 5813, 5817, 5821, 5825, 5827,  239, 5829, 5831, 5833,
     5835, 5837, 5839, 5841, 5843, 5845, 5847, 5851, 5853, 5855,
     5857, 5859, 5861, 5863, 5865, 5867, 5869, 5871, 5873, 5875,
     5877, 5879, 5881, 5883, 5885, 5887, 5889, 5891, 5893, 5895,
     5897, 5899, 5901, 5903,  233, 5905, 5907, 5909,  232, 5911,
     5913, 5915,  231,  230, 5917, 5919, 5921,  228, 5925, 5929,

     5931, 5933,  226,  219, 5937, 5941, 5943, 5945, 5947, 5949,
     5951,  217, 5953, 5955, 5957, 5959, 5961,  145, 5963, 5965,
     5967,  131, 5969,  117, 5971, 5973, 5975,   80, 5977
    } ;

static yyconst flex_int16_t yy_def[1130] =
    {   0,
     1039,    1, 1040, 1040, 1041, 1041, 1039, 1039, 1039, 1039,
     1039, 1042, 1043, 1044, 1039, 1039,   16, 1039, 1039, 1039,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1039, 1039, 1039, 1039, 1039, 1039, 1042, 1039,
     1043, 1044, 1039, 1039, 1045, 1039, 1046,   56, 1039, 1047,
     1039, 1039,   26,   26,   64,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1039, 1045, 1039, 1048,  123, 1049, 1039, 1047, 1039,  129,
       64,  131,  131,   26,   26,   26,   26,   26,   26,  131,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1039,  191, 1050, 1051, 1052, 1039,  196, 1039, 1039, 1039,

      199,  131,  202,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1039,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  192,  192, 1051, 1053, 1054, 1039, 1039, 1039,  268,
     1039, 1039,  272, 1039,  274,  202,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26, 1039,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1055, 1039, 1056, 1057,
     1039, 1039,  342, 1039,  344, 1039, 1039, 1039, 1039, 1039,
      349,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1058,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1039, 1039,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1059, 1060, 1061, 1039, 1039, 1039, 1039, 1039,  418,
     1039, 1039, 1039,  423, 1039,  425,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1039,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1039, 1039,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1056, 1039, 1062, 1063, 1039, 1039,
     1039,  491, 1039,  493, 1039, 1039, 1039, 1039, 1039,  498,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1039,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1039,
     1039,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1064, 1065, 1066, 1039, 1039, 1039, 1039, 1039,  568,
     1039, 1039,  572, 1039,  574,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1039,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1039, 1039,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1067,
     1039, 1068, 1069, 1039, 1039,  635, 1039,  637, 1039, 1039,
     1039, 1039,  641,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1039,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1039, 1039,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1070,
     1071, 1072, 1039, 1039, 1039, 1039,  695, 1039,  698, 1039,

      700,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1039,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1039,
     1039,   26,   26,   26,   26,   26,   26, 1073, 1039, 1074,
     1075, 1039,  742, 1039,  744, 1039, 1039, 1039, 1039,  748,
       26,   26,   26,   26,   26,   26,   26, 1039,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1076, 1077, 1078, 1039, 1039,
     1039, 1039,  781, 1039,  784, 1039,  786,   26,   26,   26,
       26,   26, 1039,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26, 1079, 1039, 1080, 1081,
     1039,  811, 1039,  813, 1039, 1039, 1039, 1039,  817,   26,
       26,   26,   26, 1039,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1082, 1083, 1084, 1085, 1039,
     1039, 1039, 1039,  842, 1039,  845, 1039,  847,   26,   26,
       26,   26, 1039, 1039,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1086, 1039, 1087, 1039, 1088, 1039,
      870, 1039,  872, 1039, 1039, 1039, 1089,  876,   26,   26,
       26, 1039, 1039,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1090, 1091, 1039, 1092, 1093, 1039,

     1039, 1039,  902, 1039,  904, 1094,   26,   26,   26,   26,
       26, 1039, 1039,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1095, 1039, 1096, 1097, 1039,  928, 1039,
     1039, 1098,   26,   26,   26,   26,   26, 1039, 1099,   26,
     1100,   26,   26,   26,   26,   26,   26, 1101, 1039, 1102,
     1103, 1039, 1039, 1104,   26,   26,   26,   26,   26, 1105,
     1039, 1106,   26, 1107, 1108, 1109, 1039,   26,   26,   26,
       26, 1039, 1039, 1039,   26,   26,   26, 1110, 1039, 1111,
     1112,   26,   26,   26,   26, 1039, 1039, 1039, 1039,   26,
       26,   26,   26, 1113, 1114, 1115,   26,   26,   26,   26,

     1039, 1039, 1039,   26,   26,   26, 1116, 1039, 1117, 1118,
       26,   26,   26, 1039, 1039,   26,   26, 1119, 1120, 1121,
       26,   26, 1039,   26, 1122, 1039, 1123, 1124,   26, 1039,
     1125, 1126, 1119, 1039, 1127, 1128, 1129, 1039,    0, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,

     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039
    } ;

static yyconst flex_int16_t yy_nxt[6058] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   29,
       36,   37,   38,   39,   40,   41,   29,   42,   29,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   29,   36,   37,   38,   39,
       40,   41,   29,   42,   29,   46,   47,   48,   47,   54,
     1039,   63,  873,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   64,   58,   58,   58,   58,   58,

       58,   86,   59,   63,  116,   63, 1039,   63,   63,   63,
       97,   63,   98,   46,   47,   63,   89,   82,   60, 1032,
       64,   58,   58,   58,   58,   58,   58,   86,   59,   63,
      116,   63,   63, 1030,   63,   63,   97,   63,   98,   48,
       47,   63,   89,   82,   60,   63,   63, 1020,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   57,   63,   64,
       64,   65,   66,   64,   67,   63,   68,   63,   63,   63,
       69,   63,   70,   63,   63,   63,   63,   63,   63,   71,
       63,   63,   63,   63,   63,   64,   64,   65,   66,   64,
       67,   63,   68,   63,   63,   63,   69,   63,   70,   63,

       63,   63,   63,   63,   63,   71,   63,   63,   63,   63,
       63,   64,   64,  132,   64,   46,   47,  119,  133,  996,
       63,  967,   63,   63,  134,   63,  138,   63,  966,   72,
      954,   83,  932,  927,  906,  869,  140,   64,   64,  132,
       64,  128,   63,  119,  133,   63,   63,   84,   63,   63,
      134,   63,  138,   63,   90,   72,   73,   83,   64,   64,
       91,   64,  140,   92,   87,  144,   63,   74,   63,   63,
       75,   63,   88,   84,  117, 1036,   63, 1036,  118,   63,
       90, 1036,   73,   63,   64,   64,   91,   64, 1028,   92,
       87,  144,   63,   74,   63,   63,   75, 1039,   88,  145,

      117,   99,   63,   64,  118,   63,   76,   77,  135,   63,
      139,   78,  100,  136,   63,  101,   79,   80,   63,   63,
       63,  151,   63,   81, 1036,  145, 1028,   99, 1033,   64,
     1028, 1010,   76,   77,  135, 1028,  139,   78,  100,  136,
       63,  101,   79,   80,   63,   63, 1010,  151,   63,   81,
       63,   63,   63,   63,   63,   63,   63,   63,   63, 1039,
      120,   63,   63,   63,   63,   63,   63,   93,   63,   63,
      897,   94,   63,  143, 1010,   63,   63,   95,  162,   63,
       63,   85,   96,   63,  981, 1018,  120,   63,   63,   63,
       63,   63,   63,   93,   63,   63,  102,   94,   63,  143,

      103,   63,   63,   95,  162,   63,   63,   85,   96,   63,
      104,  111,  112,  137, 1010,  981,   63,  868,  146,  981,
      141,  113,  102,  951,   63,  147,  103,   63,  142,  114,
       63,  175,   63,   63,  839,  981,  104,  159,  115,  137,
       63,   63,   63,  105,  146,  106,  141,  113,  107,  108,
       63,  147,  951,   63,  142,  114,   63,  175,   63,   63,
      109,  110,  978,  159,  115,  951,   63,   63,  899,  105,
      810,  106,   63,  877,  107,  108,  125,  125,  125,  125,
      125,  125,  125,  125,  125,   63,  109,  110,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  124,   63,  125,

      125,  125,  125,  125,  125,  149,   59,  951,  899,  868,
      127,   63,  843,  899,  868,  924,  148,   63,  818,  899,
      897,  868,  810,  741,   63,  125,  125,  125,  125,  125,
      125,  149,   59,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  148,   63,  130,  130,  130,  130,  130,  130,
       63,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  152,
      130,  130,  130,  130,  130,  130,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  124,   63,  131,  131,  131,
      131,  131,  131,  150,   68,  152,  782,  868,   63,  810,

      127,  749,  154,  155,  839,  153,  156,   63,  165,  810,
       63,  157,   63,  131,  131,  131,  131,  131,  131,  150,
       68,   63,   63,   63,   63,  158,   63,  160,  154,  155,
      161,  153,  156,   63,  165,  166,   63,  157,  167,   63,
       63,  168,   63,  163,   63,  171,  170,   63,   63,   63,
       63,  158,   63,  160,  169,   63,  161,  741,  164,  836,
       63,  166,   63,  824,  167,   63,   63,  177,   63,  163,
       63,  171,  170,  183,  176,   63,   63,   63,  179,  178,
      169,   63,  185,   63,  164,   63,   63,  172,   63,  173,
      174,  696,  810,  177,  186,  741,  633,  180,   63,   63,

      176,   63,  182,   63,  179,  178,   63,   63,  185,   63,
      184,   63,  188,  172,  181,  173,  174,   63,   63,   63,
      186,   63,  187,  180,   63,   63,  189,  203,  182,   63,
      204,   63,   63,   63,   63,  190,  184,   63,  188,  642,
      181,  127,  741,   63,   63,   63,  633,   63,  187,  127,
      569,  741,  189,  203,  633,   63,  204,   63,  738,  499,
       63,  190,  127,   63,  191,  191,  191,  191,  191,  191,
      191,  191,  191,   57,  210,  192,  192,  192,  192,  192,
      192, 1039,   59,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  213,   63,  633,  488,  488,  419,  633,  488,

      210,  192,  192,  192,  192,  192,  192,  218,   59,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  213,   63,
      197,  197,  197,  197,  197,  197,  127,   63,  350,  127,
      217,  488, 1039,  218,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  340,  562,   63,  197,  197,  197,  197,
      197,  197,  198,   63,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  200,   63,  201,  201,  201,  201,  201,
      201,   63,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  341,  341,  341,  341,  341,  341,  341,  341,  341,
       63,  201,  201,  201,  201,  201,  201,  202,  202,  202,

      202,  202,  202,  202,  202,  202,   57,  208,  202,  202,
      202,  202,  202,  202,  205,  206,  207,   63,  209,  269,
       63,   63,   63,  211,  214,   63,   63,   63,   63,  212,
      230,  215,  488,  208,  202,  202,  202,  202,  202,  202,
      205,  206,  207,   63,  209,   63,   63,   63,   63,  211,
      214,   63,   63,   63,   63,  212,  216,  215,  219,  221,
      220,   63,  222,  223,   63,   63,  340,  228,  227,   63,
      340,   63,   63,  200,  224,   63,   63,  127,  225,  226,
       63,  340,  216,   63,  219,  221,  220,   63,  222,  223,
       63,   63,   63,  228,  227,   63,   63,   63,   63,  229,

      224,   63,   63,  231,  225,  226,   63,  233,   63,   63,
      232,  234,  235,  195,  236,   63,  237,  238,   63,  127,
     1039,   63,   63,   63,   63,  229,  239,  340,   63,  231,
      240,  241,  243,  233,   63,   63,  232,   63,  242,  244,
       63,   63,  237,  238,   63,  246,   63,   63,   63,  245,
       63,   63,  239,   63,   63,   63,  240,  241,  243,  247,
       63,   63,  251,   63,  242,  244,   63,  195,  248,   63,
       63,  246,   63,  249,   63,  245,   63,   63,  253,   63,
       63,   63,  252,   63,  250,  247,   63,   63,  337,  254,
       63,   63, 1039,  255,  248,   63,   63,  261,  256,  249,

      258,  277,   63,  309,  253,  257,   63,   63,  252,   63,
      250,   63,  260,   63,   63,  254,   63,   63,   63,  255,
      259,   63,   63,  261,  256,   63,  258,  277,   63,   63,
      281,  257,   63,   63,  127,  282,  195,   63,  260,  195,
       63,  195,  127,  127,   63,   52,  259,   63,   53,   50,
      121,   63,   62,   61,   63,   63,  281,   53,   63,  262,
      262,  262,  262,  262,  262,  262,  262,  262,   57,   63,
      263,  263,  263,  263,  263,  263, 1039,   59,  273,  273,
      273,  273,  273,  273,  273,  273,  273,   50, 1039,   44,
      283,   44, 1039, 1039, 1039,   63,  263,  263,  263,  263,

      263,  263,  280,   59,  267,   63,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  269, 1039,  270,  270,  270,
      270,  270,  270, 1039,   63, 1039, 1039, 1039,  280, 1039,
     1039,   63, 1039, 1039, 1039,  286, 1039, 1039, 1039, 1039,
     1039, 1039,   63,  270,  270,  270,  270,  270,  270,  198,
       63,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      200,  286,  273,  273,  273,  273,  273,  273,   63,  278,
      262,  262,  262,  262,  262,  262,  262,  262,  262, 1039,
     1039, 1039, 1039, 1039, 1039,   63,   63,  279,  273,  273,
      273,  273,  273,  273,  274,  274,  274,  274,  274,  274,

      274,  274,  274,   63,  284,  275,  275,  275,  275,  275,
      275,   63,   63,  279, 1039, 1039, 1039, 1039, 1039, 1039,
       63,  288, 1039, 1039, 1039, 1039, 1039, 1039, 1039,   63,
      284,  275,  275,  275,  275,  275,  275,  276,  276,  276,
      276,  276,  276,  276,  276,  276,   63,  287,  276,  276,
      276,  276,  276,  276,  285,   63,   63,  289,  290,   63,
       63,  294,  292,  296,  295,   63,   63,   63, 1039, 1039,
     1039, 1039,   63,  287,  276,  276,  276,  276,  276,  276,
      285,   63,   63,  289,  290,   63,   63,  291,  292,  293,
      295,   63,   63,   63,  297,   63,  299,   63,   63,   63,

      298,   63, 1039,   63,  300,   63,  306,   63,  301,   63,
       63, 1039, 1039,  291,  308,  293,  312, 1039,   63,   63,
      297,   63,  299,   63, 1039,   63,  298,   63,  302,   63,
      300,   63,  306,   63,  301,   63,   63,  303,  304,  305,
      307,  310,  312,  313,   63,   63,   63, 1039,   63,   63,
      314,  316,  315,   63,  302,  317,  311,   63,   63,   63,
     1039, 1039,  319,  303,  304,  305,  307,  310,   63,  313,
      318,   63,   63,  322,   63,   63,  314,  316,  315,   63,
       63,  317,  311,   63,   63,   63,   63,   63,  319,   63,
      320,  321,   63,  323,   63,  324,  318,   63,   63,  322,

     1039,   63,  329, 1039,  325,  332,   63, 1039,  326,   63,
      328,   63,   63,   63, 1039,   63,  320,  321,   63,  323,
       63,  324,  333,  327,   63,   63,   63,   63,  329,  331,
      325,  330,   63,  334,  326,   63,  328,   63,   63,   63,
      336,  335,   63,  352,   63,   63,   63,   63,  333,  327,
       63,   63,   63,  360, 1039,  331, 1039,  330,   63,  334,
     1039, 1039, 1039, 1039,   63,   63, 1039,  335,   63,  352,
       63,   63,   63,   63,   63, 1039,   63,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  346,   63,  271,  271,
      271,  271,  271,  271,  271,  271,  271, 1039,   63, 1039,

       63,  267, 1039,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  269,   63,  343,  343,  343,  343,  343,  343,
     1039, 1039,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  421,  421,  421,  421,  421,  421,  421,  421,  421,
      343,  343,  343,  343,  343,  343,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  359, 1039,  345,  345,  345,
      345,  345,  345, 1039,   63,  351,  351,  351,  351,  351,
      351,  351,  351,  351, 1039,  361, 1039, 1039, 1039, 1039,
     1039,  359,  384,  345,  345,  345,  345,  345,  345,  198,
       63,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      200,   63,  348,  348,  348,  348,  348,  348,  384,   63,
     1039,  415,  371,  341,  341,  341,  341,  341,  341,  341,
      341,  341, 1039, 1039, 1039, 1039, 1039,   63,  348,  348,
      348,  348,  348,  348,  198,   63,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  350,   63,  351,  351,  351,
      351,  351,  351,  353,  354,  355,   63, 1039,   63,  356,
      357,  358,  362,   63,  366,   63, 1039,   63, 1039,   63,
      374,  363,   63,  351,  351,  351,  351,  351,  351,  353,
      354,  355,   63,   63,   63,  356,  357,  358,  362,   63,
      366,   63,  367,   63,  364,   63,  368,  363,  365,   63,

      369, 1039,  370,   63,   63,  372, 1039, 1039,   63,   63,
      379,  373,   63,   63, 1039,  375,   63,  377,  367,   63,
      364,  376,  368,  378,  365,   63,  369,   63,  370,   63,
       63,  372,   63,   63,   63,   63,  379,  373,   63,   63,
      380,  375,   63,  377,  381,   63,  383,  376,  382,  378,
       63,  385,  386,   63,  396,  389,   63,  388,   63,   63,
     1039,   63, 1039,   63,   63,  391,  380,  387,   63,  390,
      381,   63,   63, 1039,  382, 1039,   63,  385,  386,  392,
       63,  389,   63,  388,  395,   63,  394,   63,   63,   63,
       63,  391,   63,  387,   63,  390,  393,   63,   63,   63,

      397,   63,   63,   63,  398,  392,   63,   63,  399,   63,
      395,   63,  394,   63,   63,  400,   63,   63,   63, 1039,
       63,  409,  393,  402,  404,   63,  397,   63,   63,   63,
      398,  401,  406,   63,  399,   63,  403,   63,   63,   63,
     1039,  400,   63,   63,  405,   63,   63,   63,   63,  402,
      404,  411,   63,  407,  408,   63,   63,  401,  406,  429,
       63,   63,  403,   63,   63,   63,  410, 1039,   63,   63,
      405,   63, 1039,   63,   63, 1039, 1039,  411,   63,  407,
      408,   63,   63, 1039, 1039,  429,   63,   63, 1039, 1039,
     1039, 1039,  410,  427,   63,   63,  267, 1039,  416,  416,

      416,  416,  416,  416,  416,  416,  416,  269,  436,  417,
      417,  417,  417,  417,  417, 1039,   63,  417,  417,  417,
      417,  417,  417,  417,  417,  417, 1039,   63, 1039, 1039,
     1039, 1039, 1039, 1039,  436,  417,  417,  417,  417,  417,
      417,  267,   63,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  419,   63,  420,  420,  420,  420,  420,  420,
     1039,  432,  420,  420,  420,  420,  420,  420,  420,  420,
      420, 1039, 1039,   63, 1039, 1039,  443, 1039, 1039, 1039,
      420,  420,  420,  420,  420,  420,  198,  432,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  200,  198,   63,

      423,  423,  423,  423,  423,  423,  423,  423,  423,  350,
       63,  424,  424,  424,  424,  424,  424, 1039, 1039,  424,
      424,  424,  424,  424,  424,  424,  424,  424, 1039, 1039,
     1039, 1039, 1039, 1039,  430,   63,   63,  424,  424,  424,
      424,  424,  424,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  428,  431,  426,  426,  426,  426,  426,  426,
      430,   63,  435,  442,   63,  441,  440,  455,   63,   63,
      433,  434,   63,   63,  444,   63,   63,   63,  428,  431,
      426,  426,  426,  426,  426,  426,   63,   63,  435,  442,
       63,  441,  440,  455,   63,   63,  433,  434,   63,   63,

      444,   63,   63,   63, 1039,   63,  451,  446,  445, 1039,
     1039, 1039,   63,   63,  437,  437,   63,  437,  437,  437,
      437,  437,  437,  438,   63,  437,  448,  449,  453,  447,
      450,   63,  451,  446,  445,  437,  437,   63,   63,  454,
       63,  458,   63,   63,  452,   63, 1039,   63,   63,   63,
       63,  457,  448,  449,  453,  447,  450,   63,  456, 1039,
      459,  462,  463,   63,   63,  454,   63,  458,   63,   63,
      452,   63,   63,   63,   63,   63,  460,  457,   63,  461,
     1039,  464,   63,   63,  456,   63,  459,  462,  463,   63,
      465,  469,  466,   63,   63,   63,  468,  467,   63,   63,

       63,  473,  460,  474,   63,  461,  472,  464,   63, 1039,
       63,   63,   63,   63,  470,   63,  465,  469,  466,   63,
      475,   63,  468,  467,   63,   63,   63,  471,   63,  477,
       63,  476,  472,   63,   63,   63,   63,   63,   63,   63,
      470,  479,  480,   63, 1039,   63,  475,  483,   63,  482,
       63,  513,  478,  471,   63,  477,   63,  476,   63,   63,
       63,   63,   63,   63,   63,  481,   63,  479,  480,   63,
      484,   63, 1039, 1039,   63,  482, 1039,  513,  478, 1039,
      540,   63,   63, 1039,   63, 1039, 1039, 1039,   63, 1039,
       63,  481,   63, 1039, 1039, 1039,  484,  489,  489,  489,

      489,  489,  489,  489,  489,  489,  540,   63,   63,  267,
     1039,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      269,  267, 1039,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  419,  541,  492,  492,  492,  492,  492,  492,
     1039,  505,  492,  492,  492,  492,  492,  492,  492,  492,
      492, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,  541,
      492,  492,  492,  492,  492,  492,  493,  493,  493,  493,
      493,  493,  493,  493,  493,   63,  518,  494,  494,  494,
      494,  494,  494,  495,   63,  421,  421,  421,  421,  421,
      421,  421,  421,  421, 1039,   63, 1039, 1039, 1039, 1039,

     1039,   63,  518,  494,  494,  494,  494,  494,  494,  198,
       63,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      198,   63,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  350,   63,  497,  497,  497,  497,  497,  497, 1039,
      588,  497,  497,  497,  497,  497,  497,  497,  497,  497,
     1039,   63, 1039, 1039, 1039, 1039, 1039, 1039,   63,  497,
      497,  497,  497,  497,  497,  198,  588,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  499,   63,  500,  500,
      500,  500,  500,  500, 1039, 1039,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  504,   63,  510,   63,  506,

      507,  508,  509,   63,  500,  500,  500,  500,  500,  500,
      501,  512,   63,  502, 1039, 1039,   63,   63,  511,  503,
     1039,  504,   63,  510,   63,  506,  507,  508,  509,   63,
       63,   63, 1039, 1039,   63,  516,  501,  512,   63,  502,
      514,  517,   63,   63,  511,  503,  524,   63,  523, 1039,
      515,   63,  522,   63,  526,   63,   63,   63,   63,  516,
       63,  516,  519,  525,   63, 1039,  514,  517,  520,   63,
      521,  527,  524,   63,  523,   63,  515,   63,  522,   63,
       63,   63,  528,  529,   63,  516,  531,  530,  519,  525,
       63,   63, 1039, 1039,  520,   63,  521,  527,  532,   63,

      534,   63,   63,   63,   63,  533,   63,  535,  528,  529,
      539,   63,  531,  530,   63,   63,   63,   63,  536,  538,
      537, 1039,   63,   63,  532,   63,  534,  542,   63,   63,
       63,  533,   63,  535,   63,   63,  539,   63,   63,  543,
       63,   63,   63,  549,  536,  538,  537,   63,   63,   63,
       63,  544,  545,  542,   63,  546,   63,  547,   63,   63,
       63,   63,  550,  552,   63,  543,  551,  548,   63,  549,
      553,   63,  554,   63,   63,   63,   63,  544,  545,  556,
       63,  546,   63,  547,   63,   63,   63,  559,  550,  552,
       63,   63,  551,  548,   63,  581,  553,   63,  554,   63,

       63,   63,  555,   63,   63,  556,  557,  558,   63,  560,
       63,   63,   63,  559,   63,  561,   63,   63,   63, 1039,
     1039,  581, 1039, 1039, 1039,   63, 1039, 1039,  555,   63,
       63, 1039,  557,  558,   63,  560, 1039,   63, 1039, 1039,
       63,  561, 1039,  565,   63,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  267, 1039,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  267, 1039,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  419, 1039,  567,  567,
      567,  567,  567,  567, 1039,   63,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  571,  571,  571,  571,  571,

      571,  571,  571,  571,  567,  567,  567,  567,  567,  567,
      267,   63,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  569,  579,  570,  570,  570,  570,  570,  570, 1039,
       63,  570,  570,  570,  570,  570,  570,  570,  570,  570,
     1039, 1039,   63, 1039, 1039, 1039, 1039, 1039,  579,  570,
      570,  570,  570,  570,  570,  198,   63,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  350,  198,   63,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  499, 1039,
      573,  573,  573,  573,  573,  573, 1039, 1039,  573,  573,
      573,  573,  573,  573,  573,  573,  573, 1039, 1039,  582,

     1039, 1039, 1039, 1039, 1039,  576,  573,  573,  573,  573,
      573,  573,  574,  574,  574,  574,  574,  574,  574,  574,
      574,   63,  577,  575,  575,  575,  575,  575,  575,   63,
      578,  576,  580,   63, 1039, 1039,  585,   63,   63,   63,
       63,   63,  587, 1039,  583,  586, 1039,   63,  577,  575,
      575,  575,  575,  575,  575,   63,  578,  590,  580,   63,
       63,  584,  585,   63,   63,   63,   63,   63,  587,  589,
      583,  586,  591,  593,   63,  592,   63,   63,   63,  595,
      597, 1039,  594,  590,  596,   63,   63,  584,   63,   63,
       63,   63,  606,   63, 1039,  589,   63, 1039,  591,  593,

       63,  592,   63,   63,   63,  595,  597,  599,  594,   63,
      596,   63,  600,  598,   63,   63,   63,   63,   63,   63,
       63,  605,   63,  601,  602,  603,   63,  604,  608,   63,
      611,   63,  607,  599,  609,   63,  612,  613,  600,  598,
      610, 1039,   63,   63,   63,  614,   63,  605,   63,   63,
       63,  615,   63,   63,  608,   63,  611,   63,  607,  616,
      609,   63,  612,  613,  618,  617,  610,   63,   63,   63,
      624,  614,   63, 1039,   63,   63,   63,  615,  619,   63,
      620,   63,   63,  621,  622,  616,   63,   63,   63,  627,
      618,  623,   63,   63,   63,   63,  624,  626,   63,   63,

      625,   63,   63,   63,  619,   63,  620,   63,   63,  621,
      622,   63,   63,  644,   63,  627,   63,  623,   63,  628,
       63,   63, 1039,  626, 1039,   63,  625,   63,   63,   63,
      629,   63,  655,   63,   63,   63, 1039,   63, 1039,  644,
     1039, 1039,   63, 1039, 1039,  628,  634,  634,  634,  634,
      634,  634,  634,  634,  634, 1039,  629, 1039,  655,   63,
       63,   63,  267, 1039,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  419,  267, 1039,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  569, 1039,  636,  636,  636,
      636,  636,  636, 1039, 1039,  636,  636,  636,  636,  636,

      636,  636,  636,  636,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  636,  636,  636,  636,  636,  636,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  645,   63,
      638,  638,  638,  638,  638,  638, 1039,   63,  640,  640,
      640,  640,  640,  640,  640,  640,  640, 1039, 1039, 1039,
     1039, 1039, 1039, 1039,  645,   63,  638,  638,  638,  638,
      638,  638,  198,   63,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  499,  647,  640,  640,  640,  640,  640,
      640, 1039,   63,  643,  643,  643,  643,  643,  643,  643,
      643,  643, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,

      647,  640,  640,  640,  640,  640,  640,  198,   63,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  642,  646,
      643,  643,  643,  643,  643,  643,  648,  649,  651,   63,
      650,   63,  654, 1039,   63, 1039,   63, 1039,   63, 1039,
     1039,  656,  652,  653,  666,  646,  643,  643,  643,  643,
      643,  643,  648,  649,  651,   63,  650,   63,   63,   63,
       63,   63,   63,  661,   63,  658,   63,  656,  652,  653,
       63,  659,   63,  657,  660,  662,  664,   63,   63,   63,
       63, 1039,   63,   63,   63,   63, 1039,   63,  671,  661,
      663,  658,   63,  665,   63,  667,   63,  659,   63,  657,

      660,  662,  664,   63,   63,   63,   63,  670,   63,   63,
       63,   63,  668,  672,  673,  669,  663,  674,   63,  665,
       63,  667,   63,   63,  675, 1039,   63,   63,  676,  677,
       63,  678,  679,   63,  681,   63,   63,   63,   63,  680,
      673,   63,   63,   63,   63,  683,  682,   63,   63,   63,
      675,   63,   63,   63,  676,  677,   63,  678,  679,   63,
      681,   63,   63,  684,   63,  680,  685,   63,   63,   63,
       63,   63,  682,   63,  686,   63,   63,   63,   63,   63,
      687,   63,   63,   63, 1039,   63,   63,  688,   63,  684,
      703,  702,  685,   63,  689,  710,   63,   63,  712,   63,

      686,   63,   63,   63,   63,   63,  687,   63,   63,   63,
       63,   63,   63,  688, 1039, 1039,  703,  702, 1039,   63,
      689,  710, 1039, 1039,  712,   63, 1039, 1039, 1039,   63,
     1039, 1039,  714, 1039, 1039, 1039,   63,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  267, 1039,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  569,  717,  694,
      694,  694,  694,  694,  694, 1039,   63,  694,  694,  694,
      694,  694,  694,  694,  694,  694, 1039,   63, 1039, 1039,
     1039, 1039, 1039, 1039,  717,  694,  694,  694,  694,  694,
      694,  267,   63,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  696,   63,  697,  697,  697,  697,  697,  697,
     1039,  708,  697,  697,  697,  697,  697,  697,  697,  697,
      697, 1039, 1039,   63, 1039, 1039, 1039, 1039, 1039, 1039,
      697,  697,  697,  697,  697,  697,  198,  708,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  499,  198,   63,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  642,
       63,  699,  699,  699,  699,  699,  699, 1039, 1039,  699,
      699,  699,  699,  699,  699,  699,  699,  699, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039,   63,  699,  699,  699,
      699,  699,  699,  700,  700,  700,  700,  700,  700,  700,

      700,  700,  707,  704,  701,  701,  701,  701,  701,  701,
       63,  705,  706,   63,   63, 1039,  711,  713,   63,   63,
     1039, 1039, 1039, 1039,  709,   63,  723, 1039,  707,  704,
      701,  701,  701,  701,  701,  701,   63,  705,  706,   63,
       63,   63,  711,  713,   63,   63,  715,  716,  718,  720,
      709,   63,  719,   63,  725,  724,  721,  722,  728,  726,
      727,   63, 1039,   63,   63,   63,   63,   63,   63,   63,
       63, 1039,  715,  716,  718,  720,   63,   63,  719,   63,
       63,   63,  721,  722,  728,  729,  727,   63,   63,   63,
       63,   63,   63,  730,   63,   63,   63,   63,  731,   63,

       63,   63,   63,   63,  732,   63,   63,   63,  733,  734,
       63,  729,  735,   63,   63,   63,   63,   63,   63,  730,
       63,   63,  737,   63,  731,   63,   63,   63,   63,  755,
      732,   63,  736,   63,  733,  734,   63,   63,  735,   63,
       63,   63,   63,   63,   63, 1039,   63,   63,  737, 1039,
     1039, 1039,  756, 1039,   63,  755, 1039, 1039,  736,   63,
     1039, 1039, 1039,   63, 1039,  267,   63,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  569,  267,  756,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  696,  758,
      743,  743,  743,  743,  743,  743, 1039, 1039,  743,  743,

      743,  743,  743,  743,  743,  743,  743, 1039, 1039, 1039,
     1039, 1039, 1039, 1039,   63,  758,  743,  743,  743,  743,
      743,  743,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  753,   63,  745,  745,  745,  745,  745,  745, 1039,
       63,  747,  747,  747,  747,  747,  747,  747,  747,  747,
     1039,  764, 1039, 1039, 1039, 1039, 1039,  753,   63,  745,
      745,  745,  745,  745,  745,  198, 1039,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  642,   63,  747,  747,
      747,  747,  747,  747, 1039,   63,  750,  750,  750,  750,
      750,  750,  750,  750,  750, 1039, 1039, 1039, 1039, 1039,

     1039, 1039, 1039,   63,  747,  747,  747,  747,  747,  747,
      198,   63,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  749,  751,  750,  750,  750,  750,  750,  750,  752,
      754,  757,  759,  760,   63,   63, 1039,   63,   63,  761,
      762, 1039,   63,  763,   63,   63,   63,   63,  751,  750,
      750,  750,  750,  750,  750,  752,  754,  757,  759,  760,
       63,   63,  767,   63,   63,  761,  762,  765,   63,  763,
       63,   63,   63,   63,   63,  766,   63,   63,   63,   63,
      768,  769,  770, 1039,   63,  772,  773,   63,  767, 1039,
       63, 1039,   63,  765,  771, 1039,   63,   63,   63,   63,

       63,  766,   63,   63,   63,   63,  768,  769,  770,   63,
       63,  772,  773,   63,  774,  775,   63,   63,   63,  789,
      771,   63,   63,   63,   63,   63,   63,   63, 1039,  793,
     1039, 1039, 1039, 1039, 1039,   63, 1039, 1039, 1039, 1039,
      774,  775, 1039,   63, 1039,  789, 1039,   63,   63, 1039,
     1039, 1039,   63,   63,  267,  793,  779,  779,  779,  779,
      779,  779,  779,  779,  779,  696,   63,  780,  780,  780,
      780,  780,  780, 1039,   63,  780,  780,  780,  780,  780,
      780,  780,  780,  780, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039,   63,  780,  780,  780,  780,  780,  780,  267,

     1039,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      782,  792,  783,  783,  783,  783,  783,  783, 1039,   63,
      783,  783,  783,  783,  783,  783,  783,  783,  783, 1039,
     1039,   63, 1039, 1039, 1039, 1039, 1039,  792,  783,  783,
      783,  783,  783,  783,  198,   63,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  642,  198,   63,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  749, 1039,  785,
      785,  785,  785,  785,  785, 1039, 1039,  785,  785,  785,
      785,  785,  785,  785,  785,  785, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039,  790,  785,  785,  785,  785,  785,

      785,  786,  786,  786,  786,  786,  786,  786,  786,  786,
       63,  791,  787,  787,  787,  787,  787,  787,  788,  794,
      790,  795,   63,  796,   63,  797,   63,   63, 1039,  799,
      802,  798,   63,   63,  800,   63,   63,  791,  787,  787,
      787,  787,  787,  787,  788,  794,   63,  795,   63,  796,
       63,  797,   63,   63,   63,  799,  804,  798,   63,   63,
      800,   63,  801,  803,   63,   63,  805,   63,  806,  820,
      821,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,  804, 1039, 1039, 1039, 1039, 1039,  801,  803,
       63,   63,  805,   63,  806,  820,  821,   63, 1039,   63,

       63,   63,   63,   63,   63,   63,  267,   63,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  696,  267, 1039,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  782,
       63,  812,  812,  812,  812,  812,  812, 1039, 1039,  812,
      812,  812,  812,  812,  812,  812,  812,  812, 1039, 1039,
     1039, 1039, 1039, 1039, 1039,  858,   63,  812,  812,  812,
      812,  812,  812,  813,  813,  813,  813,  813,  813,  813,
      813,  813,  825,   63,  814,  814,  814,  814,  814,  814,
     1039,   63,  816,  816,  816,  816,  816,  816,  816,  816,
      816, 1039,   63, 1039, 1039, 1039, 1039, 1039,  825,   63,

      814,  814,  814,  814,  814,  814,  198,   63,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  749,   63,  816,
      816,  816,  816,  816,  816, 1039,  882,  819,  819,  819,
      819,  819,  819,  819,  819,  819, 1039,  826, 1039, 1039,
     1039, 1039, 1039, 1039, 1039,  816,  816,  816,  816,  816,
      816,  198,  882,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  818,  827,  819,  819,  819,  819,  819,  819,
      822,   63,  823,   63,   63,  828,  829, 1039,  831,   63,
       63,  830,  850,   63,   63,  832,   63,  833,   63,  827,
      819,  819,  819,  819,  819,  819,  822,   63,  823,   63,

       63,  828,  829,   63,  831,   63,   63,  830,  835,   63,
       63,  832,   63,  833,   63,  834,   63,   63,   63,  883,
      862,  849,  851,   63,   63, 1039,   63, 1039, 1039,   63,
     1039, 1039, 1039, 1039,  835, 1039, 1039,   63, 1039, 1039,
     1039,  834,   63,   63,   63,  883,  862,  849,  851,   63,
       63,  267,   63,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  782,   63,  841,  841,  841,  841,  841,  841,
     1039,   63,  841,  841,  841,  841,  841,  841,  841,  841,
      841, 1039,  881, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
      841,  841,  841,  841,  841,  841,  267,   63,  842,  842,

      842,  842,  842,  842,  842,  842,  842,  843,  859,  844,
      844,  844,  844,  844,  844, 1039,   63,  844,  844,  844,
      844,  844,  844,  844,  844,  844, 1039, 1039,   63, 1039,
     1039, 1039, 1039, 1039,  859,  844,  844,  844,  844,  844,
      844,  198,   63,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  749,  198,   63,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  818, 1039,  846,  846,  846,  846,
      846,  846, 1039, 1039,  846,  846,  846,  846,  846,  846,
      846,  846,  846, 1039, 1039, 1039, 1039, 1039, 1039,  912,
     1039,  852,  846,  846,  846,  846,  846,  846,  847,  847,

      847,  847,  847,  847,  847,  847,  847,   63,  853,  848,
      848,  848,  848,  848,  848,  912,  855,  852,   63, 1039,
     1039, 1039,  864,   63,  854,  856,  913,  886,  879,  860,
      861,   63,   63,   63,  853,  848,  848,  848,  848,  848,
      848,  857,  855,   63,   63,   63,   63,  863,  864,   63,
      854,  856,  913,  886,  879,  860,  861,   63,   63,   63,
     1039, 1039, 1039, 1039, 1039, 1039, 1039,  857, 1039,   63,
     1039,   63,   63,  863, 1039, 1039, 1039, 1039,  887,  888,
      889, 1039,  890, 1039,  267,   63,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  782,  267, 1039,  870,  870,

      870,  870,  870,  870,  870,  870,  870,  843,   63,  871,
      871,  871,  871,  871,  871, 1039, 1039,  871,  871,  871,
      871,  871,  871,  871,  871,  871, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039,   63,  871,  871,  871,  871,  871,
      871,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      885,   63,  873,  873,  873,  873,  873,  873, 1039,   63,
      875,  875,  875,  875,  875,  875,  875,  875,  875, 1039,
       63, 1039, 1039, 1039, 1039, 1039,  885,   63,  873,  873,
      873,  873,  873,  873,  198,   63,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  818,   63,  875,  875,  875,

      875,  875,  875, 1039, 1039,  878,  878,  878,  878,  878,
      878,  878,  878,  878, 1039,  880, 1039, 1039, 1039, 1039,
     1039, 1039, 1039,  875,  875,  875,  875,  875,  875,  198,
       63,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      877,  880,  878,  878,  878,  878,  878,  878,  884,  891,
      892,   63,  893,  894,   63,  908,   63, 1039,  907,   63,
       63,  920,   63,   63,   63,   63,  938,   63,  878,  878,
      878,  878,  878,  878,  884,  891,  892,   63,  893,  894,
       63,  908, 1039,  918,  907,   63,   63,  920,   63,   63,
       63,   63,  938,   63,  267, 1039,  900,  900,  900,  900,

      900,  900,  900,  900,  900,  843,   63,  901,  901,  901,
      901,  901,  901, 1039,  939,  901,  901,  901,  901,  901,
      901,  901,  901,  901, 1039,  943, 1039, 1039, 1039,  919,
     1039, 1039,   63,  901,  901,  901,  901,  901,  901,  267,
      939,  902,  902,  902,  902,  902,  902,  902,  902,  902,
       63,  914,  903,  903,  903,  903,  903,  903, 1039,   63,
      903,  903,  903,  903,  903,  903,  903,  903,  903, 1039,
     1039,   63, 1039, 1039, 1039, 1039,   63,  914,  903,  903,
      903,  903,  903,  903,  198,   63,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  818,  198,   63,  904,  904,

      904,  904,  904,  904,  904,  904,  904,  877, 1039,  905,
      905,  905,  905,  905,  905, 1039,  915,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  923,  916,  921,  909,
      917,  922,   63,  933,   63,  905,  905,  905,  905,  905,
      905,  910,  915,  940,   63,   63,   63,   63,  911,   63,
       63,  942,  923,   63,  921,  909,   63,  922,   63,  933,
       63, 1039, 1039, 1039, 1039, 1039, 1039,  910,  960,  940,
       63,   63,   63,   63,  911,   63,   63, 1039,   63,   63,
     1039,  267,   63,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  843,  267,  960,  928,  928,  928,  928,  928,

      928,  928,  928,  928,   63,  959,  929,  929,  929,  929,
      929,  929, 1039,   63,  929,  929,  929,  929,  929,  929,
      929,  929,  929, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039,  959,  929,  929,  929,  929,  929,  929,  198,   63,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  877,
      934,  931,  931,  931,  931,  931,  931, 1039,  944,  931,
      931,  931,  931,  931,  931,  931,  931,  931,   63,  935,
      941,  945,  946, 1039, 1039,   63,  934,  931,  931,  931,
      931,  931,  931,  947,  936,   63,  955,  958,   63,   63,
      937,   63,   63,   63,   63,  935,  941, 1039,  946,   63,

       63,   63,   63, 1039,   63, 1039, 1039, 1039, 1039,  947,
      936,   63,  955,  958,   63,   63,  937,   63,   63,   63,
     1039, 1039, 1039,  956, 1039,   63,   63, 1039,   63,  267,
       63,  952,  952,  952,  952,  952,  952,  952,  952,  952,
       63,   63,  953,  953,  953,  953,  953,  953, 1039,  956,
      953,  953,  953,  953,  953,  953,  953,  953,  953, 1039,
       63,   63,  962,  957,   63, 1039,   63,   63,  953,  953,
      953,  953,  953,  953,  198,   63,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  877,   63,   63,  962,  957,
       63,  961,  961,   63,  961,  961,  961,  961,  961,  961,

      969,   63,  961,   63,  970, 1039,  973,  974, 1039, 1039,
     1039, 1039,  961,  961,  968,  971,  988,  983,  267,   63,
      490,  490,  490,  490,  490,  490,  490,  490,  490,   63,
       63,   63,  973,  974,   63,   63,  976,  977,   63, 1039,
      968,  971,  988,  983,  972,  972, 1039,  972,  972,  972,
      972,  972,  972,   63,  982,  972,   63,   63,  989,   63,
       63,   63,  976,  977,   63,  972,  972,  984,  985,  986,
      987,  992,   63, 1039,   63,  990,  991,  997,   63,   63,
      982,  993, 1000,  998,  989,   63, 1001, 1002,   63,   63,
     1003,   63,   63,  984,  985,  986,  987,  992,   63,  999,

       63,  990,  991,  997,   63,   63, 1004,  993, 1000,  998,
     1006,   63, 1001, 1002,   63,   63, 1003,   63,   63,   63,
     1005,   63, 1011, 1013,   63,  999,   63,   63, 1014,   63,
     1012,   63, 1004,   63, 1015,   63, 1006,   63, 1016,   63,
     1022,   63, 1017,   63, 1021,   63, 1005,   63, 1011, 1013,
       63,   63,   63,   63, 1014,   63, 1012, 1023, 1024,   63,
     1015,   63,   63,   63, 1016,   63, 1022,   63, 1017,   63,
     1021, 1029,   63,   63,   63,   63, 1039,   63,   63, 1039,
     1039, 1039, 1039, 1023, 1024, 1039, 1039, 1039,   63,   63,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1029,   63,   63,

       63,   63, 1039, 1039,   63,   43,   43,   43,   43,   45,
       45,   45,   45,   49,   49,   49,   49,   51, 1039,   51,
       51,   52,   52,   52,   52,  122, 1039,  122,  122,  126,
      126,  193,  193,  194,  194,  264,  264,  265,  265,  266,
      266,  338,  338,  339,  339,  412,  412,  413,  413,  414,
      414,  439, 1039,  439,  439,  485,  485,  486,  486,  487,
      487,  563,  563,  564,  564,  630,  630,  631,  631,  632,
      632,  690,  690,  691,  691,  692,  692,  563,  563,  739,
      739,  740,  740,  776,  776,  777,  777,  778,  778,  807,
      807,  808,  808,  809,  809,  691,  691,  837,  837,  838,

      838,  865,  865,  866,  866,  867,  867,  895,  895,  896,
      896,  898,  898,  777,  777,  925,  925,  926,  926,  948,
      948,  949,  949,  950,  950,  961, 1039,  961,  961,  963,
     1039,  963,  963,  964,  964,  965,  965,  972, 1039,  972,
      972,  975, 1039,  975,  975,  837,  837,  979,  979,  980,
      980,  994,  994,  995,  995, 1007, 1007, 1008, 1008, 1009,
     1009,  896,  896, 1019, 1019, 1025, 1025, 1026, 1026, 1027,
     1027, 1031, 1031, 1034, 1034, 1035, 1035, 1037, 1037, 1038,
     1038,    7, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,

     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039
    } ;

static yyconst flex_int16_t yy_chk[6058] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   29, 1128,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   27,   16,   63,   39,   24,   17,   29,   24,   27,
       34,   39,   34,   46,   46,   34,   30,   24,   16, 1124,
       24,   16,   16,   16,   16,   16,   16,   27,   16,   63,
       39,   24,   30, 1122,   24,   27,   34,   39,   34,   47,
       47,   34,   30,   24,   16,   20,   20, 1118,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   65,   21,   48,   48,   41,   66, 1112,
       21, 1104,   21,   41,   67,   68,   71,   71, 1103,   21,
     1098,   25, 1094, 1093, 1089, 1085,   73,   21,   21,   65,
       21, 1047,   25,   41,   66,   25,   21,   25,   21,   41,
       67,   68,   71,   71,   31,   21,   22,   25,   22,   22,
       31,   22,   73,   32,   28,   76,   31,   22,   25,   22,
       22,   25,   28,   25,   40, 1038,   22, 1037,   40,   28,
       31, 1035,   22,   32,   22,   22,   31,   22, 1034,   32,
       28,   76,   31,   22,   40,   22,   22, 1033,   28,   77,

       40,   35,   22,   23,   40,   28,   23,   23,   69,   32,
       72,   23,   35,   69,   23,   35,   23,   23,   35,   72,
       40,   83,   69,   23, 1032,   77, 1031,   35, 1030,   23,
     1027, 1026,   23,   23,   69, 1020,   72,   23,   35,   69,
       23,   35,   23,   23,   35,   72, 1019,   83,   69,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       42,   26,   26,   26,   26,   26,   26,   33,   26,   95,
     1018,   33,   26,   75, 1009,   26,   42,   33,   92,   92,
       75,   26,   33,   33, 1008, 1007,   42,   26,   26,   26,
       26,   26,   26,   33,   26,   95,   36,   33,   26,   75,

       36,   26,   42,   33,   92,   92,   75,   26,   33,   33,
       36,   38,   38,   70,  996,  995,   36,  994,   78,  980,
       74,   38,   36,  979,   98,   79,   36,   79,   74,   38,
       70,  104,   78,   89,  978,  966,   36,   89,   38,   70,
       74,   38,   36,   37,   78,   37,   74,   38,   37,   37,
       98,   79,  965,   79,   74,   38,   70,  104,   78,   89,
       37,   37,  964,   89,   38,  950,   74,   38,  949,   37,
      948,   37,  111,  931,   37,   37,   58,   58,   58,   58,
       58,   58,   58,   58,   58,  112,   37,   37,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,  111,   56,

       56,   56,   56,   56,   56,   81,   56,  927,  926,  925,
      924,  112,  901,  898,  896,  895,   80,   81,  875,  869,
      868,  867,  866,  865,   80,   56,   56,   56,   56,   56,
       56,   81,   56,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   80,   81,   61,   61,   61,   61,   61,   61,
       80,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      192,  192,  192,  192,  192,  192,  192,  192,  192,   84,
       61,   61,   61,   61,   61,   61,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   84,   64,   64,   64,
       64,   64,   64,   82,   64,   84,  841,  838,   82,  837,

      836,  816,   86,   87,  810,   85,   88,   64,   94,  809,
       94,   88,   84,   64,   64,   64,   64,   64,   64,   82,
       64,   85,   86,   87,   82,   88,   88,   90,   86,   87,
       91,   85,   88,   64,   94,   96,   94,   88,   97,   97,
       96,   99,   90,   93,   91,  102,  101,   85,   86,   87,
      102,   88,   88,   90,  100,   93,   91,  808,   93,  807,
      100,   96,  101,  793,   97,   97,   96,  106,   90,   93,
       91,  102,  101,  113,  105,   99,  102,  105,  108,  107,
      100,   93,  115,  108,   93,  106,  100,  103,  101,  103,
      103,  780,  778,  106,  116,  777,  776,  109,  103,  107,

      105,   99,  110,  105,  108,  107,  116,  113,  115,  108,
      114,  106,  118,  103,  109,  103,  103,  109,  114,  118,
      116,  110,  117,  109,  103,  107,  119,  132,  110,  119,
      133,  117,  116,  113,  137,  120,  114,  120,  118,  747,
      109,  741,  740,  109,  114,  118,  739,  110,  117,  738,
      694,  692,  119,  132,  691,  119,  133,  117,  690,  640,
      137,  120,  633,  120,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  140,  123,  123,  123,  123,  123,
      123,  130,  123,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  143,  143,  632,  631,  630,  567,  564,  563,

      140,  123,  123,  123,  123,  123,  123,  148,  123,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  143,  143,
      127,  127,  127,  127,  127,  127,  562,  148,  497,  488,
      147,  487,  197,  148,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  486,  485,  159,  127,  127,  127,  127,
      127,  127,  129,  148,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  147,  129,  129,  129,  129,  129,
      129,  159,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      147,  129,  129,  129,  129,  129,  129,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  138,  131,  131,
      131,  131,  131,  131,  134,  135,  136,  134,  139,  417,
      138,  135,  136,  141,  144,  141,  144,  145,  139,  142,
      161,  145,  414,  138,  131,  131,  131,  131,  131,  131,
      134,  135,  136,  134,  139,  142,  138,  135,  136,  141,
      144,  141,  144,  145,  139,  142,  146,  145,  149,  151,
      150,  151,  152,  153,  161,  153,  413,  158,  157,  152,
      412,  142,  146,  348,  154,  149,  150,  340,  155,  156,
      157,  339,  146,  158,  149,  151,  150,  151,  152,  153,
      161,  153,  154,  158,  157,  152,  155,  156,  146,  160,

      154,  149,  150,  162,  155,  156,  157,  164,  164,  158,
      163,  165,  165,  338,  166,  160,  167,  168,  154,  337,
      276,  162,  155,  156,  163,  160,  168,  266,  167,  162,
      168,  169,  171,  164,  164,  168,  163,  190,  170,  172,
      169,  160,  167,  168,  171,  174,  165,  162,  166,  173,
      163,  174,  168,  170,  167,  172,  168,  169,  171,  175,
      175,  168,  179,  190,  170,  172,  169,  265,  176,  173,
      171,  174,  165,  177,  166,  173,  177,  174,  181,  170,
      176,  172,  180,  180,  178,  175,  175,  178,  264,  182,
      181,  182,  263,  183,  176,  173,  179,  189,  184,  177,

      186,  203,  177,  234,  181,  185,  176,  189,  180,  180,
      178,  183,  188,  178,  184,  182,  181,  182,  186,  183,
      187,  185,  179,  189,  184,  205,  186,  203,  207,  188,
      207,  185,  187,  189,  195,  208,  194,  183,  188,  193,
      184,  126,  124,   57,  186,   53,  187,  185,   52,   49,
       44,  205,   19,   18,  207,  188,  207,   14,  187,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  208,
      191,  191,  191,  191,  191,  191,  201,  191,  201,  201,
      201,  201,  201,  201,  201,  201,  201,   12,    7,    4,
      209,    3,    0,    0,    0,  208,  191,  191,  191,  191,

      191,  191,  206,  191,  196,  206,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,    0,  196,  196,  196,
      196,  196,  196,    0,  209,    0,    0,    0,  206,    0,
        0,  206,    0,    0,    0,  212,    0,    0,    0,    0,
        0,    0,  212,  196,  196,  196,  196,  196,  196,  199,
      209,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  212,  199,  199,  199,  199,  199,  199,  212,  204,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
        0,    0,    0,    0,    0,  215,  219,  204,  199,  199,
      199,  199,  199,  199,  200,  200,  200,  200,  200,  200,

      200,  200,  200,  204,  210,  200,  200,  200,  200,  200,
      200,  215,  219,  204,    0,    0,    0,    0,    0,    0,
      210,  214,    0,    0,    0,    0,    0,    0,    0,  204,
      210,  200,  200,  200,  200,  200,  200,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  210,  213,  202,  202,
      202,  202,  202,  202,  211,  214,  211,  216,  217,  216,
      217,  222,  220,  224,  223,  220,  223,  213,    0,    0,
        0,    0,  241,  213,  202,  202,  202,  202,  202,  202,
      211,  214,  211,  216,  217,  216,  217,  218,  220,  221,
      223,  220,  223,  213,  225,  222,  227,  224,  241,  218,

      226,  226,    0,  227,  228,  221,  231,  228,  229,  229,
      225,    0,    0,  218,  233,  221,  236,    0,  236,  231,
      225,  222,  227,  224,    0,  218,  226,  226,  230,  227,
      228,  221,  231,  228,  229,  229,  225,  230,  230,  230,
      232,  235,  236,  237,  236,  231,  230,    0,  233,  237,
      238,  240,  239,  232,  230,  242,  235,  240,  235,  238,
        0,    0,  244,  230,  230,  230,  232,  235,  239,  237,
      243,  242,  230,  247,  233,  237,  238,  240,  239,  232,
      244,  242,  235,  240,  235,  238,  245,  243,  244,  247,
      245,  246,  246,  248,  239,  249,  243,  242,  248,  247,

        0,  257,  253,    0,  250,  256,  244,    0,  251,  253,
      252,  249,  245,  243,    0,  247,  245,  246,  246,  248,
      250,  249,  258,  251,  248,  251,  252,  257,  253,  255,
      250,  254,  254,  259,  251,  253,  252,  249,  255,  256,
      261,  260,  258,  277,  277,  281,  250,  260,  258,  251,
      259,  251,  252,  284,    0,  255,    0,  254,  254,  259,
        0,    0,    0,    0,  255,  256,    0,  260,  258,  277,
      277,  281,  293,  260,  261,  270,  259,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  271,  284,  271,  271,
      271,  271,  271,  271,  271,  271,  271,    0,  293,    0,

      261,  268,    0,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  268,  284,  268,  268,  268,  268,  268,  268,
      273,    0,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  346,  346,  346,  346,  346,  346,  346,  346,  346,
      268,  268,  268,  268,  268,  268,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  283,    0,  269,  269,  269,
      269,  269,  269,  275,  283,  275,  275,  275,  275,  275,
      275,  275,  275,  275,    0,  285,    0,    0,    0,    0,
        0,  283,  307,  269,  269,  269,  269,  269,  269,  272,
      283,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  307,  272,  272,  272,  272,  272,  272,  307,  285,
        0,  341,  295,  341,  341,  341,  341,  341,  341,  341,
      341,  341,    0,    0,    0,    0,    0,  307,  272,  272,
      272,  272,  272,  272,  274,  285,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  295,  274,  274,  274,
      274,  274,  274,  278,  279,  280,  279,    0,  278,  282,
      282,  282,  286,  286,  289,  289,    0,  280,    0,  282,
      297,  287,  295,  274,  274,  274,  274,  274,  274,  278,
      279,  280,  279,  287,  278,  282,  282,  282,  286,  286,
      289,  289,  290,  280,  288,  282,  291,  287,  288,  288,

      292,    0,  294,  291,  297,  296,    0,    0,  290,  287,
      302,  296,  292,  296,    0,  298,  302,  300,  290,  294,
      288,  299,  291,  301,  288,  288,  292,  298,  294,  291,
      297,  296,  300,  299,  290,  301,  302,  296,  292,  296,
      303,  298,  302,  300,  304,  294,  306,  299,  305,  301,
      304,  308,  309,  298,  318,  311,  303,  310,  300,  299,
        0,  301,    0,  310,  308,  313,  303,  309,  305,  312,
      304,  311,  313,    0,  305,    0,  304,  308,  309,  314,
      306,  311,  303,  310,  317,  312,  316,  317,  318,  310,
      308,  313,  316,  309,  305,  312,  315,  311,  313,  314,

      319,  319,  320,  315,  321,  314,  306,  322,  323,  323,
      317,  312,  316,  317,  318,  324,  324,  325,  316,    0,
      321,  334,  315,  327,  329,  314,  319,  319,  320,  315,
      321,  326,  331,  322,  323,  323,  328,  326,  329,  327,
        0,  324,  324,  325,  330,  328,  321,  330,  332,  327,
      329,  336,  331,  332,  333,  334,  333,  326,  331,  354,
      368,  354,  328,  326,  329,  327,  335,    0,  336,  335,
      330,  328,    0,  330,  332,    0,    0,  336,  331,  332,
      333,  334,  333,    0,    0,  354,  368,  354,    0,    0,
        0,    0,  335,  352,  336,  335,  342,    0,  342,  342,

      342,  342,  342,  342,  342,  342,  342,  342,  361,  342,
      342,  342,  342,  342,  342,  343,  361,  343,  343,  343,
      343,  343,  343,  343,  343,  343,    0,  352,    0,    0,
        0,    0,    0,    0,  361,  342,  342,  342,  342,  342,
      342,  344,  361,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  352,  344,  344,  344,  344,  344,  344,
      345,  357,  345,  345,  345,  345,  345,  345,  345,  345,
      345,    0,    0,  357,    0,    0,  366,    0,    0,    0,
      344,  344,  344,  344,  344,  344,  347,  357,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  349,  357,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      366,  349,  349,  349,  349,  349,  349,  351,    0,  351,
      351,  351,  351,  351,  351,  351,  351,  351,    0,    0,
        0,    0,    0,    0,  355,  355,  366,  349,  349,  349,
      349,  349,  349,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  353,  356,  350,  350,  350,  350,  350,  350,
      355,  355,  360,  365,  360,  364,  363,  379,  364,  356,
      358,  359,  353,  363,  367,  365,  379,  367,  353,  356,
      350,  350,  350,  350,  350,  350,  358,  359,  360,  365,
      360,  364,  363,  379,  364,  356,  358,  359,  353,  363,

      367,  365,  379,  367,    0,  375,  375,  370,  369,    0,
        0,    0,  358,  359,  362,  362,  369,  362,  362,  362,
      362,  362,  362,  362,  370,  362,  372,  373,  377,  371,
      374,  375,  375,  370,  369,  362,  362,  371,  374,  378,
      373,  382,  369,  372,  376,  376,    0,  378,  377,  382,
      370,  381,  372,  373,  377,  371,  374,  380,  380,    0,
      383,  386,  387,  371,  374,  378,  373,  382,  381,  372,
      376,  376,  383,  378,  377,  382,  384,  381,  391,  385,
        0,  388,  384,  380,  380,  385,  383,  386,  387,  388,
      389,  394,  390,  389,  381,  390,  393,  392,  383,  392,

      394,  397,  384,  398,  391,  385,  396,  388,  384,    0,
      393,  385,  399,  400,  395,  388,  389,  394,  390,  389,
      401,  390,  393,  392,  396,  392,  394,  395,  401,  403,
      395,  402,  396,  404,  402,  397,  393,  398,  399,  400,
      395,  406,  407,  406,    0,  403,  401,  410,  407,  409,
      396,  437,  405,  395,  401,  403,  395,  402,  409,  404,
      402,  397,  440,  398,  405,  408,  408,  406,  407,  406,
      411,  403,    0,    0,  407,  409,    0,  437,  405,    0,
      462,  410,  411,    0,  409,    0,    0,    0,  440,    0,
      405,  408,  408,    0,    0,    0,  411,  415,  415,  415,

      415,  415,  415,  415,  415,  415,  462,  410,  411,  416,
        0,  416,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  418,    0,  418,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  463,  418,  418,  418,  418,  418,  418,
      420,  429,  420,  420,  420,  420,  420,  420,  420,  420,
      420,    0,    0,    0,    0,    0,    0,    0,    0,  463,
      418,  418,  418,  418,  418,  418,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  429,  442,  419,  419,  419,
      419,  419,  419,  421,  442,  421,  421,  421,  421,  421,
      421,  421,  421,  421,    0,  469,    0,    0,    0,    0,

        0,  429,  442,  419,  419,  419,  419,  419,  419,  422,
      442,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      423,  469,  423,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  481,  423,  423,  423,  423,  423,  423,  424,
      513,  424,  424,  424,  424,  424,  424,  424,  424,  424,
        0,  526,    0,    0,    0,    0,    0,    0,  481,  423,
      423,  423,  423,  423,  423,  425,  513,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  526,  425,  425,
      425,  425,  425,  425,  426,    0,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  428,  431,  434,  428,  430,

      431,  432,  433,  433,  425,  425,  425,  425,  425,  425,
      427,  436,  430,  427,    0,    0,  432,  434,  435,  427,
        0,  428,  431,  434,  428,  430,  431,  432,  433,  433,
      435,  436,    0,    0,  439,  439,  427,  436,  430,  427,
      438,  441,  432,  434,  435,  427,  446,  441,  445,    0,
      438,  444,  444,  446,  448,  530,  435,  436,  438,  438,
      439,  439,  443,  447,  445,    0,  438,  441,  443,  447,
      443,  449,  446,  441,  445,  443,  438,  444,  444,  446,
      448,  530,  450,  451,  438,  438,  453,  452,  443,  447,
      445,  449,    0,    0,  443,  447,  443,  449,  454,  451,

      456,  443,  450,  452,  453,  455,  448,  457,  450,  451,
      461,  455,  453,  452,  454,  461,  456,  449,  458,  460,
      459,    0,  460,  457,  454,  451,  456,  464,  450,  452,
      453,  455,  532,  457,  458,  459,  461,  455,  465,  465,
      454,  461,  456,  471,  458,  460,  459,  464,  460,  457,
      466,  466,  467,  464,  467,  468,  468,  470,  532,  471,
      458,  459,  472,  474,  465,  465,  473,  470,  472,  471,
      475,  476,  476,  464,  470,  474,  466,  466,  467,  478,
      467,  468,  468,  470,  473,  471,  478,  482,  472,  474,
      475,  535,  473,  470,  472,  506,  475,  476,  476,  482,

      470,  474,  477,  506,  477,  478,  479,  480,  479,  483,
      473,  483,  478,  482,  480,  484,  475,  535,  484,    0,
        0,  506,    0,    0,    0,  482,    0,    0,  477,  506,
      477,    0,  479,  480,  479,  483,    0,  483,    0,    0,
      480,  484,    0,  489,  484,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  490,    0,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  491,    0,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491,    0,  491,  491,
      491,  491,  491,  491,  492,  536,  492,  492,  492,  492,
      492,  492,  492,  492,  492,  495,  495,  495,  495,  495,

      495,  495,  495,  495,  491,  491,  491,  491,  491,  491,
      493,  536,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  504,  493,  493,  493,  493,  493,  493,  494,
      537,  494,  494,  494,  494,  494,  494,  494,  494,  494,
        0,    0,  504,    0,    0,    0,    0,    0,  504,  493,
      493,  493,  493,  493,  493,  496,  537,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  498,  504,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,    0,
      498,  498,  498,  498,  498,  498,  500,    0,  500,  500,
      500,  500,  500,  500,  500,  500,  500,    0,    0,  507,

        0,    0,    0,    0,    0,  501,  498,  498,  498,  498,
      498,  498,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  501,  502,  499,  499,  499,  499,  499,  499,  502,
      503,  501,  505,  507,    0,    0,  510,  503,  510,  512,
      511,  505,  512,    0,  508,  511,    0,  501,  502,  499,
      499,  499,  499,  499,  499,  502,  503,  515,  505,  507,
      508,  509,  510,  503,  510,  512,  511,  505,  512,  514,
      508,  511,  516,  518,  509,  517,  517,  515,  514,  520,
      522,    0,  519,  515,  521,  520,  508,  509,  516,  518,
      519,  539,  529,  521,    0,  514,  522,    0,  516,  518,

      509,  517,  517,  515,  514,  520,  522,  524,  519,  524,
      521,  520,  525,  523,  516,  518,  519,  539,  528,  521,
      523,  528,  522,  527,  527,  527,  529,  527,  533,  525,
      540,  533,  531,  524,  534,  524,  541,  542,  525,  523,
      538,    0,  538,  534,  528,  543,  523,  528,  531,  542,
      545,  544,  529,  527,  533,  525,  540,  533,  531,  546,
      534,  543,  541,  542,  548,  547,  538,  544,  538,  534,
      554,  543,  546,    0,  531,  542,  545,  544,  549,  527,
      550,  557,  548,  551,  552,  546,  554,  543,  550,  558,
      548,  553,  551,  544,  561,  549,  554,  556,  546,  547,

      555,  552,  555,  553,  549,  558,  550,  557,  548,  551,
      552,  556,  554,  576,  550,  558,  581,  553,  551,  559,
      561,  549,    0,  556,    0,  547,  555,  552,  555,  553,
      560,  558,  588,  576,  559,  560,    0,  556,    0,  576,
        0,    0,  581,    0,    0,  559,  565,  565,  565,  565,
      565,  565,  565,  565,  565,    0,  560,    0,  588,  576,
      559,  560,  566,    0,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  568,    0,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,    0,  568,  568,  568,
      568,  568,  568,  570,    0,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  568,  568,  568,  568,  568,  568,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  577,  601,
      569,  569,  569,  569,  569,  569,  573,  577,  573,  573,
      573,  573,  573,  573,  573,  573,  573,    0,    0,    0,
        0,    0,    0,    0,  577,  601,  569,  569,  569,  569,
      569,  569,  572,  577,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  579,  572,  572,  572,  572,  572,
      572,  575,  579,  575,  575,  575,  575,  575,  575,  575,
      575,  575,    0,    0,    0,    0,    0,    0,    0,    0,

      579,  572,  572,  572,  572,  572,  572,  574,  579,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  578,
      574,  574,  574,  574,  574,  574,  580,  582,  584,  578,
      583,  583,  587,    0,  584,    0,  582,    0,  580,    0,
        0,  589,  585,  586,  599,  578,  574,  574,  574,  574,
      574,  574,  580,  582,  584,  578,  583,  583,  585,  586,
      584,  589,  582,  594,  580,  591,  587,  589,  585,  586,
      590,  592,  591,  590,  593,  595,  597,  592,  599,  597,
      593,    0,  595,  594,  585,  586,    0,  589,  604,  594,
      596,  591,  587,  598,  598,  600,  590,  592,  591,  590,

      593,  595,  597,  592,  599,  597,  593,  603,  595,  594,
      596,  600,  602,  605,  606,  602,  596,  607,  604,  598,
      598,  600,  606,  609,  608,    0,  608,  610,  611,  612,
      603,  613,  614,  616,  617,  614,  596,  600,  613,  615,
      606,  602,  615,  617,  604,  619,  618,  605,  606,  609,
      608,  607,  608,  610,  611,  612,  603,  613,  614,  616,
      617,  614,  618,  620,  613,  615,  621,  602,  615,  617,
      622,  620,  618,  605,  623,  625,  626,  607,  621,  619,
      624,  623,  627,  624,    0,  653,  645,  628,  618,  620,
      645,  644,  621,  644,  629,  652,  622,  620,  655,  652,

      623,  625,  626,  628,  621,  619,  624,  623,  627,  624,
      629,  653,  645,  628,    0,    0,  645,  644,    0,  644,
      629,  652,    0,    0,  655,  652,    0,    0,    0,  628,
        0,    0,  657,    0,    0,    0,  629,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  635,    0,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  660,  635,
      635,  635,  635,  635,  635,  636,  657,  636,  636,  636,
      636,  636,  636,  636,  636,  636,    0,  664,    0,    0,
        0,    0,    0,    0,  660,  635,  635,  635,  635,  635,
      635,  637,  657,  637,  637,  637,  637,  637,  637,  637,

      637,  637,  637,  664,  637,  637,  637,  637,  637,  637,
      638,  650,  638,  638,  638,  638,  638,  638,  638,  638,
      638,    0,    0,  650,    0,    0,    0,    0,    0,    0,
      637,  637,  637,  637,  637,  637,  639,  650,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  641,  650,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      667,  641,  641,  641,  641,  641,  641,  643,    0,  643,
      643,  643,  643,  643,  643,  643,  643,  643,    0,    0,
        0,    0,    0,    0,    0,    0,  667,  641,  641,  641,
      641,  641,  641,  642,  642,  642,  642,  642,  642,  642,

      642,  642,  649,  646,  642,  642,  642,  642,  642,  642,
      646,  647,  648,  647,  648,    0,  654,  656,  649,  656,
        0,    0,    0,    0,  651,  654,  668,    0,  649,  646,
      642,  642,  642,  642,  642,  642,  646,  647,  648,  647,
      648,  651,  654,  656,  649,  656,  658,  659,  661,  663,
      651,  654,  662,  668,  670,  669,  665,  666,  673,  671,
      672,  663,    0,  658,  673,  659,  661,  651,  662,  672,
      675,    0,  658,  659,  661,  663,  665,  666,  662,  668,
      669,  670,  665,  666,  673,  674,  672,  663,  671,  658,
      673,  659,  661,  676,  662,  672,  675,  674,  677,  678,

      679,  680,  665,  666,  681,  682,  669,  670,  683,  684,
      686,  674,  685,  687,  671,  703,  681,  683,  705,  676,
      709,  684,  689,  674,  677,  678,  679,  680,  685,  708,
      681,  682,  688,  688,  683,  684,  686,  708,  685,  687,
      689,  703,  681,  683,  705,    0,  709,  684,  689,    0,
        0,    0,  710,    0,  685,  708,    0,    0,  688,  688,
        0,    0,    0,  708,    0,  693,  689,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  695,  710,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  712,
      695,  695,  695,  695,  695,  695,  697,    0,  697,  697,

      697,  697,  697,  697,  697,  697,  697,    0,    0,    0,
        0,    0,    0,    0,  719,  712,  695,  695,  695,  695,
      695,  695,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  706,  706,  696,  696,  696,  696,  696,  696,  699,
      719,  699,  699,  699,  699,  699,  699,  699,  699,  699,
        0,  718,    0,    0,    0,    0,    0,  706,  706,  696,
      696,  696,  696,  696,  696,  698,    0,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  723,  698,  698,
      698,  698,  698,  698,  701,  718,  701,  701,  701,  701,
      701,  701,  701,  701,  701,    0,    0,    0,    0,    0,

        0,    0,    0,  723,  698,  698,  698,  698,  698,  698,
      700,  718,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  702,  700,  700,  700,  700,  700,  700,  704,
      707,  711,  713,  714,  713,  704,    0,  707,  702,  715,
      716,    0,  714,  717,  717,  715,  716,  711,  702,  700,
      700,  700,  700,  700,  700,  704,  707,  711,  713,  714,
      713,  704,  722,  707,  702,  715,  716,  720,  714,  717,
      717,  715,  716,  711,  720,  721,  724,  725,  726,  722,
      727,  728,  729,    0,  721,  733,  734,  734,  722,    0,
      737,    0,  753,  720,  732,    0,  727,  733,  728,  729,

      720,  721,  724,  725,  726,  722,  727,  728,  729,  732,
      721,  733,  734,  734,  735,  736,  737,  752,  753,  752,
      732,  735,  727,  733,  728,  729,  754,  736,    0,  758,
        0,    0,    0,    0,    0,  732,    0,    0,    0,    0,
      735,  736,    0,  752,    0,  752,    0,  735,  759,    0,
        0,    0,  754,  736,  742,  758,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  763,  742,  742,  742,
      742,  742,  742,  743,  759,  743,  743,  743,  743,  743,
      743,  743,  743,  743,    0,    0,    0,    0,    0,    0,
        0,    0,  763,  742,  742,  742,  742,  742,  742,  744,

        0,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  757,  744,  744,  744,  744,  744,  744,  745,  765,
      745,  745,  745,  745,  745,  745,  745,  745,  745,    0,
        0,  757,    0,    0,    0,    0,    0,  757,  744,  744,
      744,  744,  744,  744,  746,  765,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  748,  757,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,    0,  748,
      748,  748,  748,  748,  748,  750,    0,  750,  750,  750,
      750,  750,  750,  750,  750,  750,    0,    0,    0,    0,
        0,    0,    0,    0,  755,  748,  748,  748,  748,  748,

      748,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      755,  756,  749,  749,  749,  749,  749,  749,  751,  760,
      755,  761,  751,  762,  761,  764,  766,  756,    0,  767,
      770,  764,  762,  764,  768,  760,  755,  756,  749,  749,
      749,  749,  749,  749,  751,  760,  767,  761,  751,  762,
      761,  764,  766,  756,  768,  767,  772,  764,  762,  764,
      768,  760,  769,  771,  770,  773,  774,  774,  775,  788,
      789,  772,  767,  790,  796,  801,  775,  789,  769,  771,
      768,  834,  772,    0,    0,    0,    0,    0,  769,  771,
      770,  773,  774,  774,  775,  788,  789,  772,    0,  790,

      796,  801,  775,  789,  769,  771,  779,  834,  779,  779,
      779,  779,  779,  779,  779,  779,  779,  779,  781,    0,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      835,  781,  781,  781,  781,  781,  781,  783,    0,  783,
      783,  783,  783,  783,  783,  783,  783,  783,    0,    0,
        0,    0,    0,    0,    0,  827,  835,  781,  781,  781,
      781,  781,  781,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  794,  852,  782,  782,  782,  782,  782,  782,
      785,  827,  785,  785,  785,  785,  785,  785,  785,  785,
      785,    0,  794,    0,    0,    0,    0,    0,  794,  852,

      782,  782,  782,  782,  782,  782,  784,  827,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  794,  784,
      784,  784,  784,  784,  784,  787,  853,  787,  787,  787,
      787,  787,  787,  787,  787,  787,    0,  795,    0,    0,
        0,    0,    0,    0,    0,  784,  784,  784,  784,  784,
      784,  786,  853,  786,  786,  786,  786,  786,  786,  786,
      786,  786,  786,  797,  786,  786,  786,  786,  786,  786,
      791,  795,  792,  791,  792,  798,  799,    0,  802,  799,
      797,  800,  821,  800,  802,  803,  803,  804,  798,  797,
      786,  786,  786,  786,  786,  786,  791,  795,  792,  791,

      792,  798,  799,  804,  802,  799,  797,  800,  806,  800,
      802,  803,  803,  804,  798,  805,  821,  805,  822,  854,
      831,  820,  822,  831,  806,    0,  858,    0,    0,  804,
        0,    0,    0,    0,  806,    0,    0,  820,    0,    0,
        0,  805,  821,  805,  822,  854,  831,  820,  822,  831,
      806,  811,  858,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  820,  811,  811,  811,  811,  811,  811,
      812,  861,  812,  812,  812,  812,  812,  812,  812,  812,
      812,    0,  851,    0,    0,    0,    0,    0,    0,    0,
      811,  811,  811,  811,  811,  811,  813,  861,  813,  813,

      813,  813,  813,  813,  813,  813,  813,  813,  828,  813,
      813,  813,  813,  813,  813,  814,  851,  814,  814,  814,
      814,  814,  814,  814,  814,  814,    0,    0,  828,    0,
        0,    0,    0,    0,  828,  813,  813,  813,  813,  813,
      813,  815,  851,  815,  815,  815,  815,  815,  815,  815,
      815,  815,  815,  817,  828,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,    0,  817,  817,  817,  817,
      817,  817,  819,    0,  819,  819,  819,  819,  819,  819,
      819,  819,  819,    0,    0,    0,    0,    0,    0,  882,
        0,  823,  817,  817,  817,  817,  817,  817,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  823,  824,  818,
      818,  818,  818,  818,  818,  882,  825,  823,  825,    0,
        0,    0,  833,  833,  824,  826,  883,  857,  849,  829,
      830,  849,  857,  823,  824,  818,  818,  818,  818,  818,
      818,  826,  825,  826,  825,  829,  830,  832,  833,  833,
      824,  826,  883,  857,  849,  829,  830,  849,  857,  832,
        0,    0,    0,    0,    0,    0,    0,  826,    0,  826,
        0,  829,  830,  832,    0,    0,    0,    0,  859,  859,
      859,    0,  859,    0,  840,  832,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  842,    0,  842,  842,

      842,  842,  842,  842,  842,  842,  842,  842,  859,  842,
      842,  842,  842,  842,  842,  844,    0,  844,  844,  844,
      844,  844,  844,  844,  844,  844,    0,    0,    0,    0,
        0,    0,    0,    0,  859,  842,  842,  842,  842,  842,
      842,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      856,  884,  843,  843,  843,  843,  843,  843,  846,  856,
      846,  846,  846,  846,  846,  846,  846,  846,  846,    0,
      887,    0,    0,    0,    0,    0,  856,  884,  843,  843,
      843,  843,  843,  843,  845,  856,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  887,  845,  845,  845,

      845,  845,  845,  848,    0,  848,  848,  848,  848,  848,
      848,  848,  848,  848,    0,  850,    0,    0,    0,    0,
        0,    0,    0,  845,  845,  845,  845,  845,  845,  847,
      850,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  850,  847,  847,  847,  847,  847,  847,  855,  860,
      862,  860,  863,  864,  879,  880,  850,    0,  879,  880,
      863,  891,  907,  891,  855,  864,  912,  862,  847,  847,
      847,  847,  847,  847,  855,  860,  862,  860,  863,  864,
      879,  880,    0,  889,  879,  880,  863,  891,  907,  891,
      855,  864,  912,  862,  870,    0,  870,  870,  870,  870,

      870,  870,  870,  870,  870,  870,  889,  870,  870,  870,
      870,  870,  870,  871,  913,  871,  871,  871,  871,  871,
      871,  871,  871,  871,    0,  917,    0,    0,    0,  890,
        0,    0,  889,  870,  870,  870,  870,  870,  870,  872,
      913,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      917,  885,  872,  872,  872,  872,  872,  872,  873,  890,
      873,  873,  873,  873,  873,  873,  873,  873,  873,    0,
        0,  885,    0,    0,    0,    0,  917,  885,  872,  872,
      872,  872,  872,  872,  874,  890,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  874,  876,  885,  876,  876,

      876,  876,  876,  876,  876,  876,  876,  876,    0,  876,
      876,  876,  876,  876,  876,  878,  886,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  894,  888,  892,  881,
      888,  893,  886,  908,  894,  876,  876,  876,  876,  876,
      876,  881,  886,  914,  892,  914,  920,  893,  881,  881,
      908,  916,  894,  922,  892,  881,  888,  893,  886,  908,
      894,    0,    0,    0,    0,    0,    0,  881,  938,  914,
      892,  914,  920,  893,  881,  881,  908,    0,  916,  922,
        0,  900,  888,  900,  900,  900,  900,  900,  900,  900,
      900,  900,  900,  902,  938,  902,  902,  902,  902,  902,

      902,  902,  902,  902,  916,  937,  902,  902,  902,  902,
      902,  902,  903,  937,  903,  903,  903,  903,  903,  903,
      903,  903,  903,    0,    0,    0,    0,    0,    0,    0,
        0,  937,  902,  902,  902,  902,  902,  902,  904,  937,
      904,  904,  904,  904,  904,  904,  904,  904,  904,  904,
      909,  904,  904,  904,  904,  904,  904,  905,  918,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  909,  910,
      915,  919,  921,    0,    0,  921,  909,  904,  904,  904,
      904,  904,  904,  923,  911,  918,  933,  936,  915,  910,
      911,  942,  936,  933,  909,  910,  915,    0,  921,  923,

      919,  921,  911,    0,  943,    0,    0,    0,    0,  923,
      911,  918,  933,  936,  915,  910,  911,  942,  936,  933,
        0,    0,    0,  934,    0,  923,  919,    0,  911,  928,
      943,  928,  928,  928,  928,  928,  928,  928,  928,  928,
      944,  934,  928,  928,  928,  928,  928,  928,  929,  934,
      929,  929,  929,  929,  929,  929,  929,  929,  929,    0,
      935,  945,  940,  935,  940,    0,  944,  934,  928,  928,
      928,  928,  928,  928,  930,  946,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  935,  945,  940,  935,
      940,  941,  941,  947,  941,  941,  941,  941,  941,  941,

      957,  946,  941,  955,  958,    0,  961,  961,    0,    0,
        0,    0,  941,  941,  956,  959,  973,  969,  952,  947,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  955,
      956,  959,  961,  961,  957,  969,  963,  963,  958,    0,
      956,  959,  973,  969,  962,  962,    0,  962,  962,  962,
      962,  962,  962,  963,  968,  962,  956,  959,  974,  968,
      957,  969,  963,  963,  958,  962,  962,  970,  971,  972,
      972,  976,  970,    0,  971,  975,  975,  982,  982,  963,
      968,  977,  985,  983,  974,  968,  986,  987,  977,  983,
      988,  976,  975,  970,  971,  972,  972,  976,  970,  984,

      971,  975,  975,  982,  982,  984,  990,  977,  985,  983,
      992,  992,  986,  987,  977,  983,  988,  976,  975,  993,
      991,  997,  998, 1000, 1000,  984,  990,  991, 1001,  998,
      999,  984,  990,  999, 1003, 1005,  992,  992, 1004, 1004,
     1012, 1012, 1006, 1013, 1011,  993,  991,  997,  998, 1000,
     1000, 1011,  990,  991, 1001,  998,  999, 1014, 1016,  999,
     1003, 1005, 1006, 1017, 1004, 1004, 1012, 1012, 1006, 1013,
     1011, 1021, 1022, 1021, 1024, 1029,    0, 1011, 1016,    0,
        0,    0,    0, 1014, 1016,    0,    0,    0, 1006, 1017,
        0,    0,    0,    0,    0,    0,    0, 1021, 1022, 1021,

     1024, 1029,    0,    0, 1016, 1040, 1040, 1040, 1040, 1041,
     1041, 1041, 1041, 1042, 1042, 1042, 1042, 1043,    0, 1043,
     1043, 1044, 1044, 1044, 1044, 1045,    0, 1045, 1045, 1046,
     1046, 1048, 1048, 1049, 1049, 1050, 1050, 1051, 1051, 1052,
     1052, 1053, 1053, 1054, 1054, 1055, 1055, 1056, 1056, 1057,
     1057, 1058,    0, 1058, 1058, 1059, 1059, 1060, 1060, 1061,
     1061, 1062, 1062, 1063, 1063, 1064, 1064, 1065, 1065, 1066,
     1066, 1067, 1067, 1068, 1068, 1069, 1069, 1070, 1070, 1071,
     1071, 1072, 1072, 1073, 1073, 1074, 1074, 1075, 1075, 1076,
     1076, 1077, 1077, 1078, 1078, 1079, 1079, 1080, 1080, 1081,

     1081, 1082, 1082, 1083, 1083, 1084, 1084, 1086, 1086, 1087,
     1087, 1088, 1088, 1090, 1090, 1091, 1091, 1092, 1092, 1095,
     1095, 1096, 1096, 1097, 1097, 1099,    0, 1099, 1099, 1100,
        0, 1100, 1100, 1101, 1101, 1102, 1102, 1105,    0, 1105,
     1105, 1106,    0, 1106, 1106, 1107, 1107, 1108, 1108, 1109,
     1109, 1110, 1110, 1111, 1111, 1113, 1113, 1114, 1114, 1115,
     1115, 1116, 1116, 1117, 1117, 1119, 1119, 1120, 1120, 1121,
     1121, 1123, 1123, 1125, 1125, 1126, 1126, 1127, 1127, 1129,
     1129, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,

     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1039
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[130] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();


#line 30 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2159 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 43 "SrvLexer.l"


#line 2269 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1040 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5982 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 45 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 48 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 50 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 51 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 52 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 67 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 69 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::KEY_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::SECRET_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::ALGORITHM_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 175 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 176 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 177 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 115:
YY_RULE_SETUP
#line 184 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 193 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 202 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 211 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 220 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 229 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 238 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 250 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 257 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 278 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 310 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 338 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 348 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 357 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 360 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3168 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1040 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1040 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1039);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 360 "SrvLexer.l"



