#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 132
#define YY_END_OF_BUFFER 133
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1054] =
    {   0,
        1,    1,    0,    0,    0,    0,  133,  131,    2,    1,
        1,  131,  113,  131,  131,  130,  130,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  117,  117,  132,    1,    1,    1,    0,  125,
      113,    0,  125,  115,  114,  130,    0,    0,  129,    0,
      122,   96,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  110,  126,  126,   98,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,   17,   18,  126,  126,  126,  126,  126,  126,  126,
      126,  116,  114,  130,    0,    0,    0,  121,  127,  120,
      120,  126,  126,  126,  126,  126,  126,   97,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
       90,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  109,  130,    0,    0,    0,    0,  119,  119,

        0,  120,    0,  120,  126,  126,  126,   66,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  104,  126,  126,
      126,   31,  126,  126,   46,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,    0,  126,
      126,  126,  126,  126,  126,   24,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  111,  126,  126,  126,  126,  130,    0,  128,    0,
        0,    0,  119,    0,  119,    0,  120,  120,  120,  120,
      126,  126,  126,  126,  126,  103,  126,  126,  126,    4,
      126,  126,  126,  126,  126,  126,  126,  112,  126,   93,

      126,  126,    3,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,    0,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,    7,  126,   45,
      126,  126,   25,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,    0,    0,    0,    0,    0,  119,
      119,  119,  119,    0,  120,  120,  120,    0,  120,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,   30,
      126,  126,  126,  126,  126,   39,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,    0,    0,  126,  126,  126,   37,

      126,  126,  126,  126,   35,  126,  126,  126,   62,   91,
      126,  126,  126,  107,  126,  126,  126,  126,  126,  126,
      126,    0,    0,    0,    0,  119,  119,  119,    0,  119,
        0,    0,  120,  120,  120,  120,  126,  126,   34,  126,
      126,  126,  126,  126,  126,  126,    0,  126,  126,  106,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,    0,    0,  126,  126,  126,  126,  126,   60,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,   22,  126,  126,  126,  128,    0,    0,    0,    0,

        0,  119,  119,  119,  119,    0,  120,  120,  120,    0,
      120,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,    0,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,   79,  126,  126,  126,
       47,  126,   56,  126,  126,  126,   12,   10,   95,  126,
       44,    0,    0,  126,  126,  126,   58,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,    5,  126,
      126,  126,   14,    0,    0,    0,    0,  119,  119,  119,
        0,  119,  124,  120,  120,  120,  120,  126,  126,  126,
      126,  126,   92,  126,  126,  126,  126,  126,  126,    0,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,   81,  126,  126,  126,  126,  126,  126,  126,
      126,   11,   65,    0,    0,  126,  126,  126,   59,  126,
      126,  126,  126,  126,   32,  126,  126,    6,  105,   41,
      126,  126,    0,    0,    0,    0,  123,  119,  119,  119,
      119,  120,  120,  120,    0,  120,  126,  126,  126,  126,
      126,  126,  126,  126,  126,   57,  126,    0,  126,  126,
      126,  126,  126,  126,  126,  126,   38,  126,  126,   36,
      126,  126,  126,  126,  126,  126,  126,   33,   13,    0,
        0,   53,   52,   40,  126,   23,  126,  126,  126,   43,

       42,  126,  126,  128,    0,    0,  119,  119,  119,    0,
      119,  120,  120,  120,  120,  126,   15,  126,   64,  126,
      126,  126,   73,  126,  126,    0,  126,  126,  126,  126,
      126,  126,   76,  126,  126,  126,   83,   85,   87,   89,
      126,  126,  126,   55,   54,  126,  126,  126,  126,  126,
       61,    0,    0,    0,    0,  119,  119,  119,  119,  120,
      120,  120,    0,  120,  126,  126,  108,   75,  126,  126,
      126,    0,   94,  126,  126,  126,   51,  126,   77,   63,
      126,  126,  126,    8,  126,  126,   26,  126,  126,    0,
        0,    0,  119,  119,  119,    0,  119,  120,  120,  120,

      120,  126,  126,   74,  126,  126,    0,  126,  126,   50,
      126,  126,  126,  126,   67,  126,  126,  126,  126,  126,
      128,    0,    0,    0,  119,  119,  119,  119,  120,  120,
      120,    0,  120,  126,  126,  126,  126,    0,  126,  126,
      126,  126,  126,  126,  126,  126,  126,   16,   21,    0,
        0,  118,  121,  119,  119,  119,    0,  119,  120,  120,
      120,  120,  126,  126,  126,   28,    0,    0,  126,  126,
      126,   78,  126,  126,   27,  126,  126,  126,    0,    0,
      118,    0,  119,  119,  119,  119,  119,  120,  120,  120,
        0,  120,  126,  126,  126,    0,    0,   29,  126,  126,

       80,  126,  126,  126,  126,  126,  126,  126,  128,  118,
      121,  119,    0,  119,  119,  119,  119,  120,  120,  120,
       68,  126,  126,  126,  126,    0,    0,  126,  126,  126,
      126,  126,  126,   49,  126,   20,  126,    0,  118,  119,
      119,  119,  119,  120,  120,  120,  126,  126,  126,  126,
      126,    0,    0,  126,  126,   82,   84,   86,   88,    9,
       19,    0,  119,  119,    0,  119,  119,  120,   48,  126,
      126,  126,  126,    0,    0,  126,  126,  128,  119,  119,
      120,  126,  126,  126,  126,    0,    0,    0,  126,  126,
      126,    0,  119,  119,    0,  126,  126,  126,  126,    0,

        0,    0,   99,  126,  126,  126,   99,  118,  119,  119,
       69,  126,  126,  126,    0,  101,    0,  126,  101,  126,
      118,  119,  119,    0,  126,  126,   72,    0,  100,  126,
      100,    0,  119,  119,  126,   70,  102,  102,    0,  119,
      119,    0,   71,  128,  119,  119,    0,  119,  119,    0,
      119,  119,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1144] =
    {   0,
        0,    0, 1154, 1152,    0,    0, 1159, 6034, 6034,   73,
       75, 1139,    0, 1134,   72,   72,   34, 1103, 1088,  136,
      186,  233,  280,   71,  208,  338,   66,  236,   38,   89,
      223,  240,  340,   72,  275,  373,  418,  398,   68,  251,
      180,  333, 6034, 1079, 6034,  111,  137,  213, 1077, 6034,
        0, 1062, 1034, 6034,    0,  476,  964,  464, 6034,    0,
      521, 6034,   60,  564,  188,  192,  182,  183,  279,  387,
      336,  193,  240,  397,  337,  263,  274,  389,  278,  390,
      474,  555,  335,  543,  578,  579,  580,  582,  611,  384,
      607,  597,  559,  613,  595,  381,  599,  603,  394,  499,

      630,  631,  640,  654,  429,  647,  652,  632,  653,  684,
      668,  442,  481,  685,  691,  662,  689,  676,  699,  698,
      706, 6034,    0,  764,  958,  539,  955,  809,    0,  854,
      783,  897,  698,  689,  700,  889,  890,  687,  898,  886,
      709,  893,  913,  762,  894,  701,  930,  833,  796,  938,
      941,  928,  929,  945,  934,  953,  962,  968,  949,  959,
      743,  981,  982,  980,  984,  987,  978, 1024, 1017,  986,
     1014, 1002, 1016, 1023, 1034, 1015, 1026, 1030, 1045, 1039,
     1051, 1066, 1054, 1069, 1063, 1076, 1086, 1088, 1082, 1085,
     1110, 1078,  814, 1168,  834,  922,  921,  918, 1215,  874,

     1151, 1260, 1303, 1187, 1346,  906, 1281, 1075, 1106, 1105,
     1147, 1168, 1298, 1334, 1220, 1345, 1333, 1091, 1337, 1338,
     1377, 1109, 1183, 1366, 1373, 1383, 1344, 1374, 1385, 1264,
     1379, 1378, 1381, 1382, 1428, 1425, 1426, 1418,  929, 1431,
     1417, 1396, 1432, 1450, 1433, 1202, 1477, 1473, 1466, 1463,
     1469, 1478, 1475, 1480, 1497, 1500, 1502, 1515, 1485, 1514,
     1513, 1516, 1537, 1535, 1525, 1554, 1279,  910,  909,  880,
      879, 1595, 1614, 1657, 1633, 1676, 1702, 1721, 1747, 1766,
      878, 1522, 1532, 1552, 1746, 1529, 1759, 1644, 1593, 1689,
     1745, 1764, 1766, 1748, 1779, 1556, 1780, 1536, 1784, 1636,

     1796, 1803, 1815, 1798, 1800, 1797, 1811, 1813, 1834, 1832,
     1844, 1840, 1817, 1700, 1848, 1853, 1853, 1849, 1868, 1857,
     1865, 1863, 1886, 1872, 1881, 1901, 1888, 1885, 1908, 1890,
     1897, 1900, 1893, 1909, 1920, 1924, 1931, 1936, 1948, 1932,
     1940, 1939, 1945, 1961,  877,  876,  875,  874, 2006, 2021,
     2040, 2066, 2085, 2049, 2111,  864, 2123, 2166, 2142, 2102,
     2065, 2154, 2145, 2169, 2167, 2182, 2184, 2159, 2196, 2266,
     2216, 2163, 2199, 2236, 2215, 1921, 2247, 2237, 2248, 2250,
     2256, 2257, 2164, 2252, 2280, 2261, 2264, 2281, 2267, 2288,
     2299, 2301, 2302, 2309, 1966, 2024, 2300, 2308, 2313, 2053,

     2321, 2330, 2320, 2354, 2323, 2350, 2367, 2374, 2343, 2344,
     2360, 2362, 2371, 2353, 2373, 2365, 2372, 2383, 2384, 2402,
     2406,  835,  834,  823, 2442, 2464,  822, 2476, 2519, 2495,
     2538, 2564, 2575, 2594, 2620, 2639, 2641, 2620, 2429, 2634,
     2618, 2638, 2498, 2619, 2636, 2653, 2395, 2673, 2651, 2404,
     2663, 2562, 2693, 2668, 2656, 2692, 2676, 2506, 2704, 2707,
     2717, 2721, 2690, 2724, 2715, 2709, 2736, 2738, 2742, 2740,
     2756, 2737, 2525, 2731, 2759, 2744, 2760, 2757, 2773, 2749,
     2784, 2790, 2794, 2796, 2792, 2789, 2801, 2807, 2819, 2811,
     2824, 2797, 2825, 2832, 2829,  820,  819,  817,  790, 2890,

     2901, 2912, 2931, 2957, 2976, 2940, 3002,  789, 3014, 3057,
     3033, 3035, 3043, 3051, 2956, 3055, 3056, 3047, 3075, 2821,
     3052, 3053, 3054, 2870, 3095, 3091, 3103, 3089, 3106, 3100,
     3099, 3105, 3110, 3109, 3139, 3124, 2899, 3170, 3127, 3138,
     2944, 3159, 3108, 3166, 3148, 3158, 3147, 3151, 3152, 3157,
     3154, 3180, 3160, 3179, 3198, 3204, 3168, 3189, 3225, 3213,
     3207, 3209, 3206, 3217, 3222, 3219, 3220, 3242, 3211, 3247,
     3249, 3255, 3212,  788,  787,  786, 3313, 3324,  785, 3336,
     3379, 3355, 3364, 3424, 3398, 3469, 3443, 3377, 3457, 3465,
     3366, 3252, 3241, 3467, 3460, 3462, 3487, 3489, 3495, 3260,

     3490, 3498, 3507, 3508, 3509, 3512, 3511, 3514, 3522, 3506,
     3544, 3539, 3411, 3572, 3559, 3547, 3575, 3550, 3586, 3562,
     3556, 3525, 3555, 3569, 3574, 3571, 3566, 3577, 3561, 3578,
     3607, 3594, 3610, 3605, 3596, 3606, 3611, 3609, 3613, 3614,
     3642, 3643,  751,  750,  742,  741, 3452, 3703, 3687, 3748,
     3722, 3767,  738, 3793, 3836, 3812, 3623, 3641, 3822, 3825,
     3826, 3830, 3839, 3854, 3833, 3618, 3866, 3641, 3834, 3682,
     3878, 3882, 3629, 3885, 3884, 3874, 3690, 3889, 3891, 3701,
     3899, 3772, 3902, 3735, 3879, 3907, 3898, 3877, 3906, 3916,
     3916, 3914, 3916, 3918, 3931, 3920, 3930, 3934, 3952, 3923,

     3929, 3938, 3959,  736,  687,  685, 3999,  681, 4019, 4062,
     4038, 4107, 4081, 4152, 4126, 4147, 3953, 4144, 3954, 4041,
     4146, 4094, 3958, 3961, 4156, 4004, 4143, 4151, 4154, 4155,
     4153, 4145, 4023, 4183, 4193, 4203, 4185, 4187, 4188, 4189,
     4206, 4208, 4218, 6034, 6034, 4220, 4207, 4197, 4235, 4236,
     4199,  677,  636,  620,  590, 4296, 4315, 4341, 4360, 4386,
      589, 4398, 4441, 4417, 4204, 4401, 4238, 4249, 4435, 4436,
     4340, 4260, 4328, 4444, 4433, 4440, 4432, 4471, 4434, 4438,
     4472, 4473, 4483, 4475, 4484, 4480, 4474, 4477, 4486,  588,
      587,  579, 4544,  578, 4556, 4599, 4575, 4644, 4618, 4689,

     4663, 4482, 4649, 4535, 4679, 4680,  588, 4597, 4677, 4560,
     4701, 4694, 4685, 4688, 4578, 4689, 4691, 4729, 4721, 4734,
      575,  546,  545,  544, 4794, 4813, 4839, 4858, 4884,  543,
     4896, 4939, 4915, 4917, 4726, 4724, 4934, 4943, 4725, 4954,
     4818, 4953, 4955, 4956, 4733, 4838, 4732, 4631, 4722,  542,
      541,  540,    0, 5016,  539, 5028, 5071, 5047, 5116, 5090,
     5161, 5135, 4935, 5129, 4931, 4736, 4782, 4786, 5163, 5058,
     4942, 4900, 5178, 5153, 4938, 5174, 5162, 5176,  502,  501,
      500,  499,  498, 5238, 5257, 5283, 5302, 5328,  497, 5340,
        0, 5359, 5156, 5165, 5360, 4990, 5023, 5050, 5282, 5175,

     5069, 5225, 5217, 5270, 5339, 5343, 5354, 5166,  495,  494,
     6034,  493,    0, 5420,  492, 5432, 5451, 5477, 5496,    0,
     5235, 5358, 5362, 5430, 5492, 5321, 5360, 5357, 5374, 5464,
     5501, 5502, 5507, 5419, 5482, 5477, 5509,  491,  489,  488,
      486, 5569, 5588, 5614,  452,    0, 5496, 5548, 5491, 5572,
     5602, 5497,    0, 5499, 5643, 5498, 5511, 5547, 5569, 5570,
     5571,  449,  447,  444,    0, 5660, 6034,    0, 5599, 5639,
     5616, 5643, 5640,    0, 5635, 5694, 5677,  441,  431,  414,
     6034, 5653, 5681, 5675, 5682, 5684, 5632, 5622, 5700, 5691,
     5685,  413,  402,  398,    0, 5699, 5712, 5719, 5664, 5708,

     5699, 5696, 6034, 5735, 5723, 5728, 5705,  396,  394,  393,
     5720, 5729, 5733, 5737, 5735, 6034, 5760, 5744, 5747, 5771,
      364,  363,  353,    0, 5757, 5765, 5752, 5778, 6034, 5787,
     5768,  349,  325,  314, 5774, 5775, 6034, 5779,    0,  310,
      309,    0, 5780,  307,  305,  303,  276,  267,  260,    0,
      254,  220, 6034, 5857, 5861, 5865, 5869, 5873, 5877, 5879,
      233, 5881, 5883, 5885, 5887, 5889, 5891, 5893, 5895, 5897,
     5899, 5903, 5905, 5907, 5909, 5911, 5913, 5915, 5917, 5919,
     5921, 5923, 5925, 5927, 5929, 5931, 5933, 5935, 5937, 5939,
     5941, 5943, 5945, 5947, 5949, 5951, 5953, 5955,  232, 5957,

     5959, 5961,  231, 5963, 5965, 5967,  230,  228, 5969, 5971,
     5973,  226, 5977, 5981, 5983, 5985,  223,  219, 5989, 5993,
     5995, 5997, 5999, 6001, 6003,  217, 6005, 6007, 6009, 6011,
     6013,  145, 6015, 6017, 6019,  131, 6021,  117, 6023, 6025,
     6027,   80, 6029
    } ;

static yyconst flex_int16_t yy_def[1144] =
    {   0,
     1053,    1, 1054, 1054, 1055, 1055, 1053, 1053, 1053, 1053,
     1053, 1056, 1057, 1058, 1053, 1053,   16, 1053, 1053, 1053,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1053, 1053, 1053, 1053, 1053, 1053, 1056, 1053,
     1057, 1058, 1053, 1053, 1059, 1053, 1060,   56, 1053, 1061,
     1053, 1053,   26,   26,   64,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1053, 1059, 1053, 1062,  124, 1063, 1053, 1061, 1053,
      130,   64,  132,  132,   26,   26,   26,   26,   26,   26,
      132,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1053,  194, 1064, 1065, 1066, 1053,  199,

     1053, 1053, 1053,  202,  132,  205,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1053,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  195,  195, 1065, 1067,
     1068, 1053, 1053, 1053,  273, 1053, 1053,  277, 1053,  279,
      205,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1053,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1069, 1053, 1070, 1071, 1053, 1053,
      350, 1053,  352, 1053, 1053, 1053, 1053, 1053,  357,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1072,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1053, 1053,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1073, 1074, 1075, 1053, 1053, 1053, 1053, 1053,  428,
     1053, 1053, 1053,  433, 1053,  435,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1053,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1053, 1053,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1070, 1053, 1076, 1077, 1053,

     1053, 1053,  502, 1053,  504, 1053, 1053, 1053, 1053, 1053,
      509,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1053,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1053, 1053,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1078, 1079, 1080, 1053, 1053, 1053, 1053,
     1053,  580, 1053, 1053,  584, 1053,  586,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1053,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1053, 1053,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1081, 1053, 1082, 1083, 1053, 1053,  648, 1053,
      650, 1053, 1053, 1053, 1053,  654,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1053,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1053,
     1053,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26, 1084, 1085, 1086, 1053, 1053, 1053, 1053,
      709, 1053,  712, 1053,  714,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1053,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1053, 1053,   26,   26,   26,   26,   26,
       26, 1087, 1053, 1088, 1089, 1053,  756, 1053,  758, 1053,
     1053, 1053, 1053,  762,   26,   26,   26,   26,   26,   26,
       26, 1053,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1090,
     1091, 1092, 1053, 1053, 1053, 1053,  795, 1053,  798, 1053,

      800,   26,   26,   26,   26,   26, 1053,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1093, 1053, 1094, 1095, 1053,  825, 1053,  827, 1053, 1053,
     1053, 1053,  831,   26,   26,   26,   26, 1053,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1096,
     1097, 1098, 1099, 1053, 1053, 1053, 1053,  856, 1053,  859,
     1053,  861,   26,   26,   26,   26, 1053, 1053,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1100, 1053,
     1101, 1053, 1102, 1053,  884, 1053,  886, 1053, 1053, 1053,
     1103,  890,   26,   26,   26, 1053, 1053,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26, 1104, 1105,
     1053, 1106, 1107, 1053, 1053, 1053,  916, 1053,  918, 1108,
       26,   26,   26,   26,   26, 1053, 1053,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1109, 1053, 1110,
     1111, 1053,  942, 1053, 1053, 1112,   26,   26,   26,   26,
       26, 1053, 1113,   26, 1114,   26,   26,   26,   26,   26,
       26, 1115, 1053, 1116, 1117, 1053, 1053, 1118,   26,   26,
       26,   26,   26, 1119, 1053, 1120,   26, 1121, 1122, 1123,
     1053,   26,   26,   26,   26, 1053, 1053, 1053,   26,   26,
       26, 1124, 1053, 1125, 1126,   26,   26,   26,   26, 1053,

     1053, 1053, 1053,   26,   26,   26,   26, 1127, 1128, 1129,
       26,   26,   26,   26, 1053, 1053, 1053,   26,   26,   26,
     1130, 1053, 1131, 1132,   26,   26,   26, 1053, 1053,   26,
       26, 1133, 1134, 1135,   26,   26, 1053,   26, 1136, 1053,
     1137, 1138,   26, 1053, 1139, 1140, 1133, 1053, 1141, 1142,
     1143, 1053,    0, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053
    } ;

static yyconst flex_int16_t yy_nxt[6110] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   29,
       36,   37,   38,   39,   40,   41,   29,   42,   29,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   29,   36,   37,   38,   39,
       40,   41,   29,   42,   29,   46,   47,   48,   47,   54,
     1053,   63,  887,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   64,   58,   58,   58,   58,   58,

       58,   87,   59,   63,  117,   63, 1053,   63,   63,   63,
       98,   63,   99,   46,   47,   63,   90,   82,   60, 1046,
       64,   58,   58,   58,   58,   58,   58,   87,   59,   63,
      117,   63,   63, 1044,   63,   63,   98,   63,   99,   48,
       47,   63,   90,   82,   60,   63,   63, 1034,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   57,   63,   64,
       64,   65,   66,   64,   67,   63,   68,   63,   63,   63,
       69,   63,   70,   63,   63,   63,   63,   63,   63,   71,
       63,   63,   63,   63,   63,   64,   64,   65,   66,   64,
       67,   63,   68,   63,   63,   63,   69,   63,   70,   63,

       63,   63,   63,   63,   63,   71,   63,   63,   63,   63,
       63,   64,   64,  133,   64,   46,   47,  120,  134, 1010,
       63,  981,   63,   63,  135,  980,   63,  140,  968,   72,
      946,   83,  941,  920,  883,  129,   63,   64,   64,  133,
       64, 1050,   63,  120,  134,   63,   63,   84,   63,   63,
      135,   85,   63,  140,   91,   72,   73,   83,   64,   64,
       92,   64,   63,   93,   88,  141,   63,   74,   63,   63,
       75,   63,   89,   84,  118, 1050,   63,   85,  119,   63,
       91, 1050,   73,   63,   64,   64,   92,   64, 1042,   93,
       88,  141,   63,   74,   63,   63,   75, 1053,   89,  145,

      118,  100,   63,   64,  119,   63,   76,   77,  136,   63,
      146,   78,  101,  137,   63,  102,   79,   80,   63,  148,
       63,   63,   63,   81, 1050,  145, 1042,  100, 1047,   64,
     1042, 1024,   76,   77,  136, 1042,  146,   78,  101,  137,
       63,  102,   79,   80,   63,  148, 1024,   63,   63,   81,
       63,   63,   63,   63,   63,   63,   63,   63,   63, 1053,
      121,   63,   63,   63,   63,   63,   63,   94,   63,  152,
      911,   95,   63,  144, 1024,   63,   63,   96,  139,   63,
       63,   86,   97,   63,  995, 1032,  121,   63,   63,   63,
       63,   63,   63,   94,   63,  152,  103,   95,   63,  144,

      104,   63,   63,   96,  139,   63,   63,   86,   97,   63,
      105,  112,  113,  138, 1024,  995,   63,  882,  147,  995,
      142,  114,  103,  965,   63,  149,  104,   63,  143,  115,
       63,  161,   63,   63,  853,  995,  105,   63,  116,  138,
       63,   63,   63,  106,  147,  107,  142,  114,  108,  109,
       63,  149,  965,   63,  143,  115,   63,  161,   63,   63,
      110,  111,  992,   63,  116,  965,   63,   63,  913,  106,
      824,  107,  178,  891,  108,  109,  126,  126,  126,  126,
      126,  126,  126,  126,  126,   63,  110,  111,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  125,  178,  126,

      126,  126,  126,  126,  126,  150,   59,  965,  171,  913,
      882,   63,  128,  857,  913,  882,  938,   63,  832,  913,
      911,  882,  824,  755,   63,  126,  126,  126,  126,  126,
      126,  150,   59,  130,  130,  130,  130,  130,  130,  130,
      130,  130,   63,   63,  131,  131,  131,  131,  131,  131,
       63,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      796,  882,  824,  128,  763,  853,  824,  755,   63,  153,
      131,  131,  131,  131,  131,  131,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  125,   63,  132,  132,  132,
      132,  132,  132,  151,   68,  153,  850,  838,   63,  710,

      824,  165,   63,  156,  154,  157,  155,   63,  755,  646,
      655,  128,   63,  132,  132,  132,  132,  132,  132,  151,
       68,   63,   63,   63,   63,   63,  164,  165,   63,  156,
      154,  157,  155,   63,  158,  162,  168,  169,   63,  159,
       63,  755,   63,  163,  166,  170,   63,   63,   63,   63,
       63,   63,  164,  160,   63,  181,   63,  646,  173,  167,
      158,  162,  168,  169,   63,  159,   63,  172,   63,  163,
      166,  170,   63,   63,   63,   63,   63,  180,  174,  160,
       63,  181,   63,   63,  173,  167,  175,  179,  176,  177,
       63,  182,  185,  172,  186,   63,   63,   63,  128,   63,

       63,   63,  581,  180,  174,  188,  755,  183,  646,   63,
      190,   63,  175,  179,  176,  177,   63,  182,  185,   63,
      189,   63,   63,   63,  184,  206,  187,   63,   63,  207,
       63,  188,   63,  183,   63,  191,  190,   63,  192,  213,
      208,   63,   63,   63,   63,   63,  189,  193,  218,   63,
      184,  206,  187,   63,   63,  207,   63,  752,   63,  510,
       63,  191,  128,  646,  192,  213,  208,   63,   63,   63,
       63,  499,  499,  193,  218,   63,  194,  194,  194,  194,
      194,  194,  194,  194,  194,   57,   63,  195,  195,  195,
      195,  195,  195, 1053,   59,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  216,   63,  429,  646,  499,  128,
      358,  128,   63,  195,  195,  195,  195,  195,  195,  221,
       59,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      216,   63,  200,  200,  200,  200,  200,  200,  499,   63,
      348,  574,  220,  274,  499,  221,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  348,  348,   63,  200,  200,
      200,  200,  200,  200,  201,   63,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  203,   63,  204,  204,  204,
      204,  204,  204,   63, 1053,  203,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  128,  348,  198,  128, 1053,

      348,  198,   63,  204,  204,  204,  204,  204,  204,  205,
      205,  205,  205,  205,  205,  205,  205,  205,   57,  212,
      205,  205,  205,  205,  205,  205,  209,  210,  211,   63,
      345, 1053,   63,   63,  214,  217,   63,   63,  316,  128,
      215,   63,  198,  198,  282,  212,  205,  205,  205,  205,
      205,  205,  209,  210,  211,   63,   63,  219,   63,   63,
      214,  217,   63,   63,  222,  225,  215,   63,  223,  224,
      282,   63,   63,   63,  226,  227,  198,   63,  228,  128,
      231,   63,   63,  219,   63,  128,  232,  229,   63,  235,
      222,  225,   63,  230,  223,  224,   63,   63,   63,   63,

      226,  227,   63,   63,  228,   63,  231,   63,  233,  236,
       63,   63,  232,  229,   63,  234,  237,  242,   63,  230,
      238,   63,   63,   63,   63,   63,  241,   63,   63,   63,
       63,   63,  239,  240,  233,  236,  246,   63,  250,  243,
       52,  234,  237,  242,  247,   63,  238,   63,  244,   63,
       63,   63,  245,   63,  248,   63,   63,   63,   63,   63,
       63,  249,  246,  251,  250,  243,   63,   63,   53,   63,
      247,   63,  252,   63,  244,  256,  253,   63,  245,  254,
      248,   50,   63,   63,   63,   63,   63,  249,   63,  251,
      122,  255,   63,   63,   63,   63,  257,   63,  252,   63,

      258,  260,  253,   63,  259,  254,   63,  263,   63,   63,
       62,  266,   63,  261,   63,  262,  264,  255,   63,   63,
       63,   63,  257,   63,   61,   63,  258,  260,   63,   63,
      259,   63,   63,  263,   63,   63,  265,  266,   63,  261,
       53,  262,  264,   50,   63,   63,  285,   63,   63,   63,
      286,   63,   63,   63,   63,   63,  287,   63, 1053,   44,
       63,   44,  265,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  285, 1053,   63,   63,  286,  288,   63,   63,
      267,  267,  267,  267,  267,  267,  267,  267,  267,   57,
       63,  268,  268,  268,  268,  268,  268, 1053,   59,  278,

      278,  278,  278,  278,  278,  278,  278,  278, 1053, 1053,
     1053,   63, 1053, 1053, 1053, 1053,   63,  268,  268,  268,
      268,  268,  268,  297,   59,  272,   63,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  274,   63,  275,  275,
      275,  275,  275,  275, 1053,   63, 1053, 1053, 1053,  297,
     1053, 1053,   63, 1053, 1053, 1053,  291, 1053, 1053, 1053,
     1053, 1053, 1053,   63,  275,  275,  275,  275,  275,  275,
      201,   63,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  203,  291,  278,  278,  278,  278,  278,  278,   63,
      283,  267,  267,  267,  267,  267,  267,  267,  267,  267,

     1053, 1053, 1053, 1053, 1053, 1053,  304,   63,  284,  278,
      278,  278,  278,  278,  278,  279,  279,  279,  279,  279,
      279,  279,  279,  279,   63,  289,  280,  280,  280,  280,
      280,  280,  304,   63,  284, 1053, 1053, 1053, 1053, 1053,
     1053,   63,  293, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
       63,  289,  280,  280,  280,  280,  280,  280,  281,  281,
      281,  281,  281,  281,  281,  281,  281,   63,  292,  281,
      281,  281,  281,  281,  281,  290,   63,   63,  294,  295,
       63,   63,  299,  302, 1053,  301, 1053,   63,   63, 1053,
     1053,  308, 1053,  298,  292,  281,  281,  281,  281,  281,

      281,  290,   63,   63,  294,  295,   63,   63,  296,   63,
      300,  301,  303,   63,   63,  305,   63,   63,  306,  298,
       63,   63,   63,  307,   63,   63,   63,  315,   63, 1053,
     1053, 1053, 1053,  320,  296,   63,  300, 1053,  303,   63,
     1053,  305,   63,   63,  306, 1053,   63,   63,   63,  307,
       63,   63,   63,  309,   63,  313,  314,  317,  319,  320,
       63,   63,  310,  311,  312,   63,  321, 1053,   63,   63,
      323,   63,  318, 1053,   63,   63,   63,  322, 1053,  309,
     1053,  313,  314,  317,  319, 1053,   63,   63,  310,  311,
      312,  327,  321,   63,   63,   63,  323,   63,  318,  326,

       63,   63,   63,  322,  324,  330,   63,  332,  325,   63,
      328,  329,   63,  331, 1053, 1053,   63,  327,   63,   63,
       63,   63,  340,   63,  333,  326,  334,  338,   63,  336,
      324,  330,   63,  332,  325,   63,  328,  329,   63,  331,
       63,  335,   63,   63,   63,   63,   63,   63,  339,   63,
      333,  337,  334,  338,   63,  336,   63,   63,   63,   63,
      341,  342,  343,  344,  360,   63,   63,  335,   63,   63,
      361,   63,   63, 1053,  339,   63, 1053,  337,   63,   63,
       63, 1053,   63,   63,   63,   63,  341,  342,  343, 1053,
      360,   63,  376,  362,   63,   63,  361,   63,   63,   63,

     1053,   63,  368, 1053,   63,   63,   63,  349,  349,  349,
      349,  349,  349,  349,  349,  349, 1053, 1053,  376,  362,
     1053,   63, 1053,   63,  272,   63,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  274,   63,  351,  351,  351,
      351,  351,  351, 1053, 1053,  351,  351,  351,  351,  351,
      351,  351,  351,  351, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053,   63,  351,  351,  351,  351,  351,  351,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  367,   63,
      353,  353,  353,  353,  353,  353,  354,   63,  276,  276,
      276,  276,  276,  276,  276,  276,  276, 1053,  369, 1053,

     1053, 1053, 1053, 1053,  367,   63,  353,  353,  353,  353,
      353,  353,  201,   63,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  203,  393,  356,  356,  356,  356,  356,
      356, 1053,   63,  356,  356,  356,  356,  356,  356,  356,
      356,  356, 1053,   63, 1053, 1053, 1053, 1053, 1053, 1053,
      393,  356,  356,  356,  356,  356,  356,  201,   63,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  358,   63,
      359,  359,  359,  359,  359,  359, 1053,  363,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  370,   63,   63,
      374,   63,  364,  365,  366,  371,  359,  359,  359,  359,

      359,  359,   63,  363,  372,  379,  375,   63,  373,   63,
      378,  377, 1053,  370,   63,   63,  374,   63,  364,  365,
      366,  371,   63,   63,  382,  385,  392,   63,   63,  383,
      372,  384,  375,   63,  373,   63,  378,  377,  380,   63,
       63,   63,  386,   63,  381, 1053,   63,  387,   63,   63,
     1053,  385, 1053,   63,   63,  383,   63,  384,   63,  389,
       63, 1053, 1053,  391,  380,   63,   63,   63,  386,   63,
      381,  388,   63,  387, 1053,   63,  398,   63,  394,  395,
       63,  390,   63,   63,   63,  389,   63,   63,  401,  391,
      397,   63,   63,  400,  396,  399,   63,  388, 1053,  402,

       63,   63,  398,   63,  394,  395,   63,  390,   63,   63,
      406,   63,  404,   63,  401,   63,  397,   63,   63,  400,
      396,  399,   63,  403,   63,  402,   63,  405,   63,   63,
      407,   63,   63,   63,   63,  408,   63,   63,  404,  409,
       63,   63,  410,   63,   63, 1053,  411,  412,  419,  403,
       63,   63,   63,  405,   63,   63,  407,   63,  413,   63,
      414,  408,   63,   63,   63,  409,   63,   63,  410,   63,
       63,  416,  411,  412,   63,   63,  415,   63,   63,   63,
      417,  418,   63,   63,  413,  420,  414,  421,   63,   63,
       63,   63, 1053,   63, 1053, 1053, 1053,  416, 1053, 1053,

       63,   63,  415,  473,   63,   63,  417,  418,   63,   63,
     1053,  420, 1053,  421,   63, 1053,  425,   63,  349,  349,
      349,  349,  349,  349,  349,  349,  349, 1053, 1053,  473,
       63,  272, 1053,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  274, 1053,  427,  427,  427,  427,  427,  427,
     1053,  474,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      427,  427,  427,  427,  427,  427,  272,  474,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  429,  438,  430,
      430,  430,  430,  430,  430, 1053,   63,  430,  430,  430,

      430,  430,  430,  430,  430,  430, 1053, 1053,   63, 1053,
     1053,  437, 1053, 1053,  438,  430,  430,  430,  430,  430,
      430,  201,   63,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  203,  201,   63,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  358,   63,  434,  434,  434,  434,
      434,  434, 1053, 1053,  434,  434,  434,  434,  434,  434,
      434,  434,  434, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053,   63,  434,  434,  434,  434,  434,  434,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  440,   63,  436,
      436,  436,  436,  436,  436,  439,  441,   63,  442, 1053,

      445, 1053,   63,  451, 1053, 1053,   63,   63,  461,  443,
       63,  444,   63,  440,   63,  436,  436,  436,  436,  436,
      436,  439,  441,   63,  442,   63,  445,   63,   63,  451,
      452,  446,   63,   63,  461,  443,   63,  444,   63,   63,
     1053, 1053,   63, 1053, 1053,  453, 1053, 1053, 1053, 1053,
     1053,   63,  450,   63, 1053,  454,  452,  446,   63,   63,
     1053, 1053, 1053,  456, 1053,   63,  447,  447,   63,  447,
      447,  447,  447,  447,  447,  448,  458,  447,  450,   63,
       63,  454,  455,  457,   63,   63,  459,  447,  447,  456,
       63,   63,  460,   63,  462,   63,  464, 1053, 1053,   63,

       63,  465,  458,  463,   63,   63,   63,   63,  455,  457,
       63,  467,  459, 1053,  468,  466,   63,   63,  460,   63,
      462,   63,  464,   63,   63,   63,   63,  465, 1053,  463,
       63,   63,  470,   63,  469,  475,   63,  467, 1053,  471,
      468,  466,   63,   63,   63,   63,  472, 1053,  476,   63,
       63,   63,   63,  477,  480, 1053,   63,   63,  470,  479,
      469,  475,  478,   63,   63,  471,   63, 1053,   63,   63,
       63,   63,  472,   63,  476,  483,  484,   63,   63,  477,
      480,  481,   63,  485, 1053,  479,   63,   63,  478,   63,
       63, 1053,   63,   63,  482,  486,   63,   63,  488,   63,

     1053,  483,  487,   63,  489,   63,  490,  481,   63,  491,
       63,  494,   63,   63,   63,   63,   63,   63,  493,   63,
      482,  486,   63,   63,  488,  492,   63,   63,  487,   63,
      489,   63,  490, 1053,   63,  491,   63,  495,  516,  524,
       63,   63,   63,   63,  493,   63, 1053,   63, 1053,   63,
     1053,  492,   63,   63,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  495, 1053,  524, 1053, 1053, 1053, 1053,
     1053,   63,   63,   63,  272,   63,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  274,  272, 1053,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  429,   63,  503,

      503,  503,  503,  503,  503, 1053, 1053,  503,  503,  503,
      503,  503,  503,  503,  503,  503, 1053, 1053, 1053, 1053,
     1053, 1053, 1053,  537, 1053,  503,  503,  503,  503,  503,
      503,  504,  504,  504,  504,  504,  504,  504,  504,  504,
      520,   63,  505,  505,  505,  505,  505,  505,  506,   63,
      431,  431,  431,  431,  431,  431,  431,  431,  431, 1053,
      552, 1053, 1053, 1053, 1053, 1053,  520,   63,  505,  505,
      505,  505,  505,  505,  201,   63,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  201,  552,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  358,  529,  508,  508,

      508,  508,  508,  508, 1053,   63,  508,  508,  508,  508,
      508,  508,  508,  508,  508, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053,  529,  508,  508,  508,  508,  508,  508,
      201,   63,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  510,  521,  511,  511,  511,  511,  511,  511, 1053,
     1053,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      515,   63,   63,   63,  517,  518,  519,  522,  521,  511,
      511,  511,  511,  511,  511,  512,  523,   63,  513,   63,
     1053,   63, 1053,  534,  514, 1053,  515,   63,   63,   63,
      517,  518,  519,  522,   63,  527,   63, 1053,  525,   63,

      528,  512,  523,   63,  513,   63,   63,   63,  526,  534,
      514,   63,  533,  536, 1053,  542,   63,  527, 1053,   63,
       63,  527,   63,  530,  525,   63,  528,  538,  535,  531,
      539,  532,   63,   63,  526,   63,   63,   63,  533,  536,
      544,  542,   63,  527,  540,   63,  545,   63,  541,  530,
       63,  543,   63,  538,  535,  531,  539,  532,   63,   63,
       63,   63,   63,  546,   63,  547,  544,   63,  549,  548,
      540,  553,  545,   63,  541,  551,   63,  543,   63,   63,
       63,   63,  554,   63,   63,   63,   63,   63,  555,  546,
       63,  547,   63,   63,  549,  548,  550,  553,  557,   63,

       63,  551,   63,   63,  556,   63,   63,   63,  554,   63,
      559,   63,  565,   63,  555,  558,   63,  561,   63, 1053,
      560,  563,  550,  564,  557,   63,   63,   63,   63,   63,
      556,  562,   63,   63, 1053,   63,  559,   63,  565,   63,
       63,  558,   63,  561,   63,  566,  560,  563,  567,  564,
       63,  596,  569,   63,   63,  568,  571,  562,   63,   63,
      570,   63,   63,   63,   63,   63,   63,   63,   63,  573,
       63,  566,   63,  572,  567,   63,   63,  596,  569, 1053,
       63,  568,  571, 1053, 1053, 1053,  570, 1053,   63, 1053,
       63, 1053, 1053,   63,   63,  573, 1053,  600,   63,  572,

      577,   63,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  272, 1053,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  272,  600,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  429, 1053,  579,  579,  579,  579,  579,
      579, 1053,   63,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  579,  579,  579,  579,  579,  579,  272,   63,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  581,  591,
      582,  582,  582,  582,  582,  582, 1053,   63,  582,  582,
      582,  582,  582,  582,  582,  582,  582, 1053, 1053,   63,

     1053, 1053, 1053, 1053, 1053,  591,  582,  582,  582,  582,
      582,  582,  201,   63,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  358,  201,   63,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  510, 1053,  585,  585,  585,
      585,  585,  585, 1053, 1053,  585,  585,  585,  585,  585,
      585,  585,  585,  585, 1053, 1053,  594, 1053, 1053, 1053,
     1053, 1053,  588,  585,  585,  585,  585,  585,  585,  586,
      586,  586,  586,  586,  586,  586,  586,  586,   63,  589,
      587,  587,  587,  587,  587,  587,   63,  590,  588,  592,
       63,  593, 1053,  597,   63,   63,   63,   63,   63,   63,

      599,  598,  595, 1053,   63,  589,  587,  587,  587,  587,
      587,  587,   63,  590,  602,  592,   63,  593,   63,  597,
       63,   63,   63,   63,   63,   63,  599,  598,  595,  601,
      603,  604,   63,  605,   63,  606,  607,  609,   63,  608,
      602, 1053,   63,   63,   63,  610,   63,  618,   63,   63,
      612,   63,   63,   63, 1053,  601,  603,  604,   63,  605,
       63,  606,  607,  609,   63,  608, 1053,   63,   63,   63,
       63,  610,   63,  617,   63,   63,  612,   63,   63,   63,
      611,   63,   63,  613,  614,  615,  619,  616,  621,  620,
       63,   63,  622,   63,   63,   63,   63,   63,  623,  617,

       63,   63,   63,  624,  625, 1053,  611,   63,   63,   63,
      626,   63,  619,   63,  621,  620,   63,   63,  622,  629,
       63,   63,   63,   63,  623,  627,   63,   63,   63,  624,
      625,  628,   63,  632,  630,   63,  626,   63,  631,   63,
      634,   63, 1053,  635,  633,  629,  637,   63,   63,   63,
       63,  627,   63,  636,   63,   63,   63,  628,   63,  632,
       63,  638,   63,   63,  631,   63,  634,   63,   63,  635,
      633,  639,  637,   63,  640,   63,   63,  641,   63,  636,
       63,   63,   63,  661,   63,   63,   63,  638,   63,   63,
       63,   63,   63,  642,   63,   63,  668,  639,   63, 1053,

      640, 1053, 1053,  641, 1053, 1053, 1053, 1053, 1053,  661,
       63,   63, 1053, 1053, 1053, 1053,   63, 1053,   63,  642,
     1053,   63,  668, 1053,   63,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  272, 1053,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  429,  272, 1053,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  581, 1053,  649,
      649,  649,  649,  649,  649, 1053, 1053,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  649,  649,  649,  649,  649,
      649,  650,  650,  650,  650,  650,  650,  650,  650,  650,

      657,  660,  651,  651,  651,  651,  651,  651, 1053,   63,
      653,  653,  653,  653,  653,  653,  653,  653,  653, 1053,
       63, 1053, 1053, 1053, 1053, 1053,  657,  660,  651,  651,
      651,  651,  651,  651,  201,   63,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  510,   63,  653,  653,  653,
      653,  653,  653, 1053,   63,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  653,  653,  653,  653,  653,  653,  201,
       63,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      655,  658,  656,  656,  656,  656,  656,  656,  659,  664,

       63,  662,  663,   63,  667,   63, 1053, 1053,   63, 1053,
       63, 1053, 1053,  669,  665, 1053,  666,  658,  656,  656,
      656,  656,  656,  656,  659,  664,   63,  662,  663,   63,
       63,   63,   63,   63,   63,  674,   63,  676,   63,  669,
      665,   63,  666,  671,  670,  672,  673,  675,  678,   63,
       63,   63,   63,  679,   63,   63,   63,   63,   63,   63,
      684,  674,  677,  676,   63,   63,  680,   63,   63,  671,
      670,  672,  673,  675,  678,   63,   63,   63,   63,  683,
       63,   63,   63,   63,  685,  686,  681,   63,  677,  682,
       63,   63,  680,   63,   63,  687,  688,  689,   63,   63,

      690,  691,   63,  697,   63,   63,  693,  692,   63,   63,
     1053,  686,  695,   63,   63,   63,   63,  694,   63,   63,
       63,   63,  688,  689,   63,   63,  690,  691,   63,   63,
       63,   63,  693,  692,  696,   63,  699,   63,  695,   63,
       63,   63,  700,  694,   63,  698,   63,   63,   63,   63,
       63,  701,   63,   63,   63,   63,   63,   63, 1053, 1053,
      696,   63,  699,   63,  716,   63,   63,  726,  700,  702,
      703,  698,  731, 1053,   63,   63,   63,  701,   63,   63,
       63, 1053,   63,   63,   63,   63,   63,   63,  717, 1053,
      716,  728,   63,  726, 1053,  702,  703, 1053,  731,  708,

      708,  708,  708,  708,  708,  708,  708,  708, 1053, 1053,
       63,   63,   63,  272,  717,  707,  707,  707,  707,  707,
      707,  707,  707,  707,  581,   63,  708,  708,  708,  708,
      708,  708, 1053,   63,  711,  711,  711,  711,  711,  711,
      711,  711,  711, 1053,   63, 1053, 1053, 1053, 1053,  740,
     1053,   63,  708,  708,  708,  708,  708,  708,  272,   63,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  710,
       63,  711,  711,  711,  711,  711,  711,  201,   63,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  510, 1053,
      738, 1053, 1053, 1053, 1053, 1053, 1053,  711,  711,  711,

      711,  711,  711,  201,   63,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  655,   63,  713,  713,  713,  713,
      713,  713, 1053, 1053,  713,  713,  713,  713,  713,  713,
      713,  713,  713, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053,   63,  713,  713,  713,  713,  713,  713,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  721,  718,  715,
      715,  715,  715,  715,  715,   63,  719,  720,   63,   63,
      722, 1053,  724,   63, 1053,  727,   63,   63, 1053, 1053,
      723, 1053,   63,  721,  718,  715,  715,  715,  715,  715,
      715,   63,  719,  720,   63,   63,  722,   63,  724,   63,

      725,  727,   63,   63,  729,  734,  723,  730,   63,   63,
      732,  733,  735,  741,  736,  737, 1053,   63,  739, 1053,
       63,   63,   63,   63, 1053,   63,  725,   63,   63,  743,
      729,  734,   63,  730,   63,   63,  732,  733,  735,  741,
      736,   63,   63,   63,  742,   63,   63,   63,   63,   63,
       63,   63,  744,   63,   63,  743,  745,   63,   63,   63,
       63,   63,  746,   63,  747,  748,   63,   63,   63, 1053,
      742,   63,   63,   63,   63,   63,   63,   63,  744,  749,
      750,   63,  745,   63,  751,   63, 1053,   63,  746,   63,
      747,  748,   63, 1053, 1053,   63,   63,   63,   63,   63,

       63,   63,   63,   63,  770,  749,  750,   63, 1053,  272,
      751,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      581,   63,   63,   63, 1053, 1053, 1053,   63,   63,  272,
      770,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      710,  772,  757,  757,  757,  757,  757,  757, 1053, 1053,
      757,  757,  757,  757,  757,  757,  757,  757,  757, 1053,
     1053, 1053, 1053, 1053, 1053, 1053,   63,  772,  757,  757,
      757,  757,  757,  757,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  767,   63,  759,  759,  759,  759,  759,
      759, 1053,   63,  761,  761,  761,  761,  761,  761,  761,

      761,  761, 1053, 1053, 1053, 1053, 1053, 1053, 1053,  767,
       63,  759,  759,  759,  759,  759,  759,  201, 1053,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  655,  769,
      761,  761,  761,  761,  761,  761, 1053,   63,  764,  764,
      764,  764,  764,  764,  764,  764,  764, 1053, 1053, 1053,
     1053, 1053, 1053, 1053,  778,  769,  761,  761,  761,  761,
      761,  761,  201,   63,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  763,  765,  764,  764,  764,  764,  764,
      764,  766,  768,  771,  773,  774,   63,   63,   63,   63,
       63,  775,  776, 1053,   63,  777,   63,   63,   63,   63,

      765,  764,  764,  764,  764,  764,  764,  766,  768,  771,
      773,  774,   63,   63,   63,   63,   63,  775,  776,  779,
       63,  777,   63,   63,   63,   63,   63,  780,   63,  781,
       63,   63,   63,  782,  783, 1053,   63, 1053,  786,  787,
       63, 1053,   63,  802,  784,  779,   63,   63,  785,   63,
       63,   63,   63,  780,   63,  781,   63,   63,   63,  782,
      783,   63,   63,   63,  786,  787,   63,  789,   63,  802,
      784,  788,   63,   63,  785,   63,   63,   63,   63,   63,
     1053,   63, 1053, 1053, 1053, 1053, 1053,   63, 1053,   63,
     1053, 1053,   63,  789, 1053, 1053, 1053,  788, 1053, 1053,

      807, 1053, 1053, 1053,   63,   63,  272,   63,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  710,   63,  794,
      794,  794,  794,  794,  794, 1053,  807,  794,  794,  794,
      794,  794,  794,  794,  794,  794, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053,  794,  794,  794,  794,  794,
      794,  272, 1053,  795,  795,  795,  795,  795,  795,  795,
      795,  795,  796,  806,  797,  797,  797,  797,  797,  797,
     1053,   63,  797,  797,  797,  797,  797,  797,  797,  797,
      797, 1053, 1053,   63, 1053, 1053, 1053, 1053, 1053,  806,
      797,  797,  797,  797,  797,  797,  201,   63,  432,  432,

      432,  432,  432,  432,  432,  432,  432,  655,  201,   63,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  763,
     1053,  799,  799,  799,  799,  799,  799, 1053, 1053,  799,
      799,  799,  799,  799,  799,  799,  799,  799, 1053, 1053,
     1053, 1053, 1053, 1053,   63, 1053,  803,  799,  799,  799,
      799,  799,  799,  800,  800,  800,  800,  800,  800,  800,
      800,  800,  804,  805,  801,  801,  801,  801,  801,  801,
       63,  808,  803,  809,  810,   63,   63,   63,   63,   63,
     1053,   63, 1053,   63,  816, 1053, 1053,   63,  804,  805,
      801,  801,  801,  801,  801,  801,  814,  808,  813,  809,

      810,   63,   63,   63,   63,   63,  811,   63,  818,   63,
      815,  817,  812,   63,   63,   63,   63,   63,   63,  819,
       63,  820,  814,   63,  813,  834,   63,   63, 1053,   63,
     1053, 1053,  811, 1053,  818, 1053,  815,  817,  812, 1053,
       63,   63,   63,   63,   63,  819,   63,  820, 1053,   63,
     1053,  834,   63,   63,  272,   63,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  710,  272, 1053,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  796,   63,  826,
      826,  826,  826,  826,  826, 1053, 1053,  826,  826,  826,
      826,  826,  826,  826,  826,  826, 1053, 1053, 1053, 1053,

     1053, 1053, 1053,   63,   63,  826,  826,  826,  826,  826,
      826,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      839,   63,  828,  828,  828,  828,  828,  828, 1053,   63,
      830,  830,  830,  830,  830,  830,  830,  830,  830, 1053,
       63, 1053, 1053, 1053, 1053, 1053,  839,   63,  828,  828,
      828,  828,  828,  828,  201, 1053,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  763,   63,  830,  830,  830,
      830,  830,  830, 1053,   63,  833,  833,  833,  833,  833,
      833,  833,  833,  833, 1053,  835,  840, 1053, 1053, 1053,
     1053, 1053,   63,  830,  830,  830,  830,  830,  830,  201,

       63,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      832,  835,  833,  833,  833,  833,  833,  833,   63,  836,
       63,  837,   63,   63,  842,  843,  845,  841,   63,  844,
     1053,   63,   63,  846,   63,  864, 1053,   63,  833,  833,
      833,  833,  833,  833,   63,  836,   63,  837,   63,   63,
      842,  843,  845,  841,   63,  844,  847,   63,   63,  846,
       63,  849,  848,   63,   63,   63,  869,   63,   63,   63,
       63,  865,   63,  876,  878,   63,   63,   63, 1053,   63,
     1053, 1053,  847, 1053, 1053, 1053, 1053,  849,  848, 1053,
       63,   63,  869,   63,   63,   63, 1053,  865,   63,  876,

      878,   63,   63,   63,  272,   63,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  796,  896,  855,  855,  855,
      855,  855,  855, 1053,  897,  855,  855,  855,  855,  855,
      855,  855,  855,  855, 1053,  872, 1053, 1053, 1053, 1053,
     1053, 1053,  896,  855,  855,  855,  855,  855,  855,  272,
      897,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      857,   63,  858,  858,  858,  858,  858,  858, 1053,  877,
      858,  858,  858,  858,  858,  858,  858,  858,  858, 1053,
     1053,   63, 1053, 1053, 1053, 1053, 1053,   63,  858,  858,
      858,  858,  858,  858,  201,  877,  432,  432,  432,  432,

      432,  432,  432,  432,  432,  763,  201,   63,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  832, 1053,  860,
      860,  860,  860,  860,  860, 1053, 1053,  860,  860,  860,
      860,  860,  860,  860,  860,  860, 1053, 1053, 1053, 1053,
      895, 1053, 1053,   63,  863,  860,  860,  860,  860,  860,
      860,  861,  861,  861,  861,  861,  861,  861,  861,  861,
       63,  866,  862,  862,  862,  862,  862,  862,  867,   63,
      863, 1053, 1053, 1053,   63,  893,  873,   63,   63,  870,
      900,   63,  874,  875,  868,   63,   63,  866,  862,  862,
      862,  862,  862,  862,  867,  871,   63,   63,   63,   63,

       63,  893,  873,   63,   63,  870,  900,   63,  874,  875,
      868,   63, 1053,  926, 1053, 1053, 1053, 1053, 1053, 1053,
     1053,  871,   63,   63,   63,   63,  272, 1053,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  796,  272,  926,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  857,
      927,  885,  885,  885,  885,  885,  885, 1053, 1053,  885,
      885,  885,  885,  885,  885,  885,  885,  885, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053,  927,  885,  885,  885,
      885,  885,  885,  886,  886,  886,  886,  886,  886,  886,
      886,  886,  899,   63,  887,  887,  887,  887,  887,  887,

     1053,   63,  889,  889,  889,  889,  889,  889,  889,  889,
      889, 1053,   63, 1053, 1053, 1053, 1053, 1053,  899,   63,
      887,  887,  887,  887,  887,  887,  201,   63,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  832,   63,  889,
      889,  889,  889,  889,  889, 1053, 1053,  892,  892,  892,
      892,  892,  892,  892,  892,  892, 1053,  894, 1053, 1053,
     1053, 1053, 1053, 1053, 1053,  889,  889,  889,  889,  889,
      889,  201,   63,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  891,  894,  892,  892,  892,  892,  892,  892,
      898,  901,  902,  903,  905,  904,   63,  907,   63,   63,

      906,  937,  929,  921,  922,   63,   63,  908,   63,   63,
      892,  892,  892,  892,  892,  892,  898,   63,   63,   63,
      905,   63,   63,  907, 1053,   63,  906,  937,  929,  921,
      922,   63,   63,  908,   63,   63, 1053,  932, 1053,  930,
     1053, 1053,  931,   63,   63,   63, 1053,   63,  272, 1053,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  857,
       63,  915,  915,  915,  915,  915,  915, 1053,   63,  915,
      915,  915,  915,  915,  915,  915,  915,  915,   63, 1053,
     1053, 1053, 1053,  933, 1053, 1053,   63,  915,  915,  915,
      915,  915,  915,  272,   63,  916,  916,  916,  916,  916,

      916,  916,  916,  916,   63,  928,  917,  917,  917,  917,
      917,  917, 1053,   63,  917,  917,  917,  917,  917,  917,
      917,  917,  917, 1053, 1053,   63, 1053, 1053, 1053, 1053,
     1053,  928,  917,  917,  917,  917,  917,  917,  201,   63,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  832,
      201,   63,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  891,  952,  919,  919,  919,  919,  919,  919, 1053,
      935,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      934,  936,   63,  923,  947,  953,   63,  948,  952,  919,
      919,  919,  919,  919,  919,  924,  935,   63,  954,  955,

       63,   63,  925,   63, 1053,   63,  934,  936,   63,  923,
      947,  953,   63,  948, 1053, 1053, 1053,   63, 1053, 1053,
     1053,  924, 1053,   63,  954,  955,   63,   63,  925,   63,
      272,   63,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  857,  272,   63,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  949, 1053,  943,  943,  943,  943,  943,
      943, 1053,   63,  943,  943,  943,  943,  943,  943,  943,
      943,  943, 1053,   63, 1053, 1053, 1053, 1053, 1053,  949,
      956,  943,  943,  943,  943,  943,  943,  201,   63,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  891,   63,

      945,  945,  945,  945,  945,  945, 1053,   63,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  950,  958,  957,
       63,  959,  960,  951, 1053,   63,  945,  945,  945,  945,
      945,  945,  969,   63,   63,   63,  961,  971,  974,   63,
      976,   63,   63,  950,   63,   63,   63, 1053,  960,  951,
       63,   63,   63, 1053,   63, 1053, 1053, 1053,  969, 1053,
       63,   63,  961,  971,  974,   63,  976,   63,   63, 1053,
       63,   63, 1053,  970, 1053, 1053,   63, 1053,   63,  272,
       63,  966,  966,  966,  966,  966,  966,  966,  966,  966,
       63,   63,  967,  967,  967,  967,  967,  967, 1053,  970,

      967,  967,  967,  967,  967,  967,  967,  967,  967, 1053,
      972, 1053,   63,   63,   63,   63,   63,   63,  967,  967,
      967,  967,  967,  967,  201,  983,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  891,  972,  973,   63,   63,
       63,   63,   63,  975,  975,   63,  975,  975,  975,  975,
      975,  975,  984, 1053,  975, 1002, 1053, 1053, 1003,   63,
     1053,  987,  988,  973,  975,  975,  982,  985,   63, 1053,
      272,   63,  501,  501,  501,  501,  501,  501,  501,  501,
      501, 1002,   63,   63, 1003,   63,   63,  987,  988, 1053,
     1053,  996,  982,  985,  986,  986,   63,  986,  986,  986,

      986,  986,  986,  990,  991,  986,  997, 1014,   63,   63,
     1000, 1001,   63,  998, 1006,  986,  986,  996,   63,  999,
       63, 1007,   63, 1053,   63,   63, 1004, 1005,   63,  990,
      991, 1015,  997, 1014,   63, 1016, 1000, 1001, 1017,  998,
     1006, 1011,   63,   63,   63,  999,   63, 1007,   63, 1012,
       63,   63, 1004, 1005,   63,   63, 1013, 1015, 1018, 1019,
       63, 1016,   63,   63, 1017, 1025,   63, 1011,   63,   63,
     1020,   63,   63, 1026,   63, 1012,   63, 1028,   63, 1027,
       63,   63, 1013, 1029, 1018, 1019, 1030,   63,   63,   63,
       63, 1025,   63, 1035, 1031,   63, 1020,   63,   63, 1026,

       63, 1037,   63, 1028,   63, 1027,   63, 1036,   63, 1029,
     1038,   63, 1030,   63,   63, 1043,   63,   63,   63, 1035,
     1031,   63,   63,   63, 1053, 1053,   63, 1037, 1053, 1053,
       63, 1053, 1053, 1036,   63, 1053, 1038,   63, 1053, 1053,
       63, 1043, 1053,   63,   63, 1053, 1053, 1053,   63,   63,
     1053, 1053, 1053, 1053, 1053, 1053,   63,   43,   43,   43,
       43,   45,   45,   45,   45,   49,   49,   49,   49,   51,
     1053,   51,   51,   52,   52,   52,   52,  123, 1053,  123,
      123,  127,  127,  196,  196,  197,  197,  269,  269,  270,
      270,  271,  271,  346,  346,  347,  347,  422,  422,  423,

      423,  424,  424,  449, 1053,  449,  449,  496,  496,  497,
      497,  498,  498,  575,  575,  576,  576,  643,  643,  644,
      644,  645,  645,  704,  704,  705,  705,  706,  706,  575,
      575,  753,  753,  754,  754,  790,  790,  791,  791,  792,
      792,  821,  821,  822,  822,  823,  823,  705,  705,  851,
      851,  852,  852,  879,  879,  880,  880,  881,  881,  909,
      909,  910,  910,  912,  912,  791,  791,  939,  939,  940,
      940,  962,  962,  963,  963,  964,  964,  975, 1053,  975,
      975,  977, 1053,  977,  977,  978,  978,  979,  979,  986,
     1053,  986,  986,  989, 1053,  989,  989,  851,  851,  993,

      993,  994,  994, 1008, 1008, 1009, 1009, 1021, 1021, 1022,
     1022, 1023, 1023,  910,  910, 1033, 1033, 1039, 1039, 1040,
     1040, 1041, 1041, 1045, 1045, 1048, 1048, 1049, 1049, 1051,
     1051, 1052, 1052,    7, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053
    } ;

static yyconst flex_int16_t yy_chk[6110] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   29, 1142,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   27,   16,   63,   39,   24,   17,   29,   24,   27,
       34,   39,   34,   46,   46,   34,   30,   24,   16, 1138,
       24,   16,   16,   16,   16,   16,   16,   27,   16,   63,
       39,   24,   30, 1136,   24,   27,   34,   39,   34,   47,
       47,   34,   30,   24,   16,   20,   20, 1132,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   65,   21,   48,   48,   41,   66, 1126,
       21, 1118,   21,   41,   67, 1117,   68,   72, 1112,   21,
     1108,   25, 1107, 1103, 1099, 1061,   72,   21,   21,   65,
       21, 1052,   25,   41,   66,   25,   21,   25,   21,   41,
       67,   25,   68,   72,   31,   21,   22,   25,   22,   22,
       31,   22,   72,   32,   28,   73,   31,   22,   25,   22,
       22,   25,   28,   25,   40, 1051,   22,   25,   40,   28,
       31, 1049,   22,   32,   22,   22,   31,   22, 1048,   32,
       28,   73,   31,   22,   40,   22,   22, 1047,   28,   76,

       40,   35,   22,   23,   40,   28,   23,   23,   69,   32,
       77,   23,   35,   69,   23,   35,   23,   23,   35,   79,
       40,   79,   69,   23, 1046,   76, 1045,   35, 1044,   23,
     1041, 1040,   23,   23,   69, 1034,   77,   23,   35,   69,
       23,   35,   23,   23,   35,   79, 1033,   79,   69,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       42,   26,   26,   26,   26,   26,   26,   33,   26,   83,
     1032,   33,   26,   75, 1023,   26,   42,   33,   71,   71,
       75,   26,   33,   33, 1022, 1021,   42,   26,   26,   26,
       26,   26,   26,   33,   26,   83,   36,   33,   26,   75,

       36,   26,   42,   33,   71,   71,   75,   26,   33,   33,
       36,   38,   38,   70, 1010, 1009,   36, 1008,   78,  994,
       74,   38,   36,  993,   96,   80,   36,   90,   74,   38,
       70,   90,   78,   80,  992,  980,   36,   99,   38,   70,
       74,   38,   36,   37,   78,   37,   74,   38,   37,   37,
       96,   80,  979,   90,   74,   38,   70,   90,   78,   80,
       37,   37,  978,   99,   38,  964,   74,   38,  963,   37,
      962,   37,  105,  945,   37,   37,   58,   58,   58,   58,
       58,   58,   58,   58,   58,  112,   37,   37,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,  105,   56,

       56,   56,   56,   56,   56,   81,   56,  941,  100,  940,
      939,  112,  938,  915,  912,  910,  909,   81,  889,  883,
      882,  881,  880,  879,  113,   56,   56,   56,   56,   56,
       56,   81,   56,   61,   61,   61,   61,   61,   61,   61,
       61,   61,  100,   81,   61,   61,   61,   61,   61,   61,
      113,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      855,  852,  851,  850,  830,  824,  823,  822,  100,   84,
       61,   61,   61,   61,   61,   61,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   84,   64,   64,   64,
       64,   64,   64,   82,   64,   84,  821,  807,   82,  794,

      792,   93,   93,   87,   85,   88,   86,   64,  791,  790,
      761,  755,   84,   64,   64,   64,   64,   64,   64,   82,
       64,   85,   86,   87,   82,   88,   92,   93,   93,   87,
       85,   88,   86,   64,   89,   91,   95,   97,   95,   89,
       92,  754,   97,   91,   94,   98,   98,   85,   86,   87,
       91,   88,   92,   89,   89,  108,   94,  753,  102,   94,
       89,   91,   95,   97,   95,   89,   92,  101,   97,   91,
       94,   98,   98,  101,  102,  108,   91,  107,  103,   89,
       89,  108,   94,  103,  102,   94,  104,  106,  104,  104,
      106,  109,  111,  101,  114,  107,  109,  104,  752,  101,

      102,  108,  708,  107,  103,  116,  706,  110,  705,  103,
      118,  111,  104,  106,  104,  104,  106,  109,  111,  118,
      117,  107,  109,  104,  110,  133,  115,  110,  114,  134,
      138,  116,  117,  110,  115,  119,  118,  111,  120,  141,
      135,  120,  119,  135,  146,  118,  117,  121,  146,  121,
      110,  133,  115,  110,  114,  134,  138,  704,  117,  653,
      115,  119,  646,  645,  120,  141,  135,  120,  119,  135,
      146,  644,  643,  121,  146,  121,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  161,  124,  124,  124,
      124,  124,  124,  131,  124,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  144,  144,  579,  576,  575,  574,
      508,  499,  161,  124,  124,  124,  124,  124,  124,  149,
      124,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      144,  144,  128,  128,  128,  128,  128,  128,  498,  149,
      497,  496,  148,  427,  424,  149,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  423,  422,  193,  128,  128,
      128,  128,  128,  128,  130,  149,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  148,  130,  130,  130,
      130,  130,  130,  193,  200,  356,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  348,  347,  346,  345,  281,

      271,  270,  148,  130,  130,  130,  130,  130,  130,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  140,
      132,  132,  132,  132,  132,  132,  136,  137,  139,  140,
      269,  268,  136,  137,  142,  145,  142,  145,  239,  198,
      143,  139,  197,  196,  206,  140,  132,  132,  132,  132,
      132,  132,  136,  137,  139,  140,  143,  147,  136,  137,
      142,  145,  142,  145,  150,  153,  143,  139,  151,  152,
      206,  152,  153,  147,  154,  155,  127,  155,  156,  125,
      159,  150,  143,  147,  151,   57,  160,  157,  154,  164,
      150,  153,  159,  158,  151,  152,  156,  152,  153,  147,

      154,  155,  160,  155,  156,  157,  159,  150,  162,  165,
      151,  158,  160,  157,  154,  163,  166,  170,  159,  158,
      167,  167,  156,  164,  162,  163,  169,  165,  160,  170,
      166,  157,  168,  168,  162,  165,  172,  158,  176,  171,
       53,  163,  166,  170,  173,  172,  167,  167,  171,  164,
      162,  163,  171,  165,  174,  170,  166,  171,  176,  173,
      169,  175,  172,  177,  176,  171,  174,  168,   52,  177,
      173,  172,  178,  178,  171,  182,  179,  175,  171,  180,
      174,   49,  180,  171,  176,  173,  169,  175,  179,  177,
       44,  181,  174,  168,  181,  177,  183,  183,  178,  178,

      184,  186,  179,  175,  185,  180,  185,  189,  180,  182,
       19,  192,  184,  187,  179,  188,  190,  181,  208,  186,
      181,  192,  183,  183,   18,  189,  184,  186,  190,  187,
      185,  188,  185,  189,  218,  182,  191,  192,  184,  187,
       14,  188,  190,   12,  208,  186,  209,  192,  210,  209,
      210,  189,  222,  191,  190,  187,  211,  188,    7,    4,
      218,    3,  191,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  209,    0,  210,  209,  210,  212,  222,  191,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      211,  194,  194,  194,  194,  194,  194,  204,  194,  204,

      204,  204,  204,  204,  204,  204,  204,  204,    0,    0,
        0,  212,    0,    0,    0,    0,  211,  194,  194,  194,
      194,  194,  194,  223,  194,  199,  223,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  212,  199,  199,
      199,  199,  199,  199,    0,  246,    0,    0,    0,  223,
        0,    0,  223,    0,    0,    0,  215,    0,    0,    0,
        0,    0,    0,  215,  199,  199,  199,  199,  199,  199,
      202,  246,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  215,  202,  202,  202,  202,  202,  202,  215,
      207,  267,  267,  267,  267,  267,  267,  267,  267,  267,

      267,    0,    0,    0,    0,    0,  230,  230,  207,  202,
      202,  202,  202,  202,  202,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  207,  213,  203,  203,  203,  203,
      203,  203,  230,  230,  207,    0,    0,    0,    0,    0,
        0,  213,  217,    0,    0,    0,    0,    0,    0,    0,
      207,  213,  203,  203,  203,  203,  203,  203,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  213,  216,  205,
      205,  205,  205,  205,  205,  214,  217,  214,  219,  220,
      219,  220,  225,  228,    0,  227,    0,  227,  216,    0,
        0,  234,    0,  224,  216,  205,  205,  205,  205,  205,

      205,  214,  217,  214,  219,  220,  219,  220,  221,  224,
      226,  227,  229,  227,  216,  231,  225,  228,  232,  224,
      221,  232,  231,  233,  233,  234,  226,  238,  229,    0,
        0,    0,    0,  242,  221,  224,  226,    0,  229,  242,
        0,  231,  225,  228,  232,    0,  221,  232,  231,  233,
      233,  234,  226,  235,  229,  236,  237,  240,  241,  242,
      241,  238,  235,  235,  235,  242,  243,    0,  236,  237,
      245,  235,  240,    0,  240,  243,  245,  244,    0,  235,
        0,  236,  237,  240,  241,    0,  241,  238,  235,  235,
      235,  249,  243,  244,  236,  237,  245,  235,  240,  248,

      240,  243,  245,  244,  247,  252,  250,  254,  247,  249,
      250,  251,  251,  253,    0,    0,  248,  249,  253,  244,
      247,  252,  261,  254,  255,  248,  256,  259,  259,  257,
      247,  252,  250,  254,  247,  249,  250,  251,  251,  253,
      255,  256,  248,  256,  253,  257,  247,  252,  260,  254,
      255,  258,  256,  259,  259,  257,  261,  260,  258,  262,
      263,  264,  265,  266,  282,  282,  255,  256,  265,  256,
      283,  257,  286,    0,  260,  283,    0,  258,  264,  298,
      263,    0,  261,  260,  258,  262,  263,  264,  265,    0,
      282,  282,  296,  284,  265,  284,  283,  266,  286,  296,

        0,  283,  289,    0,  264,  298,  263,  272,  272,  272,
      272,  272,  272,  272,  272,  272,    0,    0,  296,  284,
        0,  284,    0,  266,  273,  296,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  289,  273,  273,  273,
      273,  273,  273,  275,    0,  275,  275,  275,  275,  275,
      275,  275,  275,  275,    0,    0,    0,    0,    0,    0,
        0,    0,  289,  273,  273,  273,  273,  273,  273,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  288,  300,
      274,  274,  274,  274,  274,  274,  276,  288,  276,  276,
      276,  276,  276,  276,  276,  276,  276,    0,  290,    0,

        0,    0,    0,    0,  288,  300,  274,  274,  274,  274,
      274,  274,  277,  288,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  314,  277,  277,  277,  277,  277,
      277,  278,  290,  278,  278,  278,  278,  278,  278,  278,
      278,  278,    0,  314,    0,    0,    0,    0,    0,    0,
      314,  277,  277,  277,  277,  277,  277,  279,  290,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  314,
      279,  279,  279,  279,  279,  279,  280,  285,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  291,  291,  285,
      294,  294,  287,  287,  287,  292,  279,  279,  279,  279,

      279,  279,  287,  285,  293,  301,  295,  292,  293,  293,
      299,  297,    0,  291,  291,  285,  294,  294,  287,  287,
      287,  292,  295,  297,  303,  306,  313,  299,  287,  304,
      293,  305,  295,  292,  293,  293,  299,  297,  302,  301,
      306,  304,  307,  305,  302,    0,  302,  308,  295,  297,
        0,  306,    0,  299,  307,  304,  308,  305,  303,  310,
      313,    0,    0,  312,  302,  301,  306,  304,  307,  305,
      302,  309,  302,  308,    0,  310,  318,  309,  315,  316,
      307,  311,  308,  312,  303,  310,  313,  311,  321,  312,
      317,  315,  318,  320,  316,  319,  317,  309,    0,  322,

      320,  310,  318,  309,  315,  316,  322,  311,  321,  312,
      326,  319,  324,  311,  321,  324,  317,  315,  318,  320,
      316,  319,  317,  323,  325,  322,  320,  325,  328,  323,
      327,  327,  322,  330,  321,  329,  333,  319,  324,  331,
      331,  324,  332,  332,  326,    0,  334,  335,  342,  323,
      325,  329,  334,  325,  328,  323,  327,  327,  336,  330,
      337,  329,  333,  335,  376,  331,  331,  336,  332,  332,
      326,  339,  334,  335,  337,  340,  338,  329,  334,  338,
      340,  341,  342,  341,  336,  343,  337,  344,  343,  335,
      376,  339,    0,  336,    0,    0,    0,  339,    0,    0,

      337,  340,  338,  395,  344,  338,  340,  341,  342,  341,
        0,  343,    0,  344,  343,    0,  349,  339,  349,  349,
      349,  349,  349,  349,  349,  349,  349,    0,    0,  395,
      344,  350,    0,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,    0,  350,  350,  350,  350,  350,  350,
      351,  396,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      350,  350,  350,  350,  350,  350,  352,  396,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  361,  352,
      352,  352,  352,  352,  352,  353,  400,  353,  353,  353,

      353,  353,  353,  353,  353,  353,    0,    0,  361,    0,
        0,  360,    0,    0,  361,  352,  352,  352,  352,  352,
      352,  355,  400,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  357,  361,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  360,  357,  357,  357,  357,
      357,  357,  359,    0,  359,  359,  359,  359,  359,  359,
      359,  359,  359,    0,    0,    0,    0,    0,    0,    0,
        0,  360,  357,  357,  357,  357,  357,  357,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  363,  363,  358,
      358,  358,  358,  358,  358,  362,  364,  362,  365,    0,

      368,    0,  368,  372,    0,    0,  372,  383,  383,  366,
      365,  367,  364,  363,  363,  358,  358,  358,  358,  358,
      358,  362,  364,  362,  365,  366,  368,  367,  368,  372,
      373,  369,  372,  383,  383,  366,  365,  367,  364,  369,
        0,    0,  373,    0,    0,  374,    0,    0,    0,    0,
        0,  366,  371,  367,    0,  375,  373,  369,  375,  371,
        0,    0,    0,  378,    0,  369,  370,  370,  373,  370,
      370,  370,  370,  370,  370,  370,  380,  370,  371,  374,
      378,  375,  377,  379,  375,  371,  381,  370,  370,  378,
      377,  379,  382,  380,  384,  384,  386,    0,    0,  381,

      382,  387,  380,  385,  386,  374,  378,  387,  377,  379,
      389,  389,  381,    0,  390,  388,  377,  379,  382,  380,
      384,  384,  386,  385,  388,  381,  382,  387,    0,  385,
      386,  390,  392,  387,  391,  397,  389,  389,    0,  393,
      390,  388,  391,  397,  392,  393,  394,    0,  398,  385,
      388,  398,  394,  399,  403,    0,  399,  390,  392,  402,
      391,  397,  401,  403,  401,  393,  405,    0,  391,  397,
      392,  393,  394,  402,  398,  406,  407,  398,  394,  399,
      403,  404,  399,  408,    0,  402,  409,  410,  401,  403,
      401,    0,  405,  406,  404,  411,  414,  404,  413,  402,

        0,  406,  412,  411,  415,  412,  416,  404,  416,  417,
      407,  420,  409,  410,  413,  417,  415,  408,  419,  406,
      404,  411,  414,  404,  413,  418,  418,  419,  412,  411,
      415,  412,  416,    0,  416,  417,  407,  421,  439,  447,
      413,  417,  415,  408,  419,  420,    0,  450,    0,  421,
        0,  418,  418,  419,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  421,    0,  447,    0,    0,    0,    0,
        0,  420,  439,  450,  426,  421,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  428,    0,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  439,  428,

      428,  428,  428,  428,  428,  430,    0,  430,  430,  430,
      430,  430,  430,  430,  430,  430,    0,    0,    0,    0,
        0,    0,    0,  458,    0,  428,  428,  428,  428,  428,
      428,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      443,  443,  429,  429,  429,  429,  429,  429,  431,  458,
      431,  431,  431,  431,  431,  431,  431,  431,  431,    0,
      473,    0,    0,    0,    0,    0,  443,  443,  429,  429,
      429,  429,  429,  429,  432,  458,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  433,  473,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  452,  433,  433,

      433,  433,  433,  433,  434,  452,  434,  434,  434,  434,
      434,  434,  434,  434,  434,    0,    0,    0,    0,    0,
        0,    0,    0,  452,  433,  433,  433,  433,  433,  433,
      435,  452,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  444,  435,  435,  435,  435,  435,  435,  436,
        0,  436,  436,  436,  436,  436,  436,  436,  436,  436,
      438,  441,  444,  438,  440,  441,  442,  445,  444,  435,
      435,  435,  435,  435,  435,  437,  446,  440,  437,  445,
        0,  442,    0,  455,  437,    0,  438,  441,  444,  438,
      440,  441,  442,  445,  449,  449,  446,    0,  448,  455,

      451,  437,  446,  440,  437,  445,  451,  442,  448,  455,
      437,  454,  454,  457,    0,  463,  448,  448,    0,  457,
      449,  449,  446,  453,  448,  455,  451,  459,  456,  453,
      460,  453,  451,  463,  448,  456,  453,  454,  454,  457,
      465,  463,  448,  448,  461,  457,  466,  459,  462,  453,
      460,  464,  466,  459,  456,  453,  460,  453,  465,  463,
      461,  456,  453,  467,  462,  468,  465,  464,  470,  469,
      461,  474,  466,  459,  462,  472,  460,  464,  466,  467,
      472,  468,  475,  470,  465,  469,  461,  476,  476,  467,
      462,  468,  480,  464,  470,  469,  471,  474,  478,  471,

      478,  472,  475,  477,  477,  467,  472,  468,  475,  470,
      481,  469,  486,  476,  476,  479,  479,  482,  480,    0,
      481,  484,  471,  485,  478,  471,  478,  481,  475,  477,
      477,  483,  486,  482,    0,  485,  481,  483,  486,  484,
      492,  479,  479,  482,  487,  487,  481,  484,  488,  485,
      488,  520,  490,  481,  490,  489,  493,  483,  486,  482,
      491,  485,  489,  483,  520,  484,  492,  491,  493,  495,
      487,  487,  495,  494,  488,  494,  488,  520,  490,    0,
      490,  489,  493,    0,    0,    0,  491,    0,  489,    0,
      520,    0,    0,  491,  493,  495,    0,  524,  495,  494,

      500,  494,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  501,    0,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  502,  524,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,    0,  502,  502,  502,  502,  502,
      502,  503,  537,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  502,  502,  502,  502,  502,  502,  504,  537,  504,
      504,  504,  504,  504,  504,  504,  504,  504,  504,  515,
      504,  504,  504,  504,  504,  504,  505,  541,  505,  505,
      505,  505,  505,  505,  505,  505,  505,    0,    0,  515,

        0,    0,    0,    0,    0,  515,  504,  504,  504,  504,
      504,  504,  507,  541,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  509,  515,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,    0,  509,  509,  509,
      509,  509,  509,  511,    0,  511,  511,  511,  511,  511,
      511,  511,  511,  511,    0,    0,  518,    0,    0,    0,
        0,    0,  512,  509,  509,  509,  509,  509,  509,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  512,  513,
      510,  510,  510,  510,  510,  510,  513,  514,  512,  516,
      518,  517,    0,  521,  514,  521,  522,  523,  516,  517,

      523,  522,  519,    0,  512,  513,  510,  510,  510,  510,
      510,  510,  513,  514,  526,  516,  518,  517,  519,  521,
      514,  521,  522,  523,  516,  517,  523,  522,  519,  525,
      527,  528,  528,  529,  526,  530,  531,  533,  525,  532,
      526,    0,  531,  530,  519,  534,  527,  540,  532,  529,
      536,  543,  534,  533,    0,  525,  527,  528,  528,  529,
      526,  530,  531,  533,  525,  532,    0,  536,  531,  530,
      539,  534,  527,  539,  532,  529,  536,  543,  534,  533,
      535,  540,  535,  538,  538,  538,  542,  538,  545,  544,
      547,  545,  546,  536,  548,  549,  539,  551,  550,  539,

      550,  546,  542,  552,  553,    0,  535,  540,  535,  544,
      554,  557,  542,  538,  545,  544,  547,  545,  546,  558,
      548,  549,  554,  551,  550,  555,  550,  546,  542,  552,
      553,  556,  558,  561,  559,  544,  554,  557,  560,  538,
      563,  555,    0,  564,  562,  558,  566,  556,  554,  563,
      561,  555,  562,  565,  569,  573,  560,  556,  558,  561,
      564,  567,  566,  567,  560,  565,  563,  555,  559,  564,
      562,  568,  566,  556,  570,  563,  561,  571,  562,  565,
      569,  573,  560,  592,  593,  568,  564,  567,  566,  567,
      570,  565,  571,  572,  559,  592,  600,  568,  572,    0,

      570,    0,    0,  571,    0,    0,    0,    0,    0,  592,
      593,  568,    0,    0,    0,    0,  570,    0,  571,  572,
        0,  592,  600,    0,  572,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  578,    0,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  580,    0,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,    0,  580,
      580,  580,  580,  580,  580,  582,    0,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  580,  580,  580,  580,  580,
      580,  581,  581,  581,  581,  581,  581,  581,  581,  581,

      588,  591,  581,  581,  581,  581,  581,  581,  585,  591,
      585,  585,  585,  585,  585,  585,  585,  585,  585,    0,
      588,    0,    0,    0,    0,    0,  588,  591,  581,  581,
      581,  581,  581,  581,  584,  591,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  588,  584,  584,  584,
      584,  584,  584,  587,  613,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  584,  584,  584,  584,  584,  584,  586,
      613,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  589,  586,  586,  586,  586,  586,  586,  590,  596,

      589,  594,  595,  595,  599,  596,    0,    0,  590,    0,
      594,    0,    0,  601,  597,    0,  598,  589,  586,  586,
      586,  586,  586,  586,  590,  596,  589,  594,  595,  595,
      597,  596,  598,  601,  590,  606,  594,  608,  599,  601,
      597,  602,  598,  603,  602,  604,  605,  607,  610,  610,
      603,  604,  605,  611,  607,  606,  597,  608,  598,  601,
      616,  606,  609,  608,  599,  609,  612,  602,  622,  603,
      602,  604,  605,  607,  610,  610,  603,  604,  605,  615,
      607,  606,  612,  608,  617,  618,  614,  611,  609,  614,
      616,  609,  612,  618,  622,  619,  620,  621,  623,  621,

      624,  625,  615,  632,  629,  620,  627,  626,  612,  627,
        0,  618,  630,  611,  626,  614,  616,  628,  617,  618,
      628,  630,  620,  621,  623,  621,  624,  625,  615,  619,
      629,  620,  627,  626,  631,  627,  634,  632,  630,  635,
      626,  614,  636,  628,  617,  633,  628,  630,  634,  636,
      631,  637,  638,  633,  637,  619,  639,  640,    0,    0,
      631,  666,  634,  632,  657,  635,  657,  668,  636,  641,
      642,  633,  673,    0,  634,  636,  631,  637,  638,  633,
      637,    0,  639,  640,  658,  641,  642,  666,  658,    0,
      657,  670,  657,  668,    0,  641,  642,  649,  673,  649,

      649,  649,  649,  649,  649,  649,  649,  649,    0,    0,
      658,  641,  642,  648,  658,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  670,  648,  648,  648,  648,
      648,  648,  651,  677,  651,  651,  651,  651,  651,  651,
      651,  651,  651,    0,  680,    0,    0,    0,    0,  684,
        0,  670,  648,  648,  648,  648,  648,  648,  650,  677,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      680,  650,  650,  650,  650,  650,  650,  652,  684,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,    0,
      682,    0,    0,    0,    0,    0,    0,  650,  650,  650,

      650,  650,  650,  654,  684,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  682,  654,  654,  654,  654,
      654,  654,  656,    0,  656,  656,  656,  656,  656,  656,
      656,  656,  656,    0,    0,    0,    0,    0,    0,    0,
        0,  682,  654,  654,  654,  654,  654,  654,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  662,  659,  655,
      655,  655,  655,  655,  655,  659,  660,  661,  660,  661,
      663,    0,  665,  662,    0,  669,  665,  669,    0,    0,
      664,    0,  663,  662,  659,  655,  655,  655,  655,  655,
      655,  659,  660,  661,  660,  661,  663,  664,  665,  662,

      667,  669,  665,  669,  671,  676,  664,  672,  663,  667,
      674,  675,  678,  685,  679,  681,    0,  676,  683,    0,
      688,  671,  685,  664,    0,  672,  667,  675,  674,  687,
      671,  676,  678,  672,  679,  667,  674,  675,  678,  685,
      679,  687,  681,  676,  686,  683,  688,  671,  685,  689,
      686,  672,  690,  675,  674,  687,  691,  692,  678,  693,
      679,  694,  695,  696,  697,  698,  700,  687,  681,    0,
      686,  683,  701,  697,  695,  689,  686,  698,  690,  699,
      702,  702,  691,  692,  703,  693,    0,  694,  695,  696,
      697,  698,  700,    0,    0,  699,  717,  719,  701,  697,

      695,  723,  703,  698,  724,  699,  702,  702,    0,  707,
      703,  707,  707,  707,  707,  707,  707,  707,  707,  707,
      707,  699,  717,  719,    0,    0,    0,  723,  703,  709,
      724,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  726,  709,  709,  709,  709,  709,  709,  711,    0,
      711,  711,  711,  711,  711,  711,  711,  711,  711,    0,
        0,    0,    0,    0,    0,    0,  733,  726,  709,  709,
      709,  709,  709,  709,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  720,  720,  710,  710,  710,  710,  710,
      710,  713,  733,  713,  713,  713,  713,  713,  713,  713,

      713,  713,    0,    0,    0,    0,    0,    0,    0,  720,
      720,  710,  710,  710,  710,  710,  710,  712,    0,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  722,
      712,  712,  712,  712,  712,  712,  715,  722,  715,  715,
      715,  715,  715,  715,  715,  715,  715,    0,    0,    0,
        0,    0,    0,    0,  732,  722,  712,  712,  712,  712,
      712,  712,  714,  722,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  716,  714,  714,  714,  714,  714,
      714,  718,  721,  725,  727,  728,  727,  718,  732,  721,
      716,  729,  730,    0,  728,  731,  731,  729,  730,  725,

      716,  714,  714,  714,  714,  714,  714,  718,  721,  725,
      727,  728,  727,  718,  732,  721,  716,  729,  730,  734,
      728,  731,  731,  729,  730,  725,  734,  735,  737,  736,
      738,  739,  740,  741,  742,    0,  735,    0,  747,  748,
      748,    0,  751,  765,  743,  734,  736,  765,  746,  741,
      747,  742,  734,  735,  737,  736,  738,  739,  740,  741,
      742,  743,  735,  746,  747,  748,  748,  750,  751,  765,
      743,  749,  736,  765,  746,  741,  747,  742,  749,  750,
        0,  767,    0,    0,    0,    0,    0,  743,    0,  746,
        0,    0,  768,  750,    0,    0,    0,  749,    0,    0,

      772,    0,    0,    0,  749,  750,  756,  767,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  768,  756,
      756,  756,  756,  756,  756,  757,  772,  757,  757,  757,
      757,  757,  757,  757,  757,  757,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  756,  756,  756,  756,  756,
      756,  758,    0,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  771,  758,  758,  758,  758,  758,  758,
      759,  773,  759,  759,  759,  759,  759,  759,  759,  759,
      759,    0,    0,  771,    0,    0,    0,    0,    0,  771,
      758,  758,  758,  758,  758,  758,  760,  773,  760,  760,

      760,  760,  760,  760,  760,  760,  760,  760,  762,  771,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
        0,  762,  762,  762,  762,  762,  762,  764,    0,  764,
      764,  764,  764,  764,  764,  764,  764,  764,    0,    0,
        0,    0,    0,    0,  766,    0,  766,  762,  762,  762,
      762,  762,  762,  763,  763,  763,  763,  763,  763,  763,
      763,  763,  769,  770,  763,  763,  763,  763,  763,  763,
      766,  774,  766,  775,  776,  777,  775,  779,  769,  770,
        0,  780,    0,  776,  784,    0,    0,  774,  769,  770,
      763,  763,  763,  763,  763,  763,  782,  774,  781,  775,

      776,  777,  775,  779,  769,  770,  778,  780,  786,  776,
      783,  785,  778,  774,  778,  781,  782,  787,  784,  788,
      788,  789,  782,  786,  781,  802,  783,  785,    0,  789,
        0,    0,  778,    0,  786,    0,  783,  785,  778,    0,
      778,  781,  782,  787,  784,  788,  788,  789,    0,  786,
        0,  802,  783,  785,  793,  789,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  795,    0,  795,  795,
      795,  795,  795,  795,  795,  795,  795,  795,  804,  795,
      795,  795,  795,  795,  795,  797,    0,  797,  797,  797,
      797,  797,  797,  797,  797,  797,    0,    0,    0,    0,

        0,    0,    0,  810,  804,  795,  795,  795,  795,  795,
      795,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      808,  815,  796,  796,  796,  796,  796,  796,  799,  810,
      799,  799,  799,  799,  799,  799,  799,  799,  799,    0,
      808,    0,    0,    0,    0,    0,  808,  815,  796,  796,
      796,  796,  796,  796,  798,    0,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  808,  798,  798,  798,
      798,  798,  798,  801,  848,  801,  801,  801,  801,  801,
      801,  801,  801,  801,    0,  803,  809,    0,    0,    0,
        0,    0,  803,  798,  798,  798,  798,  798,  798,  800,

      848,  800,  800,  800,  800,  800,  800,  800,  800,  800,
      800,  803,  800,  800,  800,  800,  800,  800,  803,  805,
      809,  806,  805,  806,  812,  813,  816,  811,  813,  814,
        0,  814,  816,  817,  817,  835,    0,  812,  800,  800,
      800,  800,  800,  800,  811,  805,  809,  806,  805,  806,
      812,  813,  816,  811,  813,  814,  818,  814,  816,  817,
      817,  820,  819,  812,  819,  849,  839,  836,  839,  835,
      811,  836,  818,  845,  847,  847,  845,  820,    0,  866,
        0,    0,  818,    0,    0,    0,    0,  820,  819,    0,
      819,  849,  839,  836,  839,  835,    0,  836,  818,  845,

      847,  847,  845,  820,  825,  866,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  867,  825,  825,  825,
      825,  825,  825,  826,  868,  826,  826,  826,  826,  826,
      826,  826,  826,  826,    0,  841,    0,    0,    0,    0,
        0,    0,  867,  825,  825,  825,  825,  825,  825,  827,
      868,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  841,  827,  827,  827,  827,  827,  827,  828,  846,
      828,  828,  828,  828,  828,  828,  828,  828,  828,    0,
        0,  846,    0,    0,    0,    0,    0,  841,  827,  827,
      827,  827,  827,  827,  829,  846,  829,  829,  829,  829,

      829,  829,  829,  829,  829,  829,  831,  846,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,    0,  831,
      831,  831,  831,  831,  831,  833,    0,  833,  833,  833,
      833,  833,  833,  833,  833,  833,    0,    0,    0,    0,
      865,    0,    0,  872,  834,  831,  831,  831,  831,  831,
      831,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      834,  837,  832,  832,  832,  832,  832,  832,  838,  872,
      834,    0,    0,    0,  865,  863,  842,  837,  863,  840,
      871,  875,  843,  844,  838,  871,  834,  837,  832,  832,
      832,  832,  832,  832,  838,  840,  842,  840,  843,  844,

      865,  863,  842,  837,  863,  840,  871,  875,  843,  844,
      838,  871,    0,  896,    0,    0,    0,    0,    0,    0,
        0,  840,  842,  840,  843,  844,  854,    0,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  856,  896,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      897,  856,  856,  856,  856,  856,  856,  858,    0,  858,
      858,  858,  858,  858,  858,  858,  858,  858,    0,    0,
        0,    0,    0,    0,    0,    0,  897,  856,  856,  856,
      856,  856,  856,  857,  857,  857,  857,  857,  857,  857,
      857,  857,  870,  898,  857,  857,  857,  857,  857,  857,

      860,  870,  860,  860,  860,  860,  860,  860,  860,  860,
      860,    0,  901,    0,    0,    0,    0,    0,  870,  898,
      857,  857,  857,  857,  857,  857,  859,  870,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  859,  901,  859,
      859,  859,  859,  859,  859,  862,    0,  862,  862,  862,
      862,  862,  862,  862,  862,  862,    0,  864,    0,    0,
        0,    0,    0,    0,    0,  859,  859,  859,  859,  859,
      859,  861,  864,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  864,  861,  861,  861,  861,  861,  861,
      869,  873,  873,  873,  874,  873,  874,  877,  864,  893,

      876,  908,  900,  893,  894,  877,  869,  878,  894,  908,
      861,  861,  861,  861,  861,  861,  869,  876,  900,  878,
      874,  873,  874,  877,    0,  893,  876,  908,  900,  893,
      894,  877,  869,  878,  894,  908,    0,  903,    0,  902,
        0,    0,  902,  876,  900,  878,    0,  873,  884,    0,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      903,  884,  884,  884,  884,  884,  884,  885,  902,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  921,    0,
        0,    0,    0,  904,    0,    0,  903,  884,  884,  884,
      884,  884,  884,  886,  902,  886,  886,  886,  886,  886,

      886,  886,  886,  886,  921,  899,  886,  886,  886,  886,
      886,  886,  887,  904,  887,  887,  887,  887,  887,  887,
      887,  887,  887,    0,    0,  899,    0,    0,    0,    0,
        0,  899,  886,  886,  886,  886,  886,  886,  888,  904,
      888,  888,  888,  888,  888,  888,  888,  888,  888,  888,
      890,  899,  890,  890,  890,  890,  890,  890,  890,  890,
      890,  890,  926,  890,  890,  890,  890,  890,  890,  892,
      906,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      905,  907,  905,  895,  922,  927,  906,  923,  926,  890,
      890,  890,  890,  890,  890,  895,  906,  907,  928,  929,

      928,  922,  895,  895,    0,  923,  905,  907,  905,  895,
      922,  927,  906,  923,    0,    0,    0,  929,    0,    0,
        0,  895,    0,  907,  928,  929,  928,  922,  895,  895,
      914,  923,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  916,  929,  916,  916,  916,  916,  916,  916,
      916,  916,  916,  924,    0,  916,  916,  916,  916,  916,
      916,  917,  934,  917,  917,  917,  917,  917,  917,  917,
      917,  917,    0,  924,    0,    0,    0,    0,    0,  924,
      930,  916,  916,  916,  916,  916,  916,  918,  934,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  924,

      918,  918,  918,  918,  918,  918,  919,  930,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  925,  932,  931,
      936,  933,  935,  925,    0,  935,  918,  918,  918,  918,
      918,  918,  947,  930,  949,  925,  937,  949,  952,  947,
      954,  956,  954,  925,  931,  932,  936,    0,  935,  925,
      933,  935,  937,    0,  957,    0,    0,    0,  947,    0,
      949,  925,  937,  949,  952,  947,  954,  956,  954,    0,
      931,  932,    0,  948,    0,    0,  933,    0,  937,  942,
      957,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      958,  948,  942,  942,  942,  942,  942,  942,  943,  948,

      943,  943,  943,  943,  943,  943,  943,  943,  943,    0,
      950,    0,  959,  960,  961,  950,  958,  948,  942,  942,
      942,  942,  942,  942,  944,  971,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  950,  951,  959,  960,
      961,  950,  969,  955,  955,  951,  955,  955,  955,  955,
      955,  955,  972,    0,  955,  987,    0,    0,  988,  971,
        0,  975,  975,  951,  955,  955,  970,  973,  969,    0,
      966,  951,  966,  966,  966,  966,  966,  966,  966,  966,
      966,  987,  970,  973,  988,  971,  972,  975,  975,    0,
        0,  982,  970,  973,  976,  976,  982,  976,  976,  976,

      976,  976,  976,  977,  977,  976,  983,  999,  970,  973,
      986,  986,  972,  984,  990,  976,  976,  982,  984,  985,
      977,  991,  982,    0,  983,  985,  989,  989,  991,  977,
      977, 1000,  983,  999,  990, 1001,  986,  986, 1002,  984,
      990,  996,  996,  989,  984,  985,  977,  991, 1007,  997,
      983,  985,  989,  989,  991,  997,  998, 1000, 1004, 1005,
      990, 1001,  998, 1011, 1002, 1012, 1005,  996,  996,  989,
     1006, 1006, 1012, 1013, 1007,  997, 1013, 1015, 1004, 1014,
     1014,  997,  998, 1017, 1004, 1005, 1018, 1018,  998, 1011,
     1019, 1012, 1005, 1025, 1020, 1027, 1006, 1006, 1012, 1013,

     1025, 1028, 1013, 1015, 1004, 1014, 1014, 1026, 1026, 1017,
     1030, 1031, 1018, 1018, 1020, 1035, 1019, 1035, 1036, 1025,
     1020, 1027, 1038, 1043,    0,    0, 1025, 1028,    0,    0,
     1030,    0,    0, 1026, 1026,    0, 1030, 1031,    0,    0,
     1020, 1035,    0, 1035, 1036,    0,    0,    0, 1038, 1043,
        0,    0,    0,    0,    0,    0, 1030, 1054, 1054, 1054,
     1054, 1055, 1055, 1055, 1055, 1056, 1056, 1056, 1056, 1057,
        0, 1057, 1057, 1058, 1058, 1058, 1058, 1059,    0, 1059,
     1059, 1060, 1060, 1062, 1062, 1063, 1063, 1064, 1064, 1065,
     1065, 1066, 1066, 1067, 1067, 1068, 1068, 1069, 1069, 1070,

     1070, 1071, 1071, 1072,    0, 1072, 1072, 1073, 1073, 1074,
     1074, 1075, 1075, 1076, 1076, 1077, 1077, 1078, 1078, 1079,
     1079, 1080, 1080, 1081, 1081, 1082, 1082, 1083, 1083, 1084,
     1084, 1085, 1085, 1086, 1086, 1087, 1087, 1088, 1088, 1089,
     1089, 1090, 1090, 1091, 1091, 1092, 1092, 1093, 1093, 1094,
     1094, 1095, 1095, 1096, 1096, 1097, 1097, 1098, 1098, 1100,
     1100, 1101, 1101, 1102, 1102, 1104, 1104, 1105, 1105, 1106,
     1106, 1109, 1109, 1110, 1110, 1111, 1111, 1113,    0, 1113,
     1113, 1114,    0, 1114, 1114, 1115, 1115, 1116, 1116, 1119,
        0, 1119, 1119, 1120,    0, 1120, 1120, 1121, 1121, 1122,

     1122, 1123, 1123, 1124, 1124, 1125, 1125, 1127, 1127, 1128,
     1128, 1129, 1129, 1130, 1130, 1131, 1131, 1133, 1133, 1134,
     1134, 1135, 1135, 1137, 1137, 1139, 1139, 1140, 1140, 1141,
     1141, 1143, 1143, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[133] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2174 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2279 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1054 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6034 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LINK_LOCAL_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::KEY_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::SECRET_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::ALGORITHM_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::FUDGE_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 173 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 174 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 176 "SrvLexer.l"
;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 180 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 185 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 186 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 187 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 118:
YY_RULE_SETUP
#line 194 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 203 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 212 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 221 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 230 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 239 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 248 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 260 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 267 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 288 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 320 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 348 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%20x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 358 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%20u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 367 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 370 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3193 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1054 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1054 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1053);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 370 "SrvLexer.l"



