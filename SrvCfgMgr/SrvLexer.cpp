#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1050] =
    {   0,
        1,    1,    0,    0,    0,    0,  132,  130,    2,    1,
        1,  130,  112,  130,  130,  129,  129,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  116,  116,  131,    1,    1,    1,    0,  124,
      112,    0,  124,  114,  113,  129,    0,    0,  128,    0,
      121,   95,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  109,  125,  125,   97,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
       17,   18,  125,  125,  125,  125,  125,  125,  125,  125,
      115,  113,  129,    0,    0,    0,  120,  126,  119,  119,
      125,  125,  125,  125,  125,  125,   96,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,   90,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      108,  129,    0,    0,    0,    0,  118,  118,    0,  119,

        0,  119,  125,  125,  125,   66,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  103,  125,  125,  125,   31,
      125,  125,   46,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,    0,  125,  125,  125,  125,
      125,  125,   24,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  110,  125,
      125,  125,  125,  129,    0,  127,    0,    0,    0,  118,
        0,  118,    0,  119,  119,  119,  119,  125,  125,  125,
      125,  125,  102,  125,  125,  125,    4,  125,  125,  125,
      125,  125,  125,  125,  111,  125,  125,  125,    3,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,    0,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,    7,  125,   45,  125,  125,   25,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
        0,    0,    0,    0,    0,  118,  118,  118,  118,    0,
      119,  119,  119,    0,  119,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,   30,  125,  125,  125,  125,
      125,   39,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
        0,    0,  125,  125,  125,   37,  125,  125,  125,  125,

       35,  125,  125,  125,   62,   91,  125,  125,  125,  106,
      125,  125,  125,  125,  125,  125,  125,    0,    0,    0,
        0,  118,  118,  118,    0,  118,    0,    0,  119,  119,
      119,  119,  125,  125,   34,  125,  125,  125,  125,  125,
      125,  125,    0,  125,  125,  105,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,    0,    0,
      125,  125,  125,  125,  125,   60,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,   22,  125,  125,
      125,  127,    0,    0,    0,    0,    0,  118,  118,  118,

      118,    0,  119,  119,  119,    0,  119,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,    0,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,   79,  125,  125,  125,   47,  125,   56,  125,
      125,  125,   12,   10,   94,  125,   44,    0,    0,  125,
      125,  125,   58,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,    5,  125,  125,  125,   14,    0,
        0,    0,    0,  118,  118,  118,    0,  118,  123,  119,
      119,  119,  119,  125,  125,  125,  125,  125,   92,  125,
      125,  125,  125,  125,  125,    0,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,   81,  125,
      125,  125,  125,  125,  125,  125,  125,   11,   65,    0,
        0,  125,  125,  125,   59,  125,  125,  125,  125,  125,
       32,  125,  125,    6,  104,   41,  125,  125,    0,    0,
        0,    0,  122,  118,  118,  118,  118,  119,  119,  119,
        0,  119,  125,  125,  125,  125,  125,  125,  125,  125,
      125,   57,  125,    0,  125,  125,  125,  125,  125,  125,
      125,  125,   38,  125,  125,   36,  125,  125,  125,  125,
      125,  125,  125,   33,   13,    0,    0,   53,   52,   40,
      125,   23,  125,  125,  125,   43,   42,  125,  125,  127,

        0,    0,  118,  118,  118,    0,  118,  119,  119,  119,
      119,  125,   15,  125,   64,  125,  125,  125,   73,  125,
      125,    0,  125,  125,  125,  125,  125,  125,   76,  125,
      125,  125,   83,   85,   87,   89,  125,  125,  125,   55,
       54,  125,  125,  125,  125,  125,   61,    0,    0,    0,
        0,  118,  118,  118,  118,  119,  119,  119,    0,  119,
      125,  125,  107,   75,  125,  125,  125,    0,   93,  125,
      125,  125,   51,  125,   77,   63,  125,  125,  125,    8,
      125,  125,   26,  125,  125,    0,    0,    0,  118,  118,
      118,    0,  118,  119,  119,  119,  119,  125,  125,   74,

      125,  125,    0,  125,  125,   50,  125,  125,  125,  125,
       67,  125,  125,  125,  125,  125,  127,    0,    0,    0,
      118,  118,  118,  118,  119,  119,  119,    0,  119,  125,
      125,  125,  125,    0,  125,  125,  125,  125,  125,  125,
      125,  125,  125,   16,   21,    0,    0,  117,  120,  118,
      118,  118,    0,  118,  119,  119,  119,  119,  125,  125,
      125,   28,    0,    0,  125,  125,  125,   78,  125,  125,
       27,  125,  125,  125,    0,    0,  117,    0,  118,  118,
      118,  118,  118,  119,  119,  119,    0,  119,  125,  125,
      125,    0,    0,   29,  125,  125,   80,  125,  125,  125,

      125,  125,  125,  125,  127,  117,  120,  118,    0,  118,
      118,  118,  118,  119,  119,  119,   68,  125,  125,  125,
      125,    0,    0,  125,  125,  125,  125,  125,  125,   49,
      125,   20,  125,    0,  117,  118,  118,  118,  118,  119,
      119,  119,  125,  125,  125,  125,  125,    0,    0,  125,
      125,   82,   84,   86,   88,    9,   19,    0,  118,  118,
        0,  118,  118,  119,   48,  125,  125,  125,  125,    0,
        0,  125,  125,  127,  118,  118,  119,  125,  125,  125,
      125,    0,    0,    0,  125,  125,  125,    0,  118,  118,
        0,  125,  125,  125,  125,    0,    0,    0,   98,  125,

      125,  125,   98,  117,  118,  118,   69,  125,  125,  125,
        0,  100,    0,  125,  100,  125,  117,  118,  118,    0,
      125,  125,   72,    0,   99,  125,   99,    0,  118,  118,
      125,   70,  101,  101,    0,  118,  118,    0,   71,  127,
      118,  118,    0,  118,  118,    0,  118,  118,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1140] =
    {   0,
        0,    0, 1215, 1208,    0,    0, 1194, 6028, 6028,   73,
       75, 1188,    0, 1185,   72,   72,   34, 1169, 1166,  136,
      186,  233,  280,   71,  208,  338,   66,  236,   38,   89,
      223,  240,  340,   72,  275,  373,  418,  398,   68,  251,
      180,  333, 6028, 1176, 6028,  111,  137,  213, 1182, 6028,
        0, 1148, 1147, 6028,    0,  476, 1130,  464, 6028,    0,
      521, 6028,   60,  564,  188,  192,  182,  182,  279,  387,
      184,  276,  211,  397,  337,  229,  263,  389,  384,  481,
      474,  555,  287,  543,  578,  579,  580,  583,  390,  599,
      601,  336,  612,  567,  326,  602,  596,  381,  632,  617,

      619,  635,  642,  388,  639,  664,  644,  652,  669,  667,
      429,  442,  654,  663,  614,  683,  685,  684,  682,  688,
     6028,    0,  746, 1129,  539, 1128,  791,    0,  836,  765,
      879,  703,  702,  868,  872,  873,  743,  871,  879,  757,
      876,  896,  878,  883,  908,  917,  815,  778,  928,  926,
      915,  921,  918,  948,  949,  950,  945,  951,  751,  962,
      963,  994,  973,  978,  966, 1002, 1003,  982, 1015,  995,
      998, 1005, 1001, 1007, 1022, 1018, 1026, 1037, 1038, 1059,
     1046, 1051, 1049, 1068, 1069, 1070, 1074, 1067, 1083, 1088,
      796, 1146,  548, 1127, 1125, 1124, 1193,  816,  854, 1238,

     1281, 1165, 1324, 1063, 1259, 1086, 1161, 1284, 1125, 1180,
     1318, 1313, 1198, 1323, 1314, 1087, 1317, 1321, 1336, 1234,
     1325, 1342, 1354, 1355, 1361, 1372, 1242, 1364, 1363, 1359,
     1399, 1409, 1405, 1406, 1403, 1135, 1412, 1396, 1413, 1397,
     1424, 1443, 1378, 1456, 1458, 1460, 1445, 1447, 1464, 1457,
     1477, 1481, 1496, 1492, 1495, 1498, 1489, 1485, 1493, 1528,
     1516, 1510, 1535, 1301, 1121, 1120, 1119, 1112,  863, 1595,
     1638, 1574, 1614, 1683, 1657, 1728, 1702, 1111, 1513, 1531,
     1529, 1719, 1532, 1724, 1625, 1574, 1670, 1718, 1732, 1726,
     1723, 1769, 1761, 1767, 1533, 1773, 1762, 1765, 1764, 1771,

     1772, 1792, 1796, 1809, 1807, 1794, 1808, 1825, 1840, 1556,
     1824, 1832, 1819, 1832, 1852, 1853, 1843, 1854, 1844, 1860,
     1865, 1848, 1876, 1617, 1871, 1662, 1885, 1888, 1863, 1896,
     1893, 1904, 1906, 1908, 1920, 1907, 1917, 1957, 1927, 1942,
     1084, 1079, 1052, 1022, 1989, 2017, 2000, 2062, 2036, 2045,
     2081, 1006, 2107, 2150, 2126, 1978, 1929, 2112, 2129, 2153,
     2151, 2162, 2164, 2142, 2049, 2234, 2150, 2144, 2193, 2145,
     2152, 1928, 2209, 2206, 2211, 2221, 2218, 2216, 2222, 2225,
     2240, 2236, 2239, 2226, 2255, 2258, 2253, 2269, 2270, 2274,
     2066, 2163, 2280, 2263, 2276, 2184, 2277, 2292, 2297, 2324,

     2261, 2309, 2319, 2327, 2305, 2307, 2320, 2313, 2332, 2311,
     2340, 2343, 2355, 2326, 2357, 2356, 2371, 1002,  951,  947,
     2417, 2429,  946, 2441, 2484, 2460, 2503, 2529, 2540, 2559,
     2585, 2604, 2606, 2585, 2462, 2599, 2583, 2603, 2590, 2604,
     2617, 2618, 2343, 2645, 2621, 2420, 2634, 2471, 2662, 2638,
     2651, 2640, 2656, 2667, 2678, 2689, 2686, 2690, 2691, 2701,
     2697, 2698, 2703, 2710, 2722, 2734, 2728, 2714, 2490, 2522,
     2741, 2730, 2737, 2744, 2750, 2527, 2769, 2755, 2759, 2784,
     2773, 2791, 2782, 2774, 2793, 2796, 2811, 2538, 2789, 2807,
     2816,  945,  942,  941,  904, 2874, 2885, 2896, 2915, 2941,

     2960, 2924, 2986,  897, 2998, 3041, 3017, 3019, 3027, 3035,
     2940, 3039, 2814, 3031, 3058, 3072, 3036, 3038, 3037, 2658,
     3076, 3075, 3086, 2802, 3087, 3082, 3079, 3089, 3094, 3090,
     3119, 3124, 2707, 3151, 3111, 3126, 2838, 3134, 2883, 3130,
     3131, 3138, 2928, 3077, 3127, 3141, 3132, 3155, 3141, 3159,
     3162, 3179, 3148, 3182, 3183, 3184, 3187, 3186, 3180, 3193,
     3203, 3214, 3201, 3221, 3190, 3231, 3226, 3223, 3194,  892,
      817,  816, 3289, 3300,  804, 3312, 3355, 3331, 3340, 3400,
     3374, 3445, 3419, 3242, 3342, 3434, 3387, 3443, 3228, 3441,
     3436, 3439, 3463, 3464, 3471, 3237, 3466, 3475, 3477, 3482,

     3485, 3488, 3487, 3515, 3484, 3499, 3483, 3516, 3334, 3546,
     3535, 3523, 3552, 3527, 3556, 3537, 3531, 3532, 3533, 3546,
     3552, 3547, 3551, 3567, 3539, 3579, 3584, 3603, 3583, 3588,
     3571, 3587, 3589, 3581, 3585, 3591, 3608, 3616,  802,  801,
      772,  771, 3674, 3685, 3704, 3730, 3749, 3775,  770, 3787,
     3830, 3806, 3792, 3595, 3824, 3821, 3822, 3825, 3729, 3844,
     3830, 3598, 3832, 3621, 3831, 3672, 3859, 3872, 3627, 3878,
     3877, 3874, 3664, 3883, 3884, 3683, 3892, 3891, 3894, 3902,
     3905, 3875, 3893, 3808, 3871, 3889, 3902, 3906, 3911, 3912,
     3926, 3913, 3924, 3933, 3943, 3916, 3923, 3930, 3954,  769,

      768,  767, 4001,  729, 4014, 4057, 4033, 4102, 4076, 4147,
     4121, 4142, 3934, 4139, 3935, 4036, 4141, 4089, 3967, 4018,
     4151, 4142, 4140, 4146, 4149, 4150, 4148, 4179, 4171, 4185,
     4189, 4198, 4182, 4183, 4184, 4186, 4203, 4216, 4217, 6028,
     6028, 4233, 4214, 4194, 4230, 4234, 4195,  728,  726,  723,
      722, 4294, 4313, 4339, 4358, 4384,  720, 4396, 4439, 4415,
     4231, 4399, 4232, 4236, 4433, 4434, 4338, 4250, 4255, 4442,
     4431, 4438, 4326, 4469, 4430, 4432, 4453, 4471, 4481, 4473,
     4482, 4478, 4470, 4475, 4480,  718,  716,  713, 4542,  675,
     4554, 4597, 4573, 4642, 4616, 4687, 4661, 4476, 4647, 4484,

     4677, 4678,  685, 4595, 4675, 4533, 4699, 4692, 4683, 4686,
     4558, 4687, 4689, 4727, 4719, 4732,  638,  629,  588,  583,
     4792, 4811, 4837, 4856, 4882,  580, 4894, 4937, 4913, 4915,
     4724, 4722, 4932, 4941, 4723, 4952, 4816, 4951, 4953, 4954,
     4731, 4836, 4730, 4576, 4629,  579,  578,  576,    0, 5014,
      575, 5026, 5069, 5045, 5114, 5088, 5159, 5133, 4933, 5127,
     4929, 4720, 4743, 4776, 5161, 5056, 4940, 4779, 5176, 5151,
     4898, 5172, 5160, 5174,  502,  501,  500,  499,  498, 5236,
     5255, 5281, 5300, 5326,  497, 5338,    0, 5357, 5154, 5163,
     5358, 4956, 4984, 5005, 5280, 5173, 5048, 5223, 5093, 5268,

     5337, 5341, 5352, 5164,  494,  493, 6028,  492,    0, 5418,
      491, 5430, 5449, 5475, 5494,    0, 5215, 5356, 5360, 5428,
     5490, 5235, 5335, 5355, 5372, 5462, 5499, 5500, 5505, 5340,
     5480, 5417, 5491,  489,  488,  487,  486, 5565, 5584, 5610,
      452,    0, 5494, 5507, 5492, 5502, 5552, 5495,    0, 5565,
     5635, 5496, 5543, 5564, 5568, 5601, 5602,  449,  447,  444,
        0, 5648, 6028,    0, 5604, 5626, 5639, 5640, 5632,    0,
     5624, 5699, 5670,  441,  431,  414, 6028, 5648, 5629, 5650,
     5681, 5663, 5629, 5619, 5699, 5688, 5691,  413,  402,  398,
        0, 5686, 5693, 5695, 5690, 5712, 5704, 5699, 6028, 5720,

     5729, 5705, 5702,  396,  394,  393, 5706, 5734, 5736, 5738,
     5736, 6028, 5759, 5741, 5742, 5769,  364,  363,  353,    0,
     5751, 5757, 5745, 5767, 6028, 5772, 5750,  349,  325,  314,
     5781, 5754, 6028, 5758,    0,  310,  309,    0, 5774,  307,
      305,  303,  276,  267,  260,    0,  256,  254, 6028, 5851,
     5855, 5859, 5863, 5867, 5871, 5873,  239, 5875, 5877, 5879,
     5881, 5883, 5885, 5887, 5889, 5891, 5893, 5897, 5899, 5901,
     5903, 5905, 5907, 5909, 5911, 5913, 5915, 5917, 5919, 5921,
     5923, 5925, 5927, 5929, 5931, 5933, 5935, 5937, 5939, 5941,
     5943, 5945, 5947, 5949,  233, 5951, 5953, 5955,  232, 5957,

     5959, 5961,  231,  230, 5963, 5965, 5967,  228, 5971, 5975,
     5977, 5979,  226,  219, 5983, 5987, 5989, 5991, 5993, 5995,
     5997,  217, 5999, 6001, 6003, 6005, 6007,  145, 6009, 6011,
     6013,  131, 6015,  117, 6017, 6019, 6021,   80, 6023
    } ;

static yyconst flex_int16_t yy_def[1140] =
    {   0,
     1049,    1, 1050, 1050, 1051, 1051, 1049, 1049, 1049, 1049,
     1049, 1052, 1053, 1054, 1049, 1049,   16, 1049, 1049, 1049,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1049, 1049, 1049, 1049, 1049, 1049, 1052, 1049,
     1053, 1054, 1049, 1049, 1055, 1049, 1056,   56, 1049, 1057,
     1049, 1049,   26,   26,   64,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1049, 1055, 1049, 1058,  123, 1059, 1049, 1057, 1049,  129,
       64,  131,  131,   26,   26,   26,   26,   26,   26,  131,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1049,  192, 1060, 1061, 1062, 1049,  197, 1049, 1049,

     1049,  200,  131,  203,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1049,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,  193,  193, 1061, 1063, 1064, 1049, 1049,
     1049,  270, 1049, 1049,  274, 1049,  276,  203,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1049,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1065, 1049, 1066, 1067, 1049, 1049,  346, 1049,  348, 1049,
     1049, 1049, 1049, 1049,  353,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1068,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1049, 1049,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1069, 1070, 1071,
     1049, 1049, 1049, 1049, 1049,  424, 1049, 1049, 1049,  429,
     1049,  431,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1049,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1049, 1049,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1066, 1049, 1072, 1073, 1049, 1049, 1049,  498, 1049,

      500, 1049, 1049, 1049, 1049, 1049,  505,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1049,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1049, 1049,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1074,
     1075, 1076, 1049, 1049, 1049, 1049, 1049,  576, 1049, 1049,
      580, 1049,  582,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1049,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1049,
     1049,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1077, 1049,
     1078, 1079, 1049, 1049,  644, 1049,  646, 1049, 1049, 1049,
     1049,  650,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1049,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1049, 1049,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1080,

     1081, 1082, 1049, 1049, 1049, 1049,  705, 1049,  708, 1049,
      710,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1049,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1049,
     1049,   26,   26,   26,   26,   26,   26, 1083, 1049, 1084,
     1085, 1049,  752, 1049,  754, 1049, 1049, 1049, 1049,  758,
       26,   26,   26,   26,   26,   26,   26, 1049,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1086, 1087, 1088, 1049, 1049,
     1049, 1049,  791, 1049,  794, 1049,  796,   26,   26,   26,

       26,   26, 1049,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1089, 1049, 1090, 1091,
     1049,  821, 1049,  823, 1049, 1049, 1049, 1049,  827,   26,
       26,   26,   26, 1049,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1092, 1093, 1094, 1095, 1049,
     1049, 1049, 1049,  852, 1049,  855, 1049,  857,   26,   26,
       26,   26, 1049, 1049,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1096, 1049, 1097, 1049, 1098, 1049,
      880, 1049,  882, 1049, 1049, 1049, 1099,  886,   26,   26,
       26, 1049, 1049,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26, 1100, 1101, 1049, 1102, 1103, 1049,
     1049, 1049,  912, 1049,  914, 1104,   26,   26,   26,   26,
       26, 1049, 1049,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1105, 1049, 1106, 1107, 1049,  938, 1049,
     1049, 1108,   26,   26,   26,   26,   26, 1049, 1109,   26,
     1110,   26,   26,   26,   26,   26,   26, 1111, 1049, 1112,
     1113, 1049, 1049, 1114,   26,   26,   26,   26,   26, 1115,
     1049, 1116,   26, 1117, 1118, 1119, 1049,   26,   26,   26,
       26, 1049, 1049, 1049,   26,   26,   26, 1120, 1049, 1121,
     1122,   26,   26,   26,   26, 1049, 1049, 1049, 1049,   26,

       26,   26,   26, 1123, 1124, 1125,   26,   26,   26,   26,
     1049, 1049, 1049,   26,   26,   26, 1126, 1049, 1127, 1128,
       26,   26,   26, 1049, 1049,   26,   26, 1129, 1130, 1131,
       26,   26, 1049,   26, 1132, 1049, 1133, 1134,   26, 1049,
     1135, 1136, 1129, 1049, 1137, 1138, 1139, 1049,    0, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,

     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049
    } ;

static yyconst flex_int16_t yy_nxt[6104] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   29,
       36,   37,   38,   39,   40,   41,   29,   42,   29,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   29,   36,   37,   38,   39,
       40,   41,   29,   42,   29,   46,   47,   48,   47,   54,
     1049,   63,  883,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   64,   58,   58,   58,   58,   58,

       58,   86,   59,   63,  116,   63, 1049,   63,   63,   63,
       97,   63,   98,   46,   47,   63,   89,   82,   60, 1042,
       64,   58,   58,   58,   58,   58,   58,   86,   59,   63,
      116,   63,   63, 1040,   63,   63,   97,   63,   98,   48,
       47,   63,   89,   82,   60,   63,   63, 1030,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   57,   63,   64,
       64,   65,   66,   64,   67,   63,   68,   63,   63,   63,
       69,   63,   70,   63,   63,   63,   63,   63,   63,   71,
       63,   63,   63,   63,   63,   64,   64,   65,   66,   64,
       67,   63,   68,   63,   63,   63,   69,   63,   70,   63,

       63,   63,   63,   63,   63,   71,   63,   63,   63,   63,
       63,   64,   64,  132,   64,   46,   47,  119,  133, 1006,
       63,  977,   63,   63,  134,   63,  138,   63,  976,   72,
      964,   83,  942,  937,  916,  879,  140,   64,   64,  132,
       64,  128,   63,  119,  133,   63,   63,   84,   63,   63,
      134,   63,  138,   63,   90,   72,   73,   83,   64,   64,
       91,   64,  140,   92,   87,  144,   63,   74,   63,   63,
       75,   63,   88,   84,  117, 1046,   63, 1046,  118,   63,
       90, 1046,   73,   63,   64,   64,   91,   64, 1038,   92,
       87,  144,   63,   74,   63,   63,   75, 1049,   88,  145,

      117,   99,   63,   64,  118,   63,   76,   77,  135,   63,
      139,   78,  100,  136,   63,  101,   79,   80,   63,   63,
       63,  151,   63,   81, 1046,  145, 1038,   99, 1043,   64,
     1038, 1020,   76,   77,  135, 1038,  139,   78,  100,  136,
       63,  101,   79,   80,   63,   63, 1020,  151,   63,   81,
       63,   63,   63,   63,   63,   63,   63,   63,   63, 1049,
      120,   63,   63,   63,   63,   63,   63,   93,   63,   63,
      907,   94,   63,  143, 1020,   63,   63,   95,  163,   63,
       63,   85,   96,   63,  991, 1028,  120,   63,   63,   63,
       63,   63,   63,   93,   63,   63,  102,   94,   63,  143,

      103,   63,   63,   95,  163,   63,   63,   85,   96,   63,
      104,  111,  112,  137, 1020,  991,   63,  878,  146,  991,
      141,  113,  102,  961,   63,  147,  103,   63,  142,  114,
       63,  176,   63,   63,  849,  991,  104,  159,  115,  137,
       63,   63,   63,  105,  146,  106,  141,  113,  107,  108,
       63,  147,  961,   63,  142,  114,   63,  176,   63,   63,
      109,  110,  988,  159,  115,  961,   63,   63,  909,  105,
      820,  106,   63,  887,  107,  108,  125,  125,  125,  125,
      125,  125,  125,  125,  125,   63,  109,  110,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  124,   63,  125,

      125,  125,  125,  125,  125,  149,   59,  961,  909,  878,
      127,   63,  853,  909,  878,  934,  148,   63,  828,  909,
      907,  878,  820,  751,   63,  125,  125,  125,  125,  125,
      125,  149,   59,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  148,   63,  130,  130,  130,  130,  130,  130,
       63,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  152,
      130,  130,  130,  130,  130,  130,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  124,   63,  131,  131,  131,
      131,  131,  131,  150,   68,  152,  792,  878,   63,  820,

      127,  759,  154,  155,  849,  153,  156,   63,  166,  820,
       63,  157,   63,  131,  131,  131,  131,  131,  131,  150,
       68,   63,   63,   63,   63,  158,   63,  160,  154,  155,
      162,  153,  156,   63,  166,  161,   63,  157,  168,   63,
      167,  169,   63,  164,   63,   63,  171,   63,   63,   63,
      751,  158,   63,  160,  170,   63,  162,  186,  165,  846,
       63,  161,   63,  184,  168,   63,  167,  179,   63,  164,
       63,   63,  171,  172,  173,   63,  174,  175,   63,  177,
      170,   63,   63,  186,  165,   63,   63,   63,   63,  178,
      180,  183,  181,  179,  834,   63,  706,   63,  185,  172,

      173,   63,  174,  175,   63,  177,   63,   63,   63,  182,
       63,   63,   63,   63,  187,  178,  180,  183,  181,  188,
      189,   63,  190,   63,  185,   63,   63,   63,   63,  191,
      204,   63,   63,   63,  820,  182,   63,  751,   63,  642,
      187,  651,  205,  127,  751,  188,  189,  642,  190,  127,
      577,   63,   63,   63,   63,  191,  204,   63,  192,  192,
      192,  192,  192,  192,  192,  192,  192,   57,  205,  193,
      193,  193,  193,  193,  193, 1049,   59,  202,  202,  202,
      202,  202,  202,  202,  202,  202,   63,  211,  751,  642,
      748,  506,  127,  642,   63,  193,  193,  193,  193,  193,

      193,  219,   59,  197,  197,  197,  197,  197,  197,  197,
      197,  197,   63,  211,  198,  198,  198,  198,  198,  198,
       63,   63,  495,  495,  218,  425, 1049,  219,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  642,  495,   63,
      198,  198,  198,  198,  198,  198,  199,   63,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  201,   63,  202,
      202,  202,  202,  202,  202,   63,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  345,  345,  345,  345,  345,
      345,  345,  345,  345,   63,  202,  202,  202,  202,  202,
      202,  203,  203,  203,  203,  203,  203,  203,  203,  203,

       57,  209,  203,  203,  203,  203,  203,  203,  206,  207,
      208,   63,  210,  127,   63,   63,   63,  212,  354,   63,
      214,   63,   63,  213,  215,  127,   63,  209,  203,  203,
      203,  203,  203,  203,  206,  207,  208,   63,  210,   63,
       63,   63,   63,  212,  217,   63,  214,   63,   63,  213,
      215,   63,   63,  221,  220,  216,  222,  223,   63,  224,
       63,   63,  495,  344,   63,   63,  570,  271,  495,   63,
      217,   63,  344,  225,  226,  227,  228,   63,  229,  221,
      220,  216,  222,  223,   63,  224,   63,   63,   63,  230,
       63,   63,   63,   63,   63,   63,  231,   63,  233,  225,

      226,  227,  228,  232,  229,   63,   63,  234,  235,   63,
      236,  237,  238,  239,   63,  230,   63,   63,   63,   63,
       63,   63,  231,  344,  233,   63,  244,  201,  246,  243,
      247,   63,   63,  234,  235,   63,  245,   63,   63,  239,
      240,   63,   63,  127,   63,   63,   63,   63,   63,  241,
       63,   63,  244,  242,  246,  243,  247,  250,   63,  248,
      249,   63,  245,   63,   63,   63,  240,   63,  253,   63,
       63,   63,   63,  344,   63,  241,   63,  251,  252,  242,
       63,   63,  255,  250,   63,  248,  249,   63,  254,   63,
      256,   63,   63,  257,   63,   63,  258,  259,  261,  260,

      196,  279,   63,  251,  252,  127,   63,   63,  255,  262,
       63,   63,   63,   63,  254,   63,  256,   63,   63,  257,
       63,  263,  258,  259,  261,  260,   63,  279,   63,   63,
       63,   63, 1049,  344,  284,  262,   63,   63,   63,   63,
      196,  341, 1049,   63,  312,  127,  196,  263,  196,  196,
      127,  127,   63,   52,   53,   63,   63,   63,  264,  264,
      264,  264,  264,  264,  264,  264,  264,   57,   63,  265,
      265,  265,  265,  265,  265, 1049,   59,  275,  275,  275,
      275,  275,  275,  275,  275,  275,   50,  121,   62,  285,
       61,   53,   50, 1049,   63,  265,  265,  265,  265,  265,

      265,  282,   59,  269,   63,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  271,   44,  272,  272,  272,  272,
      272,  272,   44,   63, 1049, 1049, 1049,  282, 1049, 1049,
       63, 1049, 1049, 1049,  288, 1049, 1049, 1049, 1049, 1049,
     1049,   63,  272,  272,  272,  272,  272,  272,  199,   63,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  201,
      288,  275,  275,  275,  275,  275,  275,   63,  280, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049,   63, 1049, 1049,
     1049, 1049, 1049, 1049,  300,   63,  281,  275,  275,  275,
      275,  275,  275,  276,  276,  276,  276,  276,  276,  276,

      276,  276,   63,   63,  277,  277,  277,  277,  277,  277,
      300,   63,  281,  264,  264,  264,  264,  264,  264,  264,
      264,  264, 1049,  290, 1049, 1049, 1049,   63,   63,  283,
      277,  277,  277,  277,  277,  277,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  286,  289,  278,  278,  278,
      278,  278,  278,   63,  287,  283,   63,   63,  291, 1049,
       63,   63,  292,  296,   63,  294,   63,  293,   63,  295,
      298,  286,  289,  278,  278,  278,  278,  278,  278,   63,
      287, 1049,   63,   63,  291,   63,   63,   63,  292, 1049,
       63,  294,   63,  293,   63,  295,  297,   63,   63,  299,

      301,  303,   63,  302,   63,   63,   63,   63,  304, 1049,
     1049,   63,  311, 1049, 1049,   63, 1049, 1049, 1049, 1049,
     1049,   63,  297,   63,   63,  299,  301,  303,   63,  302,
       63,  317,   63,   63,  305,  309,  310,  315,  313,   63,
       63,   63,   63,  306,  307,  308,   63,   63,   63,   63,
      316,  318,   63,  314, 1049,   63,   63,  317, 1049, 1049,
      305,  309,  310,  315,  313,   63,   63,   63,   63,  306,
      307,  308,   63, 1049,   63,   63,  316,  318,   63,  314,
      319,   63,   63,  320,  322,  323,   63,  321,   63,  325,
       63,  326,  324,   63,  336,  327, 1049, 1049, 1049,   63,

       63,   63, 1049,   63,  328, 1049,  319,   63,  329,  320,
      322,  323,   63,  321,   63,  325,   63,  326,  324,  332,
       63,  327,  330,  335,   63,   63,   63,   63,   63,   63,
      328,  333,   63,   63,  329,   63,   63,  331,   63,   63,
      334,   63,  338, 1049,  340,  332,   63,  339,  330,  335,
       63,  337, 1049,   63,   63,  356,   63,  333,   63,   63,
     1049,   63,   63,  331,   63,   63,  334,   63,  338,  357,
      358,   63,   63,  339,   63,   63,   63,  337,   63,   63,
      389,  356,   63,  364, 1049,   63,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  357,  358,   63,   63,   63,

       63,   63,   63, 1049,   63,  269,  389,  346,  346,  346,
      346,  346,  346,  346,  346,  346,  271,   63,  347,  347,
      347,  347,  347,  347,  350,   63,  273,  273,  273,  273,
      273,  273,  273,  273,  273, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049,   63,  347,  347,  347,  347,  347,  347,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  363,
       63,  349,  349,  349,  349,  349,  349, 1049,   63,  352,
      352,  352,  352,  352,  352,  352,  352,  352, 1049,  365,
     1049, 1049, 1049, 1049, 1049,  363,   63,  349,  349,  349,
      349,  349,  349,  199,   63,  351,  351,  351,  351,  351,

      351,  351,  351,  351,  201,   63,  352,  352,  352,  352,
      352,  352, 1049,   63,  355,  355,  355,  355,  355,  355,
      355,  355,  355, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049,   63,  352,  352,  352,  352,  352,  352,  199,   63,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  354,
      359,  355,  355,  355,  355,  355,  355,  360,  361,  362,
      366,   63,   63,  367,  368,  370,   63,   63,  369,   63,
     1049,  375, 1049,  378, 1049,   63,  359,  355,  355,  355,
      355,  355,  355,  360,  361,  362,  366,   63,   63,  367,
      368,  370,   63,   63,  369,   63,  371,  372,  373,  374,

      376,   63,  379,  380,   63,   63,  377,   63,   63, 1049,
       63, 1049,   63, 1049,   63,   63,   63, 1049, 1049, 1049,
      381,  385,  371,  372,  373,  374,  376,  382,  379,  380,
       63,   63,  377,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,  383,  384,  386,  381,  385,  387,  388,
       63,   63,   63,  382,  390, 1049,  393,  402,  391,  394,
     1049,   63,   63,   63, 1049,   63,  397,   63,   63,  383,
      384,  386, 1049,  392,  387,   63,   63,   63,   63,  395,
      390,  399,  393,   63,  391,  394,   63,   63,   63,  396,
      398,   63,  397,   63,   63,   63,   63,   63,  404,  392,

      400,   63, 1049,   63, 1049,  395,   63,  399,   63,   63,
     1049,  401,   63,   63,   63,  396,  398,   63,  403,   63,
      408,   63,   63,   63,  404, 1049,  400,  405,   63,   63,
      406,   63,   63,  407,   63,  410,   63,  401,  409,   63,
       63, 1049, 1049,  412,  403,   63,  408,   63,  411,   63,
       63,   63,  434,  405,   63,  413,  406,   63,  414,  407,
       63,  410,   63,   63,  409,   63,  415,  416,  417,  412,
       63,   63,   63,   63,  411,   63,   63,   63,  434, 1049,
     1049,  413, 1049, 1049,  414,   63,   63,  433, 1049,   63,
     1049, 1049, 1049,  416,  417, 1049,   63,   63,   63,  421,

       63,  345,  345,  345,  345,  345,  345,  345,  345,  345,
     1049,   63,  423,  423,  423,  423,  423,  423,  423,  423,
      423,   63, 1049, 1049, 1049, 1049,   63,  269, 1049,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  271, 1049,
      423,  423,  423,  423,  423,  423, 1049,   63,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  423,  423,  423,  423,
      423,  423,  269, 1049,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  425,  442,  426,  426,  426,  426,  426,
      426,  199,   63,  428,  428,  428,  428,  428,  428,  428,

      428,  428,  201,  469, 1049, 1049, 1049, 1049, 1049, 1049,
      442,  426,  426,  426,  426,  426,  426,  199,   63,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  354,  469,
      430,  430,  430,  430,  430,  430, 1049, 1049,  430,  430,
      430,  430,  430,  430,  430,  430,  430, 1049, 1049, 1049,
     1049, 1049, 1049,  435,  449,   63,  430,  430,  430,  430,
      430,  430,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  436,   63,  432,  432,  432,  432,  432,  432,  435,
      437,   63,  438,  441,  447,   63,  446,   63,   63,  439,
      470,  440,  450,   63,   63,   63,   63,  436,   63,  432,

      432,  432,  432,  432,  432,   63,  437,   63,  438,  441,
      447,   63,  446,   63,   63,  439,  470,  440,  450,   63,
       63,   63,   63, 1049,  448, 1049, 1049,   63, 1049, 1049,
     1049,   63,  452,   63,  443,  443,   63,  443,  443,  443,
      443,  443,  443,  444,  451,  443,  453,  454,  455,   63,
      448,  456,   63,   63,   63,  443,  443, 1049,  452,   63,
      462,   63,   63,  459,   63,   63,  457,  458,   63,   63,
      451,  460,  453,  454,  455,   63,  461,  456,   63,   63,
       63, 1049,   63,   63,  464,   63,  462,   63,  465,  459,
       63,   63,  457,  458,   63,   63,   63,  460,   63,  463,

      466,   63,  461,  472,   63,   63,   63,  467,   63,   63,
      464,  468,   63,   63,  465,  471,  473,   63,  474,   63,
       63,  475,   63,   63,   63,  463,  466,   63,  480,  472,
       63,  476,   63,  467,  479,   63,  481,  468,   63,   63,
       63,  471,  473,   63,  474,   63,   63,  475,   63,   63,
       63,  477,   63,  483,   63,  482,   63,  476, 1049,  484,
      479,   63,   63,   63,  478,  490,   63,   63,  488,   63,
       63,  485, 1049, 1049,   63,   63,   63,  477,   63,  483,
       63,  482,   63,   63,  486,  484,   63,  520,   63,   63,
      478,  489,  487,   63,  488,   63,   63,  485,   63,   63,

       63,   63,  491, 1049, 1049, 1049, 1049, 1049, 1049,   63,
      486, 1049,   63,  520,   63, 1049, 1049,  489,  487, 1049,
     1049, 1049, 1049, 1049,   63,   63,   63, 1049,  491,  496,
      496,  496,  496,  496,  496,  496,  496,  496, 1049,  269,
       63,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      271,  269, 1049,  498,  498,  498,  498,  498,  498,  498,
      498,  498,  425,   63,  499,  499,  499,  499,  499,  499,
     1049,  512,  499,  499,  499,  499,  499,  499,  499,  499,
      499, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,   63,
      499,  499,  499,  499,  499,  499,  500,  500,  500,  500,

      500,  500,  500,  500,  500,   63,  525,  501,  501,  501,
      501,  501,  501,  502,   63,  427,  427,  427,  427,  427,
      427,  427,  427,  427, 1049,  548, 1049, 1049, 1049, 1049,
     1049,   63,  525,  501,  501,  501,  501,  501,  501,  199,
       63,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      199,  548,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  354,  549,  504,  504,  504,  504,  504,  504, 1049,
       63,  504,  504,  504,  504,  504,  504,  504,  504,  504,
     1049,   63, 1049, 1049, 1049, 1049, 1049, 1049,  549,  504,
      504,  504,  504,  504,  504,  199,   63,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  506,   63,  507,  507,
      507,  507,  507,  507, 1049, 1049,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  511,   63,  517,   63,  513,
      514,  515,  516,   63,  507,  507,  507,  507,  507,  507,
      508,  519,   63,  509, 1049, 1049,   63,   63,  518,  510,
     1049,  511,   63,  517,   63,  513,  514,  515,  516,   63,
       63,   63, 1049, 1049,   63,  523,  508,  519,   63,  509,
      521,  524,   63,   63,  518,  510,  531,   63,  530, 1049,
      522,   63,  529,   63,  533,  596,   63,   63,   63,  523,
       63,  523,  526,  532,   63, 1049,  521,  524,  527,   63,

      528,  534,  531,   63,  530,   63,  522,   63,  529,   63,
       63,  596,  535,  536,   63,  523,  538,  537,  526,  532,
       63,   63,  540, 1049,  527,   63,  528,  534,  539,   63,
      542,   63,   63,   63,   63,  541,   63,  543,  535,  536,
       63,   63,  538,  537,   63, 1049,   63,   63,  540,  544,
       63, 1049,  547,   63,  539,   63,  542,   63,   63,   63,
       63,  541,  545,  543,  550,   63,   63,   63,  546, 1049,
       63,   63,   63,   63,  551,  544,   63,   63,  547,   63,
       63,  552,  557,   63,   63,  553, 1049,   63,  545, 1049,
      550,   63,  554,   63,  546,  555,  558,   63,   63,   63,

      551, 1049,   63,   63,  560,  556,   63,  552,  557,  559,
       63,  553,   63,   63,  561,  563,   63,   63,  554,   63,
      567,  555,  558, 1049,   63,   63,  562,   63,   63,  564,
      560,  556,   63, 1049,   63,  559,   63,  565,   63,   63,
      561,  563,   63,   63,  600,   63,  567,  566,  568,  589,
       63,   63,  562,   63,   63,  564,  569,   63,   63,   63,
       63, 1049,   63,  565, 1049,   63, 1049, 1049, 1049, 1049,
      600,   63, 1049,  566,  568,  589,   63, 1049, 1049, 1049,
       63,   63,  569,   63,  573,   63,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  269, 1049,  497,  497,  497,

      497,  497,  497,  497,  497,  497,  269,   63,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  425, 1049,  575,
      575,  575,  575,  575,  575, 1049,   63,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  575,  575,  575,  575,  575,
      575,  269,   63,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  577,  587,  578,  578,  578,  578,  578,  578,
     1049,   63,  578,  578,  578,  578,  578,  578,  578,  578,
      578, 1049, 1049,   63, 1049, 1049, 1049, 1049, 1049,  587,
      578,  578,  578,  578,  578,  578,  199,   63,  428,  428,

      428,  428,  428,  428,  428,  428,  428,  354,  199,   63,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  506,
     1049,  581,  581,  581,  581,  581,  581, 1049, 1049,  581,
      581,  581,  581,  581,  581,  581,  581,  581, 1049, 1049,
      590, 1049, 1049, 1049, 1049, 1049,  584,  581,  581,  581,
      581,  581,  581,  582,  582,  582,  582,  582,  582,  582,
      582,  582,   63,  585,  583,  583,  583,  583,  583,  583,
       63,  586,  584,  588,   63, 1049, 1049,  593,   63,   63,
       63,   63,   63,  595, 1049,  591,  594, 1049,   63,  585,
      583,  583,  583,  583,  583,  583,   63,  586,  598,  588,

       63,   63,  592,  593,   63,   63,   63,   63,   63,  595,
      597,  591,  594,  599,  601,   63,  603,  602,   63,   63,
       63,  605,   63,  604,  598,   63,  606,   63,  592,   63,
       63, 1049,   63,   63, 1049,  614,  597,   63, 1049,  599,
      601,   63,  603,  602,   63,   63,   63,  605,   63,  604,
      608,   63,  606,  616,   63,   63,   63,  613,   63,   63,
      607,  615,   63,   63,  609,  610,  611,   63,  612,   63,
       63,  617,  618,   63,   63,   63,  608,   63,  620,  616,
       63,   63,  619,  613,   63,  621,  607,  615,   63,  623,
      622,   63,  626,   63,   63,   63,   63,  617,  618,   63,

       63,   63,   63,   63,  620,   63,  624,   63,  619,  627,
       63,  621,  625,  628,  630,  623,  622,   63, 1049,  631,
       63,  629,   63,   63, 1049,   63,   63,   63,   63,   63,
       63,   63,  624,   63,  632,  627,   63,   63,  625,  628,
      630,  633,  634, 1049,   63,  631,   63,  629,   63,   63,
      635,   63,   63,   63,  637,   63,   63,   63,  636,   63,
      632,  638,   63,   63,   63,  653,   63,  633,  634,   63,
       63,   63,   63,  664,   63, 1049,  635, 1049, 1049, 1049,
      637, 1049, 1049,   63,  636,   63, 1049,  638, 1049, 1049,
       63,  653,   63, 1049, 1049,   63, 1049,   63, 1049,  664,

       63,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      269,   63,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  425,  269, 1049,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  577, 1049,  645,  645,  645,  645,  645,
      645, 1049, 1049,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  645,  645,  645,  645,  645,  645,  646,  646,  646,
      646,  646,  646,  646,  646,  646,  654,   63,  647,  647,
      647,  647,  647,  647, 1049,   63,  649,  649,  649,  649,
      649,  649,  649,  649,  649, 1049, 1049, 1049, 1049, 1049,

     1049, 1049,  654,   63,  647,  647,  647,  647,  647,  647,
      199,   63,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  506,  656,  649,  649,  649,  649,  649,  649, 1049,
       63,  652,  652,  652,  652,  652,  652,  652,  652,  652,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,  656,  649,
      649,  649,  649,  649,  649,  199,   63,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  651,  655,  652,  652,
      652,  652,  652,  652,  657,  658,  660,   63,  659,   63,
      663, 1049,   63, 1049,   63, 1049,   63, 1049, 1049,  665,
      661,  662,  675,  655,  652,  652,  652,  652,  652,  652,

      657,  658,  660,   63,  659,   63,   63,   63,   63,   63,
       63,  670,   63,  667,   63,  665,  661,  662,   63,  668,
       63,  666,  669,  671,  673,   63,   63,   63,   63, 1049,
       63,   63,   63,   63, 1049,   63,  680,  670,  672,  667,
       63,  674,   63,  676,   63,  668,   63,  666,  669,  671,
      673,   63,   63,   63,   63,  679,   63,   63,   63,   63,
      677,  681,  682,  678,  672,  683,   63,  674,   63,  676,
       63,  684,  685, 1049,   63,   63,   63,  686,   63,  687,
       63, 1049,   63,  688,   63,   63, 1049, 1049,  682,   63,
       63,  689,   63, 1049,   63,   63,   63,  684,  685,   63,

       63,   63,   63,  686,   63,  687,   63,  690,   63,  688,
       63,  692,  693,  691,   63,   63,   63,  689,  694,  695,
       63,   63,   63,  696,   63,   63,   63,   63,   63,  697,
       63,   63,   63,  690,   63,  698,   63,  692,   63,  691,
       63,   63,  713,  699,  694,  695,   63,  722,   63,  696,
       63,   63,   63,   63,   63,  697,   63,   63,   63,   63,
       63,  698, 1049, 1049,   63, 1049, 1049,   63,  713,  699,
      727, 1049,   63,  722, 1049, 1049, 1049,   63, 1049, 1049,
     1049,  724, 1049, 1049, 1049,   63,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  269,  727,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  577,   63,  704,  704,
      704,  704,  704,  704, 1049,   63,  704,  704,  704,  704,
      704,  704,  704,  704,  704, 1049,   63, 1049, 1049, 1049,
     1049, 1049, 1049,   63,  704,  704,  704,  704,  704,  704,
      269,   63,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  706,   63,  707,  707,  707,  707,  707,  707, 1049,
      718,  707,  707,  707,  707,  707,  707,  707,  707,  707,
     1049, 1049,   63, 1049, 1049, 1049, 1049, 1049, 1049,  707,
      707,  707,  707,  707,  707,  199,  718,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  506,  199,   63,  708,

      708,  708,  708,  708,  708,  708,  708,  708,  651, 1049,
      709,  709,  709,  709,  709,  709, 1049, 1049,  709,  709,
      709,  709,  709,  709,  709,  709,  709, 1049, 1049, 1049,
     1049, 1049, 1049,  712, 1049,   63,  709,  709,  709,  709,
      709,  709,  710,  710,  710,  710,  710,  710,  710,  710,
      710,   63,  717,  711,  711,  711,  711,  711,  711,  712,
      714,   63,  715,  716,   63,   63,  721,   63,   63,  720,
      719, 1049,  723,   63,   63,   63, 1049,   63,  717,  711,
      711,  711,  711,  711,  711,  725,  714,   63,  715,  716,
       63,   63,  721,   63,   63,  720,  719,  726,  723,   63,

       63,   63,   63,  728,  729,  730,  731,  732,  733,  734,
      735,  725,  738,   63,   63,   63,  736,   63,   63, 1049,
       63,   63, 1049,  726,  739,  740,   63,   63,   63,  728,
      729,  730,  731,  732,   63,   63,   63,   63,  738,  737,
       63,   63,  741,   63,   63,   63,   63,   63,   63,   63,
      739,  740,   63,   63,   63,   63,   63,  742,  743,   63,
       63,   63,   63,   63,  744,  737,   63,   63,  741,   63,
      745,   63,  746,   63,   63,   63,   63,   63,   63,  747,
       63,   63,   63,  742,  743,   63,   63, 1049, 1049, 1049,
      744, 1049,   63,   63, 1049,   63,  745,   63,  746,   63,

     1049, 1049,   63,   63,   63,  747, 1049, 1049, 1049, 1049,
       63,  269,   63,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  577,   63,  269, 1049,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  706,   63,  753,  753,  753,
      753,  753,  753, 1049, 1049,  753,  753,  753,  753,  753,
      753,  753,  753,  753, 1049, 1049, 1049, 1049, 1049, 1049,
     1049,  766, 1049,  753,  753,  753,  753,  753,  753,  754,
      754,  754,  754,  754,  754,  754,  754,  754,  763,   63,
      755,  755,  755,  755,  755,  755, 1049,  766,  757,  757,
      757,  757,  757,  757,  757,  757,  757, 1049, 1049, 1049,

     1049, 1049, 1049, 1049,  763,   63,  755,  755,  755,  755,
      755,  755,  199, 1049,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  651,  765,  757,  757,  757,  757,  757,
      757, 1049,   63,  760,  760,  760,  760,  760,  760,  760,
      760,  760, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
      765,  757,  757,  757,  757,  757,  757,  199,   63,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  759,  761,
      760,  760,  760,  760,  760,  760,  762,  764,  767,  768,
      770,  769,   63,   63,   63,   63,  771,  772,  774,   63,
      773,   63,   63,   63,   63,  761,  760,  760,  760,  760,

      760,  760,  762,  764,  767,  768,  770,  769,   63,   63,
       63,   63,  771,  772,   63,   63,  773,   63,   63,   63,
       63,  775,   63,  776,  777,   63,   63,   63,   63,   63,
      778, 1049,   63, 1049, 1049, 1049,  783,   63,   63, 1049,
       63,   63,  779,  780, 1049,  782,   63,  775,   63,  776,
      777,   63,   63,   63,   63,   63,  778,   63,   63,   63,
       63,  781,  783,   63,   63,  785,  784,   63,  779,  780,
      798,  782,   63,   63,   63,   63,   63,   63, 1049,   63,
     1049, 1049, 1049,   63, 1049,   63,   63,  781, 1049, 1049,
      803,  785,  784, 1049, 1049, 1049,  798, 1049,   63,   63,

       63,   63,   63,   63,  269,   63,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  706,  803,  790,  790,  790,
      790,  790,  790, 1049,   63,  790,  790,  790,  790,  790,
      790,  790,  790,  790, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049,  790,  790,  790,  790,  790,  790,  269,
     1049,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      792,  802,  793,  793,  793,  793,  793,  793, 1049,   63,
      793,  793,  793,  793,  793,  793,  793,  793,  793, 1049,
     1049,   63, 1049, 1049, 1049, 1049, 1049,  802,  793,  793,
      793,  793,  793,  793,  199,   63,  428,  428,  428,  428,

      428,  428,  428,  428,  428,  651,  199,   63,  794,  794,
      794,  794,  794,  794,  794,  794,  794,  759, 1049,  795,
      795,  795,  795,  795,  795, 1049, 1049,  795,  795,  795,
      795,  795,  795,  795,  795,  795, 1049, 1049, 1049, 1049,
     1049, 1049,   63, 1049,  799,  795,  795,  795,  795,  795,
      795,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      800,  801,  797,  797,  797,  797,  797,  797,   63,  804,
      799,  805,  806,   63,   63,   63,   63,   63, 1049,  809,
     1049,   63,  812, 1049, 1049,   63,  800,  801,  797,  797,
      797,  797,  797,  797,  810,  804,   63,  805,  806,   63,

       63,   63,   63,   63,  807,  809,  814,   63,  811,  813,
      808,   63,   63,   63,   63,  816,   63,  815,   63,  830,
      810,   63,   63,   63,   63,   63, 1049,   63, 1049, 1049,
      807, 1049,  814, 1049,  811,  813,  808, 1049,   63,   63,
       63,  816,   63,  815,   63,  830, 1049,   63, 1049,   63,
       63,   63,  269,   63,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  706,  269, 1049,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  792,   63,  822,  822,  822,
      822,  822,  822, 1049, 1049,  822,  822,  822,  822,  822,
      822,  822,  822,  822, 1049, 1049, 1049, 1049, 1049, 1049,

     1049,   63,   63,  822,  822,  822,  822,  822,  822,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  835,   63,
      824,  824,  824,  824,  824,  824, 1049,   63,  826,  826,
      826,  826,  826,  826,  826,  826,  826, 1049,   63, 1049,
     1049, 1049, 1049, 1049,  835,   63,  824,  824,  824,  824,
      824,  824,  199, 1049,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  759,   63,  826,  826,  826,  826,  826,
      826, 1049,   63,  829,  829,  829,  829,  829,  829,  829,
      829,  829, 1049,  831,  836, 1049, 1049, 1049, 1049, 1049,
       63,  826,  826,  826,  826,  826,  826,  199,   63,  827,

      827,  827,  827,  827,  827,  827,  827,  827,  828,  831,
      829,  829,  829,  829,  829,  829,   63,  832,   63,  833,
       63,   63,  838,  839,  841,  837,   63,  840, 1049,   63,
       63,  842,   63,  860, 1049,   63,  829,  829,  829,  829,
      829,  829,   63,  832,   63,  833,   63,   63,  838,  839,
      841,  837,   63,  840,  843,   63,   63,  842,   63,  845,
      844,   63,   63,   63,  865,   63,   63,   63,   63,  861,
       63,  872,  874,   63,   63,   63, 1049,  892, 1049, 1049,
      843, 1049, 1049, 1049, 1049,  845,  844, 1049,   63,   63,
      865,   63,   63,   63, 1049,  861,   63,  872,  874,   63,

       63,   63,  269,  892,  850,  850,  850,  850,  850,  850,
      850,  850,  850,  792,  893,  851,  851,  851,  851,  851,
      851, 1049,   63,  851,  851,  851,  851,  851,  851,  851,
      851,  851, 1049,  868, 1049, 1049, 1049, 1049, 1049, 1049,
      893,  851,  851,  851,  851,  851,  851,  269,   63,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  853,   63,
      854,  854,  854,  854,  854,  854, 1049,  873,  854,  854,
      854,  854,  854,  854,  854,  854,  854, 1049, 1049,   63,
     1049, 1049, 1049, 1049, 1049,   63,  854,  854,  854,  854,
      854,  854,  199,  873,  428,  428,  428,  428,  428,  428,

      428,  428,  428,  759,  199,   63,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  828, 1049,  856,  856,  856,
      856,  856,  856, 1049, 1049,  856,  856,  856,  856,  856,
      856,  856,  856,  856, 1049, 1049, 1049, 1049,  891, 1049,
     1049,   63,  859,  856,  856,  856,  856,  856,  856,  857,
      857,  857,  857,  857,  857,  857,  857,  857,   63,  862,
      858,  858,  858,  858,  858,  858,  863,   63,  859, 1049,
     1049, 1049,   63,  889,  869,   63,   63,  866,  896,  922,
      870,  871,  864,   63,   63,  862,  858,  858,  858,  858,
      858,  858,  863,  867,   63,   63,   63,   63,   63,  889,

      869,   63,   63,  866,  896,  922,  870,  871,  864,   63,
     1049,  923, 1049, 1049, 1049, 1049, 1049, 1049, 1049,  867,
       63,   63,   63,   63,  269, 1049,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  792,  269,  923,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  853,   63,  881,
      881,  881,  881,  881,  881, 1049, 1049,  881,  881,  881,
      881,  881,  881,  881,  881,  881, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049,   63,  881,  881,  881,  881,  881,
      881,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      895,   63,  883,  883,  883,  883,  883,  883, 1049,   63,

      885,  885,  885,  885,  885,  885,  885,  885,  885, 1049,
     1049, 1049, 1049,  928, 1049, 1049,  895,   63,  883,  883,
      883,  883,  883,  883,  199,   63,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  828,   63,  885,  885,  885,
      885,  885,  885, 1049, 1049,  888,  888,  888,  888,  888,
      888,  888,  888,  888, 1049,  890, 1049, 1049, 1049, 1049,
     1049, 1049,   63,  885,  885,  885,  885,  885,  885,  199,
       63,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      887,  890,  888,  888,  888,  888,  888,  888,  894,  897,
      898,  899,  901,  900,   63,  903,   63,   63,  902,  933,

      925,  917,  918,   63,   63,  904,   63,   63,  888,  888,
      888,  888,  888,  888,  894,   63,   63,   63,  901,   63,
       63,  903, 1049,   63,  902,  933,  925,  917,  918,   63,
       63,  904,   63,   63, 1049, 1049, 1049,  926, 1049, 1049,
      927,   63,   63,   63, 1049,   63,  269, 1049,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  853,   63,  911,
      911,  911,  911,  911,  911, 1049,   63,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  948, 1049, 1049, 1049,
     1049,  929, 1049, 1049,   63,  911,  911,  911,  911,  911,
      911,  269,   63,  912,  912,  912,  912,  912,  912,  912,

      912,  912,  948,  924,  913,  913,  913,  913,  913,  913,
     1049,   63,  913,  913,  913,  913,  913,  913,  913,  913,
      913, 1049, 1049,   63, 1049, 1049, 1049, 1049, 1049,  924,
      913,  913,  913,  913,  913,  913,  199,   63,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  828,  199,   63,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  887,
      949,  915,  915,  915,  915,  915,  915, 1049,  931,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  930,  932,
       63,  919,  943,   63,   63,  944,  949,  915,  915,  915,
      915,  915,  915,  920,  931,   63,  950,  951,   63,   63,

      921,   63, 1049,   63,  930,  932,   63,  919,  943,   63,
       63,  944, 1049, 1049, 1049,   63, 1049, 1049, 1049,  920,
     1049,   63,  950,  951,   63,   63,  921,   63,  269,   63,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  853,
      269,   63,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  945, 1049,  939,  939,  939,  939,  939,  939, 1049,
       63,  939,  939,  939,  939,  939,  939,  939,  939,  939,
     1049,   63, 1049, 1049, 1049, 1049, 1049,  945,  952,  939,
      939,  939,  939,  939,  939,  199,   63,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  887,   63,  941,  941,

      941,  941,  941,  941, 1049,   63,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  946,  954,  953,  957,  955,
      956,  947, 1049,   63,  941,  941,  941,  941,  941,  941,
      965,   63,  966,   63,   63,   63,  970,   63,  967,   63,
      968,  946,   63,   63,  957,   63,  956,  947,   63,   63,
       63, 1049, 1049, 1049, 1049, 1049,  965, 1049,  966,   63,
       63,   63,  970,   63,  967,   63,  968, 1049,   63,   63,
     1049,   63, 1049, 1049,   63,  269,   63,  962,  962,  962,
      962,  962,  962,  962,  962,  962,   63,  969,  963,  963,
      963,  963,  963,  963, 1049,   63,  963,  963,  963,  963,

      963,  963,  963,  963,  963, 1049,  972,   63,   63, 1049,
     1049,   63,   63,  969,  963,  963,  963,  963,  963,  963,
      199,   63,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  887,  972,   63,   63,  971,  971,   63,  971,  971,
      971,  971,  971,  971,   63,   63,  971,   63,  979,  980,
      983,  984,  998,  978,  993,  999,  971,  971,  269,  981,
      497,  497,  497,  497,  497,  497,  497,  497,  497,   63,
       63,   63,   63,   63, 1049,   63,  983,  984,  998,  978,
      993,  999,   63,   63, 1049,  981,  992, 1049,  994,  996,
      997,   63, 1049,   63, 1049,   63,  986,  987,   63,  982,

      982,   63,  982,  982,  982,  982,  982,  982,   63,   63,
      982, 1002,  992,   63,  994,  996,  997,   63,  995,   63,
      982,  982,  986,  987,   63, 1000, 1001, 1003, 1007,   63,
     1008,   63, 1009, 1010,   63, 1011,   63, 1002,   63,   63,
     1012, 1013,   63, 1014,  995,   63, 1049, 1016,   63,   63,
       63, 1000, 1001, 1003, 1007,   63, 1008,   63, 1009, 1010,
       63, 1011,   63,   63,   63, 1015, 1012, 1013,   63, 1014,
     1021,   63,   63, 1016,   63,   63, 1022,   63, 1024,   63,
     1023,   63, 1025, 1026,   63,   63, 1049, 1031,   63,   63,
     1033, 1015, 1027,   63,   63, 1034, 1021,   63,   63, 1032,

       63,   63, 1022,   63, 1024,   63, 1023,   63, 1025, 1026,
       63,   63,   63, 1031,   63,   63, 1033,   63, 1027,   63,
       63, 1034, 1039,   63,   63, 1032,   63,   63, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,   63, 1049,
     1049,   63, 1049,   63, 1049, 1049, 1049, 1049, 1039, 1049,
       63,   43,   43,   43,   43,   45,   45,   45,   45,   49,
       49,   49,   49,   51, 1049,   51,   51,   52,   52,   52,
       52,  122, 1049,  122,  122,  126,  126,  194,  194,  195,
      195,  266,  266,  267,  267,  268,  268,  342,  342,  343,
      343,  418,  418,  419,  419,  420,  420,  445, 1049,  445,

      445,  492,  492,  493,  493,  494,  494,  571,  571,  572,
      572,  639,  639,  640,  640,  641,  641,  700,  700,  701,
      701,  702,  702,  571,  571,  749,  749,  750,  750,  786,
      786,  787,  787,  788,  788,  817,  817,  818,  818,  819,
      819,  701,  701,  847,  847,  848,  848,  875,  875,  876,
      876,  877,  877,  905,  905,  906,  906,  908,  908,  787,
      787,  935,  935,  936,  936,  958,  958,  959,  959,  960,
      960,  971, 1049,  971,  971,  973, 1049,  973,  973,  974,
      974,  975,  975,  982, 1049,  982,  982,  985, 1049,  985,
      985,  847,  847,  989,  989,  990,  990, 1004, 1004, 1005,

     1005, 1017, 1017, 1018, 1018, 1019, 1019,  906,  906, 1029,
     1029, 1035, 1035, 1036, 1036, 1037, 1037, 1041, 1041, 1044,
     1044, 1045, 1045, 1047, 1047, 1048, 1048,    7, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,

     1049, 1049, 1049
    } ;

static yyconst flex_int16_t yy_chk[6104] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   29, 1138,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   27,   16,   63,   39,   24,   17,   29,   24,   27,
       34,   39,   34,   46,   46,   34,   30,   24,   16, 1134,
       24,   16,   16,   16,   16,   16,   16,   27,   16,   63,
       39,   24,   30, 1132,   24,   27,   34,   39,   34,   47,
       47,   34,   30,   24,   16,   20,   20, 1128,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   65,   21,   48,   48,   41,   66, 1122,
       21, 1114,   21,   41,   67,   68,   71,   71, 1113,   21,
     1108,   25, 1104, 1103, 1099, 1095,   73,   21,   21,   65,
       21, 1057,   25,   41,   66,   25,   21,   25,   21,   41,
       67,   68,   71,   71,   31,   21,   22,   25,   22,   22,
       31,   22,   73,   32,   28,   76,   31,   22,   25,   22,
       22,   25,   28,   25,   40, 1048,   22, 1047,   40,   28,
       31, 1045,   22,   32,   22,   22,   31,   22, 1044,   32,
       28,   76,   31,   22,   40,   22,   22, 1043,   28,   77,

       40,   35,   22,   23,   40,   28,   23,   23,   69,   32,
       72,   23,   35,   69,   23,   35,   23,   23,   35,   72,
       40,   83,   69,   23, 1042,   77, 1041,   35, 1040,   23,
     1037, 1036,   23,   23,   69, 1030,   72,   23,   35,   69,
       23,   35,   23,   23,   35,   72, 1029,   83,   69,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       42,   26,   26,   26,   26,   26,   26,   33,   26,   95,
     1028,   33,   26,   75, 1019,   26,   42,   33,   92,   92,
       75,   26,   33,   33, 1018, 1017,   42,   26,   26,   26,
       26,   26,   26,   33,   26,   95,   36,   33,   26,   75,

       36,   26,   42,   33,   92,   92,   75,   26,   33,   33,
       36,   38,   38,   70, 1006, 1005,   36, 1004,   78,  990,
       74,   38,   36,  989,   98,   79,   36,   79,   74,   38,
       70,  104,   78,   89,  988,  976,   36,   89,   38,   70,
       74,   38,   36,   37,   78,   37,   74,   38,   37,   37,
       98,   79,  975,   79,   74,   38,   70,  104,   78,   89,
       37,   37,  974,   89,   38,  960,   74,   38,  959,   37,
      958,   37,  111,  941,   37,   37,   58,   58,   58,   58,
       58,   58,   58,   58,   58,  112,   37,   37,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,  111,   56,

       56,   56,   56,   56,   56,   81,   56,  937,  936,  935,
      934,  112,  911,  908,  906,  905,   80,   81,  885,  879,
      878,  877,  876,  875,   80,   56,   56,   56,   56,   56,
       56,   81,   56,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   80,   81,   61,   61,   61,   61,   61,   61,
       80,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      193,  193,  193,  193,  193,  193,  193,  193,  193,   84,
       61,   61,   61,   61,   61,   61,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   84,   64,   64,   64,
       64,   64,   64,   82,   64,   84,  851,  848,   82,  847,

      846,  826,   86,   87,  820,   85,   88,   64,   94,  819,
       94,   88,   84,   64,   64,   64,   64,   64,   64,   82,
       64,   85,   86,   87,   82,   88,   88,   90,   86,   87,
       91,   85,   88,   64,   94,   90,   94,   88,   97,   97,
       96,   99,   90,   93,   91,   96,  101,   85,   86,   87,
      818,   88,   88,   90,  100,   93,   91,  115,   93,  817,
      100,   90,  101,  113,   97,   97,   96,  107,   90,   93,
       91,   96,  101,  102,  103,   99,  103,  103,  102,  105,
      100,   93,  105,  115,   93,  103,  100,  107,  101,  106,
      108,  110,  109,  107,  803,  108,  790,  113,  114,  102,

      103,   99,  103,  103,  102,  105,  114,  106,  105,  109,
      110,  103,  109,  107,  116,  106,  108,  110,  109,  117,
      118,  108,  119,  113,  114,  119,  116,  118,  117,  120,
      132,  120,  114,  106,  788,  109,  110,  787,  109,  786,
      116,  757,  133,  751,  750,  117,  118,  749,  119,  748,
      704,  119,  116,  118,  117,  120,  132,  120,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  133,  123,
      123,  123,  123,  123,  123,  130,  123,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  137,  140,  702,  701,
      700,  649,  642,  641,  159,  123,  123,  123,  123,  123,

      123,  148,  123,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  137,  140,  127,  127,  127,  127,  127,  127,
      159,  148,  640,  639,  147,  575,  198,  148,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  572,  571,  191,
      127,  127,  127,  127,  127,  127,  129,  148,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  147,  129,
      129,  129,  129,  129,  129,  191,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  147,  129,  129,  129,  129,  129,
      129,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  138,  131,  131,  131,  131,  131,  131,  134,  135,
      136,  134,  139,  570,  138,  135,  136,  141,  504,  141,
      143,  143,  139,  142,  144,  495,  144,  138,  131,  131,
      131,  131,  131,  131,  134,  135,  136,  134,  139,  142,
      138,  135,  136,  141,  146,  141,  143,  143,  139,  142,
      144,  145,  144,  150,  149,  145,  151,  152,  151,  153,
      146,  153,  494,  493,  152,  142,  492,  423,  420,  150,
      146,  149,  419,  154,  155,  156,  157,  145,  158,  150,
      149,  145,  151,  152,  151,  153,  146,  153,  157,  160,
      152,  154,  155,  156,  158,  150,  161,  149,  163,  154,

      155,  156,  157,  162,  158,  160,  161,  164,  165,  165,
      166,  166,  167,  168,  157,  160,  163,  154,  155,  156,
      158,  164,  161,  418,  163,  168,  171,  352,  173,  170,
      174,  160,  161,  164,  165,  165,  172,  162,  170,  168,
      169,  171,  163,  344,  173,  166,  167,  164,  172,  169,
      174,  168,  171,  169,  173,  170,  174,  177,  169,  175,
      176,  176,  172,  162,  170,  175,  169,  171,  180,  177,
      173,  166,  167,  343,  172,  169,  174,  178,  179,  169,
      178,  179,  182,  177,  169,  175,  176,  176,  181,  181,
      183,  175,  183,  184,  182,  177,  185,  186,  188,  187,

      342,  204,  180,  178,  179,  341,  178,  179,  182,  189,
      188,  184,  185,  186,  181,  181,  183,  187,  183,  184,
      182,  190,  185,  186,  188,  187,  189,  204,  180,  206,
      216,  190,  278,  268,  209,  189,  188,  184,  185,  186,
      267,  266,  265,  187,  236,  196,  195,  190,  194,  126,
      124,   57,  189,   53,   52,  206,  216,  190,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  209,  192,
      192,  192,  192,  192,  192,  202,  192,  202,  202,  202,
      202,  202,  202,  202,  202,  202,   49,   44,   19,  210,
       18,   14,   12,    7,  209,  192,  192,  192,  192,  192,

      192,  207,  192,  197,  207,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,    4,  197,  197,  197,  197,
      197,  197,    3,  210,    0,    0,    0,  207,    0,    0,
      207,    0,    0,    0,  213,    0,    0,    0,    0,    0,
        0,  213,  197,  197,  197,  197,  197,  197,  200,  210,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      213,  200,  200,  200,  200,  200,  200,  213,  205,    0,
        0,    0,    0,    0,    0,    0,    0,  220,    0,    0,
        0,    0,    0,    0,  227,  227,  205,  200,  200,  200,
      200,  200,  200,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  205,  220,  201,  201,  201,  201,  201,  201,
      227,  227,  205,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  215,    0,    0,    0,  208,  205,  208,
      201,  201,  201,  201,  201,  201,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  211,  214,  203,  203,  203,
      203,  203,  203,  208,  212,  208,  212,  215,  217,    0,
      217,  211,  218,  223,  218,  221,  214,  219,  221,  222,
      225,  211,  214,  203,  203,  203,  203,  203,  203,  219,
      212,    0,  212,  215,  217,  222,  217,  211,  218,    0,
      218,  221,  214,  219,  221,  222,  224,  223,  224,  226,

      228,  230,  230,  229,  225,  219,  229,  228,  231,    0,
        0,  222,  235,    0,    0,  226,    0,    0,    0,    0,
        0,  243,  224,  223,  224,  226,  228,  230,  230,  229,
      225,  240,  229,  228,  232,  233,  234,  238,  237,  238,
      240,  226,  231,  232,  232,  232,  235,  243,  233,  234,
      239,  241,  232,  237,    0,  237,  239,  240,    0,    0,
      232,  233,  234,  238,  237,  238,  240,  241,  231,  232,
      232,  232,  235,    0,  233,  234,  239,  241,  232,  237,
      242,  237,  239,  244,  245,  246,  242,  244,  247,  248,
      248,  249,  247,  241,  258,  250,    0,    0,    0,  244,

      250,  245,    0,  246,  251,    0,  242,  249,  252,  244,
      245,  246,  242,  244,  247,  248,  248,  249,  247,  254,
      251,  250,  253,  257,  252,  244,  250,  245,  258,  246,
      251,  255,  257,  249,  252,  254,  259,  253,  255,  253,
      256,  256,  261,    0,  263,  254,  251,  262,  253,  257,
      252,  260,    0,  262,  258,  279,  279,  255,  257,  261,
        0,  254,  259,  253,  255,  253,  256,  256,  261,  280,
      281,  260,  281,  262,  280,  283,  295,  260,  263,  262,
      310,  279,  279,  286,  272,  261,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  280,  281,  260,  281,  310,

      280,  283,  295,    0,  263,  270,  310,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  286,  270,  270,
      270,  270,  270,  270,  273,  310,  273,  273,  273,  273,
      273,  273,  273,  273,  273,    0,    0,    0,    0,    0,
        0,    0,    0,  286,  270,  270,  270,  270,  270,  270,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  285,
      324,  271,  271,  271,  271,  271,  271,  275,  285,  275,
      275,  275,  275,  275,  275,  275,  275,  275,    0,  287,
        0,    0,    0,    0,    0,  285,  324,  271,  271,  271,
      271,  271,  271,  274,  285,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  326,  274,  274,  274,  274,
      274,  274,  277,  287,  277,  277,  277,  277,  277,  277,
      277,  277,  277,    0,    0,    0,    0,    0,    0,    0,
        0,  326,  274,  274,  274,  274,  274,  274,  276,  287,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      282,  276,  276,  276,  276,  276,  276,  284,  284,  284,
      288,  288,  282,  289,  290,  291,  291,  284,  290,  290,
        0,  297,    0,  299,    0,  289,  282,  276,  276,  276,
      276,  276,  276,  284,  284,  284,  288,  288,  282,  289,
      290,  291,  291,  284,  290,  290,  292,  293,  294,  296,

      298,  289,  300,  301,  293,  297,  298,  299,  298,    0,
      294,    0,  292,    0,  300,  301,  296,    0,    0,    0,
      302,  306,  292,  293,  294,  296,  298,  303,  300,  301,
      293,  297,  298,  299,  298,  302,  294,  306,  292,  303,
      300,  301,  296,  304,  305,  307,  302,  306,  308,  309,
      305,  307,  304,  303,  311,    0,  313,  322,  312,  314,
        0,  302,  313,  306,    0,  303,  317,  311,  308,  304,
      305,  307,    0,  312,  308,  314,  305,  307,  304,  315,
      311,  319,  313,  309,  312,  314,  317,  319,  313,  316,
      318,  322,  317,  311,  308,  315,  316,  318,  325,  312,

      320,  314,    0,  320,    0,  315,  329,  319,  321,  309,
        0,  321,  317,  319,  325,  316,  318,  322,  323,  323,
      331,  315,  316,  318,  325,    0,  320,  327,  327,  320,
      328,  328,  329,  330,  321,  333,  331,  321,  332,  330,
      325,    0,    0,  335,  323,  323,  331,  332,  334,  333,
      336,  334,  357,  327,  327,  336,  328,  328,  337,  330,
      337,  333,  331,  335,  332,  330,  338,  339,  340,  335,
      339,  372,  357,  332,  334,  333,  336,  334,  357,    0,
        0,  336,    0,    0,  337,  340,  337,  356,    0,  335,
        0,    0,    0,  339,  340,    0,  339,  372,  357,  345,

      338,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      347,  340,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  356,    0,    0,    0,    0,  338,  346,    0,  346,
      346,  346,  346,  346,  346,  346,  346,  346,  346,    0,
      346,  346,  346,  346,  346,  346,  349,  356,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  346,  346,  346,  346,
      346,  346,  348,    0,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  365,  348,  348,  348,  348,  348,
      348,  351,  365,  351,  351,  351,  351,  351,  351,  351,

      351,  351,  351,  391,    0,    0,    0,    0,    0,    0,
      365,  348,  348,  348,  348,  348,  348,  353,  365,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  391,
      353,  353,  353,  353,  353,  353,  355,    0,  355,  355,
      355,  355,  355,  355,  355,  355,  355,    0,    0,    0,
        0,    0,    0,  358,  370,  358,  353,  353,  353,  353,
      353,  353,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  359,  359,  354,  354,  354,  354,  354,  354,  358,
      360,  358,  361,  364,  368,  364,  367,  368,  370,  362,
      392,  363,  371,  367,  361,  371,  360,  359,  359,  354,

      354,  354,  354,  354,  354,  362,  360,  363,  361,  364,
      368,  364,  367,  368,  370,  362,  392,  363,  371,  367,
      361,  371,  360,    0,  369,    0,    0,  396,    0,    0,
        0,  362,  374,  363,  366,  366,  369,  366,  366,  366,
      366,  366,  366,  366,  373,  366,  375,  376,  377,  374,
      369,  378,  373,  396,  375,  366,  366,    0,  374,  378,
      384,  377,  369,  381,  376,  379,  379,  380,  380,  384,
      373,  382,  375,  376,  377,  374,  383,  378,  373,  382,
      375,    0,  383,  381,  386,  378,  384,  377,  387,  381,
      376,  379,  379,  380,  380,  384,  387,  382,  385,  385,

      388,  386,  383,  394,  401,  382,  394,  389,  383,  381,
      386,  390,  388,  389,  387,  393,  395,  390,  397,  395,
      397,  398,  387,  393,  385,  385,  388,  386,  403,  394,
      401,  399,  394,  389,  402,  398,  404,  390,  388,  389,
      399,  393,  395,  390,  397,  395,  397,  398,  405,  393,
      406,  400,  402,  408,  410,  407,  408,  399,    0,  409,
      402,  398,  403,  407,  400,  416,  399,  400,  414,  414,
      404,  411,    0,    0,  405,  409,  406,  400,  402,  408,
      410,  407,  408,  411,  412,  409,  412,  443,  403,  407,
      400,  415,  413,  400,  414,  414,  404,  411,  413,  416,

      415,  409,  417,    0,    0,    0,    0,    0,    0,  411,
      412,    0,  412,  443,  417,    0,    0,  415,  413,    0,
        0,    0,    0,    0,  413,  416,  415,    0,  417,  421,
      421,  421,  421,  421,  421,  421,  421,  421,    0,  422,
      417,  422,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  424,    0,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  446,  424,  424,  424,  424,  424,  424,
      426,  435,  426,  426,  426,  426,  426,  426,  426,  426,
      426,    0,    0,    0,    0,    0,    0,    0,    0,  446,
      424,  424,  424,  424,  424,  424,  425,  425,  425,  425,

      425,  425,  425,  425,  425,  435,  448,  425,  425,  425,
      425,  425,  425,  427,  448,  427,  427,  427,  427,  427,
      427,  427,  427,  427,    0,  469,    0,    0,    0,    0,
        0,  435,  448,  425,  425,  425,  425,  425,  425,  428,
      448,  428,  428,  428,  428,  428,  428,  428,  428,  428,
      429,  469,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  470,  429,  429,  429,  429,  429,  429,  430,
      476,  430,  430,  430,  430,  430,  430,  430,  430,  430,
        0,  488,    0,    0,    0,    0,    0,    0,  470,  429,
      429,  429,  429,  429,  429,  431,  476,  431,  431,  431,

      431,  431,  431,  431,  431,  431,  431,  488,  431,  431,
      431,  431,  431,  431,  432,    0,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  434,  437,  440,  434,  436,
      437,  438,  439,  439,  431,  431,  431,  431,  431,  431,
      433,  442,  436,  433,    0,    0,  438,  440,  441,  433,
        0,  434,  437,  440,  434,  436,  437,  438,  439,  439,
      441,  442,    0,    0,  445,  445,  433,  442,  436,  433,
      444,  447,  438,  440,  441,  433,  452,  447,  451,    0,
      444,  450,  450,  452,  454,  520,  441,  442,  444,  444,
      445,  445,  449,  453,  451,    0,  444,  447,  449,  453,

      449,  455,  452,  447,  451,  449,  444,  450,  450,  452,
      454,  520,  456,  457,  444,  444,  459,  458,  449,  453,
      451,  455,  461,    0,  449,  453,  449,  455,  460,  457,
      463,  449,  456,  458,  459,  462,  454,  464,  456,  457,
      461,  462,  459,  458,  460,    0,  463,  455,  461,  465,
      533,    0,  468,  464,  460,  457,  463,  468,  456,  458,
      459,  462,  466,  464,  471,  465,  461,  462,  467,    0,
      460,  467,  463,  472,  472,  465,  533,  466,  468,  464,
      473,  473,  478,  468,  471,  474,    0,  474,  466,    0,
      471,  465,  475,  475,  467,  477,  479,  467,  478,  472,

      472,    0,  479,  466,  481,  477,  473,  473,  478,  480,
      471,  474,  477,  474,  482,  484,  481,  484,  475,  475,
      489,  477,  479,    0,  478,  483,  483,  480,  479,  485,
      481,  477,  489,    0,  482,  480,  485,  486,  477,  486,
      482,  484,  481,  484,  524,  524,  489,  487,  490,  513,
      490,  483,  483,  480,  487,  485,  491,  513,  489,  491,
      482,    0,  485,  486,    0,  486,    0,    0,    0,    0,
      524,  524,    0,  487,  490,  513,  490,    0,    0,    0,
      487,  537,  491,  513,  496,  491,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  497,    0,  497,  497,  497,

      497,  497,  497,  497,  497,  497,  498,  537,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,    0,  498,
      498,  498,  498,  498,  498,  499,  539,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  498,  498,  498,  498,  498,
      498,  500,  539,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  500,  511,  500,  500,  500,  500,  500,  500,
      501,  543,  501,  501,  501,  501,  501,  501,  501,  501,
      501,    0,    0,  511,    0,    0,    0,    0,    0,  511,
      500,  500,  500,  500,  500,  500,  503,  543,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  505,  511,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
        0,  505,  505,  505,  505,  505,  505,  507,    0,  507,
      507,  507,  507,  507,  507,  507,  507,  507,    0,    0,
      514,    0,    0,    0,    0,    0,  508,  505,  505,  505,
      505,  505,  505,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  508,  509,  506,  506,  506,  506,  506,  506,
      509,  510,  508,  512,  514,    0,    0,  517,  510,  517,
      519,  518,  512,  519,    0,  515,  518,    0,  508,  509,
      506,  506,  506,  506,  506,  506,  509,  510,  522,  512,

      514,  515,  516,  517,  510,  517,  519,  518,  512,  519,
      521,  515,  518,  523,  525,  516,  527,  526,  522,  521,
      544,  529,  527,  528,  522,  526,  530,  515,  516,  523,
      525,    0,  528,  530,    0,  536,  521,  529,    0,  523,
      525,  516,  527,  526,  522,  521,  544,  529,  527,  528,
      532,  526,  530,  540,  535,  523,  525,  535,  528,  530,
      531,  538,  531,  529,  534,  534,  534,  532,  534,  536,
      545,  541,  542,  540,  541,  547,  532,  538,  548,  540,
      535,  542,  546,  535,  546,  549,  531,  538,  531,  551,
      550,  553,  555,  532,  534,  536,  545,  541,  542,  540,

      541,  547,  550,  538,  548,  551,  552,  542,  546,  556,
      546,  549,  554,  557,  559,  551,  550,  553,    0,  560,
      534,  558,  552,  559,    0,  554,  555,  556,  550,  558,
      557,  551,  552,  565,  561,  556,  560,  569,  554,  557,
      559,  562,  563,    0,  563,  560,  561,  558,  552,  559,
      564,  554,  555,  556,  567,  558,  557,  562,  566,  565,
      561,  568,  560,  569,  564,  584,  568,  562,  563,  567,
      563,  589,  561,  596,  566,    0,  564,    0,    0,    0,
      567,    0,    0,  562,  566,  584,    0,  568,    0,    0,
      564,  584,  568,    0,    0,  567,    0,  589,    0,  596,

      566,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      574,  584,  574,  574,  574,  574,  574,  574,  574,  574,
      574,  574,  576,    0,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,    0,  576,  576,  576,  576,  576,
      576,  578,    0,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  576,  576,  576,  576,  576,  576,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  585,  609,  577,  577,
      577,  577,  577,  577,  581,  585,  581,  581,  581,  581,
      581,  581,  581,  581,  581,    0,    0,    0,    0,    0,

        0,    0,  585,  609,  577,  577,  577,  577,  577,  577,
      580,  585,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  587,  580,  580,  580,  580,  580,  580,  583,
      587,  583,  583,  583,  583,  583,  583,  583,  583,  583,
        0,    0,    0,    0,    0,    0,    0,    0,  587,  580,
      580,  580,  580,  580,  580,  582,  587,  582,  582,  582,
      582,  582,  582,  582,  582,  582,  582,  586,  582,  582,
      582,  582,  582,  582,  588,  590,  592,  586,  591,  591,
      595,    0,  592,    0,  590,    0,  588,    0,    0,  597,
      593,  594,  607,  586,  582,  582,  582,  582,  582,  582,

      588,  590,  592,  586,  591,  591,  593,  594,  592,  597,
      590,  602,  588,  599,  595,  597,  593,  594,  598,  600,
      599,  598,  601,  603,  605,  600,  607,  605,  601,    0,
      603,  602,  593,  594,    0,  597,  612,  602,  604,  599,
      595,  606,  606,  608,  598,  600,  599,  598,  601,  603,
      605,  600,  607,  605,  601,  611,  603,  602,  604,  608,
      610,  613,  614,  610,  604,  615,  612,  606,  606,  608,
      614,  616,  617,    0,  617,  618,  619,  620,  611,  621,
      616,    0,  625,  622,  604,  608,    0,    0,  614,  610,
      622,  623,  612,    0,  623,  613,  614,  616,  617,  615,

      617,  618,  619,  620,  611,  621,  616,  624,  625,  622,
      624,  627,  628,  626,  631,  610,  622,  623,  629,  630,
      623,  613,  626,  632,  634,  615,  629,  627,  635,  633,
      632,  630,  633,  624,  636,  637,  624,  627,  654,  626,
      631,  662,  654,  638,  629,  630,  628,  664,  626,  632,
      634,  637,  629,  627,  635,  633,  632,  630,  633,  638,
      636,  637,    0,    0,  654,    0,    0,  662,  654,  638,
      669,    0,  628,  664,    0,    0,    0,  637,    0,    0,
        0,  666,    0,    0,    0,  638,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  644,  669,  644,  644,  644,

      644,  644,  644,  644,  644,  644,  644,  673,  644,  644,
      644,  644,  644,  644,  645,  666,  645,  645,  645,  645,
      645,  645,  645,  645,  645,    0,  676,    0,    0,    0,
        0,    0,    0,  673,  644,  644,  644,  644,  644,  644,
      646,  666,  646,  646,  646,  646,  646,  646,  646,  646,
      646,  646,  676,  646,  646,  646,  646,  646,  646,  647,
      659,  647,  647,  647,  647,  647,  647,  647,  647,  647,
        0,    0,  659,    0,    0,    0,    0,    0,    0,  646,
      646,  646,  646,  646,  646,  648,  659,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  650,  659,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,    0,
      650,  650,  650,  650,  650,  650,  652,    0,  652,  652,
      652,  652,  652,  652,  652,  652,  652,    0,    0,    0,
        0,    0,    0,  653,    0,  653,  650,  650,  650,  650,
      650,  650,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  684,  658,  651,  651,  651,  651,  651,  651,  653,
      655,  653,  656,  657,  656,  657,  663,  655,  658,  661,
      660,    0,  665,  661,  665,  663,    0,  684,  658,  651,
      651,  651,  651,  651,  651,  667,  655,  660,  656,  657,
      656,  657,  663,  655,  658,  661,  660,  668,  665,  661,

      665,  663,  667,  670,  671,  672,  674,  675,  677,  678,
      679,  667,  682,  660,  685,  668,  680,  672,  682,    0,
      671,  670,    0,  668,  683,  686,  674,  675,  667,  670,
      671,  672,  674,  675,  678,  677,  683,  679,  682,  681,
      685,  668,  687,  672,  682,  680,  671,  670,  681,  688,
      683,  686,  674,  675,  689,  690,  692,  691,  693,  696,
      678,  677,  683,  679,  694,  681,  697,  693,  687,  691,
      695,  680,  698,  698,  681,  688,  694,  713,  715,  699,
      689,  690,  692,  691,  693,  696,  695,    0,    0,    0,
      694,    0,  697,  693,    0,  691,  695,  699,  698,  698,

        0,    0,  694,  713,  715,  699,    0,    0,    0,    0,
      719,  703,  695,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  699,  705,    0,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  719,  705,  705,  705,
      705,  705,  705,  707,    0,  707,  707,  707,  707,  707,
      707,  707,  707,  707,    0,    0,    0,    0,    0,    0,
        0,  720,    0,  705,  705,  705,  705,  705,  705,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  716,  716,
      706,  706,  706,  706,  706,  706,  709,  720,  709,  709,
      709,  709,  709,  709,  709,  709,  709,    0,    0,    0,

        0,    0,    0,    0,  716,  716,  706,  706,  706,  706,
      706,  706,  708,    0,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  718,  708,  708,  708,  708,  708,
      708,  711,  718,  711,  711,  711,  711,  711,  711,  711,
      711,  711,    0,    0,    0,    0,    0,    0,    0,    0,
      718,  708,  708,  708,  708,  708,  708,  710,  718,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  712,
      710,  710,  710,  710,  710,  710,  714,  717,  721,  722,
      724,  723,  714,  723,  717,  712,  725,  726,  728,  724,
      727,  727,  725,  726,  721,  712,  710,  710,  710,  710,

      710,  710,  714,  717,  721,  722,  724,  723,  714,  723,
      717,  712,  725,  726,  729,  724,  727,  727,  725,  726,
      721,  730,  728,  731,  732,  733,  734,  735,  730,  736,
      737,    0,  731,    0,    0,    0,  744,  744,  747,    0,
      729,  732,  738,  739,    0,  743,  737,  730,  728,  731,
      732,  733,  734,  735,  730,  736,  737,  743,  731,  738,
      739,  742,  744,  744,  747,  746,  745,  732,  738,  739,
      761,  743,  737,  745,  761,  763,  742,  746,    0,  764,
        0,    0,    0,  743,    0,  738,  739,  742,    0,    0,
      768,  746,  745,    0,    0,    0,  761,    0,  769,  745,

      761,  763,  742,  746,  752,  764,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  768,  752,  752,  752,
      752,  752,  752,  753,  769,  753,  753,  753,  753,  753,
      753,  753,  753,  753,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  752,  752,  752,  752,  752,  752,  754,
        0,  754,  754,  754,  754,  754,  754,  754,  754,  754,
      754,  767,  754,  754,  754,  754,  754,  754,  755,  773,
      755,  755,  755,  755,  755,  755,  755,  755,  755,    0,
        0,  767,    0,    0,    0,    0,    0,  767,  754,  754,
      754,  754,  754,  754,  756,  773,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  758,  767,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,    0,  758,
      758,  758,  758,  758,  758,  760,    0,  760,  760,  760,
      760,  760,  760,  760,  760,  760,    0,    0,    0,    0,
        0,    0,  762,    0,  762,  758,  758,  758,  758,  758,
      758,  759,  759,  759,  759,  759,  759,  759,  759,  759,
      765,  766,  759,  759,  759,  759,  759,  759,  762,  770,
      762,  771,  772,  775,  771,  776,  765,  766,    0,  777,
        0,  772,  780,    0,    0,  770,  765,  766,  759,  759,
      759,  759,  759,  759,  778,  770,  777,  771,  772,  775,

      771,  776,  765,  766,  774,  777,  782,  772,  779,  781,
      774,  770,  774,  783,  778,  785,  780,  784,  784,  798,
      778,  782,  777,  785,  779,  781,    0,  800,    0,    0,
      774,    0,  782,    0,  779,  781,  774,    0,  774,  783,
      778,  785,  780,  784,  784,  798,    0,  782,    0,  785,
      779,  781,  789,  800,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  791,    0,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  806,  791,  791,  791,
      791,  791,  791,  793,    0,  793,  793,  793,  793,  793,
      793,  793,  793,  793,    0,    0,    0,    0,    0,    0,

        0,  811,  806,  791,  791,  791,  791,  791,  791,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  804,  844,
      792,  792,  792,  792,  792,  792,  795,  811,  795,  795,
      795,  795,  795,  795,  795,  795,  795,    0,  804,    0,
        0,    0,    0,    0,  804,  844,  792,  792,  792,  792,
      792,  792,  794,    0,  794,  794,  794,  794,  794,  794,
      794,  794,  794,  794,  804,  794,  794,  794,  794,  794,
      794,  797,  845,  797,  797,  797,  797,  797,  797,  797,
      797,  797,    0,  799,  805,    0,    0,    0,    0,    0,
      799,  794,  794,  794,  794,  794,  794,  796,  845,  796,

      796,  796,  796,  796,  796,  796,  796,  796,  796,  799,
      796,  796,  796,  796,  796,  796,  799,  801,  805,  802,
      801,  802,  808,  809,  812,  807,  809,  810,    0,  810,
      812,  813,  813,  831,    0,  808,  796,  796,  796,  796,
      796,  796,  807,  801,  805,  802,  801,  802,  808,  809,
      812,  807,  809,  810,  814,  810,  812,  813,  813,  816,
      815,  808,  815,  862,  835,  832,  835,  831,  807,  832,
      814,  841,  843,  843,  841,  816,    0,  863,    0,    0,
      814,    0,    0,    0,    0,  816,  815,    0,  815,  862,
      835,  832,  835,  831,    0,  832,  814,  841,  843,  843,

      841,  816,  821,  863,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  864,  821,  821,  821,  821,  821,
      821,  822,  868,  822,  822,  822,  822,  822,  822,  822,
      822,  822,    0,  837,    0,    0,    0,    0,    0,    0,
      864,  821,  821,  821,  821,  821,  821,  823,  868,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  837,
      823,  823,  823,  823,  823,  823,  824,  842,  824,  824,
      824,  824,  824,  824,  824,  824,  824,    0,    0,  842,
        0,    0,    0,    0,    0,  837,  823,  823,  823,  823,
      823,  823,  825,  842,  825,  825,  825,  825,  825,  825,

      825,  825,  825,  825,  827,  842,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,    0,  827,  827,  827,
      827,  827,  827,  829,    0,  829,  829,  829,  829,  829,
      829,  829,  829,  829,    0,    0,    0,    0,  861,    0,
        0,  871,  830,  827,  827,  827,  827,  827,  827,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  830,  833,
      828,  828,  828,  828,  828,  828,  834,  871,  830,    0,
        0,    0,  861,  859,  838,  833,  859,  836,  867,  892,
      839,  840,  834,  867,  830,  833,  828,  828,  828,  828,
      828,  828,  834,  836,  838,  836,  839,  840,  861,  859,

      838,  833,  859,  836,  867,  892,  839,  840,  834,  867,
        0,  893,    0,    0,    0,    0,    0,    0,    0,  836,
      838,  836,  839,  840,  850,    0,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  850,  852,  893,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  894,  852,
      852,  852,  852,  852,  852,  854,    0,  854,  854,  854,
      854,  854,  854,  854,  854,  854,    0,    0,    0,    0,
        0,    0,    0,    0,  894,  852,  852,  852,  852,  852,
      852,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      866,  897,  853,  853,  853,  853,  853,  853,  856,  866,

      856,  856,  856,  856,  856,  856,  856,  856,  856,    0,
        0,    0,    0,  899,    0,    0,  866,  897,  853,  853,
      853,  853,  853,  853,  855,  866,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  899,  855,  855,  855,
      855,  855,  855,  858,    0,  858,  858,  858,  858,  858,
      858,  858,  858,  858,    0,  860,    0,    0,    0,    0,
        0,    0,  899,  855,  855,  855,  855,  855,  855,  857,
      860,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  860,  857,  857,  857,  857,  857,  857,  865,  869,
      869,  869,  870,  869,  870,  873,  860,  889,  872,  904,

      896,  889,  890,  873,  865,  874,  890,  904,  857,  857,
      857,  857,  857,  857,  865,  872,  896,  874,  870,  869,
      870,  873,    0,  889,  872,  904,  896,  889,  890,  873,
      865,  874,  890,  904,    0,    0,    0,  898,    0,    0,
      898,  872,  896,  874,    0,  869,  880,    0,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  917,  880,
      880,  880,  880,  880,  880,  881,  898,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  922,    0,    0,    0,
        0,  900,    0,    0,  917,  880,  880,  880,  880,  880,
      880,  882,  898,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  922,  895,  882,  882,  882,  882,  882,  882,
      883,  900,  883,  883,  883,  883,  883,  883,  883,  883,
      883,    0,    0,  895,    0,    0,    0,    0,    0,  895,
      882,  882,  882,  882,  882,  882,  884,  900,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  886,  895,
      886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
      923,  886,  886,  886,  886,  886,  886,  888,  902,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  901,  903,
      901,  891,  918,  930,  902,  919,  923,  886,  886,  886,
      886,  886,  886,  891,  902,  903,  924,  925,  924,  918,

      891,  891,    0,  919,  901,  903,  901,  891,  918,  930,
      902,  919,    0,    0,    0,  925,    0,    0,    0,  891,
        0,  903,  924,  925,  924,  918,  891,  891,  910,  919,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      912,  925,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  920,    0,  912,  912,  912,  912,  912,  912,  913,
      932,  913,  913,  913,  913,  913,  913,  913,  913,  913,
        0,  920,    0,    0,    0,    0,    0,  920,  926,  912,
      912,  912,  912,  912,  912,  914,  932,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  920,  914,  914,

      914,  914,  914,  914,  915,  926,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  921,  928,  927,  933,  929,
      931,  921,    0,  931,  914,  914,  914,  914,  914,  914,
      943,  926,  944,  921,  933,  945,  948,  943,  945,  952,
      946,  921,  927,  928,  933,  946,  931,  921,  929,  931,
      944,    0,    0,    0,    0,    0,  943,    0,  944,  921,
      933,  945,  948,  943,  945,  952,  946,    0,  927,  928,
        0,  946,    0,    0,  929,  938,  944,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  953,  947,  938,  938,
      938,  938,  938,  938,  939,  947,  939,  939,  939,  939,

      939,  939,  939,  939,  939,    0,  950,  954,  950,    0,
        0,  955,  953,  947,  938,  938,  938,  938,  938,  938,
      940,  947,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  950,  954,  950,  951,  951,  955,  951,  951,
      951,  951,  951,  951,  956,  957,  951,  965,  967,  968,
      971,  971,  983,  966,  979,  984,  951,  951,  962,  969,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  966,
      956,  957,  979,  965,    0,  969,  971,  971,  983,  966,
      979,  984,  967,  968,    0,  969,  978,    0,  980,  982,
      982,  978,    0,  980,    0,  966,  973,  973,  979,  972,

      972,  969,  972,  972,  972,  972,  972,  972,  967,  968,
      972,  986,  978,  973,  980,  982,  982,  978,  981,  980,
      972,  972,  973,  973,  981,  985,  985,  987,  992,  992,
      993,  986,  994,  995,  987,  996,  993,  986,  994,  973,
      997,  998,  985, 1000,  981, 1003,    0, 1002, 1002, 1007,
      981,  985,  985,  987,  992,  992,  993,  986,  994,  995,
      987,  996,  993, 1000,  994, 1001,  997,  998,  985, 1000,
     1008, 1003, 1001, 1002, 1002, 1007, 1009, 1008, 1011, 1009,
     1010, 1010, 1013, 1014, 1014, 1015,    0, 1021, 1023, 1000,
     1024, 1001, 1016, 1027, 1021, 1026, 1008, 1032, 1001, 1022,

     1022, 1034, 1009, 1008, 1011, 1009, 1010, 1010, 1013, 1014,
     1014, 1015, 1016, 1021, 1023, 1026, 1024, 1039, 1016, 1027,
     1021, 1026, 1031, 1032, 1031, 1022, 1022, 1034,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1016,    0,
        0, 1026,    0, 1039,    0,    0,    0,    0, 1031,    0,
     1031, 1050, 1050, 1050, 1050, 1051, 1051, 1051, 1051, 1052,
     1052, 1052, 1052, 1053,    0, 1053, 1053, 1054, 1054, 1054,
     1054, 1055,    0, 1055, 1055, 1056, 1056, 1058, 1058, 1059,
     1059, 1060, 1060, 1061, 1061, 1062, 1062, 1063, 1063, 1064,
     1064, 1065, 1065, 1066, 1066, 1067, 1067, 1068,    0, 1068,

     1068, 1069, 1069, 1070, 1070, 1071, 1071, 1072, 1072, 1073,
     1073, 1074, 1074, 1075, 1075, 1076, 1076, 1077, 1077, 1078,
     1078, 1079, 1079, 1080, 1080, 1081, 1081, 1082, 1082, 1083,
     1083, 1084, 1084, 1085, 1085, 1086, 1086, 1087, 1087, 1088,
     1088, 1089, 1089, 1090, 1090, 1091, 1091, 1092, 1092, 1093,
     1093, 1094, 1094, 1096, 1096, 1097, 1097, 1098, 1098, 1100,
     1100, 1101, 1101, 1102, 1102, 1105, 1105, 1106, 1106, 1107,
     1107, 1109,    0, 1109, 1109, 1110,    0, 1110, 1110, 1111,
     1111, 1112, 1112, 1115,    0, 1115, 1115, 1116,    0, 1116,
     1116, 1117, 1117, 1118, 1118, 1119, 1119, 1120, 1120, 1121,

     1121, 1123, 1123, 1124, 1124, 1125, 1125, 1126, 1126, 1127,
     1127, 1129, 1129, 1130, 1130, 1131, 1131, 1133, 1133, 1135,
     1135, 1136, 1136, 1137, 1137, 1139, 1139, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,

     1049, 1049, 1049
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[132] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2171 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2276 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1050 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6028 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LINK_LOCAL_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::KEY_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::SECRET_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::ALGORITHM_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 173 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 175 "SrvLexer.l"
;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 179 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 184 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 185 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 186 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 117:
YY_RULE_SETUP
#line 193 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 202 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 211 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 220 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 229 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 238 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 247 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 259 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 266 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 287 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 319 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 347 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%20x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 357 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%20u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 366 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 369 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3185 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1050 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1050 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1049);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 369 "SrvLexer.l"



