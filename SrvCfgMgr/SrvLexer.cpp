#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 136
#define YY_END_OF_BUFFER 137
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1080] =
    {   0,
        1,    1,    0,    0,    0,    0,  137,  135,    2,    1,
        1,  135,  117,  135,  135,  134,  134,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  121,  121,  136,    1,    1,    1,    0,  129,
      117,    0,  129,  119,  118,  134,    0,    0,  133,    0,
      126,  100,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  114,  130,  130,  102,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,   17,   18,  130,  130,  130,  130,  130,  130,  130,
      130,  120,  118,  134,    0,    0,    0,  125,  131,  124,
      124,  130,  130,  130,  130,  130,  130,  101,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
       94,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  113,  134,    0,    0,    0,    0,  123,  123,

        0,  124,    0,  124,  130,  130,  130,   67,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  108,  130,  130,
      130,   31,  130,  130,   47,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,    0,  130,
      130,  130,  130,  130,  130,   24,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  115,  130,  130,  130,  130,  134,    0,  132,
        0,    0,    0,  123,    0,  123,    0,  124,  124,  124,
      124,  130,  130,  130,  130,  130,  107,  130,  130,  130,
        4,  130,  130,  130,  130,  130,  130,  130,  116,  130,

       97,  130,  130,    3,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,    0,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,    7,  130,
       46,  130,  130,   25,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,    0,    0,    0,    0,
        0,  123,  123,  123,  123,    0,  124,  124,  124,    0,
      124,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,   30,  130,  130,  130,  130,  130,
       39,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,    0,

        0,  130,  130,  130,   37,  130,  130,  130,  130,   35,
      130,  130,  130,   63,   95,  130,  130,  130,  111,   45,
      130,  130,  130,  130,  130,  130,  130,    0,    0,    0,
        0,  123,  123,  123,    0,  123,    0,    0,  124,  124,
      124,  124,  130,  130,   34,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,    0,  130,  130,  110,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,    0,    0,  130,  130,  130,  130,  130,   61,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,

       22,  130,  130,  130,  132,    0,    0,    0,    0,    0,
      123,  123,  123,  123,    0,  124,  124,  124,    0,  124,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,    0,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,   83,  130,
      130,  130,   48,  130,   57,  130,  130,  130,   12,   10,
       99,  130,   44,    0,    0,  130,  130,  130,   59,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
        5,  130,  130,  130,   14,    0,    0,    0,    0,  123,
      123,  123,    0,  123,  128,  124,  124,  124,  124,  130,

      130,  130,  130,  130,   96,  130,  130,  130,  130,  130,
      130,  130,  130,  130,    0,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,   85,  130,  130,
      130,  130,  130,  130,  130,  130,   11,   66,    0,    0,
      130,  130,  130,   60,  130,  130,  130,  130,  130,   32,
      130,  130,    6,  109,   41,  130,  130,    0,    0,    0,
        0,  127,  123,  123,  123,  123,  124,  124,  124,    0,
      124,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,   58,  130,    0,  130,  130,  130,  130,
      130,  130,  130,  130,   38,  130,  130,   36,  130,  130,

      130,  130,  130,  130,  130,   33,   13,    0,    0,   54,
       53,   40,  130,   23,  130,  130,  130,   43,   42,  130,
      130,  132,    0,    0,  123,  123,  123,    0,  123,  124,
      124,  124,  124,  130,   15,  130,   65,  130,  130,  130,
      130,   77,  130,   76,  130,  130,    0,  130,  130,  130,
      130,  130,  130,   80,  130,  130,  130,   87,   89,   91,
       93,  130,  130,  130,   56,   55,  130,  130,  130,  130,
      130,   62,    0,    0,    0,    0,  123,  123,  123,  123,
      124,  124,  124,    0,  124,  130,  130,  112,  130,   79,
      130,  130,  130,  130,    0,   98,  130,  130,  130,   52,

      130,   81,   64,  130,  130,  130,    8,  130,  130,   26,
      130,  130,    0,    0,    0,  123,  123,  123,    0,  123,
      124,  124,  124,  124,  130,  130,  130,   78,   74,  130,
      130,    0,  130,  130,   51,  130,  130,  130,  130,   68,
      130,  130,  130,  130,  130,  132,    0,    0,    0,  123,
      123,  123,  123,  124,  124,  124,    0,  124,  130,  130,
       75,  130,  130,    0,  130,  130,  130,  130,  130,  130,
      130,  130,  130,   16,   21,    0,    0,  122,  125,  123,
      123,  123,    0,  123,  124,  124,  124,  124,  130,  130,
      130,   28,    0,    0,  130,  130,  130,   82,  130,  130,

       27,  130,  130,  130,    0,    0,  122,    0,  123,  123,
      123,  123,  123,  124,  124,  124,    0,  124,  130,  130,
      130,    0,    0,   29,  130,  130,   84,  130,  130,  130,
      130,  130,  130,  130,  132,  122,  125,  123,    0,  123,
      123,  123,  123,  124,  124,  124,   69,  130,  130,  130,
      130,    0,    0,  130,  130,  130,  130,  130,  130,   50,
      130,   20,  130,    0,  122,  123,  123,  123,  123,  124,
      124,  124,  130,  130,  130,  130,  130,    0,    0,  130,
      130,   86,   88,   90,   92,    9,   19,    0,  123,  123,
        0,  123,  123,  124,   49,  130,  130,  130,  130,    0,

        0,  130,  130,  132,  123,  123,  124,  130,  130,  130,
      130,    0,    0,    0,  130,  130,  130,    0,  123,  123,
        0,  130,  130,  130,  130,    0,    0,    0,  103,  130,
      130,  130,  103,  122,  123,  123,   70,  130,  130,  130,
        0,  105,    0,  130,  105,  130,  122,  123,  123,    0,
      130,  130,   73,    0,  104,  130,  104,    0,  123,  123,
      130,   71,  106,  106,    0,  123,  123,    0,   72,  132,
      123,  123,    0,  123,  123,    0,  123,  123,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1170] =
    {   0,
        0,    0, 1152, 1151,    0,    0, 1157, 6145, 6145,   73,
       75, 1148,    0, 1142,   72,   72,   34, 1103, 1099,  136,
      186,  233,  280,   71,  208,  338,   66,  236,   38,   89,
      223,  240,  340,   72,  275,  373,  418,  398,   68,  251,
      180,  333, 6145, 1079, 6145,  111,  137,  213, 1077, 6145,
        0, 1062, 1034, 6145,    0,  476,  964,  464, 6145,    0,
      521, 6145,   60,  564,  188,  192,  182,  183,  279,  387,
      336,  193,  240,  397,  337,  263,  274,  389,  278,  390,
      474,  555,  335,  543,  578,  579,  580,  582,  611,  384,
      607,  597,  559,  613,  595,  381,  599,  603,  394,  499,

      630,  631,  640,  654,  429,  647,  652,  632,  653,  684,
      668,  442,  481,  685,  691,  662,  689,  676,  699,  698,
      706, 6145,    0,  764,  958,  539,  955,  809,    0,  854,
      783,  897,  698,  689,  700,  889,  890,  687,  898,  886,
      709,  893,  913,  762,  894,  701,  930,  833,  796,  938,
      941,  928,  929,  945,  934,  953,  962,  968,  949,  959,
      743,  981,  982,  980,  984,  987,  978, 1024, 1017,  986,
     1014, 1002, 1016, 1023, 1034, 1015, 1026, 1030, 1045, 1039,
     1051, 1066, 1054, 1069, 1070, 1076, 1088, 1091, 1082, 1073,
     1103, 1107,  814, 1165,  834,  922,  921,  918, 1212,  874,

     1184, 1257, 1300, 1231, 1343,  906, 1278, 1067, 1332, 1104,
     1144, 1165, 1295, 1333, 1217, 1342, 1330, 1085, 1336, 1337,
     1376, 1100, 1343, 1381, 1372, 1383, 1347, 1375, 1386, 1261,
     1384, 1382, 1388, 1378, 1424, 1431, 1433, 1419,  929, 1428,
     1397, 1435, 1434, 1438, 1436, 1125, 1465, 1480, 1458, 1467,
     1469, 1486, 1477, 1490, 1492, 1521, 1499, 1488, 1501, 1523,
     1517, 1539, 1199, 1535, 1537, 1532, 1544, 1276,  910,  909,
      880,  879, 1602, 1613, 1656, 1632, 1675, 1701, 1720, 1746,
     1765,  878, 1529, 1536, 1540, 1745, 1374, 1792, 1533, 1634,
     1688, 1744, 1760, 1778, 1750, 1780, 1788, 1779, 1447, 1785,

     1487, 1795, 1824, 1797, 1812, 1829, 1834, 1832, 1836, 1831,
     1844, 1839, 1861, 1830, 1699, 1876, 1866, 1872, 1868, 1885,
     1880, 1891, 1881, 1883, 1882, 1893, 1918, 1913, 1542, 1904,
     1592, 1916, 1921, 1617, 1929, 1926, 1933, 1945, 1928, 1935,
     1960, 1943, 1964, 1968, 1970, 1973,  877,  876,  875,  874,
     2031, 2042, 2061, 2087, 2106, 2070, 2132,  864, 2144, 2187,
     2163, 2029, 2086, 1965, 2148, 2175, 2181, 2188, 2199, 2180,
     2200, 2205, 2187, 2186, 2275, 2223, 2221, 2220, 2123, 2222,
     1635, 2258, 2268, 2260, 2272, 2269, 2265, 2261, 2264, 2279,
     2274, 2273, 2280, 2301, 2313, 2311, 2316, 2314, 2315, 1771,

     1941, 2318, 2320, 2324, 1984, 2325, 2326, 2354, 2364, 2074,
     2373, 2353, 2365, 2307, 2332, 2367, 2360, 2372, 2362, 2363,
     2378, 2370, 2375, 2377, 2406, 2418, 2412,  835,  834,  823,
     2476, 2487,  822, 2499, 2542, 2518, 2561, 2587, 2598, 2617,
     2643, 2662, 2414, 2410, 2520, 2429, 2644, 2409, 2655, 2642,
     2417, 2648, 2665, 2658, 2677, 2414, 2693, 2660, 2478, 2679,
     2529, 2695, 2696, 2692, 2707, 2704, 2689, 2729, 2732, 2741,
     2743, 2728, 2747, 2752, 2745, 2756, 2762, 2764, 2759, 2779,
     2742, 2548, 2580, 2781, 2783, 2791, 2777, 2794, 2585, 2806,
     2811, 2804, 2814, 2812, 2828, 2835, 2829, 2823, 2833, 2846,

     2596, 2856, 2843, 2848,  820,  819,  817,  790, 2914, 2925,
     2936, 2955, 2981, 3000, 2964, 3026,  789, 3038, 3081, 3057,
     3059, 3067, 3075, 2980, 3079, 3080, 3077, 2847, 3099, 3095,
     2851, 3111, 3112, 3113, 3078, 2696, 3123, 3120, 3131, 3117,
     3135, 3130, 3133, 3160, 3163, 3162, 3152, 3171, 2852, 3194,
     3167, 3158, 2923, 3185, 2968, 3192, 3182, 3183, 3175, 3187,
     3190, 3204, 3191, 3219, 3202, 3219, 3222, 3226, 3212, 3227,
     3249, 3239, 3241, 3242, 3244, 3254, 3243, 3262, 3258, 3273,
     3251, 3271, 3279, 3283, 3266,  788,  787,  786, 3341, 3352,
      785, 3364, 3407, 3383, 3392, 3452, 3426, 3497, 3471, 3294,

     3394, 3486, 3439, 3495, 3276, 3487, 3494, 3489, 3496, 3497,
     3518, 3535, 3541, 3526, 3313, 3547, 3528, 3536, 3538, 3539,
     3550, 3549, 3560, 3546, 3571, 3582, 3579, 3386, 3603, 3601,
     3610, 3615, 3591, 3618, 3594, 3590, 3587, 3593, 3607, 3614,
     3606, 3607, 3626, 3602, 3631, 3650, 3646, 3643, 3651, 3637,
     3645, 3656, 3640, 3642, 3647, 3670, 3674,  751,  750,  742,
      741, 3716, 3734, 3753, 3779, 3798, 3824,  738, 3836, 3879,
     3855, 3841, 3866, 3875, 3871, 3874, 3778, 3873, 3891, 3893,
     3713, 3877, 3882, 3655, 3915, 3749, 3911, 3914, 3927, 3930,
     3858, 3931, 3934, 3928, 3920, 3943, 3945, 3921, 3975, 3958,

     3977, 3955, 3961, 3965, 3974, 3963, 3964, 3973, 3970, 3968,
     3970, 3972, 3995, 3973, 4006, 4014, 4020, 3979, 3982, 4011,
     4025,  736,  687,  685, 4083,  681, 4095, 4138, 4114, 4183,
     4157, 4228, 4202, 4223, 3986, 4019, 4015, 4017, 4117, 4221,
     4170, 4018, 4222, 4022, 4074, 4231, 4105, 4219, 4227, 4226,
     4230, 4229, 4259, 4232, 4267, 4270, 4268, 4262, 4263, 4264,
     4265, 4282, 4295, 4297, 6145, 6145, 4298, 4311, 4275, 4310,
     4314, 4279,  677,  636,  620,  590, 4374, 4393, 4419, 4438,
     4464,  589, 4476, 4519, 4495, 4316, 4479, 4281, 4510, 4313,
     4514, 4515, 4533, 4418, 4330, 4335, 4534, 4512, 4520, 4406,

     4521, 4516, 4522, 4566, 4551, 4568, 4584, 4569, 4570, 4554,
     4562, 4564,  588,  587,  579, 4630,  578, 4644, 4687, 4663,
     4732, 4706, 4777, 4751, 4563, 4572, 4674, 4567, 4583, 4766,
     4767,  588, 4685, 4764, 4586, 4773, 4781, 4772, 4776, 4623,
     4777, 4779, 4796, 4810, 4817,  575,  546,  545,  544, 4877,
     4896, 4922, 4941, 4967,  543, 4979, 5022, 4998, 4830, 4809,
     4719, 4811, 5000, 5019, 5011, 5036, 4838, 4921, 5038, 5039,
     4816, 5052, 5016, 4819, 4909,  542,  541,  540,    0, 5110,
      539, 5122, 5165, 5141, 5210, 5184, 5255, 5229, 5024, 5223,
     5046, 4982, 5028, 5030, 5257, 5152, 5247, 5075, 5274, 5252,

     5144, 5260, 5259, 5270,  502,  501,  500,  499,  498, 5334,
     5353, 5379, 5398, 5424,  497, 5436,    0, 5455, 5433, 5438,
     5456, 5183, 5269, 5254, 5378, 5271, 5256, 5321, 5313, 5366,
     5441, 5451, 5466, 5457,  495,  494, 6145,  493,    0, 5524,
      492, 5536, 5555, 5581, 5600,    0, 5272, 5585, 5578, 5478,
     5613, 5333, 5471, 5581, 5598, 5514, 5515, 5609, 5612, 5454,
     5596, 5523, 5600,  491,  489,  488,  486, 5673, 5692, 5718,
      452,    0, 5615, 5678, 5599, 5676, 5706, 5599,    0, 5675,
     5750, 5603, 5651, 5674, 5705, 5709, 5716,  449,  447,  444,
        0, 5774, 6145,    0, 5726, 5753, 5754, 5755, 5756,    0,

     5750, 5807, 5774,  441,  431,  414, 6145, 5778, 5794, 5792,
     5795, 5807, 5756, 5784, 5814, 5825, 5808,  413,  402,  398,
        0, 5807, 5828, 5835, 5793, 5830, 5818, 5813, 6145, 5846,
     5849, 5844, 5830,  396,  394,  393, 5839, 5857, 5862, 5864,
     5842, 6145, 5865, 5874, 5853, 5878,  364,  363,  353,    0,
     5887, 5882, 5860, 5886, 6145, 5897, 5891,  349,  325,  314,
     5895, 5894, 6145, 5896,    0,  310,  309,    0, 5898,  307,
      305,  303,  276,  267,  260,    0,  254,  220, 6145, 5968,
     5972, 5976, 5980, 5984, 5988, 5990,  233, 5992, 5994, 5996,
     5998, 6000, 6002, 6004, 6006, 6008, 6010, 6014, 6016, 6018,

     6020, 6022, 6024, 6026, 6028, 6030, 6032, 6034, 6036, 6038,
     6040, 6042, 6044, 6046, 6048, 6050, 6052, 6054, 6056, 6058,
     6060, 6062, 6064, 6066,  232, 6068, 6070, 6072,  231, 6074,
     6076, 6078,  230,  228, 6080, 6082, 6084,  226, 6088, 6092,
     6094, 6096,  223,  219, 6100, 6104, 6106, 6108, 6110, 6112,
     6114,  217, 6116, 6118, 6120, 6122, 6124,  145, 6126, 6128,
     6130,  131, 6132,  117, 6134, 6136, 6138,   80, 6140
    } ;

static yyconst flex_int16_t yy_def[1170] =
    {   0,
     1079,    1, 1080, 1080, 1081, 1081, 1079, 1079, 1079, 1079,
     1079, 1082, 1083, 1084, 1079, 1079,   16, 1079, 1079, 1079,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1079, 1079, 1079, 1079, 1079, 1079, 1082, 1079,
     1083, 1084, 1079, 1079, 1085, 1079, 1086,   56, 1079, 1087,
     1079, 1079,   26,   26,   64,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   64,   64,   26,   26,   26,
       26,   26,   64,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1079, 1085, 1079, 1088,  124, 1089, 1079, 1087, 1079,
      130,   64,  132,  132,   26,   26,   26,   26,   26,   26,
      132,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1079,  194, 1090, 1091, 1092, 1079,  199,

     1079, 1079, 1079,  202,  132,  205,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1079,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  195,  195, 1091,
     1093, 1094, 1079, 1079, 1079,  274, 1079, 1079,  278, 1079,
      280,  205,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1079,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1095, 1079, 1096, 1097,
     1079, 1079,  352, 1079,  354, 1079, 1079, 1079, 1079, 1079,
      359,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1098,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1079,

     1079,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1099, 1100, 1101,
     1079, 1079, 1079, 1079, 1079,  434, 1079, 1079, 1079,  439,
     1079,  441,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1079,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1079, 1079,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26, 1096, 1079, 1102, 1103, 1079, 1079,
     1079,  511, 1079,  513, 1079, 1079, 1079, 1079, 1079,  518,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1079,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1079, 1079,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1104, 1105, 1106, 1079, 1079,
     1079, 1079, 1079,  592, 1079, 1079,  596, 1079,  598,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1079,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1079, 1079,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1107, 1079, 1108,
     1109, 1079, 1079,  663, 1079,  665, 1079, 1079, 1079, 1079,
      669,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1079,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26, 1079, 1079,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1110, 1111, 1112, 1079, 1079, 1079, 1079,  727, 1079,
      730, 1079,  732,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1079,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1079, 1079,   26,   26,   26,   26,
       26,   26, 1113, 1079, 1114, 1115, 1079,  777, 1079,  779,
     1079, 1079, 1079, 1079,  783,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1079,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1116, 1117, 1118, 1079, 1079, 1079, 1079,  818,
     1079,  821, 1079,  823,   26,   26,   26,   26,   26,   26,
       26, 1079,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1119, 1079, 1120, 1121, 1079,
      850, 1079,  852, 1079, 1079, 1079, 1079,  856,   26,   26,
       26,   26,   26, 1079,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1122, 1123, 1124, 1125, 1079,
     1079, 1079, 1079,  882, 1079,  885, 1079,  887,   26,   26,
       26,   26, 1079, 1079,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26, 1126, 1079, 1127, 1079, 1128, 1079,
      910, 1079,  912, 1079, 1079, 1079, 1129,  916,   26,   26,
       26, 1079, 1079,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1130, 1131, 1079, 1132, 1133, 1079,
     1079, 1079,  942, 1079,  944, 1134,   26,   26,   26,   26,
       26, 1079, 1079,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1135, 1079, 1136, 1137, 1079,  968, 1079,
     1079, 1138,   26,   26,   26,   26,   26, 1079, 1139,   26,
     1140,   26,   26,   26,   26,   26,   26, 1141, 1079, 1142,
     1143, 1079, 1079, 1144,   26,   26,   26,   26,   26, 1145,

     1079, 1146,   26, 1147, 1148, 1149, 1079,   26,   26,   26,
       26, 1079, 1079, 1079,   26,   26,   26, 1150, 1079, 1151,
     1152,   26,   26,   26,   26, 1079, 1079, 1079, 1079,   26,
       26,   26,   26, 1153, 1154, 1155,   26,   26,   26,   26,
     1079, 1079, 1079,   26,   26,   26, 1156, 1079, 1157, 1158,
       26,   26,   26, 1079, 1079,   26,   26, 1159, 1160, 1161,
       26,   26, 1079,   26, 1162, 1079, 1163, 1164,   26, 1079,
     1165, 1166, 1159, 1079, 1167, 1168, 1169, 1079,    0, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079
    } ;

static yyconst flex_int16_t yy_nxt[6221] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   29,
       36,   37,   38,   39,   40,   41,   29,   42,   29,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   29,   36,   37,   38,   39,
       40,   41,   29,   42,   29,   46,   47,   48,   47,   54,
     1079,   63,  913,   55,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   64,   58,   58,   58,   58,   58,

       58,   87,   59,   63,  117,   63, 1079,   63,   63,   63,
       98,   63,   99,   46,   47,   63,   90,   82,   60, 1072,
       64,   58,   58,   58,   58,   58,   58,   87,   59,   63,
      117,   63,   63, 1070,   63,   63,   98,   63,   99,   48,
       47,   63,   90,   82,   60,   63,   63, 1060,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   57,   63,   64,
       64,   65,   66,   64,   67,   63,   68,   63,   63,   63,
       69,   63,   70,   63,   63,   63,   63,   63,   63,   71,
       63,   63,   63,   63,   63,   64,   64,   65,   66,   64,
       67,   63,   68,   63,   63,   63,   69,   63,   70,   63,

       63,   63,   63,   63,   63,   71,   63,   63,   63,   63,
       63,   64,   64,  133,   64,   46,   47,  120,  134, 1036,
       63, 1007,   63,   63,  135, 1006,   63,  140,  994,   72,
      972,   83,  967,  946,  909,  129,   63,   64,   64,  133,
       64, 1076,   63,  120,  134,   63,   63,   84,   63,   63,
      135,   85,   63,  140,   91,   72,   73,   83,   64,   64,
       92,   64,   63,   93,   88,  141,   63,   74,   63,   63,
       75,   63,   89,   84,  118, 1076,   63,   85,  119,   63,
       91, 1076,   73,   63,   64,   64,   92,   64, 1068,   93,
       88,  141,   63,   74,   63,   63,   75, 1079,   89,  145,

      118,  100,   63,   64,  119,   63,   76,   77,  136,   63,
      146,   78,  101,  137,   63,  102,   79,   80,   63,  148,
       63,   63,   63,   81, 1076,  145, 1068,  100, 1073,   64,
     1068, 1050,   76,   77,  136, 1068,  146,   78,  101,  137,
       63,  102,   79,   80,   63,  148, 1050,   63,   63,   81,
       63,   63,   63,   63,   63,   63,   63,   63,   63, 1079,
      121,   63,   63,   63,   63,   63,   63,   94,   63,  152,
      937,   95,   63,  144, 1050,   63,   63,   96,  139,   63,
       63,   86,   97,   63, 1021, 1058,  121,   63,   63,   63,
       63,   63,   63,   94,   63,  152,  103,   95,   63,  144,

      104,   63,   63,   96,  139,   63,   63,   86,   97,   63,
      105,  112,  113,  138, 1050, 1021,   63,  908,  147, 1021,
      142,  114,  103,  991,   63,  149,  104,   63,  143,  115,
       63,  161,   63,   63,  879, 1021,  105,   63,  116,  138,
       63,   63,   63,  106,  147,  107,  142,  114,  108,  109,
       63,  149,  991,   63,  143,  115,   63,  161,   63,   63,
      110,  111, 1018,   63,  116,  991,   63,   63,  939,  106,
      849,  107,  178,  917,  108,  109,  126,  126,  126,  126,
      126,  126,  126,  126,  126,   63,  110,  111,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  125,  178,  126,

      126,  126,  126,  126,  126,  150,   59,  991,  171,  939,
      908,   63,  128,  883,  939,  908,  964,   63,  857,  939,
      937,  908,  849,  776,   63,  126,  126,  126,  126,  126,
      126,  150,   59,  130,  130,  130,  130,  130,  130,  130,
      130,  130,   63,   63,  131,  131,  131,  131,  131,  131,
       63,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      819,  908,  849,  128,  784,  879,  849,  776,   63,  153,
      131,  131,  131,  131,  131,  131,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  125,   63,  132,  132,  132,
      132,  132,  132,  151,   68,  153,  876,  864,   63,  728,

      849,  165,   63,  156,  154,  157,  155,   63,  776,  661,
      670,  128,   63,  132,  132,  132,  132,  132,  132,  151,
       68,   63,   63,   63,   63,   63,  164,  165,   63,  156,
      154,  157,  155,   63,  158,  162,  168,  169,   63,  159,
       63,  776,   63,  163,  166,  170,   63,   63,   63,   63,
       63,   63,  164,  160,   63,  181,   63,  661,  173,  167,
      158,  162,  168,  169,   63,  159,   63,  172,   63,  163,
      166,  170,   63,   63,   63,   63,   63,  180,  174,  160,
       63,  181,   63,   63,  173,  167,  175,  179,  176,  177,
       63,  182,  185,  172,  186,   63,   63,   63,  128,   63,

       63,   63,  593,  180,  174,  188,  776,  183,  661,   63,
      190,   63,  175,  179,  176,  177,   63,  182,  185,   63,
      189,   63,   63,   63,  184,  206,  187,   63,   63,  207,
       63,  188,   63,  183,   63,  191,  190,   63,  192,  213,
      208,   63,   63,   63,   63,   63,  189,  193,  218,   63,
      184,  206,  187,   63,   63,  207,   63,  773,   63,  519,
       63,  191,  128,  661,  192,  213,  208,   63,   63,   63,
       63,  508,  508,  193,  218,   63,  194,  194,  194,  194,
      194,  194,  194,  194,  194,   57,   63,  195,  195,  195,
      195,  195,  195, 1079,   59,  204,  204,  204,  204,  204,

      204,  204,  204,  204,  216,   63,  435,  661,  508,  128,
      360,  128,   63,  195,  195,  195,  195,  195,  195,  221,
       59,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      216,   63,  200,  200,  200,  200,  200,  200,  508,   63,
      350,  586,  220,  275,  508,  221,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  350,  350,   63,  200,  200,
      200,  200,  200,  200,  201,   63,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  203,   63,  204,  204,  204,
      204,  204,  204,   63, 1079,  203,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  128,  350,  198,  128, 1079,

      350,  198,   63,  204,  204,  204,  204,  204,  204,  205,
      205,  205,  205,  205,  205,  205,  205,  205,   57,  212,
      205,  205,  205,  205,  205,  205,  209,  210,  211,   63,
      347, 1079,   63,   63,  214,  217,   63,   63,  317,  128,
      215,   63,  198,  198,  283,  212,  205,  205,  205,  205,
      205,  205,  209,  210,  211,   63,   63,  219,   63,   63,
      214,  217,   63,   63,  222,  225,  215,   63,  223,  224,
      283,   63,   63,   63,  226,  227,  198,   63,  228,  128,
      231,   63,   63,  219,   63,  128,  232,  229,   63,  235,
      222,  225,   63,  230,  223,  224,   63,   63,   63,   63,

      226,  227,   63,   63,  228,   63,  231,   63,  233,  236,
       63,   63,  232,  229,   63,  234,  237,  242,   63,  230,
      238,   63,   63,   63,   63,   63,  241,   63,   63,   63,
       63,   63,  239,  240,  233,  236,  246,   63,  250,  243,
       52,  234,  237,  242,  247,   63,  238,   63,  244,   63,
       63,   63,  245,   63,  248,   63,   63,   63,   63,   63,
       63,  249,  246,  251,  250,  243,   63,   63,   53,   63,
      247,   63,  252,   63,  244,  256,  253,   63,  245,  254,
      248,   50,   63,   63,   63,   63,   63,  249,   63,  251,
      122,  255,   63,   63,   63,   63,  257,   63,  252,   63,

      258,  261,  253,   63,  265,  254,  259,  264,   63,   63,
       63,  260,   63,   63,   63,  262,   63,  255,  263,   63,
       63,   62,  257,   63,   61,   63,  258,  261,   63,  266,
      265,   63,  259,  264,   63,   63,   63,  260,   63,   63,
      267,  262,   63,   63,  263,   63,   63,   63,   53,  287,
       63,   63,   50,  288,   63,  266, 1079,   63,   44,   44,
       63, 1079, 1079, 1079, 1079, 1079,  267, 1079,   63,   63,
     1079, 1079,   63,   63,  289,  287,   63,  268,  268,  268,
      268,  268,  268,  268,  268,  268,   57,   63,  269,  269,
      269,  269,  269,  269,   63,   59,  277,  277,  277,  277,

      277,  277,  277,  277,  277, 1079, 1079, 1079,   63, 1079,
     1079, 1079, 1079,   63,  269,  269,  269,  269,  269,  269,
     1079,   59,  273, 1079,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  275,   63,  276,  276,  276,  276,  276,
      276, 1079,   63,  279,  279,  279,  279,  279,  279,  279,
      279,  279, 1079,  292, 1079, 1079, 1079, 1079, 1079, 1079,
       63,  276,  276,  276,  276,  276,  276,  201,   63,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  203,  292,
      279,  279,  279,  279,  279,  279,   63,  284,  268,  268,
      268,  268,  268,  268,  268,  268,  268, 1079, 1079, 1079,

     1079, 1079, 1079,  305,   63,  285,  279,  279,  279,  279,
      279,  279,  280,  280,  280,  280,  280,  280,  280,  280,
      280,   63,  290,  281,  281,  281,  281,  281,  281,  305,
       63,  285, 1079, 1079, 1079, 1079, 1079, 1079,   63,  294,
     1079, 1079, 1079, 1079, 1079, 1079, 1079,   63,  290,  281,
      281,  281,  281,  281,  281,  282,  282,  282,  282,  282,
      282,  282,  282,  282,   63,  293,  282,  282,  282,  282,
      282,  282,  286,   63,  291,   63,   63,  295,  296,   63,
       63,  300, 1079,  298,  303,   63,   63,  309,  302, 1079,
       63,  293,  282,  282,  282,  282,  282,  282,  286,   63,

      291,   63,   63,  295,  296,   63,   63,  297,  299,  298,
      301,   63,   63,  304,  302,   63,   63,   63,   63,   63,
      306,   63,  307, 1079,   63,   63,   63,   63,  316,   63,
      308,   63, 1079,  297,  299, 1079,  301, 1079,  320,  304,
       63,   63, 1079,   63,   63,   63,  306,   63,  307,  310,
       63,   63,   63,   63,  318,   63,  308,   63,  311,  312,
      313,  314,   63,  315,  320,  323,   63,   63,  322,  319,
     1079,   63,  321,  324,   63,  310,   63,   63,   63,   63,
      318,   63, 1079,  328,  311,  312,  313,  314,   63,  315,
       63,  323,  325,   63,  322,  319,  326,   63,  321,  324,

       63,   63,   63,   63,   63,   63,  327,   63,   63,  328,
       63,  330,   63,  331,  329,  332,   63,  333,  325,  334,
       63, 1079,  326,   63,  338, 1079,  337,   63,  339,   63,
       63,   63,  327,   63,   63,   63,   63,  330,   63,  331,
      329,  332,   63,  333,   63,  334,   63,  335,  342,   63,
      338,  341,  337,  346,  339,   63,   63,   63,  343,   63,
       63,   63,  336,  344,   63,  340,   63,  372,   63,  345,
       63,  362,   63,  335,  363,   63,   63,  341,   63,   63,
       63,  364,   63,   63,  343,   63,   63,   63,  336,  344,
       63,  340,   63,  372, 1079,  345, 1079,  362,   63, 1079,

      363,   63,   63, 1079,   63,   63,   63,  364,   63,   63,
     1079,   63, 1079,   63,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  273, 1079,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  275,   63,  353,  353,  353,  353,
      353,  353, 1079,  373,  353,  353,  353,  353,  353,  353,
      353,  353,  353, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
       63,   63,  353,  353,  353,  353,  353,  353,  354,  354,
      354,  354,  354,  354,  354,  354,  354,   63,   63,  355,
      355,  355,  355,  355,  355,  356,   63,  277,  277,  277,
      277,  277,  277,  277,  277,  277, 1079,  374, 1079, 1079,

     1079, 1079, 1079,   63,   63,  355,  355,  355,  355,  355,
      355,  201, 1079,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  203,  398,  358,  358,  358,  358,  358,  358,
     1079,   63,  358,  358,  358,  358,  358,  358,  358,  358,
      358, 1079,   63, 1079, 1079, 1079, 1079, 1079, 1079,  398,
      358,  358,  358,  358,  358,  358,  201,   63,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  360,   63,  361,
      361,  361,  361,  361,  361, 1079,  365,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  375,   63,   63, 1079,
     1079,  376,  379,   63, 1079,  361,  361,  361,  361,  361,

      361, 1079,  365,   63,  384, 1079,  387,  380,  482, 1079,
      382,  383,  375,   63,   63,  366,  377,  376,  379,   63,
      378,   63,   63,   63,  381,  367,  368,  369,   63,   63,
      370,   63,  371,  380,  482,   63,  382,  383,   63,  397,
       63,  366,  377,  388, 1079, 1079,  378,   63,   63,   63,
      381,  367,  368,  369,   63,   63,  370,   63,  371,  385,
      389,   63,  390,  391,   63,  386,   63,   63,  393,  388,
      392,  394,   63,   63,   63,   63,  395,   63, 1079,   63,
     1079,   63,   63, 1079,  396,  385,  389,   63,  390,  391,
     1079,  386,  400,   63,  393,  403,  392,  394,   63,   63,

       63,   63,  395,   63,   63,   63,  399,  401,   63,  402,
      396,   63,  404,   63,  406,   63,  405,  407,  400,   63,
      408,  403,  409,   63,   63,   63,   63,  411,   63, 1079,
       63,  413,  399,  401,   63,  402,   63,   63,  404,  410,
      406,   63,  405,  407, 1079,   63,  408,   63,  409,   63,
       63,   63,   63,  417,   63,  412,   63,  413,  414,   63,
       63,   63,   63,  415,   63,  410,  416,  418,  483,   63,
      420,   63,   63,   63,  419,  421,   63,  425,   63,  417,
     1079,  412,   63,  422,  414,   63,   63,   63,   63,  415,
       63,  423,  416,  418,  483,   63,  420,   63,   63,  427,

      419,  421,   63,   63,   63,  424,  445,   63,   63,  422,
      426,   63,   63,   63,   63, 1079,   63,  423, 1079, 1079,
     1079, 1079, 1079, 1079, 1079,  427, 1079,   63, 1079,   63,
     1079,  424,  445,   63,   63, 1079,  426,   63,  443,   63,
     1079,  431,   63,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  273,   63,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  275, 1079,  433,  433,  433,  433,  433,
      433, 1079,   63,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  433,  433,  433,  433,  433,  433,  273,   63,  434,

      434,  434,  434,  434,  434,  434,  434,  434,  435,  444,
      436,  436,  436,  436,  436,  436, 1079,   63,  436,  436,
      436,  436,  436,  436,  436,  436,  436, 1079, 1079,   63,
     1079, 1079,  462, 1079, 1079,  444,  436,  436,  436,  436,
      436,  436,  201,   63,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  203,  201,   63,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  360,   63,  440,  440,  440,
      440,  440,  440, 1079, 1079,  440,  440,  440,  440,  440,
      440,  440,  440,  440, 1079, 1079, 1079, 1079, 1079, 1079,
      446,   63,   63,  440,  440,  440,  440,  440,  440,  441,

      441,  441,  441,  441,  441,  441,  441,  441,  448,  447,
      442,  442,  442,  442,  442,  442,  446,   63,   63,  449,
      451,  455, 1079,   63,   63, 1079,  450,  452,  454,   63,
       63,   63,  453, 1079,  448,  447,  442,  442,  442,  442,
      442,  442,   63,   63,   63,  449,  451,  455,   63,   63,
       63,  461,  450,  452,  454,   63,   63,   63,  453,  459,
     1079,  460,  463,   63,   63,   63,   63, 1079,   63,   63,
     1079, 1079, 1079, 1079,   63,  456,  456,  461,  456,  456,
      456,  456,  456,  456,  457,  459,  456,  460,  463,   63,
       63,   63,   63,  464,  465,  466,  456,  456,  467,  468,

      469,   63,  472,   63,   63,  470,  471,   63,   63,  473,
      474,   63,   63, 1079,  475,   63,   63,   63, 1079,  464,
      465,  466,   63,   63,  467,  468,  469,   63,  472,   63,
       63,  470,  471,   63,   63,  473,  474,   63,   63,  477,
      475,   63,   63,   63,   63,  476,  478,  479,   63,   63,
       63,  480,  481,  484,   63,  488,   63,   63,   63,   63,
      485,   63,  493,   63,  486,  477,  487,   63,   63,   63,
       63,  476,  478,  479,  494,   63,   63,  480,  481,  484,
       63,  488,   63,   63,   63,   63,  485,   63,  489,   63,
      486,  490,  487,   63,   63,   63,   63,   63,  492,  497,

      496,   63,  495,   63,  491,   63,   63,   63,   63,  498,
       63,  499,  500,   63,  489,   63,   63,  490,   63,  501,
       63,   63,   63,   63,  492,  497,  496,  503,  495,   63,
      491,   63,   63,   63,   63,  498,   63,  499,  500,   63,
      502,   63,   63,  504,   63,  501,   63,   63,  521,   63,
      524,  522,   63,   63,  531,   63,  528,  523,  536,  526,
       63,   63, 1079, 1079, 1079, 1079,  502, 1079, 1079,  504,
     1079, 1079,   63, 1079,  521,   63,  524,  522,   63,   63,
      531,   63,  528,  523,  536,  526,   63,   63,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  273,   63,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  275,  273,
     1079,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      435,   63,  512,  512,  512,  512,  512,  512, 1079,  525,
      512,  512,  512,  512,  512,  512,  512,  512,  512, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079,   63,  512,  512,
      512,  512,  512,  512,  513,  513,  513,  513,  513,  513,
      513,  513,  513,   63,  541,  514,  514,  514,  514,  514,
      514,  515,   63,  437,  437,  437,  437,  437,  437,  437,
      437,  437, 1079,  564, 1079, 1079, 1079, 1079, 1079,   63,
      541,  514,  514,  514,  514,  514,  514,  201,   63,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  201,  564,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  360,
      565,  517,  517,  517,  517,  517,  517, 1079,   63,  517,
      517,  517,  517,  517,  517,  517,  517,  517, 1079,   63,
     1079, 1079, 1079, 1079, 1079, 1079,  565,  517,  517,  517,
      517,  517,  517,  201,   63,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  519,   63,  520,  520,  520,  520,
      520,  520, 1079,  527,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  529,  530,   63,  532,   63,  533,  534,
     1079,   63,  520,  520,  520,  520,  520,  520,   63,  527,

      535,   63, 1079,   63,  539, 1079,  549, 1079,   63,  529,
      530,   63,  532,   63,  533,  534,  540,   63,  537,  546,
       63, 1079,   63,  615,   63,  542,  535,   63,  538,   63,
      539,  543,   63,  544,   63,   63,   63,  539,   63,   63,
      545,  548,  540,  547,  537,  546,   63,   63,   63,  615,
       63,  542,  550,  554,  538,  551, 1079,  543,   63,  544,
     1079,   63,   63,  539,   63,   63,  545,  548,  552,  547,
      553,   63,   63,   63,  555,   63,   63,  556,  550,  554,
      563,  551,  557,  558,   63,   63,   63,  561,   63,  559,
       63,  560, 1079, 1079,  552,   63,  553,   63,   63,   63,

      555,   63,   63,  556,  566,   63,  563,   63,  557,  558,
       63,   63,   63,  561,   63,  559,   63,  560,  569,  562,
       63,   63,   63, 1079,   63,   63,   63,  567,   63, 1079,
      566,   63,  571,   63,   63,  568,  570,   63,  573,  575,
     1079,  574,  572,  576,  569,  562,   63,   63,   63,   63,
       63,  577,   63,  567,   63,   63,  607,   63,  571,  580,
       63,  568,  570,   63,  573,  575,   63,  574,  572,  576,
      579,   63,   63,   63,  581,   63,   63,  577,   63,  578,
       63,   63,  582,   63,  584,  580,   63,  583,  585,   63,
       63,   63,   63,  610,   63,   63,  579,   63,   63,   63,

      581, 1079,   63, 1079,   63,  578, 1079, 1079,  582, 1079,
      584, 1079,   63,  583,  585,   63,   63,   63, 1079,  610,
       63,   63, 1079, 1079,  589,   63,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  273, 1079,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  273, 1079,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  435, 1079,  591,
      591,  591,  591,  591,  591, 1079,   63,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  595,  595,  595,  595,
      595,  595,  595,  595,  595,  591,  591,  591,  591,  591,
      591,  273,   63,  592,  592,  592,  592,  592,  592,  592,

      592,  592,  593,  603,  594,  594,  594,  594,  594,  594,
     1079,   63,  594,  594,  594,  594,  594,  594,  594,  594,
      594, 1079, 1079,   63, 1079, 1079, 1079, 1079, 1079,  603,
      594,  594,  594,  594,  594,  594,  201,   63,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  360,  201,   63,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  519,
     1079,  597,  597,  597,  597,  597,  597, 1079, 1079,  597,
      597,  597,  597,  597,  597,  597,  597,  597, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079,  600,  597,  597,  597,
      597,  597,  597,  598,  598,  598,  598,  598,  598,  598,

      598,  598,   63,  601,  599,  599,  599,  599,  599,  599,
       63,  602,  600,  604,  606,  605, 1079, 1079,   63, 1079,
       63,   63,   63,   63,  614,  609,  608, 1079,   63,  601,
      599,  599,  599,  599,  599,  599,   63,  602,   63,  604,
      606,  605,   63,  617,   63,  611,   63,   63,   63,   63,
      614,  609,  608,  612,   63,   63,   63,  616,  618,  619,
       63,  613,  620,   63,   63,  621,   63,  633,   63,  617,
      622,  611, 1079,   63,   63, 1079,   63, 1079,   63,  612,
       63,   63,   63,  616,  618,  619,   63,  613,  620,   63,
      624,  621,   63,  626,  623,   63,  622,  627,  625,   63,

       63,   63,   63,   63,   63,   63,   63,  628,  629,  630,
       63,  631,  634,  632,   63,  635,  624,  637,   63,  626,
      623,   63,  636,  627,  625,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,  634,  632,
       63,  635,  639,  637,   63,  638,  640,   63,  636,  642,
      641,   63,   63,  643,   63,   63,   63,  644,  645,   63,
       63,   63,   63,   63,  646,   63, 1079,  647,  639,   63,
       63,  638,  640,   63,  651,  642,  641,  648,  649,  643,
      650,   63,   63,  644,   63,   63,   63,   63,   63,  652,
      646,   63,   63,  647,   63,   63,   63,   63,  655,  653,

      651,   63,  654,  648,  649,   63,  650,  656,   63,   63,
       63,   63,   63,   63,   63,  652,   63,  672,   63,   63,
       63,  657,   63,   63,  655,  653,   63,   63,  654, 1079,
     1079,   63, 1079,  656, 1079,   63, 1079,   63, 1079, 1079,
       63, 1079,   63,  672, 1079,   63, 1079,  657,   63,  686,
     1079, 1079,   63,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  273,   63,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  435,  273,  686,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  593, 1079,  664,  664,  664,
      664,  664,  664, 1079, 1079,  664,  664,  664,  664,  664,

      664,  664,  664,  664,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  664,  664,  664,  664,  664,  664,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  673,   63,
      666,  666,  666,  666,  666,  666, 1079,   63,  668,  668,
      668,  668,  668,  668,  668,  668,  668, 1079, 1079, 1079,
     1079, 1079, 1079, 1079,  673,   63,  666,  666,  666,  666,
      666,  666,  201,   63,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  519,  675,  668,  668,  668,  668,  668,
      668, 1079,   63,  671,  671,  671,  671,  671,  671,  671,
      671,  671, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

      675,  668,  668,  668,  668,  668,  668,  201,   63,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  670,  674,
      671,  671,  671,  671,  671,  671,  676,  677,  678,   63,
       63,  679,   63,  680,  681,  685, 1079,   63,   63,   63,
       63,  682, 1079, 1079, 1079,  674,  671,  671,  671,  671,
      671,  671,  676,  677,  678,   63,   63,  679,   63,  680,
      681,   63,  683,   63,   63,   63,   63,  682,  684,   63,
      687,   63,  689,  692,  688,  690,  691, 1079,   63,   63,
     1079,   63,   63,  694,   63,  693,  695,   63,  683,   63,
       63,  697,   63,   63,  684,   63,  687,   63,  689,  692,

      688,  690,  691,   63,   63,   63,  698,   63,   63,  694,
       63,  693,  695,  696,   63,   63,   63,  699,   63,   63,
      700,  701,   63,  702,  703,   63,  704,  705,  706,   63,
       63,  707,  698,   63,   63, 1079,   63,   63,  708,  696,
       63,  709,  710, 1079,   63,   63,   63,  711,   63,   63,
       63,   63,  704,   63,  706,  715,   63,  707,   63,   63,
       63,   63,   63,   63,  708,  713,  712,  709,  710,   63,
       63,   63,   63,  711,   63,   63,   63,  714,  716,   63,
       63,  718,  717,   63,   63,   63,   63,   63,   63,   63,
       63,  713,  712,   63,   63,   63,  719,  720,   63,   63,

       63,  721, 1079,  714,  716, 1079,   63,  718,  717,   63,
     1079,   63,   63,   63,   63,   63,   63,   63, 1079,   63,
       63, 1079,  719,  720,   63,   63, 1079,  721,  662,  662,
      662,  662,  662,  662,  662,  662,  662, 1079,  743,   63,
     1079, 1079, 1079,   63,  273, 1079,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  593,   63,  726,  726,  726,
      726,  726,  726, 1079,  743,  726,  726,  726,  726,  726,
      726,  726,  726,  726, 1079,  747, 1079, 1079, 1079, 1079,
     1079, 1079,   63,  726,  726,  726,  726,  726,  726,  273,
     1079,  727,  727,  727,  727,  727,  727,  727,  727,  727,

      728,  747,  729,  729,  729,  729,  729,  729, 1079,  739,
      729,  729,  729,  729,  729,  729,  729,  729,  729, 1079,
     1079,   63, 1079, 1079, 1079, 1079, 1079, 1079,  729,  729,
      729,  729,  729,  729,  201,  739,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  519,  201,   63,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  670, 1079,  731,
      731,  731,  731,  731,  731, 1079, 1079,  731,  731,  731,
      731,  731,  731,  731,  731,  731, 1079, 1079, 1079, 1079,
     1079, 1079,  734, 1079,   63,  731,  731,  731,  731,  731,
      731,  732,  732,  732,  732,  732,  732,  732,  732,  732,

      740,  752,  733,  733,  733,  733,  733,  733,  734,   63,
       63,  736,  737,  735,   63,  738,   63,   63,   63,  742,
       63,  745,  741,  749,  744,   63,  740,  752,  733,  733,
      733,  733,  733,  733,   63,   63,   63,  736,  737,  735,
       63,  738,   63,   63,   63,  742,   63,  745,  741,  746,
      744,   63,  748,  750,   63,  751,  753,   63,   63,  755,
       63,  754,   63,   63,   63, 1079,  756, 1079,  757,  761,
       63,   63, 1079,   63,   63,  746,  759,   63,  748,  750,
       63,  751,  753,   63,   63,  755,   63,  754,   63,   63,
       63,  758,  756,  760,  757,  762,   63,   63,   63,   63,

       63,   63,  763,   63,   63,  764,   63,   63,   63,  765,
      766,   63,   63,   63,   63,   63,   63,   63,   63, 1079,
       63,  762,   63, 1079,   63,   63,  767,   63,  763,   63,
       63,  764,   63,   63,   63,  765,  766,   63,   63,   63,
      768,   63,   63,   63,   63,  769,   63,  770,   63,   63,
      772,   63,  767,  771,   63,   63,  787,   63,   63,  788,
       63,   63,   63,   63,   63,   63,  768, 1079,   63, 1079,
     1079,  769, 1079,  770, 1079,   63,  772, 1079, 1079,  771,
       63, 1079,  787,   63,   63,  788,   63,   63,   63,   63,
     1079,   63, 1079,  273,   63,  510,  510,  510,  510,  510,

      510,  510,  510,  510,  593,  273, 1079,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  728,  793,  778,  778,
      778,  778,  778,  778, 1079, 1079,  778,  778,  778,  778,
      778,  778,  778,  778,  778, 1079, 1079, 1079, 1079, 1079,
     1079, 1079,  795,  793,  778,  778,  778,  778,  778,  778,
      779,  779,  779,  779,  779,  779,  779,  779,  779,  789,
       63,  780,  780,  780,  780,  780,  780, 1079,  795,  782,
      782,  782,  782,  782,  782,  782,  782,  782, 1079, 1079,
     1079, 1079, 1079, 1079, 1079,  789,   63,  780,  780,  780,
      780,  780,  780,  201, 1079,  781,  781,  781,  781,  781,

      781,  781,  781,  781,  670,  791,  782,  782,  782,  782,
      782,  782, 1079,   63,  785,  785,  785,  785,  785,  785,
      785,  785,  785, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079,  791,  782,  782,  782,  782,  782,  782,  201,   63,
      783,  783,  783,  783,  783,  783,  783,  783,  783,  784,
      786,  785,  785,  785,  785,  785,  785,  790,  794,  792,
      796,  797,   63,  798,   63,   63,   63,  799,  801,   63,
       63,  800,   63,   63,   63,   63,  786,  785,  785,  785,
      785,  785,  785,  790,  794,  792,  796,  797,   63,  798,
       63,   63,   63,  799,  804,   63,   63,  800,   63,   63,

       63,   63,   63,  802,  803,   63,   63,   63,   63,  805,
       63,   63, 1079,   63, 1079, 1079, 1079,  810,   63, 1079,
      804,  806,   63,  807,   63,   63,  808, 1079,   63,  802,
      803,   63,   63,   63,   63,  805,   63,   63,   63,   63,
       63,   63,  809,  810,   63,  812,  811,  806,   63,  807,
       63,   63,  808,   63,   63,  825,   63,   63, 1079,   63,
     1079, 1079, 1079, 1079,   63, 1079,   63,   63,  809, 1079,
      832,  812,  811, 1079, 1079, 1079, 1079, 1079,   63,   63,
       63,  825,   63,   63,  273,   63,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  728,  832,  817,  817,  817,

      817,  817,  817, 1079,   63,  817,  817,  817,  817,  817,
      817,  817,  817,  817, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079,  817,  817,  817,  817,  817,  817,  273,
     1079,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      819,  831,  820,  820,  820,  820,  820,  820, 1079,   63,
      820,  820,  820,  820,  820,  820,  820,  820,  820, 1079,
     1079,   63, 1079, 1079, 1079, 1079, 1079,  831,  820,  820,
      820,  820,  820,  820,  201,   63,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  670,  201,   63,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  784, 1079,  822,

      822,  822,  822,  822,  822, 1079, 1079,  822,  822,  822,
      822,  822,  822,  822,  822,  822, 1079, 1079, 1079, 1079,
     1079, 1079,   63, 1079,  826,  822,  822,  822,  822,  822,
      822,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      827,  828,  824,  824,  824,  824,  824,  824,   63,  829,
      826, 1079,  834,   63,  835,   63,  836,   63,   63,   63,
      830,  833,  837,   63,   63,   63,  827,  828,  824,  824,
      824,  824,  824,  824,  839,  829,   63,   63,  834,   63,
      835,   63,  836,   63,   63,   63,  830,  833,  837,   63,
       63,   63,  838,  841,   63,  840,  842,   63,  843,  845,

      839, 1079,   63,   63,  844,   63,  859,   63,  860,   63,
       63,   63,   63,   63, 1079,   63, 1079, 1079,  838, 1079,
       63,  840,  842,   63,  843,  845,   63,   63, 1079,   63,
      844,   63,  859,   63,  860,   63,   63,   63,   63,   63,
      273,   63,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  728,   63,   63,  273,   63,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  819,   63,  851,  851,  851,
      851,  851,  851, 1079, 1079,  851,  851,  851,  851,  851,
      851,  851,  851,  851, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079,   63,  851,  851,  851,  851,  851,  851,  852,

      852,  852,  852,  852,  852,  852,  852,  852,  865,  861,
      853,  853,  853,  853,  853,  853, 1079,   63,  855,  855,
      855,  855,  855,  855,  855,  855,  855, 1079,   63, 1079,
     1079, 1079, 1079, 1079,  865,  861,  853,  853,  853,  853,
      853,  853,  201,   63,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  784,   63,  855,  855,  855,  855,  855,
      855, 1079,   63,  858,  858,  858,  858,  858,  858,  858,
      858,  858, 1079,  866, 1079, 1079, 1079, 1079, 1079, 1079,
     1079,  855,  855,  855,  855,  855,  855,  201,   63,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  857,  867,

      858,  858,  858,  858,  858,  858,  862,   63,  863,   63,
       63,  868,  869, 1079,  871,   63,   63,  870,  890,   63,
       63,  872,   63,  873,   63,  867,  858,  858,  858,  858,
      858,  858,  862,   63,  863,   63,   63,  868,  869,   63,
      871,   63,   63,  870,  875,   63,   63,  872,   63,  873,
       63,  874,   63,   63,   63,  898,  902,  889,  891,   63,
       63, 1079,   63, 1079, 1079,   63, 1079, 1079, 1079, 1079,
      875, 1079, 1079,   63, 1079, 1079, 1079,  874,   63,   63,
       63,   63,  902,  889,  891,   63,   63,  273,   63,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  819,   63,

      881,  881,  881,  881,  881,  881, 1079,   63,  881,  881,
      881,  881,  881,  881,  881,  881,  881, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079,  881,  881,  881,  881,
      881,  881,  273, 1079,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  883,  899,  884,  884,  884,  884,  884,
      884, 1079,   63,  884,  884,  884,  884,  884,  884,  884,
      884,  884, 1079, 1079,   63, 1079, 1079, 1079, 1079, 1079,
      899,  884,  884,  884,  884,  884,  884,  201,   63,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  784,  201,
       63,  885,  885,  885,  885,  885,  885,  885,  885,  885,

      857, 1079,  886,  886,  886,  886,  886,  886, 1079, 1079,
      886,  886,  886,  886,  886,  886,  886,  886,  886, 1079,
     1079, 1079, 1079, 1079, 1079,   63, 1079,  892,  886,  886,
      886,  886,  886,  886,  887,  887,  887,  887,  887,  887,
      887,  887,  887,   63,  893,  888,  888,  888,  888,  888,
      888,   63,  895,  892,   63,  921, 1079, 1079,  904,   63,
      894,  896,  922, 1079,  919,  900,  901,   63,  923,   63,
      893,  888,  888,  888,  888,  888,  888,  897,  895,   63,
       63,   63,   63,  903,  904,   63,  894,  896,  922,   63,
      919,  900,  901,   63,  923,   63, 1079, 1079, 1079, 1079,

     1079, 1079, 1079,  897, 1079,   63, 1079,   63,   63,  903,
     1079, 1079, 1079, 1079, 1079,   63, 1079, 1079,   63, 1079,
      273,   63,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  819,  273, 1079,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  883,   63,  911,  911,  911,  911,  911,
      911, 1079, 1079,  911,  911,  911,  911,  911,  911,  911,
      911,  911, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079,  911,  911,  911,  911,  911,  911,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  925,   63,  913,  913,
      913,  913,  913,  913, 1079,   63,  915,  915,  915,  915,

      915,  915,  915,  915,  915, 1079,  952, 1079, 1079, 1079,
     1079, 1079,  925,   63,  913,  913,  913,  913,  913,  913,
      201,   63,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  857,  952,  915,  915,  915,  915,  915,  915, 1079,
     1079,  918,  918,  918,  918,  918,  918,  918,  918,  918,
     1079,  920, 1079, 1079, 1079, 1079, 1079, 1079, 1079,  915,
      915,  915,  915,  915,  915,  201,   63,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  917,  920,  918,  918,
      918,  918,  918,  918,  924,  926,  932,  927,  928,  929,
       63,  930,   63,  931,  933,   63,  953,   63,  955,   63,

       63,  934,   63,   63,  918,  918,  918,  918,  918,  918,
      924,  926,  932,   63,   63,   63,   63,   63, 1079,  931,
      933,   63,  953,   63,  955,   63,   63,  934,   63,   63,
     1079, 1079, 1079,  958, 1079,  956, 1079, 1079,  957,   63,
       63,   63, 1079,   63,  273, 1079,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  883,   63,  941,  941,  941,
      941,  941,  941, 1079,   63,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  978, 1079, 1079, 1079, 1079,  959,
     1079, 1079,   63,  941,  941,  941,  941,  941,  941,  273,
       63,  942,  942,  942,  942,  942,  942,  942,  942,  942,

      978,  954,  943,  943,  943,  943,  943,  943, 1079,   63,
      943,  943,  943,  943,  943,  943,  943,  943,  943, 1079,
     1079,   63, 1079, 1079, 1079, 1079, 1079,  954,  943,  943,
      943,  943,  943,  943,  201,   63,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  857,  201,   63,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  917, 1079,  945,
      945,  945,  945,  945,  945, 1079, 1079,  945,  945,  945,
      945,  945,  945,  945,  945,  945,   63,  948,  961,  949,
      947,   63,  960, 1079,   63,  945,  945,  945,  945,  945,
      945,  950,  963,  962,   63, 1079,  979,   63,  951,   63,

       63,  975,   63,  948,  961,  949,  947,   63,  960,   63,
       63, 1079, 1079, 1079, 1079, 1079, 1079,  950,  963,  962,
       63,   63,  979,   63,  951,   63,   63,  975, 1079, 1079,
      982, 1079, 1079,  983,  273,   63,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  883,  273,   63,  968,  968,
      968,  968,  968,  968,  968,  968,  968,   63,   63,  969,
      969,  969,  969,  969,  969, 1079,   63,  969,  969,  969,
      969,  969,  969,  969,  969,  969, 1079, 1079, 1079, 1079,
     1079, 1079, 1079,   63,   63,  969,  969,  969,  969,  969,
      969,  201,   63,  970,  970,  970,  970,  970,  970,  970,

      970,  970,  917,  974,  971,  971,  971,  971,  971,  971,
     1079,  973,  971,  971,  971,  971,  971,  971,  971,  971,
      971,   63,  980,  981,   63,  984,  985,  987,   63,  974,
      971,  971,  971,  971,  971,  971,  986,  973,  976,   63,
     1000,   63,   63,   63,  977,  997,   63,   63,  980,  981,
       63,  995,   63,  987,   63,   63,   63, 1079,   63, 1079,
     1079, 1079,  986, 1079,  976,   63, 1000,   63,   63,   63,
      977,  997,   63, 1079, 1079, 1079, 1079,  995,   63, 1079,
     1079,   63,   63,  273,   63,  992,  992,  992,  992,  992,
      992,  992,  992,  992,   63, 1079,  993,  993,  993,  993,

      993,  993, 1079,  996,  993,  993,  993,  993,  993,  993,
      993,  993,  993, 1079,  998, 1079, 1002,   63,   63,   63,
       63,   63,  993,  993,  993,  993,  993,  993,  201,  996,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  917,
      998,  999, 1002,   63,   63,   63, 1079,   63,   63,   63,
     1001, 1001,   63, 1001, 1001, 1001, 1001, 1001, 1001,   63,
     1079, 1001, 1079, 1009, 1010, 1079, 1079,  999, 1079,   63,
     1079, 1001, 1001, 1079,   63,   63, 1013, 1014,   63, 1028,
     1008, 1079, 1079, 1011,  273,   63,  510,  510,  510,  510,
      510,  510,  510,  510,  510,   63,   63,   63,   63,   63,

     1016, 1017, 1013, 1014, 1079, 1028, 1008, 1012, 1012, 1011,
     1012, 1012, 1012, 1012, 1012, 1012, 1022,   63, 1012, 1023,
     1029,   63,   63,   63,   63,   63, 1016, 1017, 1012, 1012,
     1024, 1079, 1025, 1026, 1027,   63, 1040,   63,   63, 1079,
     1030, 1031, 1022,   63, 1033, 1023, 1029,   63, 1032, 1037,
       63,   63, 1079, 1041, 1042, 1043, 1024,   63, 1025, 1026,
     1027,   63, 1040,   63,   63, 1038, 1030, 1031,   63, 1044,
     1033,   63, 1039,   63, 1032, 1037,   63,   63,   63, 1041,
     1042, 1043,   63,   63, 1054, 1045, 1046,   63, 1055,   63,
     1079, 1038,   63, 1051,   63, 1044,   63,   63, 1039,   63,

       63, 1057, 1052,   63,   63,   63, 1053,   63,   63, 1063,
     1054, 1045, 1046,   63, 1055,   63, 1056,   63,   63, 1051,
     1064,   63,   63, 1061, 1062,   63,   63, 1057, 1052,   63,
       63,   63, 1053,   63,   63, 1063, 1069,   63,   63,   63,
       63,   63, 1056,   63, 1079, 1079, 1064,   63, 1079, 1061,
     1062,   63, 1079, 1079, 1079, 1079,   63, 1079, 1079, 1079,
       63, 1079, 1069,   63,   63,   63,   63,   63,   43,   43,
       43,   43,   45,   45,   45,   45,   49,   49,   49,   49,
       51, 1079,   51,   51,   52,   52,   52,   52,  123, 1079,
      123,  123,  127,  127,  196,  196,  197,  197,  270,  270,

      271,  271,  272,  272,  348,  348,  349,  349,  428,  428,
      429,  429,  430,  430,  458, 1079,  458,  458,  505,  505,
      506,  506,  507,  507,  587,  587,  588,  588,  658,  658,
      659,  659,  660,  660,  722,  722,  723,  723,  724,  724,
      587,  587,  774,  774,  775,  775,  813,  813,  814,  814,
      815,  815,  846,  846,  847,  847,  848,  848,  723,  723,
      877,  877,  878,  878,  905,  905,  906,  906,  907,  907,
      935,  935,  936,  936,  938,  938,  814,  814,  965,  965,
      966,  966,  988,  988,  989,  989,  990,  990, 1001, 1079,
     1001, 1001, 1003, 1079, 1003, 1003, 1004, 1004, 1005, 1005,

     1012, 1079, 1012, 1012, 1015, 1079, 1015, 1015,  877,  877,
     1019, 1019, 1020, 1020, 1034, 1034, 1035, 1035, 1047, 1047,
     1048, 1048, 1049, 1049,  936,  936, 1059, 1059, 1065, 1065,
     1066, 1066, 1067, 1067, 1071, 1071, 1074, 1074, 1075, 1075,
     1077, 1077, 1078, 1078,    7, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079
    } ;

static yyconst flex_int16_t yy_chk[6221] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   29, 1168,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   27,   16,   63,   39,   24,   17,   29,   24,   27,
       34,   39,   34,   46,   46,   34,   30,   24,   16, 1164,
       24,   16,   16,   16,   16,   16,   16,   27,   16,   63,
       39,   24,   30, 1162,   24,   27,   34,   39,   34,   47,
       47,   34,   30,   24,   16,   20,   20, 1158,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   65,   21,   48,   48,   41,   66, 1152,
       21, 1144,   21,   41,   67, 1143,   68,   72, 1138,   21,
     1134,   25, 1133, 1129, 1125, 1087,   72,   21,   21,   65,
       21, 1078,   25,   41,   66,   25,   21,   25,   21,   41,
       67,   25,   68,   72,   31,   21,   22,   25,   22,   22,
       31,   22,   72,   32,   28,   73,   31,   22,   25,   22,
       22,   25,   28,   25,   40, 1077,   22,   25,   40,   28,
       31, 1075,   22,   32,   22,   22,   31,   22, 1074,   32,
       28,   73,   31,   22,   40,   22,   22, 1073,   28,   76,

       40,   35,   22,   23,   40,   28,   23,   23,   69,   32,
       77,   23,   35,   69,   23,   35,   23,   23,   35,   79,
       40,   79,   69,   23, 1072,   76, 1071,   35, 1070,   23,
     1067, 1066,   23,   23,   69, 1060,   77,   23,   35,   69,
       23,   35,   23,   23,   35,   79, 1059,   79,   69,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       42,   26,   26,   26,   26,   26,   26,   33,   26,   83,
     1058,   33,   26,   75, 1049,   26,   42,   33,   71,   71,
       75,   26,   33,   33, 1048, 1047,   42,   26,   26,   26,
       26,   26,   26,   33,   26,   83,   36,   33,   26,   75,

       36,   26,   42,   33,   71,   71,   75,   26,   33,   33,
       36,   38,   38,   70, 1036, 1035,   36, 1034,   78, 1020,
       74,   38,   36, 1019,   96,   80,   36,   90,   74,   38,
       70,   90,   78,   80, 1018, 1006,   36,   99,   38,   70,
       74,   38,   36,   37,   78,   37,   74,   38,   37,   37,
       96,   80, 1005,   90,   74,   38,   70,   90,   78,   80,
       37,   37, 1004,   99,   38,  990,   74,   38,  989,   37,
      988,   37,  105,  971,   37,   37,   58,   58,   58,   58,
       58,   58,   58,   58,   58,  112,   37,   37,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,  105,   56,

       56,   56,   56,   56,   56,   81,   56,  967,  100,  966,
      965,  112,  964,  941,  938,  936,  935,   81,  915,  909,
      908,  907,  906,  905,  113,   56,   56,   56,   56,   56,
       56,   81,   56,   61,   61,   61,   61,   61,   61,   61,
       61,   61,  100,   81,   61,   61,   61,   61,   61,   61,
      113,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      881,  878,  877,  876,  855,  849,  848,  847,  100,   84,
       61,   61,   61,   61,   61,   61,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   84,   64,   64,   64,
       64,   64,   64,   82,   64,   84,  846,  832,   82,  817,

      815,   93,   93,   87,   85,   88,   86,   64,  814,  813,
      782,  776,   84,   64,   64,   64,   64,   64,   64,   82,
       64,   85,   86,   87,   82,   88,   92,   93,   93,   87,
       85,   88,   86,   64,   89,   91,   95,   97,   95,   89,
       92,  775,   97,   91,   94,   98,   98,   85,   86,   87,
       91,   88,   92,   89,   89,  108,   94,  774,  102,   94,
       89,   91,   95,   97,   95,   89,   92,  101,   97,   91,
       94,   98,   98,  101,  102,  108,   91,  107,  103,   89,
       89,  108,   94,  103,  102,   94,  104,  106,  104,  104,
      106,  109,  111,  101,  114,  107,  109,  104,  773,  101,

      102,  108,  726,  107,  103,  116,  724,  110,  723,  103,
      118,  111,  104,  106,  104,  104,  106,  109,  111,  118,
      117,  107,  109,  104,  110,  133,  115,  110,  114,  134,
      138,  116,  117,  110,  115,  119,  118,  111,  120,  141,
      135,  120,  119,  135,  146,  118,  117,  121,  146,  121,
      110,  133,  115,  110,  114,  134,  138,  722,  117,  668,
      115,  119,  661,  660,  120,  141,  135,  120,  119,  135,
      146,  659,  658,  121,  146,  121,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  161,  124,  124,  124,
      124,  124,  124,  131,  124,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  144,  144,  591,  588,  587,  586,
      517,  508,  161,  124,  124,  124,  124,  124,  124,  149,
      124,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      144,  144,  128,  128,  128,  128,  128,  128,  507,  149,
      506,  505,  148,  433,  430,  149,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  429,  428,  193,  128,  128,
      128,  128,  128,  128,  130,  149,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  148,  130,  130,  130,
      130,  130,  130,  193,  200,  358,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  350,  349,  348,  347,  282,

      272,  271,  148,  130,  130,  130,  130,  130,  130,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  140,
      132,  132,  132,  132,  132,  132,  136,  137,  139,  140,
      270,  269,  136,  137,  142,  145,  142,  145,  239,  198,
      143,  139,  197,  196,  206,  140,  132,  132,  132,  132,
      132,  132,  136,  137,  139,  140,  143,  147,  136,  137,
      142,  145,  142,  145,  150,  153,  143,  139,  151,  152,
      206,  152,  153,  147,  154,  155,  127,  155,  156,  125,
      159,  150,  143,  147,  151,   57,  160,  157,  154,  164,
      150,  153,  159,  158,  151,  152,  156,  152,  153,  147,

      154,  155,  160,  155,  156,  157,  159,  150,  162,  165,
      151,  158,  160,  157,  154,  163,  166,  170,  159,  158,
      167,  167,  156,  164,  162,  163,  169,  165,  160,  170,
      166,  157,  168,  168,  162,  165,  172,  158,  176,  171,
       53,  163,  166,  170,  173,  172,  167,  167,  171,  164,
      162,  163,  171,  165,  174,  170,  166,  171,  176,  173,
      169,  175,  172,  177,  176,  171,  174,  168,   52,  177,
      173,  172,  178,  178,  171,  182,  179,  175,  171,  180,
      174,   49,  180,  171,  176,  173,  169,  175,  179,  177,
       44,  181,  174,  168,  181,  177,  183,  183,  178,  178,

      184,  186,  179,  175,  190,  180,  185,  189,  180,  182,
      208,  185,  184,  185,  179,  187,  190,  181,  188,  186,
      181,   19,  183,  183,   18,  189,  184,  186,  218,  191,
      190,  187,  185,  189,  188,  182,  208,  185,  184,  185,
      192,  187,  190,  222,  188,  186,  191,  210,   14,  210,
      192,  189,   12,  211,  218,  191,    7,  187,    4,    3,
      188,    0,    0,    0,    0,    0,  192,    0,  246,  222,
        0,    0,  191,  210,  212,  210,  192,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  211,  194,  194,
      194,  194,  194,  194,  246,  194,  201,  201,  201,  201,

      201,  201,  201,  201,  201,    0,    0,    0,  212,    0,
        0,    0,    0,  211,  194,  194,  194,  194,  194,  194,
        0,  194,  199,    0,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  212,  199,  199,  199,  199,  199,
      199,  204,  263,  204,  204,  204,  204,  204,  204,  204,
      204,  204,    0,  215,    0,    0,    0,    0,    0,    0,
      215,  199,  199,  199,  199,  199,  199,  202,  263,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  215,
      202,  202,  202,  202,  202,  202,  215,  207,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,    0,    0,

        0,    0,    0,  230,  230,  207,  202,  202,  202,  202,
      202,  202,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  207,  213,  203,  203,  203,  203,  203,  203,  230,
      230,  207,    0,    0,    0,    0,    0,    0,  213,  217,
        0,    0,    0,    0,    0,    0,    0,  207,  213,  203,
      203,  203,  203,  203,  203,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  213,  216,  205,  205,  205,  205,
      205,  205,  209,  217,  214,  209,  214,  219,  220,  219,
      220,  225,    0,  223,  228,  216,  223,  234,  227,    0,
      227,  216,  205,  205,  205,  205,  205,  205,  209,  217,

      214,  209,  214,  219,  220,  219,  220,  221,  224,  223,
      226,  216,  223,  229,  227,  225,  227,  287,  228,  221,
      231,  234,  232,    0,  224,  232,  226,  231,  238,  229,
      233,  233,    0,  221,  224,    0,  226,    0,  241,  229,
      241,  225,    0,  287,  228,  221,  231,  234,  232,  235,
      224,  232,  226,  231,  240,  229,  233,  233,  235,  235,
      235,  236,  238,  237,  241,  244,  241,  235,  243,  240,
        0,  240,  242,  245,  236,  235,  237,  243,  242,  245,
      240,  244,    0,  249,  235,  235,  235,  236,  238,  237,
      299,  244,  247,  235,  243,  240,  247,  240,  242,  245,

      236,  249,  237,  243,  242,  245,  248,  244,  247,  249,
      250,  251,  251,  252,  250,  253,  299,  254,  247,  255,
      253,    0,  247,  248,  258,    0,  257,  249,  259,  252,
      301,  258,  248,  254,  247,  255,  250,  251,  251,  252,
      250,  253,  257,  254,  259,  255,  253,  256,  262,  248,
      258,  261,  257,  267,  259,  252,  301,  258,  264,  254,
      261,  255,  256,  265,  256,  260,  260,  289,  257,  266,
      259,  283,  283,  256,  284,  266,  289,  261,  264,  284,
      265,  285,  262,  285,  264,  329,  261,  267,  256,  265,
      256,  260,  260,  289,    0,  266,    0,  283,  283,    0,

      284,  266,  289,    0,  264,  284,  265,  285,  262,  285,
        0,  329,    0,  267,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  274,    0,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  331,  274,  274,  274,  274,
      274,  274,  276,  290,  276,  276,  276,  276,  276,  276,
      276,  276,  276,    0,    0,    0,    0,    0,    0,    0,
      334,  331,  274,  274,  274,  274,  274,  274,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  290,  381,  275,
      275,  275,  275,  275,  275,  277,  334,  277,  277,  277,
      277,  277,  277,  277,  277,  277,    0,  291,    0,    0,

        0,    0,    0,  290,  381,  275,  275,  275,  275,  275,
      275,  278,    0,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  315,  278,  278,  278,  278,  278,  278,
      279,  291,  279,  279,  279,  279,  279,  279,  279,  279,
      279,    0,  315,    0,    0,    0,    0,    0,    0,  315,
      278,  278,  278,  278,  278,  278,  280,  291,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  315,  280,
      280,  280,  280,  280,  280,  281,  286,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  292,  292,  286,    0,
        0,  293,  295,  295,    0,  280,  280,  280,  280,  280,

      280,    0,  286,  293,  302,    0,  304,  296,  400,    0,
      298,  300,  292,  292,  286,  288,  294,  293,  295,  295,
      294,  294,  298,  296,  297,  288,  288,  288,  300,  293,
      288,  297,  288,  296,  400,  288,  298,  300,  302,  314,
      304,  288,  294,  305,    0,    0,  294,  294,  298,  296,
      297,  288,  288,  288,  300,  305,  288,  297,  288,  303,
      306,  288,  307,  308,  302,  303,  304,  303,  310,  305,
      309,  311,  306,  314,  310,  308,  312,  307,    0,  309,
        0,  305,  312,    0,  313,  303,  306,  311,  307,  308,
        0,  303,  317,  303,  310,  319,  309,  311,  306,  314,

      310,  308,  312,  307,  313,  309,  316,  317,  312,  318,
      313,  319,  320,  311,  322,  318,  321,  323,  317,  316,
      324,  319,  325,  321,  323,  325,  324,  327,  320,    0,
      313,  330,  316,  317,  322,  318,  326,  319,  320,  326,
      322,  318,  321,  323,    0,  316,  324,  330,  325,  321,
      323,  325,  324,  336,  320,  328,  328,  330,  332,  332,
      322,  327,  326,  333,  333,  326,  335,  337,  401,  336,
      339,  339,  335,  330,  338,  340,  337,  344,  340,  336,
        0,  328,  328,  341,  332,  332,  342,  327,  338,  333,
      333,  342,  335,  337,  401,  336,  339,  339,  335,  346,

      338,  340,  337,  341,  340,  343,  364,  343,  364,  341,
      345,  344,  342,  345,  338,    0,  346,  342,    0,    0,
        0,    0,    0,    0,    0,  346,    0,  405,    0,  341,
        0,  343,  364,  343,  364,    0,  345,  344,  362,  345,
        0,  351,  346,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  352,  405,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,    0,  352,  352,  352,  352,  352,
      352,  353,  362,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  352,  352,  352,  352,  352,  352,  354,  362,  354,

      354,  354,  354,  354,  354,  354,  354,  354,  354,  363,
      354,  354,  354,  354,  354,  354,  355,  410,  355,  355,
      355,  355,  355,  355,  355,  355,  355,    0,    0,  363,
        0,    0,  379,    0,    0,  363,  354,  354,  354,  354,
      354,  354,  357,  410,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  359,  363,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  379,  359,  359,  359,
      359,  359,  359,  361,    0,  361,  361,  361,  361,  361,
      361,  361,  361,  361,    0,    0,    0,    0,    0,    0,
      365,  365,  379,  359,  359,  359,  359,  359,  359,  360,

      360,  360,  360,  360,  360,  360,  360,  360,  367,  366,
      360,  360,  360,  360,  360,  360,  365,  365,  366,  368,
      370,  374,    0,  370,  367,    0,  369,  371,  373,  374,
      373,  368,  372,    0,  367,  366,  360,  360,  360,  360,
      360,  360,  369,  371,  366,  368,  370,  374,  372,  370,
      367,  378,  369,  371,  373,  374,  373,  368,  372,  376,
        0,  377,  380,  378,  377,  380,  376,    0,  369,  371,
        0,    0,    0,    0,  372,  375,  375,  378,  375,  375,
      375,  375,  375,  375,  375,  376,  375,  377,  380,  378,
      377,  380,  376,  382,  383,  384,  375,  375,  385,  386,

      387,  382,  390,  384,  388,  388,  389,  389,  387,  391,
      392,  383,  386,    0,  393,  385,  392,  391,    0,  382,
      383,  384,  390,  393,  385,  386,  387,  382,  390,  384,
      388,  388,  389,  389,  387,  391,  392,  383,  386,  395,
      393,  385,  392,  391,  394,  394,  396,  397,  390,  393,
      414,  398,  399,  402,  396,  407,  395,  398,  399,  397,
      403,  402,  412,  403,  404,  395,  406,  404,  406,  407,
      394,  394,  396,  397,  413,  415,  414,  398,  399,  402,
      396,  407,  395,  398,  399,  397,  403,  402,  408,  403,
      404,  409,  406,  404,  406,  407,  412,  408,  411,  418,

      417,  415,  416,  417,  409,  419,  420,  409,  413,  421,
      416,  422,  423,  422,  408,  418,  411,  409,  423,  424,
      424,  421,  412,  408,  411,  418,  417,  426,  416,  417,
      409,  419,  420,  409,  413,  421,  416,  422,  423,  422,
      425,  418,  411,  427,  423,  424,  424,  421,  443,  425,
      444,  443,  448,  444,  451,  427,  448,  443,  456,  446,
      451,  426,    0,    0,    0,    0,  425,    0,    0,  427,
        0,    0,  446,    0,  443,  425,  444,  443,  448,  444,
      451,  427,  448,  443,  456,  446,  451,  426,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  432,  446,  432,

      432,  432,  432,  432,  432,  432,  432,  432,  432,  434,
        0,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  459,  434,  434,  434,  434,  434,  434,  436,  445,
      436,  436,  436,  436,  436,  436,  436,  436,  436,    0,
        0,    0,    0,    0,    0,    0,    0,  459,  434,  434,
      434,  434,  434,  434,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  445,  461,  435,  435,  435,  435,  435,
      435,  437,  461,  437,  437,  437,  437,  437,  437,  437,
      437,  437,    0,  482,    0,    0,    0,    0,    0,  445,
      461,  435,  435,  435,  435,  435,  435,  438,  461,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  439,  482,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
      483,  439,  439,  439,  439,  439,  439,  440,  489,  440,
      440,  440,  440,  440,  440,  440,  440,  440,    0,  501,
        0,    0,    0,    0,    0,    0,  483,  439,  439,  439,
      439,  439,  439,  441,  489,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  501,  441,  441,  441,  441,
      441,  441,  442,  447,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  449,  450,  450,  452,  447,  453,  454,
        0,  452,  441,  441,  441,  441,  441,  441,  449,  447,

      455,  454,    0,  458,  458,    0,  467,    0,  453,  449,
      450,  450,  452,  447,  453,  454,  460,  452,  457,  464,
      455,    0,  460,  536,  449,  462,  455,  454,  457,  458,
      458,  462,  467,  462,  453,  464,  457,  457,  462,  463,
      463,  466,  460,  465,  457,  464,  455,  466,  460,  536,
      465,  462,  468,  472,  457,  469,    0,  462,  467,  462,
        0,  464,  457,  457,  462,  463,  463,  466,  470,  465,
      471,  472,  468,  466,  473,  469,  465,  474,  468,  472,
      481,  469,  475,  476,  470,  481,  471,  479,  475,  477,
      473,  478,    0,    0,  470,  474,  471,  472,  468,  476,

      473,  469,  479,  474,  484,  477,  481,  478,  475,  476,
      470,  481,  471,  479,  475,  477,  473,  478,  487,  480,
      487,  474,  480,    0,  484,  476,  485,  485,  479,    0,
      484,  477,  490,  478,  486,  486,  488,  488,  491,  493,
        0,  492,  490,  494,  487,  480,  487,  492,  480,  490,
      484,  495,  485,  485,  491,  494,  528,  493,  490,  498,
      486,  486,  488,  488,  491,  493,  498,  492,  490,  494,
      497,  495,  497,  492,  499,  490,  499,  495,  496,  496,
      491,  494,  500,  493,  503,  498,  503,  502,  504,  500,
      528,  504,  498,  531,  531,  549,  497,  495,  497,  502,

      499,    0,  499,    0,  496,  496,    0,    0,  500,    0,
      503,    0,  503,  502,  504,  500,  528,  504,    0,  531,
      531,  549,    0,    0,  509,  502,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  510,    0,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  511,    0,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,    0,  511,
      511,  511,  511,  511,  511,  512,  553,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  511,  511,  511,  511,  511,
      511,  513,  553,  513,  513,  513,  513,  513,  513,  513,

      513,  513,  513,  524,  513,  513,  513,  513,  513,  513,
      514,  555,  514,  514,  514,  514,  514,  514,  514,  514,
      514,    0,    0,  524,    0,    0,    0,    0,    0,  524,
      513,  513,  513,  513,  513,  513,  516,  555,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  518,  524,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
        0,  518,  518,  518,  518,  518,  518,  520,    0,  520,
      520,  520,  520,  520,  520,  520,  520,  520,    0,    0,
        0,    0,    0,    0,    0,    0,  521,  518,  518,  518,
      518,  518,  518,  519,  519,  519,  519,  519,  519,  519,

      519,  519,  521,  522,  519,  519,  519,  519,  519,  519,
      522,  523,  521,  525,  527,  526,    0,    0,  523,    0,
      527,  535,  525,  526,  535,  530,  529,    0,  521,  522,
      519,  519,  519,  519,  519,  519,  522,  523,  530,  525,
      527,  526,  529,  538,  523,  532,  527,  535,  525,  526,
      535,  530,  529,  533,  532,  533,  534,  537,  539,  540,
      540,  534,  541,  538,  530,  542,  537,  552,  529,  538,
      543,  532,    0,  542,  539,    0,  543,    0,  541,  533,
      532,  533,  534,  537,  539,  540,  540,  534,  541,  538,
      545,  542,  537,  547,  544,  547,  543,  548,  546,  542,

      539,  552,  543,  544,  541,  546,  545,  550,  550,  550,
      551,  550,  554,  551,  548,  556,  545,  558,  559,  547,
      544,  547,  557,  548,  546,  557,  558,  552,  554,  544,
      560,  546,  545,  561,  563,  556,  551,  550,  554,  551,
      548,  556,  564,  558,  559,  562,  565,  562,  557,  567,
      566,  557,  558,  568,  554,  569,  560,  570,  571,  561,
      563,  556,  566,  550,  572,  567,    0,  573,  564,  568,
      570,  562,  565,  562,  577,  567,  566,  574,  575,  568,
      576,  569,  572,  570,  573,  574,  577,  575,  566,  578,
      572,  567,  571,  573,  581,  568,  570,  576,  582,  579,

      577,  579,  580,  574,  575,  578,  576,  583,  572,  585,
      573,  574,  577,  575,  582,  578,  580,  600,  571,  605,
      581,  584,  583,  576,  582,  579,  584,  579,  580,    0,
        0,  578,    0,  583,    0,  585,    0,  600,    0,    0,
      582,    0,  580,  600,    0,  605,    0,  584,  583,  615,
        0,    0,  584,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  590,  600,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  592,  615,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,    0,  592,  592,  592,
      592,  592,  592,  594,    0,  594,  594,  594,  594,  594,

      594,  594,  594,  594,  595,  595,  595,  595,  595,  595,
      595,  595,  595,  592,  592,  592,  592,  592,  592,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  601,  628,
      593,  593,  593,  593,  593,  593,  597,  601,  597,  597,
      597,  597,  597,  597,  597,  597,  597,    0,    0,    0,
        0,    0,    0,    0,  601,  628,  593,  593,  593,  593,
      593,  593,  596,  601,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  603,  596,  596,  596,  596,  596,
      596,  599,  603,  599,  599,  599,  599,  599,  599,  599,
      599,  599,    0,    0,    0,    0,    0,    0,    0,    0,

      603,  596,  596,  596,  596,  596,  596,  598,  603,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  602,
      598,  598,  598,  598,  598,  598,  604,  606,  607,  602,
      606,  608,  608,  609,  610,  614,    0,  607,  604,  609,
      610,  611,    0,    0,    0,  602,  598,  598,  598,  598,
      598,  598,  604,  606,  607,  602,  606,  608,  608,  609,
      610,  611,  612,  607,  604,  609,  610,  611,  613,  614,
      616,  617,  618,  621,  617,  619,  620,    0,  612,  618,
        0,  619,  620,  623,  613,  622,  624,  611,  612,  624,
      616,  626,  622,  621,  613,  614,  616,  617,  618,  621,

      617,  619,  620,  623,  612,  618,  627,  619,  620,  623,
      613,  622,  624,  625,  625,  624,  616,  629,  622,  621,
      629,  630,  627,  631,  632,  626,  633,  634,  635,  623,
      637,  636,  627,  636,  633,    0,  638,  635,  639,  625,
      625,  640,  641,    0,  630,  644,  629,  642,  627,  641,
      642,  626,  633,  631,  635,  647,  637,  636,  632,  636,
      633,  634,  638,  635,  639,  645,  643,  640,  641,  643,
      630,  644,  629,  642,  645,  641,  642,  646,  648,  631,
      650,  651,  649,  653,  632,  654,  648,  634,  651,  647,
      655,  645,  643,  646,  649,  643,  652,  656,  684,  652,

      645,  657,    0,  646,  648,    0,  650,  651,  649,  653,
        0,  654,  648,  656,  651,  647,  655,  657,    0,  646,
      649,    0,  652,  656,  684,  652,    0,  657,  662,  662,
      662,  662,  662,  662,  662,  662,  662,    0,  681,  656,
        0,    0,    0,  657,  663,    0,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  681,  663,  663,  663,
      663,  663,  663,  664,  681,  664,  664,  664,  664,  664,
      664,  664,  664,  664,    0,  686,    0,    0,    0,    0,
        0,    0,  681,  663,  663,  663,  663,  663,  663,  665,
        0,  665,  665,  665,  665,  665,  665,  665,  665,  665,

      665,  686,  665,  665,  665,  665,  665,  665,  666,  677,
      666,  666,  666,  666,  666,  666,  666,  666,  666,    0,
        0,  677,    0,    0,    0,    0,    0,    0,  665,  665,
      665,  665,  665,  665,  667,  677,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  667,  669,  677,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,    0,  669,
      669,  669,  669,  669,  669,  671,    0,  671,  671,  671,
      671,  671,  671,  671,  671,  671,    0,    0,    0,    0,
        0,    0,  672,    0,  672,  669,  669,  669,  669,  669,
      669,  670,  670,  670,  670,  670,  670,  670,  670,  670,

      678,  691,  670,  670,  670,  670,  670,  670,  672,  673,
      672,  674,  675,  673,  675,  676,  678,  676,  674,  680,
      682,  683,  679,  688,  682,  683,  678,  691,  670,  670,
      670,  670,  670,  670,  679,  673,  680,  674,  675,  673,
      675,  676,  678,  676,  674,  680,  682,  683,  679,  685,
      682,  683,  687,  689,  687,  690,  692,  688,  685,  694,
      679,  693,  680,  695,  698,    0,  696,    0,  697,  702,
      689,  694,    0,  690,  692,  685,  700,  693,  687,  689,
      687,  690,  692,  688,  685,  694,  696,  693,  697,  695,
      698,  699,  696,  701,  697,  703,  689,  694,  702,  690,

      692,  700,  704,  693,  703,  705,  706,  707,  704,  708,
      709,  710,  696,  711,  697,  712,  714,  705,  699,    0,
      701,  703,  718,    0,  702,  719,  713,  700,  704,  735,
      703,  705,  706,  707,  704,  708,  709,  710,  713,  711,
      715,  712,  714,  705,  699,  716,  701,  717,  718,  715,
      721,  719,  713,  720,  720,  735,  736,  716,  737,  738,
      738,  742,  736,  717,  713,  744,  715,    0,  721,    0,
        0,  716,    0,  717,    0,  715,  721,    0,    0,  720,
      720,    0,  736,  716,  737,  738,  738,  742,  736,  717,
        0,  744,    0,  725,  721,  725,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  727,    0,  727,  727,  727,
      727,  727,  727,  727,  727,  727,  727,  745,  727,  727,
      727,  727,  727,  727,  729,    0,  729,  729,  729,  729,
      729,  729,  729,  729,  729,    0,    0,    0,    0,    0,
        0,    0,  747,  745,  727,  727,  727,  727,  727,  727,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  739,
      739,  728,  728,  728,  728,  728,  728,  731,  747,  731,
      731,  731,  731,  731,  731,  731,  731,  731,    0,    0,
        0,    0,    0,    0,    0,  739,  739,  728,  728,  728,
      728,  728,  728,  730,    0,  730,  730,  730,  730,  730,

      730,  730,  730,  730,  730,  741,  730,  730,  730,  730,
      730,  730,  733,  741,  733,  733,  733,  733,  733,  733,
      733,  733,  733,    0,    0,    0,    0,    0,    0,    0,
        0,  741,  730,  730,  730,  730,  730,  730,  732,  741,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      734,  732,  732,  732,  732,  732,  732,  740,  746,  743,
      748,  749,  748,  750,  740,  743,  734,  751,  753,  750,
      749,  752,  752,  751,  746,  754,  734,  732,  732,  732,
      732,  732,  732,  740,  746,  743,  748,  749,  748,  750,
      740,  743,  734,  751,  757,  750,  749,  752,  752,  751,

      746,  754,  753,  755,  756,  758,  759,  760,  761,  762,
      755,  757,    0,  756,    0,    0,    0,  769,  769,    0,
      757,  763,  772,  764,  788,  762,  767,    0,  753,  755,
      756,  758,  759,  760,  761,  762,  755,  757,  763,  756,
      764,  767,  768,  769,  769,  771,  770,  763,  772,  764,
      788,  762,  767,  770,  768,  786,  790,  771,    0,  786,
        0,    0,    0,    0,  763,    0,  764,  767,  768,    0,
      795,  771,  770,    0,    0,    0,    0,    0,  796,  770,
      768,  786,  790,  771,  777,  786,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  777,  795,  777,  777,  777,

      777,  777,  777,  778,  796,  778,  778,  778,  778,  778,
      778,  778,  778,  778,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  777,  777,  777,  777,  777,  777,  779,
        0,  779,  779,  779,  779,  779,  779,  779,  779,  779,
      779,  794,  779,  779,  779,  779,  779,  779,  780,  800,
      780,  780,  780,  780,  780,  780,  780,  780,  780,    0,
        0,  794,    0,    0,    0,    0,    0,  794,  779,  779,
      779,  779,  779,  779,  781,  800,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  783,  794,  783,  783,
      783,  783,  783,  783,  783,  783,  783,  783,    0,  783,

      783,  783,  783,  783,  783,  785,    0,  785,  785,  785,
      785,  785,  785,  785,  785,  785,    0,    0,    0,    0,
        0,    0,  787,    0,  787,  783,  783,  783,  783,  783,
      783,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      789,  791,  784,  784,  784,  784,  784,  784,  787,  792,
      787,    0,  798,  789,  799,  798,  801,  791,  792,  802,
      793,  797,  801,  799,  801,  803,  789,  791,  784,  784,
      784,  784,  784,  784,  805,  792,  793,  797,  798,  789,
      799,  798,  801,  791,  792,  802,  793,  797,  801,  799,
      801,  803,  804,  807,  805,  806,  808,  810,  809,  812,

      805,    0,  793,  797,  811,  811,  825,  812,  826,  804,
      828,  806,  808,  809,    0,  826,    0,    0,  804,    0,
      805,  806,  808,  810,  809,  812,  829,  807,    0,  835,
      811,  811,  825,  812,  826,  804,  828,  806,  808,  809,
      816,  826,  816,  816,  816,  816,  816,  816,  816,  816,
      816,  816,  829,  807,  818,  835,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  840,  818,  818,  818,
      818,  818,  818,  820,    0,  820,  820,  820,  820,  820,
      820,  820,  820,  820,    0,    0,    0,    0,    0,    0,
        0,    0,  840,  818,  818,  818,  818,  818,  818,  819,

      819,  819,  819,  819,  819,  819,  819,  819,  833,  827,
      819,  819,  819,  819,  819,  819,  822,  827,  822,  822,
      822,  822,  822,  822,  822,  822,  822,    0,  833,    0,
        0,    0,    0,    0,  833,  827,  819,  819,  819,  819,
      819,  819,  821,  827,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  833,  821,  821,  821,  821,  821,
      821,  824,  861,  824,  824,  824,  824,  824,  824,  824,
      824,  824,    0,  834,    0,    0,    0,    0,    0,    0,
        0,  821,  821,  821,  821,  821,  821,  823,  861,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  836,

      823,  823,  823,  823,  823,  823,  830,  834,  831,  830,
      831,  837,  838,    0,  841,  838,  836,  839,  860,  839,
      841,  842,  842,  843,  837,  836,  823,  823,  823,  823,
      823,  823,  830,  834,  831,  830,  831,  837,  838,  843,
      841,  838,  836,  839,  845,  839,  841,  842,  842,  843,
      837,  844,  860,  844,  862,  867,  871,  859,  862,  871,
      845,    0,  874,    0,    0,  843,    0,    0,    0,    0,
      845,    0,    0,  859,    0,    0,    0,  844,  860,  844,
      862,  867,  871,  859,  862,  871,  845,  850,  874,  850,
      850,  850,  850,  850,  850,  850,  850,  850,  850,  859,

      850,  850,  850,  850,  850,  850,  851,  867,  851,  851,
      851,  851,  851,  851,  851,  851,  851,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  850,  850,  850,  850,
      850,  850,  852,    0,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  868,  852,  852,  852,  852,  852,
      852,  853,  875,  853,  853,  853,  853,  853,  853,  853,
      853,  853,    0,    0,  868,    0,    0,    0,    0,    0,
      868,  852,  852,  852,  852,  852,  852,  854,  875,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  856,
      868,  856,  856,  856,  856,  856,  856,  856,  856,  856,

      856,    0,  856,  856,  856,  856,  856,  856,  858,    0,
      858,  858,  858,  858,  858,  858,  858,  858,  858,    0,
        0,    0,    0,    0,    0,  892,    0,  863,  856,  856,
      856,  856,  856,  856,  857,  857,  857,  857,  857,  857,
      857,  857,  857,  863,  864,  857,  857,  857,  857,  857,
      857,  892,  865,  863,  865,  891,    0,    0,  873,  873,
      864,  866,  893,    0,  889,  869,  870,  889,  894,  863,
      864,  857,  857,  857,  857,  857,  857,  866,  865,  866,
      865,  869,  870,  872,  873,  873,  864,  866,  893,  891,
      889,  869,  870,  889,  894,  872,    0,    0,    0,    0,

        0,    0,    0,  866,    0,  866,    0,  869,  870,  872,
        0,    0,    0,    0,    0,  891,    0,    0,  898,    0,
      880,  872,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  882,    0,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  898,  882,  882,  882,  882,  882,
      882,  884,    0,  884,  884,  884,  884,  884,  884,  884,
      884,  884,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  882,  882,  882,  882,  882,  882,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  896,  901,  883,  883,
      883,  883,  883,  883,  886,  896,  886,  886,  886,  886,

      886,  886,  886,  886,  886,    0,  922,    0,    0,    0,
        0,    0,  896,  901,  883,  883,  883,  883,  883,  883,
      885,  896,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  922,  885,  885,  885,  885,  885,  885,  888,
        0,  888,  888,  888,  888,  888,  888,  888,  888,  888,
        0,  890,    0,    0,    0,    0,    0,    0,    0,  885,
      885,  885,  885,  885,  885,  887,  890,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  890,  887,  887,
      887,  887,  887,  887,  895,  897,  902,  899,  899,  899,
      897,  899,  890,  900,  903,  900,  923,  924,  926,  927,

      895,  904,  903,  902,  887,  887,  887,  887,  887,  887,
      895,  897,  902,  904,  926,  947,  897,  899,    0,  900,
      903,  900,  923,  924,  926,  927,  895,  904,  903,  902,
        0,    0,    0,  929,    0,  928,    0,    0,  928,  904,
      926,  947,    0,  899,  910,    0,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  929,  910,  910,  910,
      910,  910,  910,  911,  928,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  952,    0,    0,    0,    0,  930,
        0,    0,  929,  910,  910,  910,  910,  910,  910,  912,
      928,  912,  912,  912,  912,  912,  912,  912,  912,  912,

      952,  925,  912,  912,  912,  912,  912,  912,  913,  930,
      913,  913,  913,  913,  913,  913,  913,  913,  913,    0,
        0,  925,    0,    0,    0,    0,    0,  925,  912,  912,
      912,  912,  912,  912,  914,  930,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  916,  925,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,    0,  916,
      916,  916,  916,  916,  916,  918,    0,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  919,  920,  932,  921,
      919,  920,  931,    0,  931,  916,  916,  916,  916,  916,
      916,  921,  934,  933,  932,    0,  953,  960,  921,  921,

      934,  950,  919,  920,  932,  921,  919,  920,  931,  933,
      931,    0,    0,    0,    0,    0,    0,  921,  934,  933,
      932,  950,  953,  960,  921,  921,  934,  950,    0,    0,
      956,    0,    0,  957,  940,  933,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  942,  950,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  956,  957,  942,
      942,  942,  942,  942,  942,  943,  962,  943,  943,  943,
      943,  943,  943,  943,  943,  943,    0,    0,    0,    0,
        0,    0,    0,  956,  957,  942,  942,  942,  942,  942,
      942,  944,  962,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  949,  944,  944,  944,  944,  944,  944,
      945,  948,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  949,  954,  955,  954,  958,  959,  963,  948,  949,
      944,  944,  944,  944,  944,  944,  961,  948,  951,  961,
      978,  955,  975,  963,  951,  975,  982,  949,  954,  955,
      954,  973,  958,  963,  948,  959,  951,    0,  973,    0,
        0,    0,  961,    0,  951,  961,  978,  955,  975,  963,
      951,  975,  982,    0,    0,    0,    0,  973,  958,    0,
        0,  959,  951,  968,  973,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  983,    0,  968,  968,  968,  968,

      968,  968,  969,  974,  969,  969,  969,  969,  969,  969,
      969,  969,  969,    0,  976,    0,  980,  984,  980,  976,
      983,  974,  968,  968,  968,  968,  968,  968,  970,  974,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      976,  977,  980,  984,  980,  976,    0,  974,  985,  977,
      981,  981,  986,  981,  981,  981,  981,  981,  981,  987,
        0,  981,    0,  997,  998,    0,    0,  977,    0,  995,
        0,  981,  981,    0,  985,  977, 1001, 1001,  986, 1013,
      996,    0,    0,  999,  992,  987,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  995,  996,  997,  998,  999,

     1003, 1003, 1001, 1001,    0, 1013,  996, 1002, 1002,  999,
     1002, 1002, 1002, 1002, 1002, 1002, 1008, 1003, 1002, 1009,
     1014, 1008,  996,  997,  998,  999, 1003, 1003, 1002, 1002,
     1010,    0, 1011, 1012, 1012, 1010, 1025, 1009, 1011,    0,
     1015, 1015, 1008, 1003, 1017, 1009, 1014, 1008, 1016, 1022,
     1022, 1017,    0, 1026, 1027, 1028, 1010, 1015, 1011, 1012,
     1012, 1010, 1025, 1009, 1011, 1023, 1015, 1015, 1016, 1030,
     1017, 1023, 1024, 1033, 1016, 1022, 1022, 1017, 1024, 1026,
     1027, 1028, 1037, 1015, 1041, 1031, 1032, 1032, 1043, 1030,
        0, 1023, 1031, 1038, 1016, 1030, 1045, 1023, 1024, 1033,

     1038, 1046, 1039, 1053, 1024, 1039, 1040, 1040, 1037, 1054,
     1041, 1031, 1032, 1032, 1043, 1030, 1044, 1044, 1031, 1038,
     1056, 1046, 1045, 1051, 1052, 1052, 1038, 1046, 1039, 1053,
     1051, 1039, 1040, 1040, 1057, 1054, 1061, 1062, 1061, 1064,
     1056, 1069, 1044, 1044,    0,    0, 1056, 1046,    0, 1051,
     1052, 1052,    0,    0,    0,    0, 1051,    0,    0,    0,
     1057,    0, 1061, 1062, 1061, 1064, 1056, 1069, 1080, 1080,
     1080, 1080, 1081, 1081, 1081, 1081, 1082, 1082, 1082, 1082,
     1083,    0, 1083, 1083, 1084, 1084, 1084, 1084, 1085,    0,
     1085, 1085, 1086, 1086, 1088, 1088, 1089, 1089, 1090, 1090,

     1091, 1091, 1092, 1092, 1093, 1093, 1094, 1094, 1095, 1095,
     1096, 1096, 1097, 1097, 1098,    0, 1098, 1098, 1099, 1099,
     1100, 1100, 1101, 1101, 1102, 1102, 1103, 1103, 1104, 1104,
     1105, 1105, 1106, 1106, 1107, 1107, 1108, 1108, 1109, 1109,
     1110, 1110, 1111, 1111, 1112, 1112, 1113, 1113, 1114, 1114,
     1115, 1115, 1116, 1116, 1117, 1117, 1118, 1118, 1119, 1119,
     1120, 1120, 1121, 1121, 1122, 1122, 1123, 1123, 1124, 1124,
     1126, 1126, 1127, 1127, 1128, 1128, 1130, 1130, 1131, 1131,
     1132, 1132, 1135, 1135, 1136, 1136, 1137, 1137, 1139,    0,
     1139, 1139, 1140,    0, 1140, 1140, 1141, 1141, 1142, 1142,

     1145,    0, 1145, 1145, 1146,    0, 1146, 1146, 1147, 1147,
     1148, 1148, 1149, 1149, 1150, 1150, 1151, 1151, 1153, 1153,
     1154, 1154, 1155, 1155, 1156, 1156, 1157, 1157, 1159, 1159,
     1160, 1160, 1161, 1161, 1163, 1163, 1165, 1165, 1166, 1166,
     1167, 1167, 1169, 1169, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[137] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2206 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2311 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1080 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6145 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LINK_LOCAL_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::SUBNET_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::AUTH_PROTOCOL_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::AUTH_ALGORITHM_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::AUTH_REPLAY_;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::KEY_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::SECRET_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::ALGORITHM_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::FUDGE_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 175 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 176 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 177 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 178 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 180 "SrvLexer.l"
;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 182 "SrvLexer.l"
;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 184 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 189 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 190 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 191 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 122:
YY_RULE_SETUP
#line 198 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 207 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 216 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 225 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 234 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 243 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 252 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 264 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 271 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 292 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 324 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 352 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%20x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 362 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%20u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 371 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 374 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3245 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1080 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1080 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1079);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 374 "SrvLexer.l"



