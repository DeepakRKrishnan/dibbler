#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 123
#define YY_END_OF_BUFFER 124
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1015] =
    {   0,
        1,    1,    0,    0,    0,    0,  124,  122,    2,    1,
        1,  122,  104,  122,  122,  121,  121,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      108,  108,  123,    1,    1,    1,    0,  116,  104,    0,
      116,  106,  105,  121,    0,    0,  120,    0,  113,   87,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      101,  117,  117,   89,  117,  117,  117,  117,  117,  117,

      117,  117,  117,  117,  117,   17,   18,  117,  117,  117,
      117,  117,  117,  117,  117,  107,  105,  121,    0,    0,
        0,  112,  118,  111,  111,  117,  117,  117,  117,  117,
       88,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  100,  121,    0,    0,    0,    0,  110,  110,    0,
      111,    0,  111,  117,  117,  117,   67,  117,  117,  117,

      117,  117,  117,  117,  117,   95,  117,  117,  117,   31,
      117,  117,   47,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,    0,  117,  117,  117,  117,  117,
      117,   24,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  102,  117,  117,
      117,  117,  121,    0,  119,    0,    0,    0,  110,    0,
      110,    0,  111,  111,  111,  111,  117,  117,  117,  117,
       94,  117,  117,  117,    4,  117,  117,  117,  117,  117,
      117,  117,  103,  117,  117,    3,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,    0,  117,

      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
        7,  117,   46,  117,   25,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,    0,    0,    0,
        0,    0,  110,  110,  110,  110,    0,  111,  111,  111,
        0,  111,  117,  117,  117,  117,  117,  117,  117,  117,
      117,   30,  117,  117,  117,  117,  117,   39,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,    0,    0,  117,  117,  117,   37,
      117,  117,  117,  117,   35,  117,  117,  117,   63,  117,
      117,  117,   98,   45,  117,  117,  117,  117,  117,  117,

      117,    0,    0,    0,    0,  110,  110,  110,    0,  110,
        0,    0,  111,  111,  111,  111,  117,  117,   34,  117,
      117,  117,  117,  117,  117,    0,  117,  117,   97,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,    0,
        0,  117,  117,  117,  117,  117,   61,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,   22,  117,
      117,  117,  119,    0,    0,    0,    0,    0,  110,  110,
      110,  110,    0,  111,  111,  111,    0,  111,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,    0,

      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,   48,  117,   57,  117,  117,  117,
       12,   10,   86,  117,   44,    0,    0,  117,  117,  117,
       59,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,    5,  117,  117,  117,   14,    0,    0,    0,
        0,  110,  110,  110,    0,  110,  115,  111,  111,  111,
      111,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,    0,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
       11,   66,    0,    0,  117,  117,  117,   60,  117,  117,

      117,  117,  117,   32,  117,  117,    6,   96,   41,  117,
      117,    0,    0,    0,    0,  114,  110,  110,  110,  110,
      111,  111,  111,    0,  111,  117,  117,  117,  117,  117,
      117,  117,  117,  117,   58,  117,    0,  117,  117,  117,
      117,  117,  117,  117,  117,   38,  117,  117,   36,  117,
      117,  117,   33,   13,    0,    0,   54,   53,   40,  117,
       23,  117,  117,  117,   43,   42,  117,  117,  119,    0,
        0,  110,  110,  110,    0,  110,  111,  111,  111,  111,
      117,   15,  117,   65,  117,  117,  117,   74,  117,  117,
        0,  117,  117,  117,  117,  117,  117,   77,  117,  117,

      117,  117,  117,  117,   56,   55,  117,  117,  117,  117,
      117,   62,    0,    0,    0,    0,  110,  110,  110,  110,
      111,  111,  111,    0,  111,  117,  117,   99,   76,  117,
      117,  117,    0,   85,  117,  117,  117,   52,  117,   78,
       64,  117,  117,  117,    8,  117,  117,   26,  117,  117,
        0,    0,    0,  110,  110,  110,    0,  110,  111,  111,
      111,  111,  117,  117,   75,  117,  117,    0,  117,  117,
       51,  117,  117,  117,  117,   68,  117,  117,  117,  117,
      117,  119,    0,    0,    0,  110,  110,  110,  110,  111,
      111,  111,    0,  111,  117,  117,  117,  117,    0,  117,

      117,  117,  117,  117,  117,  117,  117,  117,   16,   21,
        0,    0,  109,  112,  110,  110,  110,    0,  110,  111,
      111,  111,  111,  117,  117,  117,   28,    0,    0,  117,
      117,  117,   79,  117,  117,   27,  117,  117,  117,    0,
        0,  109,    0,  110,  110,  110,  110,  110,  111,  111,
      111,    0,  111,  117,  117,  117,    0,    0,   29,  117,
      117,   80,  117,  117,  117,  117,  117,  117,  117,  119,
      109,  112,  110,    0,  110,  110,  110,  110,  111,  111,
      111,   69,  117,  117,  117,  117,    0,    0,  117,  117,
      117,  117,  117,  117,   50,  117,   20,  117,    0,  109,

      110,  110,  110,  110,  111,  111,  111,  117,  117,  117,
      117,  117,    0,    0,  117,  117,   81,   82,   83,   84,
        9,   19,    0,  110,  110,    0,  110,  110,  111,   49,
      117,  117,  117,  117,    0,    0,  117,  117,  119,  110,
      110,  111,  117,  117,  117,  117,    0,    0,    0,  117,
      117,  117,    0,  110,  110,    0,  117,  117,  117,  117,
        0,    0,    0,   90,  117,  117,  117,   90,  109,  110,
      110,   70,  117,  117,  117,    0,   92,    0,  117,   92,
      117,  109,  110,  110,    0,  117,  117,   73,    0,   91,
      117,   91,    0,  110,  110,  117,   71,   93,   93,    0,

      110,  110,    0,   72,  119,  110,  110,    0,  110,  110,
        0,  110,  110,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1105] =
    {   0,
        0,    0, 1174, 1172,    0,    0, 1179, 5829, 5829,   73,
       75, 1173,    0, 1169,   72,   72,   34, 1147, 1124,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  356,  372,  399,   67,  357,  180,  209,
     5829, 1134, 5829,  111,  137,  222, 1140, 5829,    0, 1137,
     1135, 5829,    0,  457, 1119,  476, 5829,    0,  502, 5829,
       61,  545,   86,   89,  185,  208,  231,  279,  221,  265,
      288,  559,  342,  283,  285,  388,  377,  389,  339,  395,
      326,  410,  394,  544,  561,  469,  557,  392,  574,  507,
      326,  542,  576,  455,  538,  584,  582,  594,  606,  579,

      593,  611,  612,  629,  618,  596,  613,  614,  636,  627,
      642,  643,  648,  649,  647, 5829,    0,  707, 1118,  726,
     1072,  752,    0,  797,  771,  840,  647,  689,  829,  833,
      693,  832,  838,  717,  836,  856,  842,  837,  839,  873,
      739,  890,  888,  891,  874,  757,  878,  895,  905,  892,
      909,  910,  922,  915,  925,  937,  927,  964,  942,  940,
      965,  955,  958,  957,  975,  944,  967,  977,  974,  992,
     1012,  980, 1007, 1011, 1014, 1010, 1013, 1016, 1029, 1025,
     1041,  885, 1099,  815, 1071, 1070, 1069, 1146, 1089,  824,
     1191, 1234, 1118, 1277, 1024, 1212, 1026, 1237, 1078, 1133,

     1271, 1266, 1151, 1276, 1267, 1027, 1270, 1274, 1289, 1028,
     1114, 1291, 1269, 1280, 1321, 1195, 1314, 1311, 1310, 1313,
     1350, 1312, 1357, 1352, 1080, 1362, 1322, 1329, 1363, 1372,
     1359, 1187, 1377, 1381, 1384, 1393, 1374, 1411, 1401, 1418,
     1426, 1420, 1412, 1429, 1415, 1417, 1459, 1406, 1436, 1464,
     1451, 1467, 1254, 1054, 1021,  961,  956, 1525, 1536, 1579,
     1555, 1598, 1624, 1643, 1669, 1688,  954, 1449, 1458, 1456,
     1457, 1681, 1566, 1515, 1611, 1461, 1478, 1687, 1667, 1684,
     1690, 1700, 1463, 1702, 1703, 1704, 1701, 1717, 1721, 1734,
     1733, 1725, 1736, 1741, 1738, 1757, 1622, 1752, 1757, 1769,

     1758, 1770, 1756, 1773, 1792, 1777, 1790, 1788, 1806, 1794,
     1465, 1802, 1558, 1801, 1798, 1810, 1821, 1834, 1823, 1838,
     1842, 1853, 1840, 1843, 1856, 1855, 1861,  911,  908,  906,
      901, 1919, 1930, 1949, 1975, 1994, 1958, 2020,  866, 2032,
     2075, 2051, 1917, 1974, 1848, 2053, 2066, 2077, 2078, 2067,
     1858, 2148, 2071, 2072, 2119, 2068, 2073, 1854, 2123, 2134,
     2128, 2129, 2074, 2125, 2138, 2130, 2137, 2161, 2139, 2153,
     2167, 2170, 2174, 2175, 1968, 2092, 2180, 2176, 2186, 2171,
     2190, 2191, 2213, 2208, 2181, 2228, 2223, 2245, 2215, 2229,
     2225, 2240, 2220, 2226, 2244, 2235, 2243, 2257, 2262, 2272,

     2276,  853,  852,  824, 2334, 2345,  778, 2357, 2400, 2376,
     2419, 2445, 2456, 2475, 2501, 2520, 2274, 2501, 2378, 2499,
     2275, 2505, 2287, 2500, 2522, 2272, 2541, 2517, 2336, 2519,
     2387, 2560, 2535, 2554, 2557, 2546, 2552, 2585, 2587, 2574,
     2591, 2588, 2590, 2593, 2605, 2608, 2609, 2602, 2612, 2406,
     2438, 2624, 2621, 2626, 2639, 2641, 2443, 2649, 2645, 2657,
     2654, 2656, 2679, 2660, 2674, 2676, 2690, 2691, 2454, 2693,
     2694, 2699,  777,  776,  775,  774, 2757, 2768, 2779, 2798,
     2824, 2843, 2807, 2869,  773, 2881, 2924, 2900, 2902, 2910,
     2918, 2823, 2922, 2914, 2941, 2955, 2919, 2921, 2920, 2553,

     2959, 2958, 2969, 2957, 2970, 2697, 2966, 2971, 2977, 2972,
     2975, 3006, 2990, 3008, 2678, 2994, 2721, 3022, 3010, 3009,
     2766, 2811, 3005, 3013, 3012, 3034, 3016, 3030, 3041, 3045,
     3021, 3059, 3057, 3042, 3066, 3060, 3062, 3080, 3070, 3077,
     3076, 3095, 3064, 3098, 3109, 3104, 3065,  771,  753,  733,
     3141, 3167,  732, 3179, 3222, 3198, 3207, 3267, 3241, 3312,
     3286, 3220, 3300, 3308, 3101, 3311, 3310, 3303, 3312, 3330,
     3331, 3339, 3104, 3353, 3342, 3350, 3352, 3354, 3355, 3351,
     3367, 3363, 3383, 3392, 3391, 3396, 3209, 3398, 3394, 3390,
     3105, 3132, 3266, 3400, 3402, 3400, 3406, 3387, 3434, 3431,

     3433, 3412, 3439, 3419, 3442, 3440, 3436, 3443, 3444, 3464,
     3471,  731,  730,  729,  728, 3295, 3531, 3550, 3576, 3595,
     3621,  692, 3633, 3676, 3652, 3449, 3446, 3662, 3454, 3458,
     3654, 3575, 3689, 3669, 3467, 3675, 3509, 3670, 3529, 3690,
     3697, 3510, 3711, 3718, 3712, 3637, 3724, 3727, 3677, 3717,
     3720, 3721, 3706, 3710, 3720, 3725, 3725, 3729, 3731, 3754,
     3741, 3758, 3764, 3761, 3756, 3759, 3763, 3783,  688,  687,
      686, 3825,  685, 3843, 3886, 3862, 3931, 3905, 3976, 3950,
     3971, 3760, 3968, 3779, 3865, 3970, 3918, 3781, 3804, 3980,
     3828, 3967, 3975, 3978, 3979, 3977, 3969, 3847, 4007, 4017,

     4027, 4025, 4028, 4029, 5829, 5829, 4030, 4031, 4014, 4023,
     4032, 4018,  683,  681,  680,  673, 4092, 4111, 4137, 4156,
     4182,  672, 4194, 4237, 4213, 4227, 4022, 4021, 4071, 4215,
     4232, 4136, 4082, 4124, 4240, 4229, 4237, 4230, 4259, 4234,
     4235, 4279, 4284, 4281, 4267, 4286, 4287, 4268, 4274, 4297,
      603,  571,  570, 4355,  562, 4367, 4410, 4386, 4455, 4429,
     4500, 4474, 4269, 4282, 4276, 4489, 4280,  570, 4408, 4487,
     4292, 4496, 4501, 4493, 4494, 4309, 4497, 4499, 4537, 4502,
     4545,  557,  556,  528,  525, 4605, 4624, 4650, 4669, 4695,
      524, 4707, 4750, 4726, 4558, 4538, 4530, 4728, 4747, 4533,

     4764, 4346, 4649, 4753, 4765, 4539, 4752, 4541, 4371, 4389,
      523,  522,  521,    0, 4825,  520, 4837, 4880, 4856, 4925,
     4899, 4970, 4944, 4744, 4938, 4637, 4442, 4544, 4548, 4972,
     4751, 4748, 4544, 4867, 4959, 4592, 4975, 4968, 4973,  519,
      518,  516,  515,  514, 5035, 5054, 5080, 5099, 5125,  513,
     5137,    0, 5156, 4962, 4967, 5157, 4730, 4763, 4750, 4878,
     5140, 4816, 5164, 4859, 5033, 4971, 5152, 5155, 5022,  512,
      511, 5829,  483,    0, 5222,  482, 5234, 5253, 5279, 5298,
        0, 4965, 5151, 5159, 5232, 5294, 4972, 4992, 5279, 5176,
     5213, 5291, 5307, 5067, 5032, 5295, 5079, 5299,  481,  480,

      479,  478, 5367, 5386, 5412,  465,    0, 5161, 5296, 5297,
     5298, 5354, 5118,    0, 5367, 5437, 5153, 5221, 5284, 5301,
     5306, 5345,  446,  445,  434,    0, 5437, 5829,    0, 5366,
     5419, 5430, 5451, 5434,    0, 5437, 5475, 5458,  433,  431,
      430, 5829, 5431, 5466, 5455, 5465, 5478, 5443, 5470, 5486,
     5493, 5471,  428,  424,  406,    0, 5479, 5500, 5507, 5472,
     5500, 5489, 5484, 5829, 5522, 5510, 5514, 5511,  395,  356,
      355, 5515, 5523, 5521, 5525, 5518, 5829, 5550, 5532, 5534,
     5555,  353,  352,  350,    0, 5545, 5553, 5546, 5574, 5829,
     5582, 5559,  346,  325,  307, 5565, 5566, 5829, 5567,    0,

      305,  276,    0, 5568,  267,  262,  260,  258,  254,  251,
        0,  229,  214, 5829, 5652, 5656, 5660, 5664, 5668, 5672,
     5674,  232, 5676, 5678, 5680, 5682, 5684, 5686, 5688, 5690,
     5692, 5694, 5698, 5700, 5702, 5704, 5706, 5708, 5710, 5712,
     5714, 5716, 5718, 5720, 5722, 5724, 5726, 5728, 5730, 5732,
     5734, 5736, 5738, 5740, 5742, 5744, 5746, 5748, 5750,  231,
     5752, 5754, 5756,  230, 5758, 5760, 5762,  228,  226, 5764,
     5766, 5768,  224, 5772, 5776, 5778, 5780,  219,  217, 5784,
     5788, 5790, 5792, 5794, 5796, 5798,  214, 5800, 5802, 5804,
     5806, 5808,  145, 5810, 5812, 5814,  131, 5816,  117, 5818,

     5820, 5822,   80, 5824
    } ;

static yyconst flex_int16_t yy_def[1105] =
    {   0,
     1014,    1, 1015, 1015, 1016, 1016, 1014, 1014, 1014, 1014,
     1014, 1017, 1018, 1019, 1014, 1014,   16, 1014, 1014, 1014,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1014, 1014, 1014, 1014, 1014, 1014, 1017, 1014, 1018, 1019,
     1014, 1014, 1020, 1014, 1021,   54, 1014, 1022, 1014, 1014,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1014, 1020, 1014, 1023,  118,
     1024, 1014, 1022, 1014,  124,   62,  126,  126,   26,   26,
       26,   26,   26,  126,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1014,  183, 1025, 1026, 1027, 1014,  188, 1014,
     1014, 1014,  191,  126,  194,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1014,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,  184,  184, 1026, 1028, 1029, 1014, 1014, 1014,
      259, 1014, 1014,  263, 1014,  265,  194,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1014,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1030, 1014, 1031,
     1032, 1014, 1014,  333, 1014,  335, 1014, 1014, 1014, 1014,
     1014,  340,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1033,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1014, 1014,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26, 1034, 1035, 1036, 1014, 1014, 1014, 1014, 1014,  408,
     1014, 1014, 1014,  413, 1014,  415,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1014,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1014,
     1014,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1031, 1014, 1037, 1038, 1014, 1014, 1014,  479,
     1014,  481, 1014, 1014, 1014, 1014, 1014,  486,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1014,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1014, 1014,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1039, 1040, 1041,
     1014, 1014, 1014, 1014, 1014,  554, 1014, 1014,  558, 1014,
      560,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1014,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1014, 1014,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1042, 1014, 1043, 1044, 1014, 1014,  617, 1014,  619,
     1014, 1014, 1014, 1014,  623,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26, 1014,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1014, 1014,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1045, 1046,
     1047, 1014, 1014, 1014, 1014,  674, 1014,  677, 1014,  679,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1014,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26, 1014, 1014,   26,   26,   26,   26,
       26,   26, 1048, 1014, 1049, 1050, 1014,  717, 1014,  719,
     1014, 1014, 1014, 1014,  723,   26,   26,   26,   26,   26,
       26,   26, 1014,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1051, 1052, 1053, 1014, 1014, 1014, 1014,  756, 1014,  759,
     1014,  761,   26,   26,   26,   26,   26, 1014,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1054, 1014, 1055, 1056, 1014,  786, 1014,  788, 1014,
     1014, 1014, 1014,  792,   26,   26,   26,   26, 1014,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1057, 1058, 1059, 1060, 1014, 1014, 1014, 1014,  817, 1014,
      820, 1014,  822,   26,   26,   26,   26, 1014, 1014,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1061,
     1014, 1062, 1014, 1063, 1014,  845, 1014,  847, 1014, 1014,
     1014, 1064,  851,   26,   26,   26, 1014, 1014,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1065,
     1066, 1014, 1067, 1068, 1014, 1014, 1014,  877, 1014,  879,
     1069,   26,   26,   26,   26,   26, 1014, 1014,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1070, 1014,

     1071, 1072, 1014,  903, 1014, 1014, 1073,   26,   26,   26,
       26,   26, 1014, 1074,   26, 1075,   26,   26,   26,   26,
       26,   26, 1076, 1014, 1077, 1078, 1014, 1014, 1079,   26,
       26,   26,   26,   26, 1080, 1014, 1081,   26, 1082, 1083,
     1084, 1014,   26,   26,   26,   26, 1014, 1014, 1014,   26,
       26,   26, 1085, 1014, 1086, 1087,   26,   26,   26,   26,
     1014, 1014, 1014, 1014,   26,   26,   26,   26, 1088, 1089,
     1090,   26,   26,   26,   26, 1014, 1014, 1014,   26,   26,
       26, 1091, 1014, 1092, 1093,   26,   26,   26, 1014, 1014,
       26,   26, 1094, 1095, 1096,   26,   26, 1014,   26, 1097,

     1014, 1098, 1099,   26, 1014, 1100, 1101, 1094, 1014, 1102,
     1103, 1104, 1014,    0, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,

     1014, 1014, 1014, 1014
    } ;

static yyconst flex_int16_t yy_nxt[5905] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
     1014,   61,  848,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   84,   57,  111,   61,   61, 1014,   61,   61,   85,
       61,  127,   88,   44,   45,  128,   61,   80,   58, 1007,
       62,   56,   56,   56,   56,   56,   56,   84,   57,  111,
       61,   61,   61, 1005,   61,   85,   61,  127,   88,   46,
       45,  128,   61,   80,   58,   61,   61,  995,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   93,   62,   94,  971,  114,   61,  942,
       61,  941,   61,   61,   44,   45,  929,  129,  907,   70,
      902,   81,  881,  844,  123, 1011,  115,   62,   62,   93,
       62,   94,   61,  114,   61,   61,   61,   82,   61,   61,
     1011,   61,   61,  129,   86,   70,   71,   81,   62,   62,
       87,   62,  115,  132,   61,  130,   61,   72,   61,   61,
       73,   61, 1011,   82,   61, 1003,   61,   61,   61, 1014,
       86, 1011,   71, 1003,   62,   62,   87,   62, 1008,  132,
       61,  130,   61,   72,   89,   61,   73, 1003,   90,  133,

       61,   95,   61,   62,   91,  131,   74,   75,   61,   92,
       61,   76,   96,  134,   61,   97,   77,   78,   61,  138,
       89,  139,   61,   79,   90,  133,  985,   95, 1003,   62,
       91,  131,   74,   75,   61,   92,   61,   76,   96,  134,
       61,   97,   77,   78,   61,  138,  985,  139,   61,   79,
       61,   61,   61,   61,   61,   61,   61,   61,   61, 1014,
      145,   61,   61,   61,   61,   61,   61,  872,   61,   61,
      143,  985,   61,  956,  993,   61,  985,  956,  137,   98,
      112,   83,   61,   99,  113,   61,  145,   61,   61,   61,
       61,   61,   61,  100,   61,   61,  143,  101,   61,   61,

       61,   61,  102,  103,  137,   98,  112,   83,   61,   99,
      113,   61,  106,  107,  104,  105,  843,  140,  141,  100,
       61,  147,  108,  101,  142,   61,   61,  956,  102,  103,
      109,   61,   61,  144,  155,   61,  146,   61,   61,  110,
      104,  105,   61,  140,  141,  926,   61,  147,  108,  814,
      142,  956,  926,   61,  953,  926,  109,   61,   61,  144,
      155,   61,  146,   61,   61,  110,  874,  785,   61,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  119,   61,
      120,  120,  120,  120,  120,  120,  852,   57,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  152,   61,  926,

      874,  843,  122,  818,  874,  153,  120,  120,  120,  120,
      120,  120,   61,   57,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  152,   61,  125,  125,  125,  125,  125,
      125,  153,  843,  899,  793,  874,  872,  843,   61,  785,
      716,  757,  843,  785,  122,  724,  814,  161,  158,  785,
       61,  125,  125,  125,  125,  125,  125,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  119,  148,  126,  126,
      126,  126,  126,  126,  158,   66,   61,  716,  811,  799,
      159,   61,  135,  675,  149,   61,  154,   61,   61,  150,
      136,  785,  716,  148,  126,  126,  126,  126,  126,  126,

       61,   66,   61,  151,   61,  156,  159,   61,  135,  163,
      149,   61,  154,   61,   61,  150,  136,   61,  160,   61,
      157,  162,  168,  175,  615,   61,   61,   61,   61,  151,
       61,  156,  164,  169,  170,  163,   61,   61,  165,   61,
      166,  167,  174,   61,  160,   61,  157,  162,  168,   61,
      171,   61,  172,   61,   61,   61,   61,   61,  164,  169,
      170,   61,   61,   61,  165,   61,  166,  167,  174,  173,
      177,  176,   61,  178,  195,   61,  171,  179,  172,   61,
       61,   61,   61,   61,  180,   61,   61,   61,  182,  181,
       61,   61,   61,  624,  122,  173,  177,  176,   61,  178,

      195,  716,  615,  179,  122,   61,  555,  716,  615,  713,
      180,   61,   61,  487,  182,  181,   61,   61,   61,  183,
      183,  183,  183,  183,  183,  183,  183,  183,   55,  196,
      184,  184,  184,  184,  184,  184,   61,   57,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  201,  208,  122,
      615,  476,  476,  409,  615,  196,  184,  184,  184,  184,
      184,  184,   61,   57,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  201,  476,  189,  189,  189,  189,  189,
      189, 1014,   61,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  122,  213,  341,  122,  476,  331,  548,  260,

       61,  189,  189,  189,  189,  189,  189,  190,   61,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  192,  213,
      193,  193,  193,  193,  193,  193,   61,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  476,  193,  193,  193,  193,
      193,  193,  194,  194,  194,  194,  194,  194,  194,  194,
      194,   55,  199,  194,  194,  194,  194,  194,  194,  197,
      198,  200,   61,  331,  331,   61,   61,  202,  205,   61,
       61,   61,   61,  203,  204,   61,  206,  192,  199,  194,
      194,  194,  194,  194,  194,  197,  198,  200,   61,   61,

      207,   61,   61,  202,  205,   61,   61,   61,   61,  203,
      204,   61,  206,  209,  210,  212,   61,   61,  211,  214,
      215,   61,  122,  217,  221,   61,  207,  331,   61,  187,
      216,   61,  122,   61,   61,   61,  218,  219,   61,  209,
      210,  212,   61,   61,  211,  214,  215,   61,   61,  217,
      222,  227,   61,   61,   61,  220,  216,   61,   61,   61,
       61,   61,  218,  219,   61,   61,  223,  236,   61,  224,
       61,  228,  225,  226,   61, 1014,  222,  331,   61,   61,
       61,  220,  187,   61,   61,   61,  233,   61,  234,  232,
      229,   61,  223,  236,   61,  224,   61,  228,   61,  230,

       61,   61,  235,  231,  237,  239,   61,   61,   61,   61,
       61,   61,  233,   61,  234,  232,  229,   61,   61,  238,
       61,  241,  242,   61,   61,  230,   61,   61,  235,  231,
      237,  239,  240,   61,   61,   61,   61,  247,  243,  246,
      248,  249,  328,   61,   61,  238,   61,  244,  242,   61,
       61,  251,  245,   61,   61,   61,   61,   61,  240,   61,
      250,   61,  268,  247,  243,  246,  248,  249,   61,   61,
       61,   61,   61,  244,  252, 1014,   61,  251,  245,   61,
       61,   61,   61,   61,   61,   61,  250,  272,  268,  299,
      122,  187,  187,  187,   61,   61,   61,   61,   61, 1014,

      252,  261,  261,  261,  261,  261,  261,  261,  261,  261,
       61,  253,  253,  253,  253,  253,  253,  253,  253,  253,
       55,   61,  254,  254,  254,  254,  254,  254, 1014,   57,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  122,
      122,   50,  273,   51,   48,  116,   60,   61,  254,  254,
      254,  254,  254,  254,  282,   57,  258,   61,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  260,   59,  261,
      261,  261,  261,  261,  261,   51,   61,   48, 1014,   42,
      282,   42, 1014,   61, 1014, 1014, 1014,  276, 1014, 1014,
     1014, 1014, 1014, 1014,   61,  261,  261,  261,  261,  261,

      261,  190,   61,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  192,  276,  264,  264,  264,  264,  264,  264,
       61,  269, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
       61, 1014, 1014, 1014, 1014, 1014, 1014,  287,   61,  270,
      264,  264,  264,  264,  264,  264,  265,  265,  265,  265,
      265,  265,  265,  265,  265,   61,   61,  266,  266,  266,
      266,  266,  266,  287,   61,  270,  253,  253,  253,  253,
      253,  253,  253,  253,  253, 1014,  278, 1014,  284, 1014,
       61,   61,  271,  266,  266,  266,  266,  266,  266,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  274,  277,

      267,  267,  267,  267,  267,  267,   61,  275,  271,   61,
       61,  279,   61,   61,   61,  280, 1014,   61,  283,   61,
      281,  285,  291,   61,  274,  277,  267,  267,  267,  267,
      267,  267,   61,  275,   61,   61,   61,  279,   61,   61,
       61,  280,  296,   61,  283,   61,  281,  285,  286,   61,
      288,  289,  290,   61,   61,   61,   61,   61,   61, 1014,
       61,  298, 1014,  302,   61,   61,  303, 1014,  296, 1014,
     1014, 1014,   61, 1014,  286,  292,  288,  289,  290,   61,
       61,   61,   61,   61,  293,  294,  295,  297,  300,  302,
       61,   61,  303,   61, 1014,   61,  306,  304,   61,  305,

       61,  292,   61,  301,  307,   61,   61,  309,  308,  310,
      293,  294,  295,  297,  300,   61,  312,   61, 1014,   61,
       61,   61,  306,  304,   61,  305,   61,   61,   61,  301,
      307,   61,   61,  309,  308,  310,   61, 1014,  313,  314,
      311,   61,  312,   61,   61,  315,   61,  318,  319,   61,
       61,  322,  316,   61,   61,   61,  320,  321,   61,  324,
       61,   61,   61,   61,  313,  314,  311,  317,  323,   61,
       61,  315,   61,  318,  319,   61,  327,  322,  316,   61,
       61,   61,  320,  321,   61,  324,   61,   61,  326,   61,
      325,  343,   61,  317,   61,   61,  344,  345,   61,   61,

       61,   61,   61,  352,   61,   61,   61,   61,   61,  353,
       61, 1014, 1014, 1014,  326, 1014,  325,  343,   61, 1014,
       61,   61,  344,  345,  350,   61,   61,   61,   61,  352,
       61, 1014,   61,   61,   61,  353,   61,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  258,   61,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  260,   61,  334,
      334,  334,  334,  334,  334, 1014, 1014,  334,  334,  334,
      334,  334,  334,  334,  334,  334, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014,   61,  334,  334,  334,  334,  334,
      334,  335,  335,  335,  335,  335,  335,  335,  335,  335,

      349,   61,  336,  336,  336,  336,  336,  336,  337,   61,
      262,  262,  262,  262,  262,  262,  262,  262,  262, 1014,
      351, 1014, 1014, 1014, 1014, 1014,  349,   61,  336,  336,
      336,  336,  336,  336,  190,   61,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  192,  373,  339,  339,  339,
      339,  339,  339, 1014,   61,  339,  339,  339,  339,  339,
      339,  339,  339,  339, 1014,   61, 1014, 1014, 1014, 1014,
     1014, 1014,  373,  339,  339,  339,  339,  339,  339,  190,
       61,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      341,   61,  342,  342,  342,  342,  342,  342, 1014, 1014,

      342,  342,  342,  342,  342,  342,  342,  342,  342,  356,
       61,  357,  361,  362,  346,  347,  348, 1014,  342,  342,
      342,  342,  342,  342,   61,  354,  358,   61,  360,  355,
       61,  359,  363,   61, 1014,  356,   61,  357, 1014, 1014,
      346,  347,  348,   61,   61,   61,   61,   61,  364,  365,
       61,  354,  358,   61,  360,  355,   61,  359,  363,   61,
       61,  371,  368,  369,   61,  366,  372,  367,   61,   61,
       61,   61,   61,   61,  364,  365,   61,   61,  370,   61,
     1014,   61,  374,  375,   61,  378,   61,  371,  368,  369,
       61,  366,  380,  367,   61,   61,  381,  379,  376,   61,

       61,   61,   61,   61,  370,   61,  377,   61,  374,  375,
       61,  378,   61,   61,  383,  386,   61, 1014,  380, 1014,
       61,   61,  381,  379,  376,   61,   61,   61,  382,  388,
      384,   61,  377,   61,  385,   61,  387,   61,   61,   61,
      383,   61,   61,  389,   61,   61,   61,  390,  391,   61,
     1014, 1014,  393,   61,  382,  388,  384,   61, 1014,   61,
      385,   61,  387,   61,   61,  399,   61,   61,  392,  389,
       61,   61, 1014,  390,  391,   61,  396,   61,  393,   61,
      394,   61,  395,   61,  398,   61,   61,  401,  397,  419,
       61,   61,   61,  425,  392,  400,   61,   61,   61,   61,

     1014,   61,  396,   61,   61, 1014,  394,   61,  395,   61,
      398,   61,   61,  401,  397,  419, 1014,   61, 1014,  425,
     1014,  400,   61,   61,   61,   61,  417,   61, 1014,  405,
       61,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      258, 1014,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  260, 1014,  407,  407,  407,  407,  407,  407, 1014,
       61,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  407,
      407,  407,  407,  407,  407,  258,   61,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  409,  418,  410,  410,

      410,  410,  410,  410, 1014,  450,  410,  410,  410,  410,
      410,  410,  410,  410,  410, 1014, 1014,   61, 1014, 1014,
     1014, 1014, 1014,  418,  410,  410,  410,  410,  410,  410,
      190,  450,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  192,  190,   61,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  341, 1014,  414,  414,  414,  414,  414,
      414, 1014, 1014,  414,  414,  414,  414,  414,  414,  414,
      414,  414, 1014, 1014, 1014, 1014, 1014,  432, 1014, 1014,
      420,  414,  414,  414,  414,  414,  414,  415,  415,  415,
      415,  415,  415,  415,  415,  415,   61,  421,  416,  416,

      416,  416,  416,  416,  422,  423,  420,  429,  424,   61,
       61,   61,  430,  433,   61,   61,   61,   61,  438,  451,
       61,   61,   61,  421,  416,  416,  416,  416,  416,  416,
      422,  423, 1014,  429,  424,   61,   61,   61,  430,  433,
       61,   61,   61,   61,  438,  451,   61,   61,  426,  426,
      431,  426,  426,  426,  426,  426,  426,  427,  434,  426,
      435,  440,   61,  436,  437,  441,   61,  439,   61,  426,
      426,   61,   61,   61,  442, 1014,  431,   61, 1014,  445,
       61,   61,   61,  444,  434, 1014,  435,  440,   61,  436,
      437,  441,   61,  439,   61,  443,   61,   61,   61,   61,

      442,  447,  446,   61,   61,  445,   61,   61,   61,  444,
       61,  448,  449,   61,   61,  452,  453,   61,   61,   61,
      456,  443,   61,   61,   61, 1014,  454,  447,  446,   61,
       61,  455,  461,   61,   61,  458,   61,  448,  449,   61,
       61,  452,  453,   61,   61,   61,  456,  457,  459,   61,
       61,   61,  454,  460,  462,   61,   61,  455,   61,   61,
       61,  458, 1014,   61,  463,  464,   61,  465,   61,   61,
     1014,   61,   61,  457,  459,  466,  467,   61,   61,  460,
      468,  471,   61,   61,   61, 1014,   61,   61,   61,   61,
      463,  464,   61,  465,   61,   61,  470,   61,   61,  469,

       61,  466,  467,  495,   61,   61,  468,  472,  489,   61,
      497,  490,   61,   61,   61,   61,  500,  491,   61,   61,
     1014, 1014,  470, 1014, 1014,  469,   61, 1014, 1014,  495,
       61,   61, 1014,  472,  489, 1014,  497,  490, 1014, 1014,
     1014,   61,  500,  491,   61,   61,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  258,   61,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  260,  258, 1014,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  409,   61,
      480,  480,  480,  480,  480,  480, 1014,  493,  480,  480,
      480,  480,  480,  480,  480,  480,  480, 1014, 1014, 1014,

     1014, 1014, 1014, 1014, 1014,   61,  480,  480,  480,  480,
      480,  480,  481,  481,  481,  481,  481,  481,  481,  481,
      481,   61,  505,  482,  482,  482,  482,  482,  482,  483,
       61,  411,  411,  411,  411,  411,  411,  411,  411,  411,
     1014,  526, 1014, 1014, 1014, 1014, 1014,   61,  505,  482,
      482,  482,  482,  482,  482,  190,   61,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  190,  526,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  341,  527,  485,
      485,  485,  485,  485,  485, 1014,   61,  485,  485,  485,
      485,  485,  485,  485,  485,  485, 1014,   61, 1014, 1014,

     1014, 1014, 1014, 1014,  527,  485,  485,  485,  485,  485,
      485,  190,   61,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  487,   61,  488,  488,  488,  488,  488,  488,
     1014,  498,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  492,   61,   61,   61,  499,  494,  496,   61, 1014,
      488,  488,  488,  488,  488,  488,  504,  498, 1014, 1014,
       61,  503,   61, 1014, 1014,   61,  501,  492,   61,   61,
       61,  499,  494,  496,   61,  513,  502, 1014,   61,  509,
      573,  510,  504,  512,   61,  503,   61,  503,   61,   61,
      506,   61,  501,  511, 1014,   61,  507,   61,  508,  516,

       61,  513,  502,   61,   61,  509,  573,  510, 1014,  512,
       61,  503,  514,  518,  515,   61,  506,   61,  517,  511,
      520,   61,  507,   61,  508,  516,   61,  519,   61,   61,
       61,   61,  521,   61,   61,  522,   61,  523,  514,  518,
      515, 1014,  524,   61,  517,   61,  520,  528,   61, 1014,
      525,   61,   61,  519,   61,   61,   61,   61,  521,   61,
       61,  522,   61,  523,   61,  529, 1014,   61,  524,   61,
      530,   61,  535,  528,   61,  533,  525,   61,   61,  537,
      531,   61,   61,  532,   61,  534, 1014,  538,   61, 1014,
       61,  529,   61,   61,  536,   61,  530,   61,  535,   61,

       61,  533,  539,   61,  540,  537,  531, 1014,   61,  532,
       61,  534,  542,  538,   61,  541, 1014,   61,   61,   61,
      536,   61,   61,   61,  545,   61,   61,  544,  539,   61,
      540,  543,  579,   61,   61,  546,   61,   61,  542,  547,
       61,  541,   61,   61, 1014,   61, 1014,   61,   61, 1014,
      545, 1014, 1014,  544, 1014, 1014, 1014,  543,  579,   61,
       61,  546,   61,   61,   61,  547,   61,  551,   61,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  258, 1014,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  258,
       61,  552,  552,  552,  552,  552,  552,  552,  552,  552,

      409, 1014,  553,  553,  553,  553,  553,  553, 1014,   61,
      553,  553,  553,  553,  553,  553,  553,  553,  553,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  553,  553,
      553,  553,  553,  553,  258,   61,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  555,  565,  556,  556,  556,
      556,  556,  556, 1014,   61,  556,  556,  556,  556,  556,
      556,  556,  556,  556, 1014, 1014,   61, 1014, 1014, 1014,
     1014, 1014,  565,  556,  556,  556,  556,  556,  556,  190,
       61,  412,  412,  412,  412,  412,  412,  412,  412,  412,
      341,  190,   61,  558,  558,  558,  558,  558,  558,  558,

      558,  558,  487, 1014,  559,  559,  559,  559,  559,  559,
     1014, 1014,  559,  559,  559,  559,  559,  559,  559,  559,
      559, 1014, 1014,  567, 1014, 1014, 1014, 1014, 1014,  562,
      559,  559,  559,  559,  559,  559,  560,  560,  560,  560,
      560,  560,  560,  560,  560,   61,  563,  561,  561,  561,
      561,  561,  561,   61,  564,  562,  566,   61, 1014, 1014,
      570,   61,   61,   61,   61,   61,  572, 1014,  568,  571,
     1014,   61,  563,  561,  561,  561,  561,  561,  561,   61,
      564,  575,  566,   61,   61,  569,  570,   61,   61,   61,
       61,   61,  572,  574,  568,  571,  576,  578,   61,  577,

       61,   61,   61,  580,  582,  581, 1014,  575,  583,   61,
       61,  569,   61,   61,   61,   61,  584,  587,   61,  574,
       61,  588,  576,  578,   61,  577,   61,   61,   61,  580,
      582,  581,  585,   61,  583,   61,  586,   61,   61,   61,
       61,   61,  584,  591,   61,  589,   61,  588,   61,   61,
      590,   61,   61,   61,  592,   61,   61,  593,  585,   61,
      594,  595,  586,   61,   61,   61,  599,  600,  596,  591,
     1014,  589,  597,   61,   61,   61,  590,   61,   61,   61,
      592,   61,   61,  593,   61,   61,  594,  595,   61,  598,
       61,   61,  601,  600,  596,  602,  603, 1014,  597,   61,

       61,  605,   61,   61,  606,   61,  604,   61,   61,   61,
       61,   61, 1014,   61,   61,  598, 1014,  607,  601,   61,
       61,  602,  603,   61,  608,  609,   61,  605,   61,   61,
      606,   61,  604,   61,   61,   61,  629,  610,   61,   61,
      637,   61,  611,  607,   61,   61,   61,   61,   61,   61,
      608,  609,   61,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  629,  610,   61, 1014,  637,   61,  611, 1014,
       61, 1014, 1014,   61,   61,   61, 1014,  258,   61,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  409,  258,
     1014,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      555,   61,  618,  618,  618,  618,  618,  618, 1014, 1014,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  618,  618,
      618,  618,  618,  618,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  626,  651,  620,  620,  620,  620,  620,
      620, 1014,   61,  622,  622,  622,  622,  622,  622,  622,
      622,  622, 1014,   61, 1014, 1014, 1014, 1014, 1014,  626,
      651,  620,  620,  620,  620,  620,  620,  190,   61,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  487,   61,
      622,  622,  622,  622,  622,  622, 1014,  655,  625,  625,

      625,  625,  625,  625,  625,  625,  625,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  622,  622,  622,  622,
      622,  622,  190,  655,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  624,  627,  625,  625,  625,  625,  625,
      625,  628,  630,   61,  631,  632,   61, 1014,  636,  633,
     1014,   61, 1014,   61,   61,   61, 1014,  634,  635, 1014,
      627,  625,  625,  625,  625,  625,  625,  628,  630,   61,
      631,  632,   61,   61,   61,  633,  638,   61,  643,   61,
       61,   61,   61,  634,  635,   61,  640,  644,  639,  641,
      645,  642, 1014,   61,   61,   61,   61,   61,   61,   61,

       61,  648,  638,  646,  643,  650,   61,  652,   61, 1014,
       61,   61,  640,  644,  639,  641,  645,  642,  649,   61,
       61,   61,   61,   61,   61,  647,   61,  656,  653,  646,
       61,  654,   61,   61,   61,   61,   61,   61,  657,   61,
      658,   61,  662,   61,  649,   61,  659,  663, 1014,   61,
     1014,  647,   61,  656,  653,   61,   61,  654,  661,   61,
       61,   61,   61,   61,  657,   61,  658,   61,  660,   61,
      664,   61,  659,  663,   61,   61,   61,   61,  665,   61,
      666,   61,   61,   61,  661,   61,   61,   61,   61,   61,
      681,  667,   61,  682,  660,  684,  664,   61,  668,  685,

       61,   61,   61,   61,  665,   61,  666,   61,   61,   61,
       61,   61,   61,   61,   61,   61,  681,  667,   61,  682,
     1014,  684, 1014,   61,  668,  685, 1014,   61, 1014, 1014,
     1014, 1014, 1014,   61, 1014,  691,   61, 1014,  693, 1014,
       61,  258, 1014,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  555,  696,  673,  673,  673,  673,  673,  673,
     1014,  691,  673,  673,  673,  673,  673,  673,  673,  673,
      673, 1014,   61, 1014, 1014, 1014, 1014, 1014, 1014,  696,
      673,  673,  673,  673,  673,  673,  258, 1014,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  675,   61,  676,

      676,  676,  676,  676,  676, 1014,  687,  676,  676,  676,
      676,  676,  676,  676,  676,  676, 1014, 1014,   61, 1014,
     1014, 1014, 1014, 1014, 1014,  676,  676,  676,  676,  676,
      676,  190,  687,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  487,  190,   61,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  624, 1014,  678,  678,  678,  678,
      678,  678, 1014, 1014,  678,  678,  678,  678,  678,  678,
      678,  678,  678, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
       61,  686,  678,  678,  678,  678,  678,  678,  679,  679,
      679,  679,  679,  679,  679,  679,  679,   61,  683,  680,

      680,  680,  680,  680,  680,   61,   61,  686,  689,  690,
     1014,  692,   61,   61, 1014,  688,  694, 1014,   61, 1014,
       61, 1014,  695,   61,  683,  680,  680,  680,  680,  680,
      680,   61,   61,   61,  689,  690,  697,  692,   61,   61,
       61,  688,  694,  699,   61,  698,   61,  700,  695,   61,
      701,  702,  704,   61,   61,   61,  705,  703,   61,   61,
       61,   61,  697,   61,   61,  706,   61,   61,   61,  699,
       61,  698,   61,  700,   61,   61,  701,  702,  704,   61,
       61,   61,  705,  703,   61,  707,   61,   61,  710,   61,
       61,  706,  708,   61,   61,  709,   61,   61,   61,   61,

       61,   61,   61,   61,   61,  711,   61,   61,  712, 1014,
       61,  707, 1014, 1014,  710, 1014, 1014, 1014,  708, 1014,
     1014,  709,   61,   61,   61,   61,   61,   61,   61,   61,
       61,  711,   61,   61,  712,  258, 1014,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  555,  731,   61, 1014,
       61, 1014,   61,  258, 1014,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  675,  733,  718,  718,  718,  718,
      718,  718, 1014,  731,  718,  718,  718,  718,  718,  718,
      718,  718,  718, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
       61,  733,  718,  718,  718,  718,  718,  718,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  728,   61,  720,
      720,  720,  720,  720,  720, 1014,   61,  722,  722,  722,
      722,  722,  722,  722,  722,  722, 1014, 1014, 1014, 1014,
     1014, 1014, 1014,  728,   61,  720,  720,  720,  720,  720,
      720,  190, 1014,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  624,  730,  722,  722,  722,  722,  722,  722,
     1014,   61,  725,  725,  725,  725,  725,  725,  725,  725,
      725, 1014, 1014, 1014, 1014, 1014, 1014, 1014,  739,  730,
      722,  722,  722,  722,  722,  722,  190,   61,  723,  723,
      723,  723,  723,  723,  723,  723,  723,  724,  726,  725,

      725,  725,  725,  725,  725,  727,  729,  732,  734,  735,
       61,   61,   61,   61,   61,  736,  737, 1014,   61,  738,
       61,   61,   61,   61,  726,  725,  725,  725,  725,  725,
      725,  727,  729,  732,  734,  735,   61,   61,   61,   61,
       61,  736,  737,  740,   61,  738,   61,   61,   61,   61,
       61,  741,  743,  742,  744,  745,  748,   61,  746,  749,
       61,   61,  747,  750,   61,   61,   61,  764,   61,  740,
       61,   61,   61,   61,   61,   61,   61,  741,  743,  742,
      744,  745,  748,   61,  746,  749,   61,   61,  747,  750,
       61,   61,   61,  764,   61, 1014,   61,   61,   61,   61,

       61,   61,  258, 1014,  754,  754,  754,  754,  754,  754,
      754,  754,  754,  675,   61,  755,  755,  755,  755,  755,
      755, 1014,  768,  755,  755,  755,  755,  755,  755,  755,
      755,  755, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
       61,  755,  755,  755,  755,  755,  755,  258,  768,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  757,  767,
      758,  758,  758,  758,  758,  758, 1014,   61,  758,  758,
      758,  758,  758,  758,  758,  758,  758, 1014, 1014,   61,
     1014, 1014, 1014, 1014, 1014,  767,  758,  758,  758,  758,
      758,  758,  190,   61,  412,  412,  412,  412,  412,  412,

      412,  412,  412,  624,  190,   61,  759,  759,  759,  759,
      759,  759,  759,  759,  759,  724, 1014,  760,  760,  760,
      760,  760,  760, 1014, 1014,  760,  760,  760,  760,  760,
      760,  760,  760,  760, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014,  765,  760,  760,  760,  760,  760,  760,  761,
      761,  761,  761,  761,  761,  761,  761,  761,   61,  766,
      762,  762,  762,  762,  762,  762,  763,  769,  765,  770,
       61,  771,   61,   61, 1014,   61,  777,   61,   61, 1014,
       61, 1014, 1014,   61,   61,  766,  762,  762,  762,  762,
      762,  762,  763,  769,  772,  770,   61,  771,   61,   61,

      773,   61,   61,   61,   61,  774,   61,  775,  776,   61,
       61,   61,  795,  778, 1014,  779,  780,   61,  796,   61,
      772,  798,   61,   61,   61,   61,  773,   61,   61,   61,
       61,  774,  781,  775,  776,   61,   61,   61,  795,  778,
       61,  779,  780,   61,  796,   61, 1014,  798,   61,   61,
       61,   61,   61,   61, 1014,   61,   61, 1014,  781, 1014,
     1014,   61, 1014,  833, 1014,  258,   61,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  675,  258,   61,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  757,   61,
      787,  787,  787,  787,  787,  787, 1014, 1014,  787,  787,

      787,  787,  787,  787,  787,  787,  787, 1014, 1014, 1014,
     1014, 1014, 1014, 1014,   61,   61,  787,  787,  787,  787,
      787,  787,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  800,   61,  789,  789,  789,  789,  789,  789, 1014,
       61,  791,  791,  791,  791,  791,  791,  791,  791,  791,
     1014,   61, 1014, 1014, 1014, 1014, 1014,  800,   61,  789,
      789,  789,  789,  789,  789,  190, 1014,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  724,   61,  791,  791,
      791,  791,  791,  791, 1014,   61,  794,  794,  794,  794,
      794,  794,  794,  794,  794, 1014,  801, 1014, 1014, 1014,

     1014, 1014, 1014, 1014,  791,  791,  791,  791,  791,  791,
      190,   61,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  793,  802,  794,  794,  794,  794,  794,  794,  797,
       61,  803,   61,  804,  806,  805,   61,   61, 1014,   61,
       61,  807,   61,  809,   61,   61, 1014,  825,  802,  794,
      794,  794,  794,  794,  794,  797,   61,  803,   61,  804,
      806,  805,   61,   61,  808,   61,   61,  807,   61,  809,
       61,   61,  810,   61,  830, 1014,   61,  826,  857,  837,
       61,   61,   61,  839,   61,  824,  858,   61,   61, 1014,
      808, 1014, 1014, 1014, 1014, 1014, 1014, 1014,  810,   61,

      830,   61,   61,  826,  857,  837,   61,   61,   61,  839,
       61,  824,  858,   61,   61,  258, 1014,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  757,   61,  816,  816,
      816,  816,  816,  816, 1014,   61,  816,  816,  816,  816,
      816,  816,  816,  816,  816, 1014,  856, 1014, 1014, 1014,
     1014, 1014, 1014, 1014,  816,  816,  816,  816,  816,  816,
      258,   61,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  818,  834,  819,  819,  819,  819,  819,  819, 1014,
       61,  819,  819,  819,  819,  819,  819,  819,  819,  819,
     1014, 1014,   61, 1014, 1014, 1014, 1014, 1014,  834,  819,

      819,  819,  819,  819,  819,  190,   61,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  724,  190,   61,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  793, 1014,
      821,  821,  821,  821,  821,  821, 1014, 1014,  821,  821,
      821,  821,  821,  821,  821,  821,  821, 1014, 1014, 1014,
     1014, 1014, 1014,  887, 1014,  827,  821,  821,  821,  821,
      821,  821,  822,  822,  822,  822,  822,  822,  822,  822,
      822,   61,  828,  823,  823,  823,  823,  823,  823,  887,
      835,  827, 1014,  838,  854,  860,  861,   61,  829,  831,
      888,   61,  836,   61,   61,   61,   61,   61,  828,  823,

      823,  823,  823,  823,  823,  832,  835,   61,   61,  838,
      854,  860,  861,   61,  829,  831,  888,   61,  836,   61,
       61,   61,   61, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014,  832, 1014,   61,   61,  258, 1014,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  757,  258, 1014,  845,
      845,  845,  845,  845,  845,  845,  845,  845,  818,   61,
      846,  846,  846,  846,  846,  846, 1014, 1014,  846,  846,
      846,  846,  846,  846,  846,  846,  846, 1014, 1014,  893,
      862,  863,  864, 1014,  865,   61,  846,  846,  846,  846,
      846,  846,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  889,   61,  848,  848,  848,  848,  848,  848, 1014,
       61,  850,  850,  850,  850,  850,  850,  850,  850,  850,
     1014,   61, 1014, 1014, 1014, 1014, 1014,  889,   61,  848,
      848,  848,  848,  848,  848,  190,   61,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  793,   61,  850,  850,
      850,  850,  850,  850, 1014, 1014,  853,  853,  853,  853,
      853,  853,  853,  853,  853, 1014,  855, 1014, 1014, 1014,
     1014, 1014, 1014, 1014,  850,  850,  850,  850,  850,  850,
      190,   61,  851,  851,  851,  851,  851,  851,  851,  851,
      851,  852,  855,  853,  853,  853,  853,  853,  853,  859,

      866,  867,   61,  868,  869,   61,  883,   61,   61,  882,
       61,   61,  895,  913,   61,   61,   61,  914,   61,  853,
      853,  853,  853,  853,  853,  859,  866,  867,   61,  868,
      869,   61,  883, 1014,   61,  882,   61,   61,  895,  913,
       61,   61,   61,  914,   61,  258,  894,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  818,  898,  876,  876,
      876,  876,  876,  876, 1014,   61,  876,  876,  876,  876,
      876,  876,  876,  876,  876,   61,   61, 1014, 1014, 1014,
     1014,  920, 1014,  898,  876,  876,  876,  876,  876,  876,
      258,   61,  877,  877,  877,  877,  877,  877,  877,  877,

      877,   61,   61,  878,  878,  878,  878,  878,  878, 1014,
       61,  878,  878,  878,  878,  878,  878,  878,  878,  878,
     1014, 1014,   61, 1014, 1014, 1014, 1014, 1014, 1014,  878,
      878,  878,  878,  878,  878,  190,   61,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  793,  190,   61,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  852,  935,
      880,  880,  880,  880,  880,  880, 1014,  890,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  908,  891,  896,
      884,  892,  897,   61,  909,  935,  880,  880,  880,  880,
      880,  880,  885,  890,   61,   61,   61,  930,   61,  886,

       61,  916,   61,  908,   61,  896,  884,   61,  897,   61,
      909, 1014, 1014, 1014, 1014, 1014, 1014, 1014,  885,   61,
       61,   61,   61,  930,   61,  886,   61,  916,   61,  917,
       61, 1014,  258,   61,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  818,  258,   61,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  910,   61,  904,  904,  904,
      904,  904,  904, 1014,   61,  904,  904,  904,  904,  904,
      904,  904,  904,  904, 1014,   61, 1014, 1014, 1014, 1014,
     1014,  910,   61,  904,  904,  904,  904,  904,  904,  190,
       61,  905,  905,  905,  905,  905,  905,  905,  905,  905,

      852,   61,  906,  906,  906,  906,  906,  906, 1014,  918,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  911,
      915,  931,   61,  919, 1014,  912,  922,   61,  906,  906,
      906,  906,  906,  906,   61,  921,  933,   61,   61,   61,
       61,   61,   61,  932,   61,  911,  915,  931,   61,   61,
       61,  912,  922,   61, 1014, 1014, 1014, 1014, 1014, 1014,
       61,  921,  933,   61,   61,   61,   61,   61,   61,  932,
       61, 1014, 1014, 1014, 1014,   61,   61,  258, 1014,  927,
      927,  927,  927,  927,  927,  927,  927,  927,   61,  934,
      928,  928,  928,  928,  928,  928, 1014,   61,  928,  928,

      928,  928,  928,  928,  928,  928,  928, 1014,  937,   61,
       61, 1014, 1014, 1014,   61,  934,  928,  928,  928,  928,
      928,  928,  190,   61,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  852,  937,   61,   61,  936,  936,  944,
      936,  936,  936,  936,  936,  936,  943,  258,  936,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  936,  936,
      945,  946,   61,  948,  949, 1014,  963, 1014, 1014,  957,
     1014, 1014,  943,   61,   61,  947,  947,   61,  947,  947,
      947,  947,  947,  947,  951,  952,  947,  946,   61,  948,
      949,  958,  963,  959,   61,  957,  947,  947,   61,   61,

       61,   61,  960,   61,  961,  962,  964,  968,   61,   61,
      951,  952,  965,  966,   61,  975,  967,  958, 1014,  959,
       61,  972,   61,  976,   61,  977,  978,   61,  960,   61,
      961,  962,  964,  968,   61,   61,   61,  973,  965,  966,
       61,  975,  967,   61,  974,  979,  980,  972,   61,  976,
       61,  977,  978,   61,   61,   61,  981,   61,   61,  986,
      989,  987,   61,  973,   61,   61,   61,  988,   61,   61,
      974,  979,  980,  990,  991,   61,   61,   61,  992,   61,
       61,  996,  981,   61,   61,  986,  989,  987,   61,   61,
       61,   61,   61,  988,   61,  997,   61,  998,   61,  990,

      991,   61,   61,   61,  992,  999, 1004,  996,   61,   61,
       61,   61, 1014, 1014,   61,   61, 1014, 1014, 1014, 1014,
     1014,  997,   61,  998,   61,   61, 1014, 1014,   61, 1014,
     1014,  999, 1004, 1014,   61,   61,   61,   61, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014,   61,   41,   41,   41,   41,   43,   43,   43,   43,
       47,   47,   47,   47,   49, 1014,   49,   49,   50,   50,
       50,   50,  117, 1014,  117,  117,  121,  121,  185,  185,
      186,  186,  255,  255,  256,  256,  257,  257,  329,  329,
      330,  330,  402,  402,  403,  403,  404,  404,  428, 1014,

      428,  428,  473,  473,  474,  474,  475,  475,  549,  549,
      550,  550,  612,  612,  613,  613,  614,  614,  669,  669,
      670,  670,  671,  671,  549,  549,  714,  714,  715,  715,
      751,  751,  752,  752,  753,  753,  782,  782,  783,  783,
      784,  784,  670,  670,  812,  812,  813,  813,  840,  840,
      841,  841,  842,  842,  870,  870,  871,  871,  873,  873,
      752,  752,  900,  900,  901,  901,  923,  923,  924,  924,
      925,  925,  936, 1014,  936,  936,  938, 1014,  938,  938,
      939,  939,  940,  940,  947, 1014,  947,  947,  950, 1014,
      950,  950,  812,  812,  954,  954,  955,  955,  969,  969,

      970,  970,  982,  982,  983,  983,  984,  984,  871,  871,
      994,  994, 1000, 1000, 1001, 1001, 1002, 1002, 1006, 1006,
     1009, 1009, 1010, 1010, 1012, 1012, 1013, 1013,    7, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,

     1014, 1014, 1014, 1014
    } ;

static yyconst flex_int16_t yy_chk[5905] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1103,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1099,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1097,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1093,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1087,   39,   32, 1079,
       21, 1078,   21,   39,   46,   46, 1073,   65, 1069,   21,
     1068,   25, 1064, 1060, 1022, 1013,   40,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
     1012,   66,   40,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   40,   69,   69,   67,   29,   22,   25,   22,
       22,   25, 1010,   25,   67, 1009,   22,   66,   40, 1008,
       29, 1007,   22, 1006,   22,   22,   29,   22, 1005,   69,
       69,   67,   29,   22,   31,   22,   22, 1002,   31,   70,

       67,   33,   22,   23,   31,   68,   23,   23,   70,   31,
       31,   23,   33,   71,   23,   33,   23,   23,   33,   74,
       31,   75,   68,   23,   31,   70, 1001,   33,  995,   23,
       31,   68,   23,   23,   70,   31,   31,   23,   33,   71,
       23,   33,   23,   23,   33,   74,  994,   75,   68,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       81,   26,   26,   26,   26,   26,   26,  993,   26,   91,
       79,  984,   26,  983,  982,   26,  971,  970,   73,   34,
       38,   26,   79,   34,   38,   73,   81,   26,   26,   26,
       26,   26,   26,   34,   26,   91,   79,   35,   26,   34,

       38,   26,   35,   35,   73,   34,   38,   26,   79,   34,
       38,   73,   36,   36,   35,   35,  969,   76,   77,   34,
       77,   83,   36,   35,   78,   34,   38,  955,   35,   35,
       36,   76,   78,   80,   88,   88,   82,   83,   80,   36,
       35,   35,   36,   76,   77,  954,   77,   83,   36,  953,
       78,  941,  940,   82,  939,  925,   36,   76,   78,   80,
       88,   88,   82,   83,   80,   36,  924,  923,   36,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   82,
       54,   54,   54,   54,   54,   54,  906,   54,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   86,   94,  902,

      901,  900,  899,  876,  873,   86,   54,   54,   54,   54,
       54,   54,   86,   54,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   86,   94,   59,   59,   59,   59,   59,
       59,   86,  871,  870,  850,  844,  843,  842,   86,  841,
      840,  816,  813,  812,  811,  791,  785,   95,   90,  784,
       90,   59,   59,   59,   59,   59,   59,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   84,   62,   62,
       62,   62,   62,   62,   90,   62,   90,  783,  782,  768,
       92,   95,   72,  755,   85,   92,   87,   84,   62,   85,
       72,  753,  752,   84,   62,   62,   62,   62,   62,   62,

       87,   62,   72,   85,   85,   89,   92,   95,   72,   97,
       85,   92,   87,   84,   62,   85,   72,   89,   93,   93,
       89,   96,  100,  108,  751,   97,   87,   96,   72,   85,
       85,   89,   98,  101,  102,   97,  101,   98,   99,  106,
       99,   99,  105,   89,   93,   93,   89,   96,  100,   99,
      103,   97,  104,   96,  102,  103,  107,  108,   98,  101,
      102,  105,  101,   98,   99,  106,   99,   99,  105,  104,
      110,  109,  104,  111,  127,   99,  103,  112,  104,  109,
      102,  103,  107,  108,  113,  111,  112,  105,  115,  114,
      115,  113,  114,  722,  716,  104,  110,  109,  104,  111,

      127,  715,  714,  112,  713,  109,  673,  671,  670,  669,
      113,  111,  112,  622,  115,  114,  115,  113,  114,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  128,
      118,  118,  118,  118,  118,  118,  131,  118,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  134,  141,  615,
      614,  613,  612,  553,  550,  128,  118,  118,  118,  118,
      118,  118,  131,  118,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  134,  549,  122,  122,  122,  122,  122,
      122,  125,  141,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  548,  146,  485,  476,  475,  474,  473,  407,

      146,  122,  122,  122,  122,  122,  122,  124,  141,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  146,
      124,  124,  124,  124,  124,  124,  146,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  404,  124,  124,  124,  124,
      124,  124,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  132,  126,  126,  126,  126,  126,  126,  129,
      130,  133,  129,  403,  402,  132,  130,  135,  138,  135,
      138,  133,  139,  136,  137,  137,  139,  339,  132,  126,
      126,  126,  126,  126,  126,  129,  130,  133,  129,  136,

      140,  132,  130,  135,  138,  135,  138,  133,  139,  136,
      137,  137,  139,  142,  143,  145,  140,  145,  144,  147,
      148,  147,  331,  150,  154,  136,  140,  330,  182,  329,
      149,  143,  328,  142,  144,  150,  151,  152,  148,  142,
      143,  145,  140,  145,  144,  147,  148,  147,  149,  150,
      155,  159,  151,  152,  182,  153,  149,  143,  154,  142,
      144,  150,  151,  152,  148,  153,  156,  166,  155,  157,
      157,  160,  158,  158,  149,  267,  155,  257,  151,  152,
      156,  153,  256,  160,  154,  159,  163,  166,  164,  162,
      161,  153,  156,  166,  155,  157,  157,  160,  162,  161,

      164,  163,  165,  161,  167,  169,  156,  158,  161,  160,
      167,  159,  163,  166,  164,  162,  161,  169,  165,  168,
      168,  171,  172,  172,  162,  161,  164,  163,  165,  161,
      167,  169,  170,  158,  161,  170,  167,  176,  173,  175,
      177,  178,  255,  169,  165,  168,  168,  174,  172,  172,
      173,  180,  174,  176,  174,  171,  177,  175,  170,  178,
      179,  170,  195,  176,  173,  175,  177,  178,  180,  197,
      206,  210,  179,  174,  181,  254,  173,  180,  174,  176,
      174,  171,  177,  175,  181,  178,  179,  199,  195,  225,
      187,  186,  185,  121,  180,  197,  206,  210,  179,  189,

      181,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      181,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  199,  183,  183,  183,  183,  183,  183,  193,  183,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  119,
       55,   51,  200,   50,   47,   42,   19,  199,  183,  183,
      183,  183,  183,  183,  211,  183,  188,  211,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,   18,  188,
      188,  188,  188,  188,  188,   14,  200,   12,    7,    4,
      211,    3,    0,  211,    0,    0,    0,  203,    0,    0,
        0,    0,    0,    0,  203,  188,  188,  188,  188,  188,

      188,  191,  200,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  203,  191,  191,  191,  191,  191,  191,
      203,  196,    0,    0,    0,    0,    0,    0,    0,    0,
      232,    0,    0,    0,    0,    0,    0,  216,  216,  196,
      191,  191,  191,  191,  191,  191,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  196,  232,  192,  192,  192,
      192,  192,  192,  216,  216,  196,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  205,    0,  213,    0,
      198,  196,  198,  192,  192,  192,  192,  192,  192,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  201,  204,

      194,  194,  194,  194,  194,  194,  198,  202,  198,  202,
      205,  207,  213,  207,  201,  208,    0,  208,  212,  204,
      209,  214,  220,  214,  201,  204,  194,  194,  194,  194,
      194,  194,  209,  202,  212,  202,  205,  207,  213,  207,
      201,  208,  222,  208,  212,  204,  209,  214,  215,  214,
      217,  218,  219,  219,  218,  222,  220,  217,  209,    0,
      212,  224,    0,  227,  215,  227,  228,    0,  222,    0,
        0,    0,  228,    0,  215,  221,  217,  218,  219,  219,
      218,  222,  220,  217,  221,  221,  221,  223,  226,  227,
      215,  227,  228,  221,    0,  224,  231,  229,  228,  230,

      223,  221,  231,  226,  233,  226,  229,  234,  233,  235,
      221,  221,  221,  223,  226,  230,  237,  237,    0,  221,
      233,  224,  231,  229,  234,  230,  223,  235,  231,  226,
      233,  226,  229,  234,  233,  235,  236,    0,  238,  239,
      236,  230,  237,  237,  239,  240,  233,  242,  243,  248,
      234,  246,  241,  235,  238,  243,  244,  245,  245,  249,
      246,  240,  236,  242,  238,  239,  236,  241,  247,  241,
      239,  240,  244,  242,  243,  248,  252,  246,  241,  249,
      238,  243,  244,  245,  245,  249,  246,  240,  251,  242,
      250,  268,  268,  241,  251,  241,  269,  270,  244,  270,

      271,  269,  247,  276,  276,  249,  283,  250,  311,  277,
      252,    0,    0,    0,  251,    0,  250,  268,  268,    0,
      251,  277,  269,  270,  274,  270,  271,  269,  247,  276,
      276,    0,  283,  250,  311,  277,  252,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  259,  277,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  274,  259,
      259,  259,  259,  259,  259,  261,    0,  261,  261,  261,
      261,  261,  261,  261,  261,  261,    0,    0,    0,    0,
        0,    0,    0,    0,  274,  259,  259,  259,  259,  259,
      259,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      273,  313,  260,  260,  260,  260,  260,  260,  262,  273,
      262,  262,  262,  262,  262,  262,  262,  262,  262,    0,
      275,    0,    0,    0,    0,    0,  273,  313,  260,  260,
      260,  260,  260,  260,  263,  273,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  297,  263,  263,  263,
      263,  263,  263,  264,  275,  264,  264,  264,  264,  264,
      264,  264,  264,  264,    0,  297,    0,    0,    0,    0,
        0,    0,  297,  263,  263,  263,  263,  263,  263,  265,
      275,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  297,  265,  265,  265,  265,  265,  265,  266,    0,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  279,
      279,  280,  285,  286,  272,  272,  272,    0,  265,  265,
      265,  265,  265,  265,  272,  278,  281,  280,  284,  278,
      278,  282,  287,  281,    0,  279,  279,  280,    0,    0,
      272,  272,  272,  282,  287,  284,  285,  286,  288,  289,
      272,  278,  281,  280,  284,  278,  278,  282,  287,  281,
      288,  295,  292,  293,  289,  290,  296,  291,  292,  282,
      287,  284,  285,  286,  288,  289,  291,  290,  294,  293,
        0,  295,  298,  299,  294,  301,  288,  295,  292,  293,
      289,  290,  303,  291,  292,  298,  304,  302,  299,  303,

      296,  301,  291,  290,  294,  293,  300,  295,  298,  299,
      294,  301,  300,  302,  306,  309,  304,    0,  303,    0,
      306,  298,  304,  302,  299,  303,  296,  301,  305,  312,
      307,  308,  300,  307,  308,  305,  310,  310,  300,  302,
      306,  315,  304,  314,  314,  312,  306,  316,  317,  309,
        0,    0,  319,  316,  305,  312,  307,  308,    0,  307,
      308,  305,  310,  310,  317,  325,  319,  315,  318,  314,
      314,  312,    0,  316,  317,  309,  322,  318,  319,  316,
      320,  320,  321,  323,  324,  321,  324,  327,  323,  345,
      317,  345,  319,  351,  318,  326,  322,  358,  326,  325,

        0,  351,  322,  318,  327,    0,  320,  320,  321,  323,
      324,  321,  324,  327,  323,  345,    0,  345,    0,  351,
        0,  326,  322,  358,  326,  325,  343,  351,    0,  332,
      327,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      333,    0,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,    0,  333,  333,  333,  333,  333,  333,  334,
      343,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  333,
      333,  333,  333,  333,  333,  335,  343,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  344,  335,  335,

      335,  335,  335,  335,  336,  375,  336,  336,  336,  336,
      336,  336,  336,  336,  336,    0,    0,  344,    0,    0,
        0,    0,    0,  344,  335,  335,  335,  335,  335,  335,
      338,  375,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  340,  344,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  340,    0,  340,  340,  340,  340,  340,
      340,  342,    0,  342,  342,  342,  342,  342,  342,  342,
      342,  342,    0,    0,    0,    0,    0,  356,    0,    0,
      346,  340,  340,  340,  340,  340,  340,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  346,  347,  341,  341,

      341,  341,  341,  341,  348,  349,  346,  353,  350,  347,
      350,  356,  354,  357,  353,  354,  357,  363,  363,  376,
      348,  349,  346,  347,  341,  341,  341,  341,  341,  341,
      348,  349,    0,  353,  350,  347,  350,  356,  354,  357,
      353,  354,  357,  363,  363,  376,  348,  349,  352,  352,
      355,  352,  352,  352,  352,  352,  352,  352,  359,  352,
      360,  365,  355,  361,  362,  366,  359,  364,  364,  352,
      352,  361,  362,  366,  367,    0,  355,  360,    0,  370,
      367,  365,  369,  369,  359,    0,  360,  365,  355,  361,
      362,  366,  359,  364,  364,  368,  370,  361,  362,  366,

      367,  372,  371,  360,  368,  370,  367,  365,  369,  369,
      371,  373,  374,  372,  380,  377,  378,  373,  374,  378,
      382,  368,  370,  377,  385,    0,  379,  372,  371,  379,
      368,  381,  387,  381,  382,  384,  371,  373,  374,  372,
      380,  377,  378,  373,  374,  378,  382,  383,  384,  377,
      385,  384,  379,  386,  388,  379,  383,  381,  389,  381,
      382,  384,    0,  393,  390,  391,  387,  392,  391,  394,
        0,  386,  390,  383,  384,  395,  396,  384,  396,  386,
      397,  400,  383,  392,  389,    0,  397,  395,  388,  393,
      390,  391,  387,  392,  391,  394,  399,  386,  390,  398,

      398,  395,  396,  421,  396,  399,  397,  401,  417,  392,
      423,  417,  397,  395,  388,  400,  426,  417,  421,  401,
        0,    0,  399,    0,    0,  398,  398,    0,    0,  421,
      423,  399,    0,  401,  417,    0,  423,  417,    0,    0,
        0,  400,  426,  417,  421,  401,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  406,  423,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  408,    0,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  429,
      408,  408,  408,  408,  408,  408,  410,  419,  410,  410,
      410,  410,  410,  410,  410,  410,  410,    0,    0,    0,

        0,    0,    0,    0,    0,  429,  408,  408,  408,  408,
      408,  408,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  419,  431,  409,  409,  409,  409,  409,  409,  411,
      431,  411,  411,  411,  411,  411,  411,  411,  411,  411,
        0,  450,    0,    0,    0,    0,    0,  419,  431,  409,
      409,  409,  409,  409,  409,  412,  431,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  413,  450,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  451,  413,
      413,  413,  413,  413,  413,  414,  457,  414,  414,  414,
      414,  414,  414,  414,  414,  414,    0,  469,    0,    0,

        0,    0,    0,    0,  451,  413,  413,  413,  413,  413,
      413,  415,  457,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  469,  415,  415,  415,  415,  415,  415,
      416,  424,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  418,  420,  424,  418,  425,  420,  422,  422,    0,
      415,  415,  415,  415,  415,  415,  430,  424,    0,    0,
      428,  428,  430,    0,    0,  425,  427,  418,  420,  424,
      418,  425,  420,  422,  422,  437,  427,    0,  433,  433,
      500,  434,  430,  436,  427,  427,  428,  428,  430,  436,
      432,  425,  427,  435,    0,  437,  432,  434,  432,  440,

      435,  437,  427,  432,  433,  433,  500,  434,    0,  436,
      427,  427,  438,  442,  439,  436,  432,  440,  441,  435,
      444,  437,  432,  434,  432,  440,  435,  443,  438,  432,
      439,  442,  445,  443,  441,  446,  444,  447,  438,  442,
      439,    0,  448,  440,  441,  448,  444,  452,  445,    0,
      449,  446,  447,  443,  438,  449,  439,  442,  445,  443,
      441,  446,  444,  447,  453,  453,    0,  452,  448,  454,
      454,  448,  459,  452,  445,  458,  449,  446,  447,  461,
      455,  449,  455,  456,  456,  458,    0,  462,  459,    0,
      453,  453,  458,  452,  460,  454,  454,  461,  459,  462,

      460,  458,  463,  464,  464,  461,  455,    0,  455,  456,
      456,  458,  466,  462,  459,  465,    0,  465,  458,  466,
      460,  515,  463,  461,  470,  462,  460,  468,  463,  464,
      464,  467,  506,  467,  468,  471,  470,  471,  466,  472,
      506,  465,  472,  465,    0,  466,    0,  515,  463,    0,
      470,    0,    0,  468,    0,    0,    0,  467,  506,  467,
      468,  471,  470,  471,  517,  472,  506,  477,  472,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  478,    0,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  479,
      517,  479,  479,  479,  479,  479,  479,  479,  479,  479,

      479,    0,  479,  479,  479,  479,  479,  479,  480,  521,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  479,  479,
      479,  479,  479,  479,  481,  521,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  492,  481,  481,  481,
      481,  481,  481,  482,  522,  482,  482,  482,  482,  482,
      482,  482,  482,  482,    0,    0,  492,    0,    0,    0,
        0,    0,  492,  481,  481,  481,  481,  481,  481,  484,
      522,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      484,  486,  492,  486,  486,  486,  486,  486,  486,  486,

      486,  486,  486,    0,  486,  486,  486,  486,  486,  486,
      488,    0,  488,  488,  488,  488,  488,  488,  488,  488,
      488,    0,    0,  494,    0,    0,    0,    0,    0,  489,
      486,  486,  486,  486,  486,  486,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  489,  490,  487,  487,  487,
      487,  487,  487,  490,  491,  489,  493,  494,    0,    0,
      497,  491,  497,  499,  498,  493,  499,    0,  495,  498,
        0,  489,  490,  487,  487,  487,  487,  487,  487,  490,
      491,  502,  493,  494,  495,  496,  497,  491,  497,  499,
      498,  493,  499,  501,  495,  498,  503,  505,  496,  504,

      504,  502,  501,  507,  509,  508,    0,  502,  510,  507,
      495,  496,  503,  505,  508,  510,  511,  514,  511,  501,
      509,  516,  503,  505,  496,  504,  504,  502,  501,  507,
      509,  508,  512,  513,  510,  507,  513,  516,  503,  505,
      508,  510,  511,  520,  511,  518,  509,  516,  523,  512,
      519,  514,  520,  519,  524,  525,  524,  526,  512,  513,
      527,  528,  513,  516,  531,  518,  533,  534,  529,  520,
        0,  518,  530,  528,  523,  512,  519,  514,  520,  519,
      524,  525,  524,  526,  529,  534,  527,  528,  530,  532,
      531,  518,  535,  534,  529,  536,  537,    0,  530,  528,

      533,  539,  532,  536,  540,  537,  538,  543,  547,  535,
      529,  534,    0,  539,  530,  532,    0,  541,  535,  541,
      540,  536,  537,  538,  542,  544,  533,  539,  532,  536,
      540,  537,  538,  543,  547,  535,  565,  545,  542,  539,
      573,  544,  546,  541,  565,  541,  540,  546,  591,  538,
      542,  544,  545,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  565,  545,  542,    0,  573,  544,  546,    0,
      565,    0,    0,  546,  591,  592,    0,  552,  545,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  554,
        0,  554,  554,  554,  554,  554,  554,  554,  554,  554,

      554,  592,  554,  554,  554,  554,  554,  554,  556,    0,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  554,  554,
      554,  554,  554,  554,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  562,  587,  555,  555,  555,  555,  555,
      555,  559,  587,  559,  559,  559,  559,  559,  559,  559,
      559,  559,    0,  562,    0,    0,    0,    0,    0,  562,
      587,  555,  555,  555,  555,  555,  555,  558,  587,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  562,
      558,  558,  558,  558,  558,  558,  561,  593,  561,  561,

      561,  561,  561,  561,  561,  561,  561,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  558,  558,  558,  558,
      558,  558,  560,  593,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  563,  560,  560,  560,  560,  560,
      560,  564,  566,  563,  567,  568,  568,    0,  572,  569,
        0,  564,    0,  567,  566,  569,    0,  570,  571,    0,
      563,  560,  560,  560,  560,  560,  560,  564,  566,  563,
      567,  568,  568,  570,  571,  569,  574,  564,  579,  567,
      566,  569,  572,  570,  571,  575,  576,  580,  575,  577,
      581,  578,    0,  576,  580,  577,  574,  578,  579,  570,

      571,  584,  574,  582,  579,  586,  582,  588,  572,    0,
      581,  575,  576,  580,  575,  577,  581,  578,  585,  576,
      580,  577,  574,  578,  579,  583,  583,  594,  589,  582,
      598,  590,  582,  590,  585,  584,  581,  589,  595,  586,
      596,  588,  601,  596,  585,  595,  597,  602,    0,  597,
        0,  583,  583,  594,  589,  602,  598,  590,  600,  590,
      585,  584,  604,  589,  595,  586,  596,  588,  599,  596,
      603,  595,  597,  602,  600,  597,  601,  599,  605,  607,
      606,  602,  603,  606,  600,  605,  608,  609,  604,  627,
      626,  610,  626,  627,  599,  629,  603,  629,  611,  630,

      600,  630,  601,  599,  605,  607,  606,  610,  603,  606,
      635,  605,  608,  609,  611,  627,  626,  610,  626,  627,
        0,  629,    0,  629,  611,  630,    0,  630,    0,    0,
        0,    0,    0,  610,    0,  637,  635,    0,  639,    0,
      611,  617,    0,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  642,  617,  617,  617,  617,  617,  617,
      618,  637,  618,  618,  618,  618,  618,  618,  618,  618,
      618,    0,  639,    0,    0,    0,    0,    0,    0,  642,
      617,  617,  617,  617,  617,  617,  619,    0,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  639,  619,

      619,  619,  619,  619,  619,  620,  632,  620,  620,  620,
      620,  620,  620,  620,  620,  620,    0,    0,  632,    0,
        0,    0,    0,    0,    0,  619,  619,  619,  619,  619,
      619,  621,  632,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  623,  632,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,    0,  623,  623,  623,  623,
      623,  623,  625,    0,  625,  625,  625,  625,  625,  625,
      625,  625,  625,    0,    0,    0,    0,    0,    0,    0,
      646,  631,  623,  623,  623,  623,  623,  623,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  631,  628,  624,

      624,  624,  624,  624,  624,  628,  646,  631,  634,  636,
        0,  638,  634,  638,    0,  633,  640,    0,  636,    0,
      649,    0,  641,  631,  628,  624,  624,  624,  624,  624,
      624,  628,  633,  640,  634,  636,  643,  638,  634,  638,
      641,  633,  640,  645,  636,  644,  649,  647,  641,  653,
      648,  650,  652,  654,  643,  645,  655,  651,  633,  640,
      650,  644,  643,  651,  652,  656,  641,  647,  657,  645,
      648,  644,  658,  647,  659,  653,  648,  650,  652,  654,
      643,  645,  655,  651,  661,  660,  650,  644,  664,  651,
      652,  656,  662,  647,  657,  663,  648,  660,  658,  665,

      659,  662,  666,  682,  664,  667,  667,  663,  668,    0,
      661,  660,    0,    0,  664,    0,    0,    0,  662,    0,
        0,  663,  684,  660,  688,  665,  668,  662,  666,  682,
      664,  667,  667,  663,  668,  672,    0,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  689,  684,    0,
      688,    0,  668,  674,    0,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  691,  674,  674,  674,  674,
      674,  674,  676,  689,  676,  676,  676,  676,  676,  676,
      676,  676,  676,    0,    0,    0,    0,    0,    0,    0,
      698,  691,  674,  674,  674,  674,  674,  674,  675,  675,

      675,  675,  675,  675,  675,  675,  675,  685,  685,  675,
      675,  675,  675,  675,  675,  678,  698,  678,  678,  678,
      678,  678,  678,  678,  678,  678,    0,    0,    0,    0,
        0,    0,    0,  685,  685,  675,  675,  675,  675,  675,
      675,  677,    0,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  687,  677,  677,  677,  677,  677,  677,
      680,  687,  680,  680,  680,  680,  680,  680,  680,  680,
      680,    0,    0,    0,    0,    0,    0,    0,  697,  687,
      677,  677,  677,  677,  677,  677,  679,  687,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  681,  679,

      679,  679,  679,  679,  679,  683,  686,  690,  692,  693,
      692,  683,  697,  686,  681,  694,  695,    0,  693,  696,
      696,  694,  695,  690,  681,  679,  679,  679,  679,  679,
      679,  683,  686,  690,  692,  693,  692,  683,  697,  686,
      681,  694,  695,  699,  693,  696,  696,  694,  695,  690,
      699,  700,  702,  701,  703,  704,  709,  709,  707,  710,
      700,  712,  708,  711,  728,  727,  710,  727,  702,  699,
      701,  703,  704,  707,  708,  711,  699,  700,  702,  701,
      703,  704,  709,  709,  707,  710,  700,  712,  708,  711,
      728,  727,  710,  727,  702,    0,  701,  703,  704,  707,

      708,  711,  717,    0,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  729,  717,  717,  717,  717,  717,
      717,  718,  733,  718,  718,  718,  718,  718,  718,  718,
      718,  718,    0,    0,    0,    0,    0,    0,    0,    0,
      729,  717,  717,  717,  717,  717,  717,  719,  733,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  732,
      719,  719,  719,  719,  719,  719,  720,  734,  720,  720,
      720,  720,  720,  720,  720,  720,  720,    0,    0,  732,
        0,    0,    0,    0,    0,  732,  719,  719,  719,  719,
      719,  719,  721,  734,  721,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  723,  732,  723,  723,  723,  723,
      723,  723,  723,  723,  723,  723,    0,  723,  723,  723,
      723,  723,  723,  725,    0,  725,  725,  725,  725,  725,
      725,  725,  725,  725,    0,    0,    0,    0,    0,    0,
        0,    0,  730,  723,  723,  723,  723,  723,  723,  724,
      724,  724,  724,  724,  724,  724,  724,  724,  730,  731,
      724,  724,  724,  724,  724,  724,  726,  735,  730,  736,
      726,  737,  736,  738,    0,  731,  745,  740,  741,    0,
      737,    0,    0,  735,  730,  731,  724,  724,  724,  724,
      724,  724,  726,  735,  739,  736,  726,  737,  736,  738,

      739,  731,  739,  740,  741,  742,  737,  743,  744,  735,
      745,  748,  763,  746,    0,  747,  749,  749,  764,  765,
      739,  767,  742,  767,  744,  764,  739,  743,  739,  746,
      747,  742,  750,  743,  744,  771,  745,  748,  763,  746,
      750,  747,  749,  749,  764,  765,    0,  767,  742,  767,
      744,  764,  776,  743,    0,  746,  747,    0,  750,    0,
        0,  771,    0,  802,    0,  754,  750,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  754,  756,  776,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  802,
      756,  756,  756,  756,  756,  756,  758,    0,  758,  758,

      758,  758,  758,  758,  758,  758,  758,    0,    0,    0,
        0,    0,    0,    0,  809,  802,  756,  756,  756,  756,
      756,  756,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  769,  810,  757,  757,  757,  757,  757,  757,  760,
      809,  760,  760,  760,  760,  760,  760,  760,  760,  760,
        0,  769,    0,    0,    0,    0,    0,  769,  810,  757,
      757,  757,  757,  757,  757,  759,    0,  759,  759,  759,
      759,  759,  759,  759,  759,  759,  759,  769,  759,  759,
      759,  759,  759,  759,  762,  827,  762,  762,  762,  762,
      762,  762,  762,  762,  762,    0,  770,    0,    0,    0,

        0,    0,    0,    0,  759,  759,  759,  759,  759,  759,
      761,  827,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  772,  761,  761,  761,  761,  761,  761,  766,
      770,  773,  766,  774,  777,  775,  774,  775,    0,  772,
      777,  778,  778,  780,  773,  780,    0,  796,  772,  761,
      761,  761,  761,  761,  761,  766,  770,  773,  766,  774,
      777,  775,  774,  775,  779,  772,  777,  778,  778,  780,
      773,  780,  781,  797,  800,    0,  800,  797,  828,  806,
      779,  796,  806,  808,  808,  795,  829,  833,  781,    0,
      779,    0,    0,    0,    0,    0,    0,    0,  781,  797,

      800,  795,  800,  797,  828,  806,  779,  796,  806,  808,
      808,  795,  829,  833,  781,  786,    0,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  795,  786,  786,
      786,  786,  786,  786,  787,  836,  787,  787,  787,  787,
      787,  787,  787,  787,  787,    0,  826,    0,    0,    0,
        0,    0,    0,    0,  786,  786,  786,  786,  786,  786,
      788,  836,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  803,  788,  788,  788,  788,  788,  788,  789,
      826,  789,  789,  789,  789,  789,  789,  789,  789,  789,
        0,    0,  803,    0,    0,    0,    0,    0,  803,  788,

      788,  788,  788,  788,  788,  790,  826,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  792,  803,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,    0,
      792,  792,  792,  792,  792,  792,  794,    0,  794,  794,
      794,  794,  794,  794,  794,  794,  794,    0,    0,    0,
        0,    0,    0,  857,    0,  798,  792,  792,  792,  792,
      792,  792,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  798,  799,  793,  793,  793,  793,  793,  793,  857,
      804,  798,    0,  807,  824,  831,  832,  824,  799,  801,
      858,  832,  805,  859,  831,  807,  804,  798,  799,  793,

      793,  793,  793,  793,  793,  801,  804,  801,  805,  807,
      824,  831,  832,  824,  799,  801,  858,  832,  805,  859,
      831,  807,  804,    0,    0,    0,    0,    0,    0,    0,
        0,  801,    0,  801,  805,  815,    0,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  817,    0,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  862,
      817,  817,  817,  817,  817,  817,  819,    0,  819,  819,
      819,  819,  819,  819,  819,  819,  819,    0,    0,  864,
      834,  834,  834,    0,  834,  862,  817,  817,  817,  817,
      817,  817,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  860,  864,  818,  818,  818,  818,  818,  818,  821,
      834,  821,  821,  821,  821,  821,  821,  821,  821,  821,
        0,  860,    0,    0,    0,    0,    0,  860,  864,  818,
      818,  818,  818,  818,  818,  820,  834,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  860,  820,  820,
      820,  820,  820,  820,  823,    0,  823,  823,  823,  823,
      823,  823,  823,  823,  823,    0,  825,    0,    0,    0,
        0,    0,    0,    0,  820,  820,  820,  820,  820,  820,
      822,  825,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  822,  825,  822,  822,  822,  822,  822,  822,  830,

      835,  837,  835,  838,  839,  854,  855,  825,  882,  854,
      855,  838,  866,  887,  866,  830,  839,  888,  837,  822,
      822,  822,  822,  822,  822,  830,  835,  837,  835,  838,
      839,  854,  855,    0,  882,  854,  855,  838,  866,  887,
      866,  830,  839,  888,  837,  845,  865,  845,  845,  845,
      845,  845,  845,  845,  845,  845,  845,  869,  845,  845,
      845,  845,  845,  845,  846,  869,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  895,  865,    0,    0,    0,
        0,  894,    0,  869,  845,  845,  845,  845,  845,  845,
      847,  869,  847,  847,  847,  847,  847,  847,  847,  847,

      847,  895,  865,  847,  847,  847,  847,  847,  847,  848,
      894,  848,  848,  848,  848,  848,  848,  848,  848,  848,
        0,    0,  897,    0,    0,    0,    0,    0,    0,  847,
      847,  847,  847,  847,  847,  849,  894,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  851,  897,  851,
      851,  851,  851,  851,  851,  851,  851,  851,  851,  913,
      851,  851,  851,  851,  851,  851,  853,  861,  853,  853,
      853,  853,  853,  853,  853,  853,  853,  883,  863,  867,
      856,  863,  868,  861,  884,  913,  851,  851,  851,  851,
      851,  851,  856,  861,  883,  867,  917,  908,  868,  856,

      856,  890,  884,  883,  908,  867,  856,  863,  868,  861,
      884,    0,    0,    0,    0,    0,    0,    0,  856,  890,
      883,  867,  917,  908,  868,  856,  856,  890,  884,  891,
      908,    0,  875,  863,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  877,  890,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  885,  891,  877,  877,  877,
      877,  877,  877,  878,  918,  878,  878,  878,  878,  878,
      878,  878,  878,  878,    0,  885,    0,    0,    0,    0,
        0,  885,  891,  877,  877,  877,  877,  877,  877,  879,
      918,  879,  879,  879,  879,  879,  879,  879,  879,  879,

      879,  885,  879,  879,  879,  879,  879,  879,  880,  892,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  886,
      889,  909,  889,  893,    0,  886,  898,  919,  879,  879,
      879,  879,  879,  879,  892,  896,  911,  886,  896,  909,
      910,  911,  898,  910,  920,  886,  889,  909,  889,  921,
      893,  886,  898,  919,    0,    0,    0,    0,    0,    0,
      892,  896,  911,  886,  896,  909,  910,  911,  898,  910,
      920,    0,    0,    0,    0,  921,  893,  903,    0,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  922,  912,
      903,  903,  903,  903,  903,  903,  904,  912,  904,  904,

      904,  904,  904,  904,  904,  904,  904,    0,  915,  930,
      915,    0,    0,    0,  922,  912,  903,  903,  903,  903,
      903,  903,  905,  912,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  915,  930,  915,  916,  916,  932,
      916,  916,  916,  916,  916,  916,  931,  927,  916,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  916,  916,
      933,  934,  931,  936,  936,    0,  948,    0,    0,  943,
        0,    0,  931,  932,  943,  937,  937,  934,  937,  937,
      937,  937,  937,  937,  938,  938,  937,  934,  931,  936,
      936,  944,  948,  945,  933,  943,  937,  937,  945,  932,

      943,  938,  946,  934,  947,  947,  949,  952,  946,  944,
      938,  938,  950,  950,  952,  960,  951,  944,    0,  945,
      933,  957,  957,  961,  945,  962,  963,  938,  946,  950,
      947,  947,  949,  952,  946,  944,  951,  958,  950,  950,
      952,  960,  951,  958,  959,  965,  966,  957,  957,  961,
      959,  962,  963,  966,  968,  950,  967,  967,  972,  973,
      976,  974,  951,  958,  974,  965,  973,  975,  975,  958,
      959,  965,  966,  978,  979,  979,  959,  980,  981,  966,
      968,  986,  967,  967,  972,  973,  976,  974,  986,  988,
      974,  965,  973,  975,  975,  987,  987,  989,  981,  978,

      979,  979,  992,  980,  981,  991,  996,  986,  996,  997,
      999, 1004,    0,    0,  986,  988,    0,    0,    0,    0,
        0,  987,  987,  989,  981,  991,    0,    0,  992,    0,
        0,  991,  996,    0,  996,  997,  999, 1004,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  991, 1015, 1015, 1015, 1015, 1016, 1016, 1016, 1016,
     1017, 1017, 1017, 1017, 1018,    0, 1018, 1018, 1019, 1019,
     1019, 1019, 1020,    0, 1020, 1020, 1021, 1021, 1023, 1023,
     1024, 1024, 1025, 1025, 1026, 1026, 1027, 1027, 1028, 1028,
     1029, 1029, 1030, 1030, 1031, 1031, 1032, 1032, 1033,    0,

     1033, 1033, 1034, 1034, 1035, 1035, 1036, 1036, 1037, 1037,
     1038, 1038, 1039, 1039, 1040, 1040, 1041, 1041, 1042, 1042,
     1043, 1043, 1044, 1044, 1045, 1045, 1046, 1046, 1047, 1047,
     1048, 1048, 1049, 1049, 1050, 1050, 1051, 1051, 1052, 1052,
     1053, 1053, 1054, 1054, 1055, 1055, 1056, 1056, 1057, 1057,
     1058, 1058, 1059, 1059, 1061, 1061, 1062, 1062, 1063, 1063,
     1065, 1065, 1066, 1066, 1067, 1067, 1070, 1070, 1071, 1071,
     1072, 1072, 1074,    0, 1074, 1074, 1075,    0, 1075, 1075,
     1076, 1076, 1077, 1077, 1080,    0, 1080, 1080, 1081,    0,
     1081, 1081, 1082, 1082, 1083, 1083, 1084, 1084, 1085, 1085,

     1086, 1086, 1088, 1088, 1089, 1089, 1090, 1090, 1091, 1091,
     1092, 1092, 1094, 1094, 1095, 1095, 1096, 1096, 1098, 1098,
     1100, 1100, 1101, 1101, 1102, 1102, 1104, 1104, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,

     1014, 1014, 1014, 1014
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[124] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2128 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2238 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1015 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5829 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::LINK_LOCAL_; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 92 "SrvLexer.l"
{ return SrvParser::PREFIX_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::SUBNET_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 120 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 164 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 171 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 176 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 177 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 178 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 109:
YY_RULE_SETUP
#line 185 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 194 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 203 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 212 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 221 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 230 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 239 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 251 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 258 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 279 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 311 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 339 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%20x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 349 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%20u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 358 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 361 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3107 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1015 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1015 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1014);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 361 "SrvLexer.l"



