#line 2 "SrvLexer.cpp"

#line 4 "SrvLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 121
#define YY_END_OF_BUFFER 122
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1005] =
    {   0,
        1,    1,    0,    0,    0,    0,  122,  120,    2,    1,
        1,  120,  102,  120,  120,  119,  119,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      106,  106,  121,    1,    1,    1,    0,  114,  102,    0,
      114,  104,  103,  119,    0,    0,  118,    0,  111,   85,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       99,  115,  115,   87,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,   17,   18,  115,  115,  115,
      115,  115,  115,  115,  115,  105,  103,  119,    0,    0,
        0,  110,  116,  109,  109,  115,  115,  115,  115,  115,
       86,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       98,  119,    0,    0,    0,    0,  108,  108,    0,  109,
        0,  109,  115,  115,  115,   65,  115,  115,  115,  115,

      115,  115,  115,  115,   93,  115,  115,  115,   31,  115,
      115,   45,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,    0,  115,  115,  115,  115,  115,  115,   24,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  100,  115,  115,  115,  115,
      119,    0,  117,    0,    0,    0,  108,    0,  108,    0,
      109,  109,  109,  109,  115,  115,  115,  115,   92,  115,
      115,  115,    4,  115,  115,  115,  115,  115,  115,  115,
      101,  115,  115,    3,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,    0,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,    7,  115,   44,  115,
       25,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,    0,    0,    0,    0,    0,  108,  108,
      108,  108,    0,  109,  109,  109,    0,  109,  115,  115,
      115,  115,  115,  115,  115,  115,  115,   30,  115,  115,
      115,  115,  115,   37,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,    0,
        0,  115,  115,  115,   35,  115,  115,  115,  115,  115,
      115,  115,   61,  115,  115,  115,   96,   43,  115,  115,
      115,  115,  115,  115,  115,    0,    0,    0,    0,  108,

      108,  108,    0,  108,    0,    0,  109,  109,  109,  109,
      115,  115,   33,  115,  115,  115,  115,  115,  115,    0,
      115,  115,   95,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,    0,    0,  115,  115,  115,  115,  115,   59,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,   22,  115,  115,  115,  117,    0,    0,    0,    0,
        0,  108,  108,  108,  108,    0,  109,  109,  109,    0,
      109,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,    0,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,   46,  115,   55,
      115,  115,   12,   10,   84,  115,   42,    0,    0,  115,
      115,  115,   57,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,    5,  115,  115,  115,   14,    0,
        0,    0,    0,  108,  108,  108,    0,  108,  113,  109,
      109,  109,  109,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,    0,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,   11,   64,    0,    0,  115,  115,  115,   58,  115,
      115,  115,  115,  115,   32,  115,  115,    6,   94,   39,

      115,  115,    0,    0,    0,    0,  112,  108,  108,  108,
      108,  109,  109,  109,    0,  109,  115,  115,  115,  115,
      115,  115,  115,  115,  115,   56,  115,    0,  115,  115,
      115,  115,  115,  115,  115,  115,   36,  115,  115,   34,
      115,  115,  115,   13,    0,    0,   52,   51,   38,  115,
       23,  115,  115,  115,   41,   40,  115,  115,  117,    0,
        0,  108,  108,  108,    0,  108,  109,  109,  109,  109,
      115,   15,  115,   63,  115,  115,  115,   72,  115,  115,
        0,  115,  115,  115,  115,  115,  115,   75,  115,  115,
      115,  115,  115,  115,   54,   53,  115,  115,  115,  115,

      115,   60,    0,    0,    0,    0,  108,  108,  108,  108,
      109,  109,  109,    0,  109,  115,  115,   97,   74,  115,
      115,  115,    0,   83,  115,  115,  115,   50,  115,   76,
       62,  115,  115,  115,    8,  115,  115,   26,  115,  115,
        0,    0,    0,  108,  108,  108,    0,  108,  109,  109,
      109,  109,  115,  115,   73,  115,  115,    0,  115,  115,
       49,  115,  115,  115,  115,   66,  115,  115,  115,  115,
      115,  117,    0,    0,    0,  108,  108,  108,  108,  109,
      109,  109,    0,  109,  115,  115,  115,  115,    0,  115,
      115,  115,  115,  115,  115,  115,  115,  115,   16,   21,

        0,    0,  107,  110,  108,  108,  108,    0,  108,  109,
      109,  109,  109,  115,  115,  115,   28,    0,    0,  115,
      115,  115,   77,  115,  115,   27,  115,  115,  115,    0,
        0,  107,    0,  108,  108,  108,  108,  108,  109,  109,
      109,    0,  109,  115,  115,  115,    0,    0,   29,  115,
      115,   78,  115,  115,  115,  115,  115,  115,  115,  117,
      107,  110,  108,    0,  108,  108,  108,  108,  109,  109,
      109,   67,  115,  115,  115,  115,    0,    0,  115,  115,
      115,  115,  115,  115,   48,  115,   20,  115,    0,  107,
      108,  108,  108,  108,  109,  109,  109,  115,  115,  115,

      115,  115,    0,    0,  115,  115,   79,   80,   81,   82,
        9,   19,    0,  108,  108,    0,  108,  108,  109,   47,
      115,  115,  115,  115,    0,    0,  115,  115,  117,  108,
      108,  109,  115,  115,  115,  115,    0,    0,    0,  115,
      115,  115,    0,  108,  108,    0,  115,  115,  115,  115,
        0,    0,    0,   88,  115,  115,  115,   88,  107,  108,
      108,   68,  115,  115,  115,    0,   90,    0,  115,   90,
      115,  107,  108,  108,    0,  115,  115,   71,    0,   89,
      115,   89,    0,  108,  108,  115,   69,   91,   91,    0,
      108,  108,    0,   70,  117,  108,  108,    0,  108,  108,

        0,  108,  108,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   20,   22,    1,    1,
       23,    1,    1,    1,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
        1,    1,    1,    1,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    1,    3,    3,    3,    3,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1095] =
    {   0,
        0,    0, 1138, 1137,    0,    0, 1144, 5798, 5798,   73,
       75, 1138,    0, 1134,   72,   72,   34, 1118, 1116,  136,
      186,  233,  280,   71,  208,  338,   38,   73,  223,   89,
      267,  175,  275,  356,  372,  399,   67,  357,  180,  209,
     5798, 1097, 5798,  111,  137,  222, 1102, 5798,    0, 1099,
     1098, 5798,    0,  457, 1079,  476, 5798,    0,  502, 5798,
       61,  545,   86,   89,  185,  208,  231,  279,  221,  265,
      288,  559,  342,  283,  285,  388,  377,  389,  339,  395,
      326,  410,  394,  544,  561,  469,  557,  392,  574,  507,
      326,  542,  576,  455,  538,  584,  582,  594,  606,  462,

      593,  599,  596,  629,  630,  581,  612,  614,  636,  613,
      643,  627,  641,  645,  648, 5798,    0,  706, 1078,  725,
     1074,  751,    0,  796,  770,  839,  649,  650,  828,  832,
      666,  831,  837,  698,  835,  855,  704,  836,  838,  856,
      875,  887,  886,  888,  873,  756,  876,  896,  903,  891,
      906,  908,  923,  925,  924,  920,  961,  928,  921,  948,
      940,  952,  953,  958,  964,  977,  960,  988,  975,  989,
      981,  994, 1011,  991, 1012, 1016, 1010, 1005, 1040, 1034,
      738, 1098,  814, 1070, 1069, 1068, 1145, 1117,  823, 1190,
     1233, 1164, 1276, 1000, 1211, 1013, 1025, 1077, 1098, 1228,

     1264, 1150, 1275, 1263, 1028, 1267, 1268, 1307, 1029, 1273,
     1313, 1303, 1274, 1318, 1033, 1311, 1308, 1194, 1324, 1322,
     1325, 1310, 1079, 1357, 1347, 1326, 1358, 1369, 1360, 1132,
     1372, 1376, 1388, 1361, 1364, 1393, 1397, 1394, 1417, 1421,
     1406, 1424, 1410, 1416, 1401, 1411, 1448, 1429, 1445, 1456,
     1209, 1066, 1063, 1005,  984, 1514, 1525, 1568, 1544, 1587,
     1613, 1632, 1658, 1677,  960, 1452, 1449, 1657, 1440, 1670,
     1555, 1600, 1645, 1659, 1675, 1677, 1674, 1694, 1453, 1691,
     1467, 1697, 1690, 1726, 1707, 1722, 1708, 1724, 1715, 1727,
     1731, 1749, 1747, 1758, 1743, 1761, 1746, 1761, 1776, 1774,

     1762, 1789, 1783, 1781, 1797, 1780, 1504, 1810, 1547, 1791,
     1592, 1798, 1811, 1822, 1826, 1828, 1832, 1819, 1830, 1833,
     1868, 1843, 1863,  937,  906,  905,  902, 1904, 1928, 1947,
     1973, 1992, 1956, 2018,  899, 2030, 2073, 2049, 2009, 1864,
     1862, 2067, 1972, 2068, 2075, 1867, 2069, 2145, 2070, 2065,
     2072, 2064, 2074, 1728, 2112, 2116, 2122, 2126, 2119, 2128,
     2135, 2129, 2143, 2131, 2150, 2164, 2149, 2168, 2171, 1921,
     1968, 2174, 2170, 2180, 2066, 2181, 2186, 2187, 2211, 2201,
     2173, 2218, 2189, 2210, 2217, 2232, 2219, 2220, 2235, 2224,
     2231, 2230, 2247, 2260, 2253,  892,  865,  852, 2318, 2329,

      851, 2341, 2384, 2360, 2403, 2429, 2440, 2459, 2485, 2504,
     2506, 2485, 2362, 2483, 2254, 2489, 2484, 2271, 2518, 2251,
     2520, 2503, 2283, 2505, 2371, 2540, 2516, 2550, 2548, 2545,
     2556, 2568, 2570, 2555, 2573, 2564, 2585, 2588, 2591, 2592,
     2589, 2602, 2328, 2385, 2607, 2604, 2608, 2621, 2625, 2419,
     2627, 2616, 2638, 2640, 2641, 2657, 2643, 2654, 2656, 2661,
     2672, 2427, 2674, 2673, 2679,  823,  777,  776,  775, 2737,
     2748, 2759, 2778, 2804, 2823, 2787, 2849,  774, 2861, 2904,
     2880, 2882, 2890, 2898, 2803, 2677, 2893, 2918, 2907, 2897,
     2896, 2900, 2676, 2934, 2950, 2947, 2936, 2948, 2945, 2946,

     2952, 2954, 2949, 2941, 2970, 2981, 2989, 2690, 2993, 2701,
     2985, 2992, 2746, 2791, 2986, 2990, 2987, 3011, 2993, 3033,
     3022, 3039, 2998, 3038, 3029, 3044, 3045, 3035, 3040, 3058,
     3042, 3050, 3074, 3077, 3036, 3085, 3088, 3080, 3078,  773,
      772,  770, 3146, 3157,  740, 3169, 3212, 3188, 3197, 3257,
     3231, 3302, 3276, 3210, 3290, 3298, 3087, 3301, 3300, 3082,
     3299, 3318, 3320, 3295, 3090, 3323, 3331, 3339, 3341, 3342,
     3353, 3345, 3363, 3350, 3352, 3296, 3356, 3388, 3199, 3404,
     3374, 3086, 3244, 3367, 3391, 3387, 3386, 3393, 3384, 3394,
     3407, 3426, 3403, 3408, 3397, 3425, 3405, 3415, 3424, 3427,

     3448, 3454,  732,  731,  730,  729, 3496, 3514, 3533, 3559,
     3578, 3604,  728, 3616, 3659, 3635, 3437, 3645, 3456, 3648,
     3652, 3637, 3558, 3655, 3657, 3436, 3660, 3510, 3656, 3512,
     3690, 3702, 3501, 3703, 3704, 3701, 3661, 3712, 3713, 3691,
     3705, 3700, 3707, 3697, 3705, 3709, 3708, 3709, 3725, 3748,
     3737, 3749, 3753, 3758, 3743, 3744, 3746, 3765,  727,  692,
      687, 3823,  686, 3835, 3878, 3854, 3923, 3897, 3968, 3942,
     3777, 3750, 3760, 3752, 3756, 3928, 3865, 3757, 3759, 3971,
     3794, 3958, 3966, 3965, 3967, 3963, 3856, 3876, 3980, 3969,
     4007, 4010, 4013, 4015, 5798, 5798, 4017, 4012, 4004, 4008,

     4021, 3910,  685,  683,  680,  673, 4081, 4100, 4126, 4145,
     4171,  672, 4183, 4226, 4202, 4018, 4186, 4005, 4011, 4220,
     4221, 4125, 4022, 4023, 4229, 4218, 4225, 4042, 4256, 4060,
     4113, 4240, 4258, 4243, 4219, 4268, 4265, 4257, 4260, 4270,
      671,  571,  570, 4328,  562, 4340, 4383, 4359, 4428, 4402,
     4473, 4447, 4261, 4433, 4263, 4463, 4464,  570, 4381, 4461,
     4267, 4485, 4478, 4469, 4472, 4319, 4473, 4475, 4513, 4505,
     4518,  557,  556,  528,  525, 4578, 4597, 4623, 4642, 4668,
      524, 4680, 4723, 4699, 4701, 4510, 4508, 4718, 4727, 4509,
     4738, 4370, 4622, 4737, 4739, 4517, 4726, 4516, 4362, 4415,

      523,  522,  521,    0, 4799,  520, 4811, 4854, 4830, 4899,
     4873, 4944, 4918, 4719, 4912, 4610, 4506, 4529, 4562, 4946,
     4724, 4722, 4565, 4841, 4933, 4684, 4949, 4942, 4947,  519,
      518,  516,  515,  514, 5009, 5028, 5054, 5073, 5099,  513,
     5111,    0, 5130, 4936, 4941, 5131, 4773, 4806, 4832, 5053,
     5114, 4833, 5138, 4878, 5041, 4945, 5126, 5129, 4996,  512,
      511, 5798,  483,    0, 5196,  482, 5208, 5227, 5253, 5272,
        0, 4939, 5125, 5133, 5206, 5268, 4946, 4966, 5253, 5150,
     5187, 5032, 5267, 5281, 5090, 5257, 5127, 5274,  481,  480,
      479,  478, 5341, 5360, 5386,  465,    0, 5135, 5320, 5266,

     5270, 5373, 5197,    0, 5273, 5414, 5272, 5275, 5278, 5319,
     5340, 5341,  446,  445,  434,    0, 5431, 5798,    0, 5342,
     5370, 5343, 5415, 5410,    0, 5402, 5461, 5433,  433,  431,
      430, 5798, 5388, 5445, 5435, 5434, 5448, 5407, 5444, 5464,
     5466, 5451,  428,  424,  406,    0, 5450, 5468, 5484, 5455,
     5485, 5474, 5470, 5798, 5499, 5487, 5483, 5485,  395,  356,
      355, 5486, 5496, 5500, 5502, 5499, 5798, 5523, 5517, 5507,
     5534,  353,  352,  350,    0, 5537, 5519, 5520, 5541, 5798,
     5551, 5532,  346,  325,  307, 5538, 5535, 5798, 5539,    0,
      305,  276,    0, 5541,  267,  262,  260,  258,  254,  251,

        0,  229,  214, 5798, 5621, 5625, 5629, 5633, 5637, 5641,
     5643,  232, 5645, 5647, 5649, 5651, 5653, 5655, 5657, 5659,
     5661, 5663, 5667, 5669, 5671, 5673, 5675, 5677, 5679, 5681,
     5683, 5685, 5687, 5689, 5691, 5693, 5695, 5697, 5699, 5701,
     5703, 5705, 5707, 5709, 5711, 5713, 5715, 5717, 5719,  231,
     5721, 5723, 5725,  230, 5727, 5729, 5731,  228,  226, 5733,
     5735, 5737,  224, 5741, 5745, 5747, 5749,  219,  217, 5753,
     5757, 5759, 5761, 5763, 5765, 5767,  214, 5769, 5771, 5773,
     5775, 5777,  145, 5779, 5781, 5783,  131, 5785,  117, 5787,
     5789, 5791,   80, 5793

    } ;

static yyconst flex_int16_t yy_def[1095] =
    {   0,
     1004,    1, 1005, 1005, 1006, 1006, 1004, 1004, 1004, 1004,
     1004, 1007, 1008, 1009, 1004, 1004,   16, 1004, 1004, 1004,
       20,   20,   22,   22,   22,   22,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1004, 1004, 1004, 1004, 1004, 1004, 1007, 1004, 1008, 1009,
     1004, 1004, 1010, 1004, 1011,   54, 1004, 1012, 1004, 1004,
       26,   26,   62,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   62,   62,   26,   26,   26,   26,   26,
       62,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1004, 1010, 1004, 1013,  118,
     1014, 1004, 1012, 1004,  124,   62,  126,  126,   26,   26,
       26,   26,   26,  126,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1004,  182, 1015, 1016, 1017, 1004,  187, 1004, 1004,
     1004,  190,  126,  193,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1004,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
      183,  183, 1016, 1018, 1019, 1004, 1004, 1004,  257, 1004,
     1004,  261, 1004,  263,  193,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1004,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1020, 1004, 1021, 1022, 1004, 1004,  329,
     1004,  331, 1004, 1004, 1004, 1004, 1004,  336,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1023,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1004,
     1004,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1024, 1025, 1026, 1004, 1004,

     1004, 1004, 1004,  402, 1004, 1004, 1004,  407, 1004,  409,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1004,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1004, 1004,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26, 1021, 1004, 1027, 1028, 1004,
     1004, 1004,  472, 1004,  474, 1004, 1004, 1004, 1004, 1004,
      479,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26, 1004,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1004, 1004,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1029,
     1030, 1031, 1004, 1004, 1004, 1004, 1004,  546, 1004, 1004,
      550, 1004,  552,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1004,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26, 1004, 1004,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26, 1032, 1004, 1033, 1034, 1004, 1004,  608, 1004,
      610, 1004, 1004, 1004, 1004,  614,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26, 1004,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1004, 1004,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1035, 1036,
     1037, 1004, 1004, 1004, 1004,  664, 1004,  667, 1004,  669,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1004,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26, 1004, 1004,   26,   26,   26,   26,

       26,   26, 1038, 1004, 1039, 1040, 1004,  707, 1004,  709,
     1004, 1004, 1004, 1004,  713,   26,   26,   26,   26,   26,
       26,   26, 1004,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
     1041, 1042, 1043, 1004, 1004, 1004, 1004,  746, 1004,  749,
     1004,  751,   26,   26,   26,   26,   26, 1004,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26, 1044, 1004, 1045, 1046, 1004,  776, 1004,  778, 1004,
     1004, 1004, 1004,  782,   26,   26,   26,   26, 1004,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

     1047, 1048, 1049, 1050, 1004, 1004, 1004, 1004,  807, 1004,
      810, 1004,  812,   26,   26,   26,   26, 1004, 1004,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1051,
     1004, 1052, 1004, 1053, 1004,  835, 1004,  837, 1004, 1004,
     1004, 1054,  841,   26,   26,   26, 1004, 1004,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26, 1055,
     1056, 1004, 1057, 1058, 1004, 1004, 1004,  867, 1004,  869,
     1059,   26,   26,   26,   26,   26, 1004, 1004,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26, 1060, 1004,
     1061, 1062, 1004,  893, 1004, 1004, 1063,   26,   26,   26,

       26,   26, 1004, 1064,   26, 1065,   26,   26,   26,   26,
       26,   26, 1066, 1004, 1067, 1068, 1004, 1004, 1069,   26,
       26,   26,   26,   26, 1070, 1004, 1071,   26, 1072, 1073,
     1074, 1004,   26,   26,   26,   26, 1004, 1004, 1004,   26,
       26,   26, 1075, 1004, 1076, 1077,   26,   26,   26,   26,
     1004, 1004, 1004, 1004,   26,   26,   26,   26, 1078, 1079,
     1080,   26,   26,   26,   26, 1004, 1004, 1004,   26,   26,
       26, 1081, 1004, 1082, 1083,   26,   26,   26, 1004, 1004,
       26,   26, 1084, 1085, 1086,   26,   26, 1004,   26, 1087,
     1004, 1088, 1089,   26, 1004, 1090, 1091, 1084, 1004, 1092,

     1093, 1094, 1004,    0, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004

    } ;

static yyconst flex_int16_t yy_nxt[5874] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,    8,    8,
        8,   15,   16,   17,   17,   17,   17,   17,   17,   17,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   27,   27,   29,   30,   31,   32,   33,   27,
       34,   35,   36,   37,   38,   39,   27,   40,   27,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   27,   27,
       29,   30,   31,   32,   33,   27,   34,   35,   36,   37,
       38,   39,   27,   40,   27,   44,   45,   46,   45,   52,
     1004,   61,  838,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   55,   62,   56,   56,   56,   56,   56,

       56,   84,   57,  111,   61,   61, 1004,   61,   61,   85,
       61,  127,   88,   44,   45,  128,   61,   80,   58,  997,
       62,   56,   56,   56,   56,   56,   56,   84,   57,  111,
       61,   61,   61,  995,   61,   85,   61,  127,   88,   46,
       45,  128,   61,   80,   58,   61,   61,  985,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   55,   61,   62,
       62,   63,   64,   62,   65,   61,   66,   61,   61,   61,
       67,   61,   68,   61,   61,   61,   61,   61,   61,   69,
       61,   61,   61,   61,   61,   62,   62,   63,   64,   62,
       65,   61,   66,   61,   61,   61,   67,   61,   68,   61,

       61,   61,   61,   61,   61,   69,   61,   61,   61,   61,
       61,   62,   62,   93,   62,   94,  961,  114,   61,  932,
       61,  931,   61,   61,   44,   45,  919,  129,  897,   70,
      892,   81,  871,  834,  123, 1001,  115,   62,   62,   93,
       62,   94,   61,  114,   61,   61,   61,   82,   61,   61,
     1001,   61,   61,  129,   86,   70,   71,   81,   62,   62,
       87,   62,  115,  132,   61,  130,   61,   72,   61,   61,
       73,   61, 1001,   82,   61,  993,   61,   61,   61, 1004,
       86, 1001,   71,  993,   62,   62,   87,   62,  998,  132,
       61,  130,   61,   72,   89,   61,   73,  993,   90,  133,

       61,   95,   61,   62,   91,  131,   74,   75,   61,   92,
       61,   76,   96,  134,   61,   97,   77,   78,   61,  138,
       89,  139,   61,   79,   90,  133,  975,   95,  993,   62,
       91,  131,   74,   75,   61,   92,   61,   76,   96,  134,
       61,   97,   77,   78,   61,  138,  975,  139,   61,   79,
       61,   61,   61,   61,   61,   61,   61,   61,   61, 1004,
      145,   61,   61,   61,   61,   61,   61,  862,   61,   61,
      143,  975,   61,  946,  983,   61,  975,  946,  137,   98,
      112,   83,   61,   99,  113,   61,  145,   61,   61,   61,
       61,   61,   61,  100,   61,   61,  143,  101,   61,   61,

       61,   61,  102,  103,  137,   98,  112,   83,   61,   99,
      113,   61,  106,  107,  104,  105,  833,  140,  141,  100,
       61,  147,  108,  101,  142,   61,   61,  946,  102,  103,
      109,   61,   61,  144,  154,   61,  146,   61,   61,  110,
      104,  105,   61,  140,  141,  916,   61,  147,  108,  804,
      142,  946,  916,   61,  943,  916,  109,   61,   61,  144,
      154,   61,  146,   61,   61,  110,  864,  775,   61,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  119,   61,
      120,  120,  120,  120,  120,  120,  842,   57,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  152,   61,  916,

      864,  833,  122,  808,  864,  167,  120,  120,  120,  120,
      120,  120,   61,   57,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  152,   61,  125,  125,  125,  125,  125,
      125,  167,  833,  889,  783,  864,  862,  833,   61,  775,
      706,  747,  833,  775,  122,  714,  804,  160,  157,  775,
       61,  125,  125,  125,  125,  125,  125,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  119,  148,  126,  126,
      126,  126,  126,  126,  157,   66,   61,  706,  801,  789,
      158,   61,  135,  665,  149,   61,  153,   61,   61,  150,
      136,  775,  706,  148,  126,  126,  126,  126,  126,  126,

       61,   66,   61,  151,   61,  155,  158,   61,  135,  162,
      149,   61,  153,   61,   61,  150,  136,   61,  159,   61,
      156,  161,  169,  174,   61,   61,   61,   61,   61,  151,
       61,  155,  163,  168,  170,  162,   61,   61,  164,   61,
      165,  166,   61,   61,  159,   61,  156,  161,  169,   61,
       61,   61,  171,   61,  173,   61,  176,   61,  163,  168,
      170,  178,   61,   61,  164,   61,  165,  166,   61,  172,
       61,  175,   61,   61,  177,   61,  194,  179,  171,   61,
      173,   61,  176,   61,   61,  180,   61,  178,   61,  181,
      195,   61,  606,  615,  122,  172,   61,  175,   61,   61,

      177,  706,  194,  179,  606,   61,  122,  547,  706,   61,
       61,  180,   61,  606,   61,  181,  195,   61,  182,  182,
      182,  182,  182,  182,  182,  182,  182,   55,  200,  183,
      183,  183,  183,  183,  183,   61,   57,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  203,   61,  703,  480,
      122,  606,  469,  469,  200,  183,  183,  183,  183,  183,
      183,  403,   57,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  203,   61,  188,  188,  188,  188,  188,  188,
     1004,   61,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  606,  212,  469,  122,  337,  122,  469,  327,   61,

      188,  188,  188,  188,  188,  188,  189,   61,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  191,  212,  192,
      192,  192,  192,  192,  192,   61,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  540,  192,  192,  192,  192,  192,
      192,  193,  193,  193,  193,  193,  193,  193,  193,  193,
       55,  198,  193,  193,  193,  193,  193,  193,  196,  197,
      199,   61,  258,  469,   61,   61,  201,  204,   61,   61,
       61,   61,  202,  206,  207,  205,  327,  198,  193,  193,
      193,  193,  193,  193,  196,  197,  199,   61,   61,   61,

       61,   61,  201,  204,   61,   61,   61,   61,  202,  206,
      208,  205,  209,  327,  211,  210,   61,  213,   61,   61,
      191,  214,  216,  122,   61,   61,  327,  186,  215,   61,
       61,   61,  219,  217,   61,  218,  208,  225,  209,   61,
      211,  210,   61,  213,   61,   61,   61,  214,  216,   61,
      220,   61,  226,  221,  215,   61,   61,   61,  122,  217,
       61,  218,  222,   61,   61,   61,   61,   61,   61,  223,
      224,   61,   61,  227,  230,   61,  220,   61,  226,  221,
      231, 1004,  228,   61,  232,  233,  229,  234,  222,   61,
       61,   61,   61,   61,   61,   61,   61,   61,  239,  227,

      230,   61,  236,   61,   61,  327,  231,   61,  228,   61,
      232,  233,  229,  234,  235,  238,  244,   61,   61,  237,
       61,   61,   61,  240,   61,  241,  186,   61,  236,   61,
       61,   61,   61,   61,   61,  247,  248,   61,  266,  245,
      235,  238,  244,  246,   61,  237,   61,  242,   61,  240,
       61,  241,  243,   61,   61,   61,   61,   61,   61,   61,
       61,  247,  248,   61,  266,  245,  249,  250,   61,  246,
      269,   61,   61,  242,   61,  285,   61,   61,  243,   61,
       61,   61,   61,   61,  324,   61,  270, 1004,  296,  122,
      186,  186,  249,  250,   61,  186,  269,   61,   61,  122,

      122,  285,   61,   61,   50,   51,   48,  271,  116,   61,
      251,  251,  251,  251,  251,  251,  251,  251,  251,   55,
       61,  252,  252,  252,  252,  252,  252, 1004,   57,  259,
      259,  259,  259,  259,  259,  259,  259,  259,   60,   59,
       51,   61,   48, 1004,   42,   42,   61,  252,  252,  252,
      252,  252,  252, 1004,   57,  256, 1004,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  258,   61,  259,  259,
      259,  259,  259,  259, 1004,   61,  262,  262,  262,  262,
      262,  262,  262,  262,  262, 1004,  274, 1004, 1004, 1004,
     1004, 1004, 1004,   61,  259,  259,  259,  259,  259,  259,

      189,   61,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  191,  274,  262,  262,  262,  262,  262,  262,   61,
      267,  251,  251,  251,  251,  251,  251,  251,  251,  251,
     1004, 1004, 1004, 1004, 1004, 1004,  288,   61,  268,  262,
      262,  262,  262,  262,  262,  263,  263,  263,  263,  263,
      263,  263,  263,  263,   61,  272,  264,  264,  264,  264,
      264,  264,  288,   61,  268, 1004, 1004, 1004, 1004, 1004,
     1004,   61,  276, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
       61,  272,  264,  264,  264,  264,  264,  264,  265,  265,
      265,  265,  265,  265,  265,  265,  265,   61,  275,  265,

      265,  265,  265,  265,  265,  273,   61,   61,  277,  278,
       61,   61,  282,  280, 1004,  283,   61,   61,   61,  295,
     1004, 1004, 1004, 1004,  275,  265,  265,  265,  265,  265,
      265,  273,   61,   61,  277,  278,   61,   61,  279,  280,
      281,  283,   61,   61,   61,  284,   61,  286,  287,  289,
       61,   61,  293,   61,   61,  294,   61, 1004,  290,  291,
      292,   61, 1004,  300,  279,   61,  281,   61,   61,   61,
     1004,  284,   61,  286,  287,  289,   61,   61,  293,   61,
       61,  294,   61,  297,  290,  291,  292,   61,  299,  300,
       61,   61,  301,   61,   61,   61,  302,  303,  298,  304,

       61,   61,  305,   61,   61, 1004,  308,   61,  307,  297,
      319, 1004,   61,  306,  299,   61,   61, 1004,  301,   61,
      309,  311,  302,  303,  298,  304,   61,   61,  305,   61,
       61,   61,  308,   61,  307,  310,   61,   61,   61,  306,
       61,   61,  315,  312,   61,   61,  309,  311,  314,   61,
      318,  316,  317,   61,   61,  321, 1004,   61,  313,   61,
       61,  310,   61,   61,   61,  323,   61,   61,  315,  312,
       61,  320,   61, 1004,  314,   61,  318,  316,  317,   61,
       61,  321,  322,   61,  313,   61,   61,  340,   61,  354,
       61,   61,   61,   61,  339,   61,   61,  320,   61,   61,

     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,  322,   61,
       61, 1004, 1004,  340,   61,  354, 1004,   61,   61, 1004,
      339,   61,   61, 1004, 1004,   61,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  256,   61,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  258,   61,  330,  330,
      330,  330,  330,  330, 1004, 1004,  330,  330,  330,  330,
      330,  330,  330,  330,  330, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004,   61,  330,  330,  330,  330,  330,  330,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  345,
       61,  332,  332,  332,  332,  332,  332,  333,   61,  260,

      260,  260,  260,  260,  260,  260,  260,  260, 1004,  346,
     1004, 1004, 1004, 1004, 1004,  345,   61,  332,  332,  332,
      332,  332,  332,  189,   61,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  191,   61,  335,  335,  335,  335,
      335,  335, 1004,   61,  335,  335,  335,  335,  335,  335,
      335,  335,  335, 1004,  347, 1004, 1004, 1004, 1004, 1004,
     1004,   61,  335,  335,  335,  335,  335,  335,  189,   61,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  337,
     1004,  338,  338,  338,  338,  338,  338, 1004,   61,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  341,  357,

       61,  348,   61,  342,  343,  344,  349,  338,  338,  338,
      338,  338,  338,   61,   61,  350,  352,   61,   61,  351,
       61,  353,  355,  356,  341, 1004,   61,  348,   61,  342,
      343,  344,  349,   61,   61,  358,  361,   61,  359,   61,
       61,  350,  352,   61,   61,  351,   61,  353,  355,  356,
       61,   61,  363,  360,  364,  362,  367, 1004,   61,   61,
       61, 1004,  361,   61,  359,   61,   61,   61,  365,   61,
       61,   61,  366,  369,   61, 1004,   61,   61,  363,  360,
      364,  362,  368,  372,   61,  376,   61,  370,  373,   61,
       61,   61,   61,   61,  365,   61,   61,   61,  366,  369,

       61,   61,  371,  374,   61,   61,  380, 1004,  368,  372,
      375,  376,   61,  370,  373,   61,   61,   61,   61,   61,
      378,  379,  381,   61,   61,  377,   61,   61,  371,  374,
       61,   61,   61,  383,   61,  384,  375,  382,  385, 1004,
       61,   61,  390,   61, 1004,   61,  378,  379,  381,   61,
       61,  377,   61,   61,   61,  387,  386, 1004,   61,  383,
       61,  384,   61,  382,  385,   61,   61,   61,  390,   61,
      388,   61,  389,   61,  392,   61,   61,  393,  391,   61,
       61,  387,  386,  394, 1004, 1004,   61,  412,   61,  395,
     1004,   61, 1004, 1004, 1004,   61,  388,   61,  389,   61,

      392,   61,   61,  413,  391,   61,   61,   61,  418,  394,
       61,   61,   61,  412,  399,  395,  328,  328,  328,  328,
      328,  328,  328,  328,  328, 1004, 1004, 1004, 1004,  413,
     1004,   61,   61,   61,  418, 1004,   61,   61,  256, 1004,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  258,
     1004,  401,  401,  401,  401,  401,  401, 1004,  443,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  401,  401,  401,
      401,  401,  401,  256,  443,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  403,  444,  404,  404,  404,  404,

      404,  404, 1004,  415,  404,  404,  404,  404,  404,  404,
      404,  404,  404, 1004, 1004,   61, 1004, 1004,  411, 1004,
     1004,  444,  404,  404,  404,  404,  404,  404,  189,  415,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  191,
      189,   61,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  337,   61,  408,  408,  408,  408,  408,  408, 1004,
     1004,  408,  408,  408,  408,  408,  408,  408,  408,  408,
     1004, 1004, 1004,  426, 1004, 1004, 1004, 1004,   61,  408,
      408,  408,  408,  408,  408,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  414,  416,  410,  410,  410,  410,

      410,  410,  417,  425,  419,  424,  423,   61,   61,   61,
       61,   61,   61,   61,  427,   61, 1004,   61,   61, 1004,
      414,  416,  410,  410,  410,  410,  410,  410,  417,  425,
      419,  424,  423,   61,   61,   61,   61,   61,   61,   61,
      427,   61,  429,   61,   61,  420,  420,  428,  420,  420,
      420,  420,  420,  420,  421,   61,  420,  430,  434,   61,
     1004,  431,   61,  432,  435,   61,  420,  420,  429,   61,
      433,   61,   61,  428,   61,  437,  438,  436,   61, 1004,
      440,   61,  454,  430,  434,   61,   61,  431,   61,  432,
      435,   61,   61,   61, 1004,   61,  433,   61,   61,  439,

       61,  437,  438,  436,   61,  441,  440,   61,  442,  445,
      446,   61,   61,   61,   61,  449,   61,   61,   61,   61,
      447,  450,  448,   61,   61,  439,  453,  455, 1004,   61,
       61,  441,   61,   61,  442,  445,  446,   61,  451,   61,
       61,  449,   61,   61,   61,  456,  447,  450,  448,   61,
       61,  452,  453,   61,   61,   61,   61,  457,   61,  458,
       61,   61,   61,   61,  451,  460,  459,   61,  461,  464,
       61,  456,  462,   61,   61,   61, 1004,  452,   61,   61,
       61,  463,  488,  457,  465,  458,   61,   61,   61,   61,
       61,  460,  459,   61,  461,  493,   61,   61,  462,   61,

       61,   61,  491,   61,   61, 1004, 1004,  463,  488, 1004,
      465, 1004, 1004, 1004,   61, 1004,   61, 1004, 1004, 1004,
     1004,  493,   61,   61, 1004, 1004,   61, 1004,  491,   61,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  256,
       61,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      258,  256,   61,  472,  472,  472,  472,  472,  472,  472,
      472,  472,  403,  518,  473,  473,  473,  473,  473,  473,
     1004,  486,  473,  473,  473,  473,  473,  473,  473,  473,
      473, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,  518,
      473,  473,  473,  473,  473,  473,  474,  474,  474,  474,

      474,  474,  474,  474,  474,   61,  498,  475,  475,  475,
      475,  475,  475,  476,   61,  405,  405,  405,  405,  405,
      405,  405,  405,  405, 1004,  519, 1004, 1004, 1004, 1004,
     1004,   61,  498,  475,  475,  475,  475,  475,  475,  189,
       61,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      189,  519,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  337,   61,  478,  478,  478,  478,  478,  478, 1004,
       61,  478,  478,  478,  478,  478,  478,  478,  478,  478,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,   61,  478,
      478,  478,  478,  478,  478,  189,   61,  479,  479,  479,

      479,  479,  479,  479,  479,  479,  480,  490,  481,  481,
      481,  481,  481,  481, 1004, 1004,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  485,   61,   61,   61, 1004,
      487,  489,   61,  490,  481,  481,  481,  481,  481,  481,
      482,  492,  497,  483, 1004,  494,   61,  496,   61,  484,
     1004,  485,   61,   61,   61,  495,  487,  489,   61,   61,
      502,   61, 1004,   61,  496, 1004,  482,  492,  497,  483,
      499,  494,   61,  496,   61,  484,  500,  503,  501,  506,
      509,  495,  505,   61,  504,   61,  502,   61,   61,   61,
      496,   61, 1004,   61, 1004,  507,  499,  508,   61,   61,

      510,  511,  500,  503,  501,  506,  509,   61,  505,   61,
      504,   61,  512,   61,   61,  513,   61,   61,  514,   61,
      515,  507, 1004,  508,   61,   61,  510,  511,   61,  516,
      520,   61,   61,   61,   61,   61, 1004,   61,  512,   61,
      517,  513,   61,  527,  514,   61,  515,   61,  521, 1004,
       61,   61,  522,  525,   61,  516,  520,   61,   61,   61,
       61,   61,  523,  526,   61,  529,  517,  524,   61,  527,
       61,   61,  530,   61,  521,  528,   61,   61,  522,  525,
      531,   61, 1004,   61,   61,   61,   61,  532,  523,  526,
       61,  529,  534,  524,   61,  533,   61,   61,  530,   61,

       61,  528,  535,  565,   61,  537,  531,   61,  536,   61,
       61,  558,   61,  532,  538,   61,   61,   61,  534,  539,
       61,  533,   61,   61, 1004,   61,   61, 1004,  535,  565,
       61,  537, 1004,   61,  536, 1004, 1004,  558, 1004, 1004,
      538,   61,   61,   61,   61,  539,   61,  543,   61,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  256,   61,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  256,
       61,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      403, 1004,  545,  545,  545,  545,  545,  545, 1004,   61,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  549,

      549,  549,  549,  549,  549,  549,  549,  549,  545,  545,
      545,  545,  545,  545,  256,   61,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  547,  557,  548,  548,  548,
      548,  548,  548, 1004,   61,  548,  548,  548,  548,  548,
      548,  548,  548,  548, 1004, 1004,   61, 1004, 1004, 1004,
     1004, 1004,  557,  548,  548,  548,  548,  548,  548,  189,
       61,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      337,  189,   61,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  480, 1004,  551,  551,  551,  551,  551,  551,
     1004, 1004,  551,  551,  551,  551,  551,  551,  551,  551,

      551, 1004,  559, 1004, 1004, 1004, 1004, 1004, 1004,  554,
      551,  551,  551,  551,  551,  551,  552,  552,  552,  552,
      552,  552,  552,  552,  552,   61,  555,  553,  553,  553,
      553,  553,  553,   61,  556,  554,   61,  561,  562,   61,
       61,   61, 1004,   61,  563,  560,  564, 1004, 1004, 1004,
       61,   61,  555,  553,  553,  553,  553,  553,  553,   61,
      556,   61,   61,  561,  562,   61,   61,   61,  566,   61,
      563,  560,  564,  567,  568,  570,   61,   61,  569,   61,
      571,  574,  576,  572,   61,  575,  573,   61,   61,   61,
       61,   61,   61,   61,  566,   61,  577,   61,  579,  567,

      568,  570, 1004,   61,  569,   61,  571,  574,  576,  572,
       61,  575,  573,   61,   61,   61,   61,   61,   61,   61,
      580,   61,  577,   61,   61,  581,  582,  578,   61,   61,
       61,  583,   61,   61,  584,   61,   61,  585,  590,   61,
     1004,   61, 1004, 1004, 1004, 1004,  580, 1004, 1004,  587,
       61,  581,  582,  578,   61,   61,   61,  583,   61,   61,
      584,   61,   61,  585,  586,   61,  588,   61,  589,  591,
      593,  592,   61,  596,  594,  587,   61,  597,   61,   61,
     1004,   61,   61,   61,  595,   61, 1004,   61,   61, 1004,
      586,   61,  588,   61,  589,  591,  593,  592,   61,  596,

      594,   61,   61,  597,   61,   61,  599,   61,   61,   61,
      595,   61,  600,   61,   61,  598,  601,   61,  602,   61,
       61,   61,  620,   61,  623,   61,  628,   61,   61,   61,
       61,   61,  599, 1004, 1004, 1004, 1004, 1004,  600, 1004,
     1004,  598,  601,   61,  602, 1004,   61,   61,  620,   61,
      623,   61,  628, 1004,   61,   61,   61,   61,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  256, 1004,  471,
      471,  471,  471,  471,  471,  471,  471,  471,  403,  256,
     1004,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      547, 1004,  609,  609,  609,  609,  609,  609, 1004, 1004,

      609,  609,  609,  609,  609,  609,  609,  609,  609,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  609,  609,
      609,  609,  609,  609,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  617,  642,  611,  611,  611,  611,  611,
      611, 1004,   61,  613,  613,  613,  613,  613,  613,  613,
      613,  613, 1004,   61, 1004, 1004, 1004, 1004, 1004,  617,
      642,  611,  611,  611,  611,  611,  611,  189,   61,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  480,   61,
      613,  613,  613,  613,  613,  613, 1004,   61,  616,  616,
      616,  616,  616,  616,  616,  616,  616, 1004, 1004, 1004,

     1004, 1004, 1004, 1004,  627,  639,  613,  613,  613,  613,
      613,  613,  189,   61,  614,  614,  614,  614,  614,  614,
      614,  614,  614,  615,  618,  616,  616,  616,  616,  616,
      616,  619,  621,   61,  622, 1004,  624, 1004,   61,   61,
     1004,   61,   61,   61,   61,  625,  629,  626, 1004, 1004,
      618,  616,  616,  616,  616,  616,  616,  619,  621,   61,
      622,   61,  624,   61,   61,   61,   61,   61,   61,   61,
       61,  625,  629,  626,   61,  631,  634,  630,  632,  633,
     1004,  635,   61,  640,   61,   61,  636,   61,   61,   61,
      637, 1004,   61,   61,  638,   61,   61,  641,  645,   61,

       61,  631,  634,  630,  632,  633,   61,  635,   61,  640,
       61,   61,  636,  643,   61,  644,  637,   61,  646,   61,
      638,   61,   61,  647,  645,   61,  648,   61,  650,   61,
       61,   61,   61,  649,  651,  652,   61,   61,  653,  654,
       61,  644, 1004,   61,  646,  656,   61,   61,   61,  647,
       61,   61,  648,   61,  650,   61,   61,   61,   61,  649,
      651,  655,   61,   61,  653,  654,   61,   61,   61,   61,
       61,  656,   61,   61,   61,  657,   61,   61,  671,   61,
       61,  658, 1004, 1004,   61, 1004, 1004,  655, 1004, 1004,
     1004,   61,  673,   61,   61,   61,   61,   61, 1004,   61,

     1004,  657, 1004, 1004,  671,   61,   61,  658,  607,  607,
      607,  607,  607,  607,  607,  607,  607,   61,  673, 1004,
     1004,  683, 1004,   61,  256,   61,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  547,  681,  663,  663,  663,
      663,  663,  663, 1004,  686,  663,  663,  663,  663,  663,
      663,  663,  663,  663, 1004,   61, 1004, 1004, 1004, 1004,
     1004, 1004,  681,  663,  663,  663,  663,  663,  663,  256,
      686,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      665,   61,  666,  666,  666,  666,  666,  666, 1004,  677,
      666,  666,  666,  666,  666,  666,  666,  666,  666, 1004,

     1004,   61, 1004, 1004, 1004, 1004, 1004, 1004,  666,  666,
      666,  666,  666,  666,  189,  677,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  480,  189,   61,  667,  667,
      667,  667,  667,  667,  667,  667,  667,  615, 1004,  668,
      668,  668,  668,  668,  668, 1004, 1004,  668,  668,  668,
      668,  668,  668,  668,  668,  668, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004,  676,  668,  668,  668,  668,  668,
      668,  669,  669,  669,  669,  669,  669,  669,  669,  669,
       61,  678,  670,  670,  670,  670,  670,  670,   61,  674,
      676,   61,  672,  675,  680,   61,  679,  682,   61,   61,

       61, 1004, 1004,   61,   61, 1004,   61,  678,  670,  670,
      670,  670,  670,  670,   61,  674,  684,   61,  672,  675,
      680,   61,  679,  682,   61,   61,   61,  685,  687,   61,
       61,  688,  689,   61,   61,  690,  691,  693,  694,  692,
       61,  695,  684,   61,   61,   61,   61,   61,   61,  696,
       61,   61,   61,  685,  687,   61,   61,  688,  689,   61,
       61,  690,  691,  693,  694,  692,   61,  695,   61,   61,
       61,   61,   61,   61,   61,  696,   61,   61,   61,  697,
       61,   61,   61,  698,  699,  700,   61,   61,  701,   61,
      702,   61,   61,   61,   61,   61,   61,  717,  718,   61,

       61,   61,  721,   61,  716,  697,   61, 1004,   61,  698,
      699,  700,   61,   61,  701,   61,  702,   61,   61,   61,
       61,   61,   61,  717,  718,   61,   61,   61,  721,   61,
      716,  723, 1004,  256,   61,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  547,  256,   61,  707,  707,  707,
      707,  707,  707,  707,  707,  707,  665,  723,  708,  708,
      708,  708,  708,  708, 1004,  729,  708,  708,  708,  708,
      708,  708,  708,  708,  708, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004,  708,  708,  708,  708,  708,  708,
      709,  709,  709,  709,  709,  709,  709,  709,  709,   61,

      720,  710,  710,  710,  710,  710,  710, 1004,   61,  712,
      712,  712,  712,  712,  712,  712,  712,  712, 1004,   61,
     1004, 1004, 1004, 1004, 1004,   61,  720,  710,  710,  710,
      710,  710,  710,  189,   61,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  615,   61,  712,  712,  712,  712,
      712,  712, 1004,   61,  715,  715,  715,  715,  715,  715,
      715,  715,  715, 1004,  719, 1004, 1004, 1004, 1004, 1004,
     1004,   61,  712,  712,  712,  712,  712,  712,  189,   61,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  714,
      719,  715,  715,  715,  715,  715,  715,   61,  722,  724,

      725,   61,  726,  731,  727,  728,   61, 1004,   61,   61,
       61, 1004,   61, 1004,   61, 1004,  730,  715,  715,  715,
      715,  715,  715,   61,  722,  724,  725,   61,  726,  731,
      727,  728,   61,  732,   61,   61,   61,  733,   61,  734,
       61,  735,  730,  737,  739,  736,  738,   61,   61,   61,
       61,   61,  740,   61,   61,   61,   61,  753,   61,  732,
       61,   61,  758,  733,   61,  734,   61,  735, 1004,  737,
      739,  736,  738,   61,   61, 1004,   61,   61,  740,   61,
       61,   61,   61,  753,   61,   61,   61,   61,  758, 1004,
       61,  256,   61,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  665,   61,  745,  745,  745,  745,  745,  745,
     1004,   61,  745,  745,  745,  745,  745,  745,  745,  745,
      745, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,   61,
      745,  745,  745,  745,  745,  745,  256, 1004,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  747,  757,  748,
      748,  748,  748,  748,  748, 1004,   61,  748,  748,  748,
      748,  748,  748,  748,  748,  748, 1004, 1004,   61, 1004,
     1004, 1004, 1004, 1004,  757,  748,  748,  748,  748,  748,
      748,  189,   61,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  615,  189,   61,  749,  749,  749,  749,  749,

      749,  749,  749,  749,  714, 1004,  750,  750,  750,  750,
      750,  750, 1004, 1004,  750,  750,  750,  750,  750,  750,
      750,  750,  750, 1004, 1004, 1004, 1004, 1004,  767,   61,
     1004,  754,  750,  750,  750,  750,  750,  750,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  755,  756,  752,
      752,  752,  752,  752,  752,   61,  759,  754,  760,  761,
     1004,   61,   61,   61,   61, 1004,  764, 1004,   61, 1004,
      766, 1004,   61,  755,  756,  752,  752,  752,  752,  752,
      752,  765,  759,   61,  760,  761,   61,   61,   61,   61,
       61,  762,  764,  769,   61,  768,  766,  763,   61,   61,

       61,   61,  770,   61,  785,  771,   61,  765,   61,   61,
       61,   61,   61,   61, 1004, 1004, 1004,  762, 1004,  769,
     1004,  768, 1004,  763, 1004,   61,   61,   61,  770,   61,
      785,  771,   61, 1004,   61, 1004,   61,   61,  256,   61,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  665,
      256, 1004,  776,  776,  776,  776,  776,  776,  776,  776,
      776,  747,   61,  777,  777,  777,  777,  777,  777, 1004,
     1004,  777,  777,  777,  777,  777,  777,  777,  777,  777,
     1004, 1004, 1004, 1004, 1004, 1004, 1004,  823,   61,  777,
      777,  777,  777,  777,  777,  778,  778,  778,  778,  778,

      778,  778,  778,  778,  790,   61,  779,  779,  779,  779,
      779,  779, 1004,   61,  781,  781,  781,  781,  781,  781,
      781,  781,  781, 1004,   61, 1004, 1004, 1004, 1004, 1004,
      790,   61,  779,  779,  779,  779,  779,  779,  189,   61,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  714,
       61,  781,  781,  781,  781,  781,  781, 1004,   61,  784,
      784,  784,  784,  784,  784,  784,  784,  784, 1004,  786,
      791, 1004, 1004, 1004, 1004, 1004,   61,  781,  781,  781,
      781,  781,  781,  189,   61,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  783,  786,  784,  784,  784,  784,

      784,  784,   61,  787,   61,  788,   61,   61,  793,  794,
      796,  792,   61,  795, 1004,   61,   61,  797,   61,  815,
     1004,   61,  784,  784,  784,  784,  784,  784,   61,  787,
       61,  788,   61,   61,  793,  794,  796,  792,   61,  795,
      798,   61,   61,  797,   61,  800,  799,   61,   61,   61,
      820,   61,   61,   61,   61,  816,   61,  827,  829,   61,
       61,   61, 1004,  847, 1004, 1004,  798, 1004, 1004, 1004,
     1004,  800,  799, 1004,   61,   61,  820,   61,   61,   61,
     1004,  816,   61,  827,  829,   61,   61,   61,  256,  847,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  747,

      848,  806,  806,  806,  806,  806,  806, 1004,   61,  806,
      806,  806,  806,  806,  806,  806,  806,  806, 1004,  846,
     1004, 1004, 1004, 1004, 1004, 1004,  848,  806,  806,  806,
      806,  806,  806,  256,   61,  807,  807,  807,  807,  807,
      807,  807,  807,  807,  808,  824,  809,  809,  809,  809,
      809,  809, 1004,   61,  809,  809,  809,  809,  809,  809,
      809,  809,  809, 1004, 1004,   61, 1004, 1004, 1004, 1004,
     1004,  824,  809,  809,  809,  809,  809,  809,  189,   61,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  714,
      189,   61,  810,  810,  810,  810,  810,  810,  810,  810,

      810,  783, 1004,  811,  811,  811,  811,  811,  811, 1004,
     1004,  811,  811,  811,  811,  811,  811,  811,  811,  811,
     1004, 1004, 1004, 1004, 1004, 1004, 1004,   61,  814,  811,
      811,  811,  811,  811,  811,  812,  812,  812,  812,  812,
      812,  812,  812,  812,   61,  817,  813,  813,  813,  813,
      813,  813,  818,   61,  814, 1004, 1004,  828,  850,  844,
      851,   61,   61,  821,  825,   61,  826,   61,  819,   61,
       61,  817,  813,  813,  813,  813,  813,  813,  818,  822,
       61,   61,   61,  828,  850,  844,  851,   61,   61,  821,
      825,   61,  826,   61,  819,   61,  877, 1004, 1004, 1004,

     1004, 1004, 1004, 1004, 1004,  822,   61,   61,   61,  256,
     1004,  471,  471,  471,  471,  471,  471,  471,  471,  471,
      747,  256,  877,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  808,  878,  836,  836,  836,  836,  836,  836,
     1004, 1004,  836,  836,  836,  836,  836,  836,  836,  836,
      836, 1004, 1004, 1004,  852,  853,  854, 1004,  855,  878,
      836,  836,  836,  836,  836,  836,  837,  837,  837,  837,
      837,  837,  837,  837,  837,   61,   61,  838,  838,  838,
      838,  838,  838, 1004,   61,  840,  840,  840,  840,  840,
      840,  840,  840,  840, 1004, 1004, 1004, 1004,  883, 1004,

     1004,   61,   61,  838,  838,  838,  838,  838,  838,  189,
       61,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      783,   61,  840,  840,  840,  840,  840,  840, 1004, 1004,
      843,  843,  843,  843,  843,  843,  843,  843,  843, 1004,
      845, 1004, 1004, 1004, 1004, 1004, 1004,   61,  840,  840,
      840,  840,  840,  840,  189,   61,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  842,  845,  843,  843,  843,
      843,  843,  843,  849,  856,  857,   61,  858,  859,   61,
      873,   61,   61,  872,   61,   61,  885,  903,   61,   61,
       61,  904,   61,  843,  843,  843,  843,  843,  843,  849,

      856,  857,   61,  858,  859,   61,  873, 1004,   61,  872,
       61,   61,  885,  903,   61,   61,   61,  904,   61,  256,
     1004,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      808,  888,  866,  866,  866,  866,  866,  866, 1004,   61,
      866,  866,  866,  866,  866,  866,  866,  866,  866, 1004,
      908, 1004, 1004, 1004,  884, 1004, 1004,  888,  866,  866,
      866,  866,  866,  866,  256,   61,  867,  867,  867,  867,
      867,  867,  867,  867,  867,   61,  879,  868,  868,  868,
      868,  868,  868, 1004,   61,  868,  868,  868,  868,  868,
      868,  868,  868,  868, 1004, 1004,   61, 1004, 1004, 1004,

     1004,   61,  879,  868,  868,  868,  868,  868,  868,  189,
       61,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      783,  189,   61,  869,  869,  869,  869,  869,  869,  869,
      869,  869,  842,   61,  870,  870,  870,  870,  870,  870,
     1004,  880,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  898,  881,  886,  874,  882,  887,   61,  899,   61,
      870,  870,  870,  870,  870,  870,  875,  880,   61,   61,
       61,  920,   61,  876,   61,  906,   61,  898,   61,  886,
      874,   61,  887,   61,  899, 1004, 1004, 1004, 1004, 1004,
     1004, 1004,  875,   61,   61,   61,   61,  920,   61,  876,

       61,  906,   61,  907,   61, 1004,  256,   61,  471,  471,
      471,  471,  471,  471,  471,  471,  471,  808,  256,   61,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  900,
       61,  894,  894,  894,  894,  894,  894, 1004,  925,  894,
      894,  894,  894,  894,  894,  894,  894,  894, 1004,   61,
     1004, 1004, 1004, 1004, 1004,  900,   61,  894,  894,  894,
      894,  894,  894,  189,  925,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  842,   61,  896,  896,  896,  896,
      896,  896, 1004,  909,  896,  896,  896,  896,  896,  896,
      896,  896,  896,  901,  905,  910,   61,  911, 1004,  902,

       61,  912,  896,  896,  896,  896,  896,  896,  923,   61,
       61,   61,  922,   61,  927,   61,   61,   61,   61,  901,
      905,   61,   61,  911,   61,  902,   61,  912, 1004, 1004,
     1004, 1004, 1004, 1004,  923,   61,   61,   61,  922,   61,
      927,   61,   61,   61,   61,  921, 1004,   61, 1004, 1004,
       61,  256,  934,  917,  917,  917,  917,  917,  917,  917,
      917,  917,   61,   61,  918,  918,  918,  918,  918,  918,
     1004,  921,  918,  918,  918,  918,  918,  918,  918,  918,
      918, 1004, 1004,   61,   61,   61,   61, 1004,   61,   61,
      918,  918,  918,  918,  918,  918,  189,  933,  406,  406,

      406,  406,  406,  406,  406,  406,  406,  842,  924,   61,
       61,   61,   61,   61,  926,  926,   61,  926,  926,  926,
      926,  926,  926,  933,  935,  926,  947, 1004,  938,  939,
      953,   61, 1004, 1004,  924,  926,  926,  936, 1004,   61,
     1004,  256,   61,  471,  471,  471,  471,  471,  471,  471,
      471,  471,  947,   61,  938,  939,  953,   61,   61,  941,
      942,  937,  937,  936,  937,  937,  937,  937,  937,  937,
      948,  950,  937,  949,  951,  952,   61,   61,   61,   61,
      954, 1004,  937,  937,   61,  941,  942,  958,   61,  957,
      955,  956,  962,   61,   61, 1004,  948,  950,  965,  949,

      951,  952,   61,   61,   61,  963,  954,   61,  966,   61,
      967,   61,  968,  958,   61,  957,  955,  956,  962,   61,
       61,  964,  969,  970,  965,  971,   61,   61,   61,   61,
       61,  963,  976,   61,  966,   61,  967,   61,  968,   61,
      977,  979,   61,   61,  978,   61,  980,  964,  969,  970,
       61,  971,   61,   61,   61,   61,   61,  982,  976,  981,
       61,  987,   61,   61,  988,   61,  977,  979,   61,   61,
      978,   61,  980,  986,  989,   61,   61,   61,   61,  994,
       61,   61,   61,  982,   61,  981,   61,  987,   61,   61,
      988, 1004, 1004, 1004,   61, 1004, 1004, 1004, 1004,  986,

      989,   61, 1004,   61,   61,  994,   61,   61,   61, 1004,
       61, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
       61,   41,   41,   41,   41,   43,   43,   43,   43,   47,
       47,   47,   47,   49, 1004,   49,   49,   50,   50,   50,
       50,  117, 1004,  117,  117,  121,  121,  184,  184,  185,
      185,  253,  253,  254,  254,  255,  255,  325,  325,  326,
      326,  396,  396,  397,  397,  398,  398,  422, 1004,  422,
      422,  466,  466,  467,  467,  468,  468,  541,  541,  542,
      542,  603,  603,  604,  604,  605,  605,  659,  659,  660,
      660,  661,  661,  541,  541,  704,  704,  705,  705,  741,

      741,  742,  742,  743,  743,  772,  772,  773,  773,  774,
      774,  660,  660,  802,  802,  803,  803,  830,  830,  831,
      831,  832,  832,  860,  860,  861,  861,  863,  863,  742,
      742,  890,  890,  891,  891,  913,  913,  914,  914,  915,
      915,  926, 1004,  926,  926,  928, 1004,  928,  928,  929,
      929,  930,  930,  937, 1004,  937,  937,  940, 1004,  940,
      940,  802,  802,  944,  944,  945,  945,  959,  959,  960,
      960,  972,  972,  973,  973,  974,  974,  861,  861,  984,
      984,  990,  990,  991,  991,  992,  992,  996,  996,  999,
      999, 1000, 1000, 1002, 1002, 1003, 1003,    7, 1004, 1004,

     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004
    } ;

static yyconst flex_int16_t yy_chk[5874] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   10,   11,   11,   15,
       17,   27, 1093,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   24,   16,   16,   16,   16,   16,

       16,   28,   16,   37,   61,   24,   17,   27,   24,   28,
       37,   63,   30,   44,   44,   64,   28,   24,   16, 1089,
       24,   16,   16,   16,   16,   16,   16,   28,   16,   37,
       61,   24,   30, 1087,   24,   28,   37,   63,   30,   45,
       45,   64,   28,   24,   16,   20,   20, 1083,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   30,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   21,   21,   32,   21,   32, 1077,   39,   32, 1069,
       21, 1068,   21,   39,   46,   46, 1063,   65, 1059,   21,
     1058,   25, 1054, 1050, 1012, 1003,   40,   21,   21,   32,
       21,   32,   25,   39,   32,   25,   21,   25,   21,   39,
     1002,   66,   40,   65,   29,   21,   22,   25,   22,   22,
       29,   22,   40,   69,   69,   67,   29,   22,   25,   22,
       22,   25, 1000,   25,   67,  999,   22,   66,   40,  998,
       29,  997,   22,  996,   22,   22,   29,   22,  995,   69,
       69,   67,   29,   22,   31,   22,   22,  992,   31,   70,

       67,   33,   22,   23,   31,   68,   23,   23,   70,   31,
       31,   23,   33,   71,   23,   33,   23,   23,   33,   74,
       31,   75,   68,   23,   31,   70,  991,   33,  985,   23,
       31,   68,   23,   23,   70,   31,   31,   23,   33,   71,
       23,   33,   23,   23,   33,   74,  984,   75,   68,   23,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       81,   26,   26,   26,   26,   26,   26,  983,   26,   91,
       79,  974,   26,  973,  972,   26,  961,  960,   73,   34,
       38,   26,   79,   34,   38,   73,   81,   26,   26,   26,
       26,   26,   26,   34,   26,   91,   79,   35,   26,   34,

       38,   26,   35,   35,   73,   34,   38,   26,   79,   34,
       38,   73,   36,   36,   35,   35,  959,   76,   77,   34,
       77,   83,   36,   35,   78,   34,   38,  945,   35,   35,
       36,   76,   78,   80,   88,   88,   82,   83,   80,   36,
       35,   35,   36,   76,   77,  944,   77,   83,   36,  943,
       78,  931,  930,   82,  929,  915,   36,   76,   78,   80,
       88,   88,   82,   83,   80,   36,  914,  913,   36,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   82,
       54,   54,   54,   54,   54,   54,  896,   54,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   86,   94,  892,

      891,  890,  889,  866,  863,  100,   54,   54,   54,   54,
       54,   54,   86,   54,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   86,   94,   59,   59,   59,   59,   59,
       59,  100,  861,  860,  840,  834,  833,  832,   86,  831,
      830,  806,  803,  802,  801,  781,  775,   95,   90,  774,
       90,   59,   59,   59,   59,   59,   59,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   84,   62,   62,
       62,   62,   62,   62,   90,   62,   90,  773,  772,  758,
       92,   95,   72,  745,   85,   92,   87,   84,   62,   85,
       72,  743,  742,   84,   62,   62,   62,   62,   62,   62,

       87,   62,   72,   85,   85,   89,   92,   95,   72,   97,
       85,   92,   87,   84,   62,   85,   72,   89,   93,   93,
       89,   96,  102,  108,  106,   97,   87,   96,   72,   85,
       85,   89,   98,  101,  103,   97,  101,   98,   99,  103,
       99,   99,  102,   89,   93,   93,   89,   96,  102,   99,
      106,   97,  104,   96,  105,  107,  110,  108,   98,  101,
      103,  112,  101,   98,   99,  103,   99,   99,  102,  104,
      112,  109,  104,  105,  111,   99,  127,  113,  104,  109,
      105,  107,  110,  108,  113,  114,  111,  112,  114,  115,
      128,  115,  741,  712,  706,  104,  112,  109,  104,  105,

      111,  705,  127,  113,  704,  109,  703,  663,  661,  131,
      113,  114,  111,  660,  114,  115,  128,  115,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  134,  118,
      118,  118,  118,  118,  118,  131,  118,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  137,  137,  659,  613,
      606,  605,  604,  603,  134,  118,  118,  118,  118,  118,
      118,  545,  118,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  137,  137,  122,  122,  122,  122,  122,  122,
      125,  181,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  542,  146,  541,  540,  478,  469,  468,  467,  146,

      122,  122,  122,  122,  122,  122,  124,  181,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  146,  124,
      124,  124,  124,  124,  124,  146,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  466,  124,  124,  124,  124,  124,
      124,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  132,  126,  126,  126,  126,  126,  126,  129,  130,
      133,  129,  401,  398,  132,  130,  135,  138,  135,  138,
      133,  139,  136,  140,  141,  139,  397,  132,  126,  126,
      126,  126,  126,  126,  129,  130,  133,  129,  136,  140,

      132,  130,  135,  138,  135,  138,  133,  139,  136,  140,
      142,  139,  143,  396,  145,  144,  145,  147,  141,  147,
      335,  148,  150,  327,  136,  140,  326,  325,  149,  143,
      142,  144,  153,  151,  150,  152,  142,  158,  143,  148,
      145,  144,  145,  147,  141,  147,  149,  148,  150,  151,
      154,  152,  159,  155,  149,  143,  142,  144,  324,  151,
      150,  152,  156,  156,  159,  148,  153,  155,  154,  157,
      157,  158,  149,  160,  161,  151,  154,  152,  159,  155,
      162,  265,  160,  161,  163,  164,  160,  165,  156,  156,
      159,  160,  153,  155,  154,  162,  163,  158,  170,  160,

      161,  164,  167,  167,  157,  255,  162,  165,  160,  161,
      163,  164,  160,  165,  166,  169,  174,  160,  169,  168,
      166,  162,  163,  171,  171,  172,  254,  164,  167,  167,
      157,  168,  170,  165,  174,  177,  178,  172,  194,  175,
      166,  169,  174,  176,  169,  168,  166,  173,  178,  171,
      171,  172,  173,  177,  173,  175,  196,  168,  170,  176,
      174,  177,  178,  172,  194,  175,  179,  180,  197,  176,
      197,  205,  209,  173,  178,  215,  215,  180,  173,  177,
      173,  175,  196,  179,  253,  176,  198,  252,  223,  186,
      185,  184,  179,  180,  197,  121,  197,  205,  209,  119,

       55,  215,  215,  180,   51,   50,   47,  199,   42,  179,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      198,  182,  182,  182,  182,  182,  182,  188,  182,  188,
      188,  188,  188,  188,  188,  188,  188,  188,   19,   18,
       14,  199,   12,    7,    4,    3,  198,  182,  182,  182,
      182,  182,  182,    0,  182,  187,    0,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  199,  187,  187,
      187,  187,  187,  187,  192,  230,  192,  192,  192,  192,
      192,  192,  192,  192,  192,    0,  202,    0,    0,    0,
        0,    0,    0,  202,  187,  187,  187,  187,  187,  187,

      190,  230,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  202,  190,  190,  190,  190,  190,  190,  202,
      195,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,    0,    0,    0,    0,    0,  218,  218,  195,  190,
      190,  190,  190,  190,  190,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  195,  200,  191,  191,  191,  191,
      191,  191,  218,  218,  195,    0,    0,    0,    0,    0,
        0,  200,  204,    0,    0,    0,    0,    0,    0,    0,
      195,  200,  191,  191,  191,  191,  191,  191,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  200,  203,  193,

      193,  193,  193,  193,  193,  201,  204,  201,  206,  207,
      206,  207,  212,  210,    0,  213,  210,  213,  203,  222,
        0,    0,    0,    0,  203,  193,  193,  193,  193,  193,
      193,  201,  204,  201,  206,  207,  206,  207,  208,  210,
      211,  213,  210,  213,  203,  214,  212,  216,  217,  219,
      208,  217,  220,  222,  216,  221,  211,    0,  219,  219,
      219,  214,    0,  226,  208,  220,  211,  219,  221,  226,
        0,  214,  212,  216,  217,  219,  208,  217,  220,  222,
      216,  221,  211,  224,  219,  219,  219,  214,  225,  226,
      225,  220,  227,  219,  221,  226,  228,  229,  224,  231,

      224,  227,  232,  229,  234,    0,  235,  235,  234,  224,
      245,    0,  228,  233,  225,  231,  225,    0,  227,  232,
      236,  238,  228,  229,  224,  231,  224,  227,  232,  229,
      234,  233,  235,  235,  234,  237,  236,  238,  228,  233,
      237,  231,  241,  239,  245,  232,  236,  238,  240,  241,
      244,  242,  243,  243,  246,  248,    0,  233,  239,  244,
      239,  237,  236,  238,  240,  250,  237,  242,  241,  239,
      245,  247,  248,    0,  240,  241,  244,  242,  243,  243,
      246,  248,  249,  269,  239,  244,  239,  267,  249,  279,
      240,  247,  267,  242,  266,  266,  279,  247,  248,  250,

        0,    0,    0,    0,    0,    0,    0,    0,  249,  269,
      281,    0,    0,  267,  249,  279,    0,  247,  267,    0,
      266,  266,  279,    0,    0,  250,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  257,  281,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  307,  257,  257,
      257,  257,  257,  257,  259,    0,  259,  259,  259,  259,
      259,  259,  259,  259,  259,    0,    0,    0,    0,    0,
        0,    0,    0,  307,  257,  257,  257,  257,  257,  257,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  271,
      309,  258,  258,  258,  258,  258,  258,  260,  271,  260,

      260,  260,  260,  260,  260,  260,  260,  260,    0,  272,
        0,    0,    0,    0,    0,  271,  309,  258,  258,  258,
      258,  258,  258,  261,  271,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  311,  261,  261,  261,  261,
      261,  261,  262,  272,  262,  262,  262,  262,  262,  262,
      262,  262,  262,    0,  273,    0,    0,    0,    0,    0,
        0,  311,  261,  261,  261,  261,  261,  261,  263,  272,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
        0,  263,  263,  263,  263,  263,  263,  264,  273,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  268,  283,

      268,  274,  274,  270,  270,  270,  275,  263,  263,  263,
      263,  263,  263,  270,  273,  276,  277,  277,  275,  276,
      276,  278,  280,  282,  268,    0,  268,  274,  274,  270,
      270,  270,  275,  283,  280,  284,  287,  278,  285,  270,
      282,  276,  277,  277,  275,  276,  276,  278,  280,  282,
      285,  287,  289,  286,  290,  288,  293,    0,  289,  283,
      280,    0,  287,  278,  285,  286,  282,  288,  291,  284,
      290,  354,  292,  295,  291,    0,  285,  287,  289,  286,
      290,  288,  294,  297,  289,  301,  295,  296,  298,  297,
      293,  286,  292,  288,  291,  284,  290,  354,  292,  295,

      291,  294,  296,  299,  298,  301,  305,    0,  294,  297,
      300,  301,  295,  296,  298,  297,  293,  300,  292,  299,
      303,  304,  306,  306,  304,  302,  303,  294,  296,  299,
      298,  301,  302,  310,  310,  312,  300,  308,  313,    0,
      305,  312,  318,  300,    0,  299,  303,  304,  306,  306,
      304,  302,  303,  308,  313,  315,  314,    0,  302,  310,
      310,  312,  318,  308,  313,  314,  305,  312,  318,  315,
      316,  316,  317,  319,  320,  317,  320,  321,  319,  308,
      313,  315,  314,  322,    0,    0,  322,  340,  318,  323,
        0,  314,    0,    0,    0,  315,  316,  316,  317,  319,

      320,  317,  320,  341,  319,  341,  323,  340,  346,  322,
      346,  321,  322,  340,  328,  323,  328,  328,  328,  328,
      328,  328,  328,  328,  328,    0,    0,    0,    0,  341,
        0,  341,  323,  340,  346,    0,  346,  321,  329,    0,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
        0,  329,  329,  329,  329,  329,  329,  330,  370,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  329,  329,  329,
      329,  329,  329,  331,  370,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  371,  331,  331,  331,  331,

      331,  331,  332,  343,  332,  332,  332,  332,  332,  332,
      332,  332,  332,    0,    0,  343,    0,    0,  339,    0,
        0,  371,  331,  331,  331,  331,  331,  331,  334,  343,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      336,  343,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  339,  336,  336,  336,  336,  336,  336,  338,
        0,  338,  338,  338,  338,  338,  338,  338,  338,  338,
        0,    0,    0,  352,    0,    0,    0,    0,  339,  336,
      336,  336,  336,  336,  336,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  342,  344,  337,  337,  337,  337,

      337,  337,  345,  351,  347,  350,  349,  352,  350,  375,
      342,  344,  347,  349,  353,  351,    0,  353,  345,    0,
      342,  344,  337,  337,  337,  337,  337,  337,  345,  351,
      347,  350,  349,  352,  350,  375,  342,  344,  347,  349,
      353,  351,  356,  353,  345,  348,  348,  355,  348,  348,
      348,  348,  348,  348,  348,  355,  348,  357,  361,  356,
        0,  358,  359,  359,  362,  357,  348,  348,  356,  358,
      360,  360,  362,  355,  364,  364,  365,  363,  361,    0,
      367,  355,  381,  357,  361,  356,  363,  358,  359,  359,
      362,  357,  367,  365,    0,  358,  360,  360,  362,  366,

      364,  364,  365,  363,  361,  368,  367,  366,  369,  372,
      373,  368,  363,  373,  369,  377,  381,  372,  367,  365,
      374,  378,  376,  374,  376,  366,  380,  382,    0,  377,
      378,  368,  383,  366,  369,  372,  373,  368,  379,  373,
      369,  377,  381,  372,  380,  384,  374,  378,  376,  374,
      376,  379,  380,  384,  379,  377,  378,  385,  383,  386,
      385,  382,  387,  388,  379,  390,  389,  390,  391,  394,
      380,  384,  392,  392,  391,  386,    0,  379,  389,  384,
      379,  393,  415,  385,  395,  386,  385,  382,  387,  388,
      393,  390,  389,  390,  391,  420,  395,  415,  392,  392,

      391,  386,  418,  394,  389,    0,    0,  393,  415,    0,
      395,    0,    0,    0,  418,    0,  393,    0,    0,    0,
        0,  420,  395,  415,    0,    0,  423,    0,  418,  394,
      399,  399,  399,  399,  399,  399,  399,  399,  399,  400,
      418,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  402,  423,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  443,  402,  402,  402,  402,  402,  402,
      404,  413,  404,  404,  404,  404,  404,  404,  404,  404,
      404,    0,    0,    0,    0,    0,    0,    0,    0,  443,
      402,  402,  402,  402,  402,  402,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  413,  425,  403,  403,  403,
      403,  403,  403,  405,  425,  405,  405,  405,  405,  405,
      405,  405,  405,  405,    0,  444,    0,    0,    0,    0,
        0,  413,  425,  403,  403,  403,  403,  403,  403,  406,
      425,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      407,  444,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  450,  407,  407,  407,  407,  407,  407,  408,
      462,  408,  408,  408,  408,  408,  408,  408,  408,  408,
        0,    0,    0,    0,    0,    0,    0,    0,  450,  407,
      407,  407,  407,  407,  407,  409,  462,  409,  409,  409,

      409,  409,  409,  409,  409,  409,  409,  417,  409,  409,
      409,  409,  409,  409,  410,    0,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  412,  414,  417,  412,    0,
      414,  416,  416,  417,  409,  409,  409,  409,  409,  409,
      411,  419,  424,  411,    0,  421,  422,  422,  424,  411,
        0,  412,  414,  417,  412,  421,  414,  416,  416,  427,
      427,  419,    0,  421,  421,    0,  411,  419,  424,  411,
      426,  421,  422,  422,  424,  411,  426,  428,  426,  431,
      434,  421,  430,  426,  429,  427,  427,  419,  430,  421,
      421,  429,    0,  428,    0,  432,  426,  433,  434,  431,

      435,  436,  426,  428,  426,  431,  434,  436,  430,  426,
      429,  432,  437,  433,  430,  438,  435,  429,  439,  428,
      440,  432,    0,  433,  434,  431,  435,  436,  437,  441,
      445,  438,  441,  436,  439,  440,    0,  432,  437,  433,
      442,  438,  435,  452,  439,  442,  440,  446,  446,    0,
      445,  447,  447,  451,  437,  441,  445,  438,  441,  452,
      439,  440,  448,  451,  448,  454,  442,  449,  449,  452,
      451,  442,  455,  446,  446,  453,  445,  447,  447,  451,
      456,  453,    0,  454,  455,  452,  457,  457,  448,  451,
      448,  454,  459,  449,  449,  458,  451,  458,  455,  459,

      456,  453,  460,  493,  460,  463,  456,  453,  461,  454,
      455,  486,  457,  457,  464,  461,  464,  463,  459,  465,
      486,  458,  465,  458,    0,  459,  456,    0,  460,  493,
      460,  463,    0,  508,  461,    0,    0,  486,    0,    0,
      464,  461,  464,  463,  510,  465,  486,  470,  465,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  471,  508,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  472,
      510,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      472,    0,  472,  472,  472,  472,  472,  472,  473,  513,
      473,  473,  473,  473,  473,  473,  473,  473,  473,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  472,  472,
      472,  472,  472,  472,  474,  513,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  485,  474,  474,  474,
      474,  474,  474,  475,  514,  475,  475,  475,  475,  475,
      475,  475,  475,  475,    0,    0,  485,    0,    0,    0,
        0,    0,  485,  474,  474,  474,  474,  474,  474,  477,
      514,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  479,  485,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,    0,  479,  479,  479,  479,  479,  479,
      481,    0,  481,  481,  481,  481,  481,  481,  481,  481,

      481,    0,  487,    0,    0,    0,    0,    0,    0,  482,
      479,  479,  479,  479,  479,  479,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  482,  483,  480,  480,  480,
      480,  480,  480,  483,  484,  482,  487,  489,  490,  491,
      490,  484,    0,  492,  491,  488,  492,    0,    0,    0,
      489,  482,  483,  480,  480,  480,  480,  480,  480,  483,
      484,  488,  487,  489,  490,  491,  490,  484,  494,  492,
      491,  488,  492,  495,  496,  498,  489,  494,  497,  497,
      499,  502,  504,  500,  504,  503,  501,  488,  499,  500,
      496,  498,  503,  495,  494,  501,  505,  502,  507,  495,

      496,  498,    0,  494,  497,  497,  499,  502,  504,  500,
      504,  503,  501,  505,  499,  500,  496,  498,  503,  495,
      509,  501,  505,  502,  506,  511,  512,  506,  511,  515,
      517,  516,  507,  516,  518,  512,  509,  519,  525,  505,
        0,  523,    0,    0,    0,    0,  509,    0,    0,  521,
      506,  511,  512,  506,  511,  515,  517,  516,  507,  516,
      518,  512,  509,  519,  520,  521,  522,  523,  524,  526,
      528,  527,  525,  531,  529,  521,  520,  532,  528,  535,
        0,  524,  522,  529,  530,  531,    0,  526,  527,    0,
      520,  521,  522,  532,  524,  526,  528,  527,  525,  531,

      529,  530,  520,  532,  528,  535,  534,  524,  522,  529,
      530,  531,  536,  526,  527,  533,  537,  533,  538,  532,
      534,  539,  557,  538,  560,  560,  565,  530,  536,  582,
      557,  537,  534,    0,    0,    0,    0,    0,  536,    0,
        0,  533,  537,  533,  538,    0,  534,  539,  557,  538,
      560,  560,  565,    0,  536,  582,  557,  537,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  544,    0,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  546,
        0,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,    0,  546,  546,  546,  546,  546,  546,  548,    0,

      548,  548,  548,  548,  548,  548,  548,  548,  548,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  546,  546,
      546,  546,  546,  546,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  554,  579,  547,  547,  547,  547,  547,
      547,  551,  579,  551,  551,  551,  551,  551,  551,  551,
      551,  551,    0,  554,    0,    0,    0,    0,    0,  554,
      579,  547,  547,  547,  547,  547,  547,  550,  579,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  554,
      550,  550,  550,  550,  550,  550,  553,  583,  553,  553,
      553,  553,  553,  553,  553,  553,  553,    0,    0,    0,

        0,    0,    0,    0,  564,  576,  550,  550,  550,  550,
      550,  550,  552,  583,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  555,  552,  552,  552,  552,  552,
      552,  556,  558,  555,  559,    0,  561,    0,  564,  576,
        0,  556,  561,  559,  558,  562,  566,  563,    0,    0,
      555,  552,  552,  552,  552,  552,  552,  556,  558,  555,
      559,  562,  561,  563,  564,  576,  566,  556,  561,  559,
      558,  562,  566,  563,  567,  568,  571,  567,  569,  570,
        0,  572,  568,  577,  569,  570,  573,  562,  572,  563,
      574,    0,  566,  574,  575,  575,  571,  578,  584,  577,

      567,  568,  571,  567,  569,  570,  573,  572,  568,  577,
      569,  570,  573,  580,  572,  581,  574,  581,  585,  574,
      575,  575,  571,  586,  584,  577,  587,  589,  590,  587,
      586,  578,  573,  588,  591,  592,  588,  590,  593,  594,
      595,  581,    0,  581,  585,  597,  593,  580,  597,  586,
      591,  594,  587,  589,  590,  587,  586,  578,  598,  588,
      591,  596,  588,  590,  593,  594,  595,  599,  596,  592,
      600,  597,  593,  580,  597,  601,  591,  594,  617,  626,
      617,  602,    0,    0,  598,    0,    0,  596,    0,    0,
        0,  601,  619,  599,  596,  592,  600,  602,    0,  619,

        0,  601,    0,    0,  617,  626,  617,  602,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  601,  619,    0,
        0,  630,    0,  602,  608,  619,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  628,  608,  608,  608,
      608,  608,  608,  609,  633,  609,  609,  609,  609,  609,
      609,  609,  609,  609,    0,  630,    0,    0,    0,    0,
        0,    0,  628,  608,  608,  608,  608,  608,  608,  610,
      633,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  630,  610,  610,  610,  610,  610,  610,  611,  623,
      611,  611,  611,  611,  611,  611,  611,  611,  611,    0,

        0,  623,    0,    0,    0,    0,    0,    0,  610,  610,
      610,  610,  610,  610,  612,  623,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  614,  623,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  614,    0,  614,
      614,  614,  614,  614,  614,  616,    0,  616,  616,  616,
      616,  616,  616,  616,  616,  616,    0,    0,    0,    0,
        0,    0,    0,    0,  622,  614,  614,  614,  614,  614,
      614,  615,  615,  615,  615,  615,  615,  615,  615,  615,
      622,  624,  615,  615,  615,  615,  615,  615,  618,  620,
      622,  620,  618,  621,  627,  621,  625,  629,  624,  629,

      625,    0,    0,  627,  637,    0,  622,  624,  615,  615,
      615,  615,  615,  615,  618,  620,  631,  620,  618,  621,
      627,  621,  625,  629,  624,  629,  625,  632,  634,  627,
      637,  635,  636,  631,  640,  638,  639,  642,  643,  641,
      644,  645,  631,  642,  636,  632,  634,  635,  641,  646,
      643,  647,  648,  632,  634,  638,  639,  635,  636,  631,
      640,  638,  639,  642,  643,  641,  644,  645,  649,  642,
      636,  632,  634,  635,  641,  646,  643,  647,  648,  650,
      651,  638,  639,  652,  653,  654,  655,  656,  657,  657,
      658,  650,  652,  672,  649,  674,  653,  673,  675,  675,

      678,  654,  679,  673,  671,  650,  651,    0,  658,  652,
      653,  654,  655,  656,  657,  657,  658,  650,  652,  672,
      671,  674,  653,  673,  675,  675,  678,  654,  679,  673,
      671,  681,    0,  662,  658,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  664,  671,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  681,  664,  664,
      664,  664,  664,  664,  666,  687,  666,  666,  666,  666,
      666,  666,  666,  666,  666,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  664,  664,  664,  664,  664,  664,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  687,

      677,  665,  665,  665,  665,  665,  665,  668,  677,  668,
      668,  668,  668,  668,  668,  668,  668,  668,    0,  688,
        0,    0,    0,    0,    0,  687,  677,  665,  665,  665,
      665,  665,  665,  667,  677,  667,  667,  667,  667,  667,
      667,  667,  667,  667,  667,  688,  667,  667,  667,  667,
      667,  667,  670,  702,  670,  670,  670,  670,  670,  670,
      670,  670,  670,    0,  676,    0,    0,    0,    0,    0,
        0,  676,  667,  667,  667,  667,  667,  667,  669,  702,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      676,  669,  669,  669,  669,  669,  669,  676,  680,  682,

      683,  682,  684,  690,  685,  686,  686,    0,  684,  683,
      685,    0,  690,    0,  680,    0,  689,  669,  669,  669,
      669,  669,  669,  689,  680,  682,  683,  682,  684,  690,
      685,  686,  686,  691,  684,  683,  685,  692,  690,  693,
      680,  694,  689,  698,  700,  697,  699,  699,  718,  689,
      691,  700,  701,  692,  719,  698,  693,  716,  694,  691,
      697,  716,  723,  692,  701,  693,  724,  694,    0,  698,
      700,  697,  699,  699,  718,    0,  691,  700,  701,  692,
      719,  698,  693,  716,  694,  728,  697,  716,  723,    0,
      701,  707,  724,  707,  707,  707,  707,  707,  707,  707,

      707,  707,  707,  730,  707,  707,  707,  707,  707,  707,
      708,  728,  708,  708,  708,  708,  708,  708,  708,  708,
      708,    0,    0,    0,    0,    0,    0,    0,    0,  730,
      707,  707,  707,  707,  707,  707,  709,    0,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  722,  709,
      709,  709,  709,  709,  709,  710,  731,  710,  710,  710,
      710,  710,  710,  710,  710,  710,    0,    0,  722,    0,
        0,    0,    0,    0,  722,  709,  709,  709,  709,  709,
      709,  711,  731,  711,  711,  711,  711,  711,  711,  711,
      711,  711,  711,  713,  722,  713,  713,  713,  713,  713,

      713,  713,  713,  713,  713,    0,  713,  713,  713,  713,
      713,  713,  715,    0,  715,  715,  715,  715,  715,  715,
      715,  715,  715,    0,    0,    0,    0,    0,  735,  717,
        0,  717,  713,  713,  713,  713,  713,  713,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  720,  721,  714,
      714,  714,  714,  714,  714,  717,  725,  717,  726,  727,
        0,  726,  735,  720,  721,    0,  732,    0,  727,    0,
      734,    0,  725,  720,  721,  714,  714,  714,  714,  714,
      714,  733,  725,  732,  726,  727,  734,  726,  735,  720,
      721,  729,  732,  737,  727,  736,  734,  729,  725,  729,

      738,  733,  739,  739,  753,  740,  755,  733,  737,  732,
      761,  736,  734,  740,    0,    0,    0,  729,    0,  737,
        0,  736,    0,  729,    0,  729,  738,  733,  739,  739,
      753,  740,  755,    0,  737,    0,  761,  736,  744,  740,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      746,    0,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  766,  746,  746,  746,  746,  746,  746,  748,
        0,  748,  748,  748,  748,  748,  748,  748,  748,  748,
        0,    0,    0,    0,    0,    0,    0,  792,  766,  746,
      746,  746,  746,  746,  746,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  759,  799,  747,  747,  747,  747,
      747,  747,  750,  792,  750,  750,  750,  750,  750,  750,
      750,  750,  750,    0,  759,    0,    0,    0,    0,    0,
      759,  799,  747,  747,  747,  747,  747,  747,  749,  792,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      759,  749,  749,  749,  749,  749,  749,  752,  800,  752,
      752,  752,  752,  752,  752,  752,  752,  752,    0,  754,
      760,    0,    0,    0,    0,    0,  754,  749,  749,  749,
      749,  749,  749,  751,  800,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  754,  751,  751,  751,  751,

      751,  751,  754,  756,  760,  757,  756,  757,  763,  764,
      767,  762,  764,  765,    0,  765,  767,  768,  768,  786,
        0,  763,  751,  751,  751,  751,  751,  751,  762,  756,
      760,  757,  756,  757,  763,  764,  767,  762,  764,  765,
      769,  765,  767,  768,  768,  771,  770,  763,  770,  817,
      790,  787,  790,  786,  762,  787,  769,  796,  798,  798,
      796,  771,    0,  818,    0,    0,  769,    0,    0,    0,
        0,  771,  770,    0,  770,  817,  790,  787,  790,  786,
        0,  787,  769,  796,  798,  798,  796,  771,  776,  818,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  776,

      819,  776,  776,  776,  776,  776,  776,  777,  823,  777,
      777,  777,  777,  777,  777,  777,  777,  777,    0,  816,
        0,    0,    0,    0,    0,    0,  819,  776,  776,  776,
      776,  776,  776,  778,  823,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  793,  778,  778,  778,  778,
      778,  778,  779,  816,  779,  779,  779,  779,  779,  779,
      779,  779,  779,    0,    0,  793,    0,    0,    0,    0,
        0,  793,  778,  778,  778,  778,  778,  778,  780,  816,
      780,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      782,  793,  782,  782,  782,  782,  782,  782,  782,  782,

      782,  782,    0,  782,  782,  782,  782,  782,  782,  784,
        0,  784,  784,  784,  784,  784,  784,  784,  784,  784,
        0,    0,    0,    0,    0,    0,    0,  826,  785,  782,
      782,  782,  782,  782,  782,  783,  783,  783,  783,  783,
      783,  783,  783,  783,  785,  788,  783,  783,  783,  783,
      783,  783,  789,  826,  785,    0,    0,  797,  821,  814,
      822,  788,  814,  791,  794,  822,  795,  821,  789,  797,
      785,  788,  783,  783,  783,  783,  783,  783,  789,  791,
      794,  791,  795,  797,  821,  814,  822,  788,  814,  791,
      794,  822,  795,  821,  789,  797,  847,    0,    0,    0,

        0,    0,    0,    0,    0,  791,  794,  791,  795,  805,
        0,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      805,  807,  847,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  848,  807,  807,  807,  807,  807,  807,
      809,    0,  809,  809,  809,  809,  809,  809,  809,  809,
      809,    0,    0,    0,  824,  824,  824,    0,  824,  848,
      807,  807,  807,  807,  807,  807,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  849,  852,  808,  808,  808,
      808,  808,  808,  811,  824,  811,  811,  811,  811,  811,
      811,  811,  811,  811,    0,    0,    0,    0,  854,    0,

        0,  849,  852,  808,  808,  808,  808,  808,  808,  810,
      824,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      810,  854,  810,  810,  810,  810,  810,  810,  813,    0,
      813,  813,  813,  813,  813,  813,  813,  813,  813,    0,
      815,    0,    0,    0,    0,    0,    0,  854,  810,  810,
      810,  810,  810,  810,  812,  815,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  812,  815,  812,  812,  812,
      812,  812,  812,  820,  825,  827,  825,  828,  829,  844,
      845,  815,  872,  844,  845,  828,  856,  877,  856,  820,
      829,  878,  827,  812,  812,  812,  812,  812,  812,  820,

      825,  827,  825,  828,  829,  844,  845,    0,  872,  844,
      845,  828,  856,  877,  856,  820,  829,  878,  827,  835,
        0,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  859,  835,  835,  835,  835,  835,  835,  836,  859,
      836,  836,  836,  836,  836,  836,  836,  836,  836,    0,
      882,    0,    0,    0,  855,    0,    0,  859,  835,  835,
      835,  835,  835,  835,  837,  859,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  882,  850,  837,  837,  837,
      837,  837,  837,  838,  855,  838,  838,  838,  838,  838,
      838,  838,  838,  838,    0,    0,  850,    0,    0,    0,

        0,  882,  850,  837,  837,  837,  837,  837,  837,  839,
      855,  839,  839,  839,  839,  839,  839,  839,  839,  839,
      839,  841,  850,  841,  841,  841,  841,  841,  841,  841,
      841,  841,  841,  885,  841,  841,  841,  841,  841,  841,
      843,  851,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  873,  853,  857,  846,  853,  858,  851,  874,  885,
      841,  841,  841,  841,  841,  841,  846,  851,  873,  857,
      887,  898,  858,  846,  846,  880,  874,  873,  898,  857,
      846,  853,  858,  851,  874,    0,    0,    0,    0,    0,
        0,    0,  846,  880,  873,  857,  887,  898,  858,  846,

      846,  880,  874,  881,  898,    0,  865,  853,  865,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  867,  880,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  875,
      881,  867,  867,  867,  867,  867,  867,  868,  903,  868,
      868,  868,  868,  868,  868,  868,  868,  868,    0,  875,
        0,    0,    0,    0,    0,  875,  881,  867,  867,  867,
      867,  867,  867,  869,  903,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  875,  869,  869,  869,  869,
      869,  869,  870,  883,  870,  870,  870,  870,  870,  870,
      870,  870,  870,  876,  879,  884,  879,  886,    0,  876,

      886,  888,  869,  869,  869,  869,  869,  869,  901,  900,
      883,  876,  900,  901,  905,  907,  905,  888,  908,  876,
      879,  909,  879,  886,  884,  876,  886,  888,    0,    0,
        0,    0,    0,    0,  901,  900,  883,  876,  900,  901,
      905,  907,  905,  888,  908,  899,    0,  909,    0,    0,
      884,  893,  922,  893,  893,  893,  893,  893,  893,  893,
      893,  893,  910,  899,  893,  893,  893,  893,  893,  893,
      894,  899,  894,  894,  894,  894,  894,  894,  894,  894,
      894,    0,    0,  911,  912,  920,  922,    0,  910,  899,
      893,  893,  893,  893,  893,  893,  895,  921,  895,  895,

      895,  895,  895,  895,  895,  895,  895,  895,  902,  911,
      912,  920,  922,  921,  906,  906,  902,  906,  906,  906,
      906,  906,  906,  921,  923,  906,  933,    0,  926,  926,
      938,  933,    0,    0,  902,  906,  906,  924,    0,  921,
        0,  917,  902,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  933,  924,  926,  926,  938,  933,  923,  928,
      928,  927,  927,  924,  927,  927,  927,  927,  927,  927,
      934,  936,  927,  935,  937,  937,  928,  936,  935,  924,
      939,    0,  927,  927,  923,  928,  928,  942,  934,  941,
      940,  940,  947,  947,  942,    0,  934,  936,  950,  935,

      937,  937,  928,  936,  935,  948,  939,  940,  951,  941,
      952,  948,  953,  942,  934,  941,  940,  940,  947,  947,
      942,  949,  955,  956,  950,  957,  957,  949,  958,  962,
      956,  948,  963,  940,  951,  941,  952,  948,  953,  963,
      964,  966,  955,  964,  965,  965,  968,  949,  955,  956,
      970,  957,  957,  949,  958,  962,  956,  971,  963,  969,
      969,  977,  977,  978,  979,  963,  964,  966,  955,  964,
      965,  965,  968,  976,  981,  982,  970,  971,  987,  986,
      976,  986,  989,  971,  994,  969,  969,  977,  977,  978,
      979,    0,    0,    0,  981,    0,    0,    0,    0,  976,

      981,  982,    0,  971,  987,  986,  976,  986,  989,    0,
      994,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      981, 1005, 1005, 1005, 1005, 1006, 1006, 1006, 1006, 1007,
     1007, 1007, 1007, 1008,    0, 1008, 1008, 1009, 1009, 1009,
     1009, 1010,    0, 1010, 1010, 1011, 1011, 1013, 1013, 1014,
     1014, 1015, 1015, 1016, 1016, 1017, 1017, 1018, 1018, 1019,
     1019, 1020, 1020, 1021, 1021, 1022, 1022, 1023,    0, 1023,
     1023, 1024, 1024, 1025, 1025, 1026, 1026, 1027, 1027, 1028,
     1028, 1029, 1029, 1030, 1030, 1031, 1031, 1032, 1032, 1033,
     1033, 1034, 1034, 1035, 1035, 1036, 1036, 1037, 1037, 1038,

     1038, 1039, 1039, 1040, 1040, 1041, 1041, 1042, 1042, 1043,
     1043, 1044, 1044, 1045, 1045, 1046, 1046, 1047, 1047, 1048,
     1048, 1049, 1049, 1051, 1051, 1052, 1052, 1053, 1053, 1055,
     1055, 1056, 1056, 1057, 1057, 1060, 1060, 1061, 1061, 1062,
     1062, 1064,    0, 1064, 1064, 1065,    0, 1065, 1065, 1066,
     1066, 1067, 1067, 1070,    0, 1070, 1070, 1071,    0, 1071,
     1071, 1072, 1072, 1073, 1073, 1074, 1074, 1075, 1075, 1076,
     1076, 1078, 1078, 1079, 1079, 1080, 1080, 1081, 1081, 1082,
     1082, 1084, 1084, 1085, 1085, 1086, 1086, 1088, 1088, 1090,
     1090, 1091, 1091, 1092, 1092, 1094, 1094, 1004, 1004, 1004,

     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[122] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SrvLexer.l"
#line 5 "SrvLexer.l"
#ifdef WIN32
#define strncasecmp _strnicmp
#endif

using namespace std;

#include "SrvParser.h"
#include "Portable.h"
#define YYABORT yyterminate();

/* duplicate default definition from flex. This makes cppcheck
   check for defined YY_FATAL_ERROR() go away. */
#define YY_FATAL_ERROR(msg) LexerError(msg)



#line 37 "SrvLexer.l"
using namespace std;
  unsigned ComBeg;    // line, in which comment begins
  unsigned LftCnt;    // how many chars : on the left side of '::' char was interpreted
  unsigned RgtCnt;    // the same as above, but on the right side of '::'
  char Address[16];   // address, which is analizing right now
  char AddrPart[16];
  unsigned intpos,pos;

namespace std{
  yy_SrvParser_stype yylval;
}
#line 2107 "SrvLexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define ADDR 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 50 "SrvLexer.l"


#line 2212 "SrvLexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1005 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5798 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "SrvLexer.l"
; // ignore end of line
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 53 "SrvLexer.l"
; // ignore TABs and spaces
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "SrvLexer.l"
{ return SrvParser::IFACE_;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 56 "SrvLexer.l"
{ return SrvParser::CLASS_;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 57 "SrvLexer.l"
{ return SrvParser::TACLASS_; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 58 "SrvLexer.l"
{ return SrvParser::STATELESS_; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 59 "SrvLexer.l"
{ return SrvParser::RELAY_; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 60 "SrvLexer.l"
{ return SrvParser::IFACE_ID_; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 61 "SrvLexer.l"
{ return SrvParser::IFACE_ID_ORDER_; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 63 "SrvLexer.l"
{ return SrvParser::LOGNAME_;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 64 "SrvLexer.l"
{ return SrvParser::LOGLEVEL_;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 65 "SrvLexer.l"
{ return SrvParser::LOGMODE_; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 66 "SrvLexer.l"
{ return SrvParser::LOGCOLORS_; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "SrvLexer.l"
{ return SrvParser::WORKDIR_;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 70 "SrvLexer.l"
{ return SrvParser::ACCEPT_ONLY_;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 71 "SrvLexer.l"
{ return SrvParser::REJECT_CLIENTS_;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "SrvLexer.l"
{ return SrvParser::T1_;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "SrvLexer.l"
{ return SrvParser::T2_;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "SrvLexer.l"
{ return SrvParser::PREF_TIME_;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "SrvLexer.l"
{ return SrvParser::VALID_TIME_;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "SrvLexer.l"
{ return SrvParser::UNICAST_;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "SrvLexer.l"
{ return SrvParser::PREFERENCE_;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "SrvLexer.l"
{ return SrvParser::POOL_;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "SrvLexer.l"
{ return SrvParser::SHARE_;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "SrvLexer.l"
{ return SrvParser::RAPID_COMMIT_;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "SrvLexer.l"
{ return SrvParser::IFACE_MAX_LEASE_; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "SrvLexer.l"
{ return SrvParser::CLASS_MAX_LEASE_; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "SrvLexer.l"
{ return SrvParser::CLNT_MAX_LEASE_;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "SrvLexer.l"
{ return SrvParser::CLIENT_; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "SrvLexer.l"
{ return SrvParser::DUID_KEYWORD_; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "SrvLexer.l"
{ return SrvParser::REMOTE_ID_; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "SrvLexer.l"
{ return SrvParser::ADDRESS_;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "SrvLexer.l"
{ return SrvParser::GUESS_MODE_; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "SrvLexer.l"
{ return SrvParser::OPTION_; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "SrvLexer.l"
{ return SrvParser::DNS_SERVER_;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "SrvLexer.l"
{ return SrvParser::DOMAIN_;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "SrvLexer.l"
{ return SrvParser::NTP_SERVER_;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "SrvLexer.l"
{ return SrvParser::TIME_ZONE_;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "SrvLexer.l"
{ return SrvParser::SIP_SERVER_; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "SrvLexer.l"
{ return SrvParser::SIP_DOMAIN_; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "SrvLexer.l"
{ return SrvParser::NEXT_HOP_; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "SrvLexer.l"
{ return SrvParser::SUBNET_; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "SrvLexer.l"
{ return SrvParser::ROUTE_; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "SrvLexer.l"
{ return SrvParser::FQDN_; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "SrvLexer.l"
{ return SrvParser::INFINITE_; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "SrvLexer.l"
{ return SrvParser::ACCEPT_UNKNOWN_FQDN_; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "SrvLexer.l"
{ return SrvParser::FQDN_DDNS_ADDRESS_; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 107 "SrvLexer.l"
{ return SrvParser::DDNS_PROTOCOL_; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 108 "SrvLexer.l"
{ return SrvParser::DDNS_TIMEOUT_; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 109 "SrvLexer.l"
{ return SrvParser::NIS_SERVER_; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 110 "SrvLexer.l"
{ return SrvParser::NIS_DOMAIN_; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 111 "SrvLexer.l"
{ return SrvParser::NISP_SERVER_; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 112 "SrvLexer.l"
{ return SrvParser::NISP_DOMAIN_; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 113 "SrvLexer.l"
{ return SrvParser::LIFETIME_; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 114 "SrvLexer.l"
{ return SrvParser::CACHE_SIZE_; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 115 "SrvLexer.l"
{ return SrvParser::PDCLASS_; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 116 "SrvLexer.l"
{ return SrvParser::PD_LENGTH_; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 117 "SrvLexer.l"
{ return SrvParser::PD_POOL_;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 118 "SrvLexer.l"
{ return SrvParser::VENDOR_SPEC_; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 119 "SrvLexer.l"
{ return SrvParser::SCRIPT_; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "SrvLexer.l"
{ return SrvParser::EXPERIMENTAL_; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "SrvLexer.l"
{ return SrvParser::ADDR_PARAMS_; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "SrvLexer.l"
{ return SrvParser::REMOTE_AUTOCONF_NEIGHBORS_; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "SrvLexer.l"
{ return SrvParser::AFTR_; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "SrvLexer.l"
{ return SrvParser::INACTIVE_MODE_; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "SrvLexer.l"
{ return SrvParser::ACCEPT_LEASEQUERY_; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "SrvLexer.l"
{ return SrvParser::BULKLQ_ACCEPT_; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "SrvLexer.l"
{ return SrvParser::BULKLQ_TCPPORT_; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "SrvLexer.l"
{ return SrvParser::BULKLQ_MAX_CONNS_; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "SrvLexer.l"
{ return SrvParser::BULKLQ_TIMEOUT_; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "SrvLexer.l"
{ return SrvParser::AUTH_METHOD_; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "SrvLexer.l"
{ return SrvParser::AUTH_LIFETIME_; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "SrvLexer.l"
{ return SrvParser::AUTH_KEY_LEN_; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "SrvLexer.l"
{ return SrvParser::DIGEST_NONE_; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "SrvLexer.l"
{ return SrvParser::DIGEST_PLAIN_; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_MD5_; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA1_; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA224_; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA256_; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA384_; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "SrvLexer.l"
{ return SrvParser::DIGEST_HMAC_SHA512_; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "SrvLexer.l"
{ return SrvParser::CLIENT_CLASS_; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "SrvLexer.l"
{ return SrvParser::MATCH_IF_; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "SrvLexer.l"
{ return SrvParser::EQ_; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "SrvLexer.l"
{ return SrvParser::AND_; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "SrvLexer.l"
{ return SrvParser::OR_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_SPEC_DATA_; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_EN_; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "SrvLexer.l"
{ return SrvParser::CLIENT_VENDOR_CLASS_DATA_; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "SrvLexer.l"
{ return SrvParser::ALLOW_; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "SrvLexer.l"
{ return SrvParser::DENY_; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "SrvLexer.l"
{ return SrvParser::SUBSTRING_; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "SrvLexer.l"
{ return SrvParser::CONTAIN_; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "SrvLexer.l"
{ return SrvParser::STRING_KEYWORD_; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "SrvLexer.l"
{ return SrvParser::ADDRESS_LIST_; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 160 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 161 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 162 "SrvLexer.l"
{ yylval.ival=1; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 163 "SrvLexer.l"
{ yylval.ival=0; return SrvParser::INTNUMBER_;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 165 "SrvLexer.l"
;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 167 "SrvLexer.l"
;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 169 "SrvLexer.l"
{
  BEGIN(COMMENT);
  ComBeg=yylineno;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 174 "SrvLexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 175 "SrvLexer.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 176 "SrvLexer.l"
{
    Log(Crit) << "Comment not closed. (/* in line " << ComBeg << LogEnd;
  { YYABORT; }
}
	YY_BREAK
 //IPv6 address - various forms

case 107:
YY_RULE_SETUP
#line 183 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 192 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 201 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 210 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 219 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 228 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 237 "SrvLexer.l"
{
    if(!inet_pton6(yytext,yylval.addrval)) {
	Log(Crit) << "Invalid address format: [" << yytext << "]" << LogEnd;
	YYABORT;
    } else {
	return SrvParser::IPV6ADDR_;
    }
}
	YY_BREAK
 //STRING (interface identifier,dns server etc.)

case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 249 "SrvLexer.l"
{
    yylval.strval=new char[strlen(yytext)-1];
    strncpy(yylval.strval, yytext+1, strlen(yytext)-2);
    yylval.strval[strlen(yytext)-2]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 256 "SrvLexer.l"
{
    int len = strlen(yytext);
    if ( ( (len>2) && !strncasecmp("yes",yytext,3) ) ||
	 ( (len>3) && !strncasecmp("true", yytext,4) )
       ) {
       yylval.ival = 1;
       return SrvParser::INTNUMBER_;
   }
    if ( ( (len>1) && !strncasecmp("no",yytext,2) ) ||
	 ( (len>4) && !strncasecmp("false",yytext,5) )
       ) {
       yylval.ival = 0;
       return SrvParser::INTNUMBER_;
    }

    yylval.strval=new char[strlen(yytext)+1];
    strncpy(yylval.strval, yytext, strlen(yytext));
    yylval.strval[strlen(yytext)]=0;
    return SrvParser::STRING_;
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 277 "SrvLexer.l"
{
    // DUID
    int len;
    char * ptr;
    if (strlen(yytext)%2) {
	yytext[1]='0'; //if odd then no-meaning zero at the beginning
	len = strlen(yytext)-1;
	ptr = yytext+1;
    } else {
	len = strlen(yytext)-2;
	ptr = yytext+2;
    }

    //and now there is an even number of hex digits
    yylval.duidval.length = len >> 1;
    yylval.duidval.duid   = new char[len >> 1];
    for (int i=0 ; i<len; i++)
    {
	yylval.duidval.duid[i>>1]<<=4;
	if (!isxdigit(ptr[i])) {
	     Log(Crit) << "DUID parsing failed (" << yytext << ")." << LogEnd;
	     YYABORT;
	}
	if (isalpha(ptr[i])) {
	    yylval.duidval.duid[i>>1]|=toupper(ptr[i])-'A'+10;
	} else {
	    yylval.duidval.duid[i>>1]|=ptr[i]-'0';
	}
   }
   return SrvParser::DUID_;
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 309 "SrvLexer.l"
{
   int len = (strlen(yytext)+1)/3;
   char * pos = 0;
   // Log(Crit) << "#### Detected [" << yytext << "] as DUID [len=" << len << "]" << LogEnd;
   yylval.duidval.length = len;
   yylval.duidval.duid   = new char[len];

   int i=0;
   for (pos = yytext; pos<=yytext+strlen(yytext)-2; pos+=3)
   {
      char x;
      if (isalpha(*pos))
	x = (toupper(*pos)-'A' + 10);
      else
	x = *pos-'0';
      x *= 16;

      if (isalpha(*(pos+1)))
	x += (toupper(*(pos+1))-'A' + 10);
      else
	x += *(pos+1) - '0';
      yylval.duidval.duid[i] = x;
      i++;
   }

   return SrvParser::DUID_;
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 337 "SrvLexer.l"
{
    // HEX NUMBER
    yytext[strlen(yytext)-1]='\n';
    if(!sscanf(yytext,"%x",&(yylval.ival))) {
      Log(Crit) << "Hex value [" << yytext << " parsing failed." << LogEnd;
      YYABORT;
    }
    return SrvParser::HEXNUMBER_;
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 347 "SrvLexer.l"
{
    // DECIMAL NUMBER
    if(!sscanf(yytext,"%u",&(yylval.ival))) {
	Log(Crit) << "Decimal value [" << yytext << " parsing failed." << LogEnd;
	YYABORT;
    }
    return SrvParser::INTNUMBER_;
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 356 "SrvLexer.l"
{ return yytext[0]; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 359 "SrvLexer.l"
ECHO;
	YY_BREAK
#line 3071 "SrvLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ADDR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1005 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1005 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1004);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

//extern "C" int isatty (int ) throw ();

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 359 "SrvLexer.l"



