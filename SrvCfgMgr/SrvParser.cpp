#define YY_SrvParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from SrvParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "../bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "../bison++/bison.cc"
#line 3 "SrvParser.y"

#include <iostream>
#include <string>
#include <stdint.h>
#include <sstream>
#include "Portable.h"
#include "DHCPConst.h"
#include "SmartPtr.h"
#include "Container.h"
#include "SrvParser.h"
#include "SrvParsGlobalOpt.h"
#include "SrvParsClassOpt.h"
#include "SrvParsIfaceOpt.h"
#include "OptAddr.h"
#include "OptAddrLst.h"
#include "OptDomainLst.h"
#include "OptString.h"
#include "OptVendorSpecInfo.h"
#include "OptRtPrefix.h"
#include "SrvOptAddrParams.h"
#include "SrvCfgMgr.h"
#include "SrvCfgTA.h"
#include "SrvCfgPD.h"
#include "SrvCfgClientClass.h"
#include "SrvCfgAddrClass.h"
#include "SrvCfgIface.h"
#include "SrvCfgOptions.h"
#include "DUID.h"
#include "Logger.h"
#include "FQDN.h"
#include "Key.h"
#include "Node.h"
#include "NodeConstant.h"
#include "NodeClientSpecific.h"
#include "NodeOperator.h"

using namespace std;

#define YY_USE_CLASS
#line 44 "SrvParser.y"

#include "FlexLexer.h"
#define YY_SrvParser_MEMBERS  FlexLexer * lex;                                                     \
List(TSrvParsGlobalOpt) ParserOptStack;    /* list of parsed interfaces/IAs/addrs */ \
List(TSrvCfgIface) SrvCfgIfaceLst;         /* list of SrvCfg interfaces */           \
List(TSrvCfgAddrClass) SrvCfgAddrClassLst; /* list of SrvCfg address classes */      \
List(TSrvCfgTA) SrvCfgTALst;               /* list of SrvCfg TA objects */           \
List(TSrvCfgPD) SrvCfgPDLst;		   /* list of SrvCfg PD objects */           \
List(TSrvCfgClientClass) SrvCfgClientClassLst; /* list of SrvCfgClientClass objs */  \
List(TIPv6Addr) PresentAddrLst;            /* address list (used for DNS,NTP,etc.)*/ \
List(std::string) PresentStringLst;             /* string list */                    \
List(Node) NodeClientClassLst;             /* Node list */                           \
List(TFQDN) PresentFQDNLst;                                                          \
SPtr<TIPv6Addr> addr;                                                                \
SPtr<TSIGKey> CurrentKey;                                                            \
DigestTypesLst DigestLst;                                                            \
List(THostRange) PresentRangeLst;                                                    \
List(THostRange) PDLst;                                                              \
List(TSrvCfgOptions) ClientLst;                                                      \
int PDPrefix;                                                                        \
bool IfaceDefined(int ifaceNr);                                                      \
bool IfaceDefined(string ifaceName);                                                 \
bool StartIfaceDeclaration(string iface);                                            \
bool StartIfaceDeclaration(int ifindex);                                             \
bool EndIfaceDeclaration();                                                          \
void StartClassDeclaration();                                                        \
bool EndClassDeclaration();                                                          \
SPtr<TIPv6Addr> getRangeMin(char * addrPacked, int prefix);                          \
SPtr<TIPv6Addr> getRangeMax(char * addrPacked, int prefix);                          \
void StartTAClassDeclaration();                                                      \
bool EndTAClassDeclaration();                                                        \
void StartPDDeclaration();                                                           \
bool EndPDDeclaration();                                                             \
TSrvCfgMgr * CfgMgr;                                                                 \
SPtr<TOpt> nextHop;                                                                  \
virtual ~SrvParser();
#define YY_SrvParser_CONSTRUCTOR_PARAM  yyFlexLexer * lex
#define YY_SrvParser_CONSTRUCTOR_CODE                                                 \
                     ParserOptStack.append(new TSrvParsGlobalOpt());    \
                     this->lex = lex;                                   \
                     CfgMgr = 0;                                        \
                     nextHop = 0;                                       \
                     yynerrs = 0;                                       \
                     yychar = 0;                                        \
                     PDPrefix = 0;

#line 95 "SrvParser.y"
typedef union
{
    unsigned int ival;
    char *strval;
    struct SDuid
    {
	int length;
	char* duid;
    } duidval;
    char addrval[16];
} yy_SrvParser_stype;
#define YY_SrvParser_STYPE yy_SrvParser_stype

#line 88 "../bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_SrvParser_BISON 1

#ifndef YY_SrvParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_SrvParser_COMPATIBILITY 1
 #else
  #define  YY_SrvParser_COMPATIBILITY 0
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_SrvParser_LTYPE
   #define YY_SrvParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_SrvParser_STYPE 
   #define YY_SrvParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_SrvParser_DEBUG
   #define  YY_SrvParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_SrvParser_USE_GOTO
  #define YY_SrvParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_SrvParser_USE_GOTO
 #define YY_SrvParser_USE_GOTO 0
#endif

#ifndef YY_SrvParser_PURE

 #line 130 "../bison++/bison.cc"

#line 130 "../bison++/bison.cc"
/*  YY_SrvParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "../bison++/bison.cc"

#line 134 "../bison++/bison.cc"
/* prefix */
#ifndef YY_SrvParser_DEBUG

 #line 136 "../bison++/bison.cc"
#define YY_SrvParser_DEBUG 1

#line 136 "../bison++/bison.cc"
/* YY_SrvParser_DEBUG */
#endif


#ifndef YY_SrvParser_LSP_NEEDED

 #line 141 "../bison++/bison.cc"

#line 141 "../bison++/bison.cc"
 /* YY_SrvParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_SrvParser_LSP_NEEDED
#ifndef YY_SrvParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_SrvParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_SrvParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_SrvParser_STYPE
#define YY_SrvParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_SrvParser_PARSE
#define YY_SrvParser_PARSE yyparse
#endif
#ifndef YY_SrvParser_LEX
#define YY_SrvParser_LEX yylex
#endif
#ifndef YY_SrvParser_LVAL
#define YY_SrvParser_LVAL yylval
#endif
#ifndef YY_SrvParser_LLOC
#define YY_SrvParser_LLOC yylloc
#endif
#ifndef YY_SrvParser_CHAR
#define YY_SrvParser_CHAR yychar
#endif
#ifndef YY_SrvParser_NERRS
#define YY_SrvParser_NERRS yynerrs
#endif
#ifndef YY_SrvParser_DEBUG_FLAG
#define YY_SrvParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_SrvParser_ERROR
#define YY_SrvParser_ERROR yyerror
#endif

#ifndef YY_SrvParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_SrvParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_SrvParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_SrvParser_PARSE_PARAM
  #define YY_SrvParser_PARSE_PARAM void
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_SrvParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_SrvParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_SrvParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_SrvParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_SrvParser_PURE
#  endif
#endif

#ifdef YY_SrvParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_SrvParser_DEBUG 
#  endif
#endif

#ifndef YY_SrvParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_SrvParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_SrvParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_SrvParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "../bison++/bison.cc"
#define	IFACE_	258
#define	RELAY_	259
#define	IFACE_ID_	260
#define	IFACE_ID_ORDER_	261
#define	CLASS_	262
#define	TACLASS_	263
#define	LOGNAME_	264
#define	LOGLEVEL_	265
#define	LOGMODE_	266
#define	LOGCOLORS_	267
#define	WORKDIR_	268
#define	OPTION_	269
#define	DNS_SERVER_	270
#define	DOMAIN_	271
#define	NTP_SERVER_	272
#define	TIME_ZONE_	273
#define	SIP_SERVER_	274
#define	SIP_DOMAIN_	275
#define	NIS_SERVER_	276
#define	NIS_DOMAIN_	277
#define	NISP_SERVER_	278
#define	NISP_DOMAIN_	279
#define	LIFETIME_	280
#define	FQDN_	281
#define	ACCEPT_UNKNOWN_FQDN_	282
#define	FQDN_DDNS_ADDRESS_	283
#define	DDNS_PROTOCOL_	284
#define	DDNS_TIMEOUT_	285
#define	ACCEPT_ONLY_	286
#define	REJECT_CLIENTS_	287
#define	POOL_	288
#define	SHARE_	289
#define	T1_	290
#define	T2_	291
#define	PREF_TIME_	292
#define	VALID_TIME_	293
#define	UNICAST_	294
#define	PREFERENCE_	295
#define	RAPID_COMMIT_	296
#define	IFACE_MAX_LEASE_	297
#define	CLASS_MAX_LEASE_	298
#define	CLNT_MAX_LEASE_	299
#define	STATELESS_	300
#define	CACHE_SIZE_	301
#define	PDCLASS_	302
#define	PD_LENGTH_	303
#define	PD_POOL_	304
#define	SCRIPT_	305
#define	VENDOR_SPEC_	306
#define	CLIENT_	307
#define	DUID_KEYWORD_	308
#define	REMOTE_ID_	309
#define	LINK_LOCAL_	310
#define	ADDRESS_	311
#define	PREFIX_	312
#define	GUESS_MODE_	313
#define	INACTIVE_MODE_	314
#define	EXPERIMENTAL_	315
#define	ADDR_PARAMS_	316
#define	REMOTE_AUTOCONF_NEIGHBORS_	317
#define	AFTR_	318
#define	AUTH_PROTOCOL_	319
#define	AUTH_ALGORITHM_	320
#define	AUTH_REPLAY_	321
#define	AUTH_METHODS_	322
#define	AUTH_LIFETIME_	323
#define	AUTH_KEY_LEN_	324
#define	AUTH_DROP_UNAUTH_	325
#define	AUTH_REALM_	326
#define	KEY_	327
#define	SECRET_	328
#define	ALGORITHM_	329
#define	FUDGE_	330
#define	DIGEST_NONE_	331
#define	DIGEST_PLAIN_	332
#define	DIGEST_HMAC_MD5_	333
#define	DIGEST_HMAC_SHA1_	334
#define	DIGEST_HMAC_SHA224_	335
#define	DIGEST_HMAC_SHA256_	336
#define	DIGEST_HMAC_SHA384_	337
#define	DIGEST_HMAC_SHA512_	338
#define	ACCEPT_LEASEQUERY_	339
#define	BULKLQ_ACCEPT_	340
#define	BULKLQ_TCPPORT_	341
#define	BULKLQ_MAX_CONNS_	342
#define	BULKLQ_TIMEOUT_	343
#define	CLIENT_CLASS_	344
#define	MATCH_IF_	345
#define	EQ_	346
#define	AND_	347
#define	OR_	348
#define	CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_	349
#define	CLIENT_VENDOR_SPEC_DATA_	350
#define	CLIENT_VENDOR_CLASS_EN_	351
#define	CLIENT_VENDOR_CLASS_DATA_	352
#define	ALLOW_	353
#define	DENY_	354
#define	SUBSTRING_	355
#define	STRING_KEYWORD_	356
#define	ADDRESS_LIST_	357
#define	CONTAIN_	358
#define	NEXT_HOP_	359
#define	ROUTE_	360
#define	INFINITE_	361
#define	SUBNET_	362
#define	STRING_	363
#define	HEXNUMBER_	364
#define	INTNUMBER_	365
#define	IPV6ADDR_	366
#define	DUID_	367


#line 263 "../bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_SrvParser_CLASS
#define YY_SrvParser_CLASS SrvParser
#endif
#ifndef YY_SrvParser_INHERIT
#define YY_SrvParser_INHERIT
#endif
#ifndef YY_SrvParser_MEMBERS
#define YY_SrvParser_MEMBERS 
#endif
#ifndef YY_SrvParser_LEX_BODY
#define YY_SrvParser_LEX_BODY  
#endif
#ifndef YY_SrvParser_ERROR_BODY
#define YY_SrvParser_ERROR_BODY  
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_PARAM
#define YY_SrvParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_CODE
#define YY_SrvParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_INIT
#define YY_SrvParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_SrvParser_USE_CONST_TOKEN
#define YY_SrvParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_SrvParser_USE_CONST_TOKEN != 0
#ifndef YY_SrvParser_ENUM_TOKEN
#define YY_SrvParser_ENUM_TOKEN yy_SrvParser_enum_token
#endif
#endif

class YY_SrvParser_CLASS YY_SrvParser_INHERIT
{
public: 
#if YY_SrvParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "../bison++/bison.cc"
static const int IFACE_;
static const int RELAY_;
static const int IFACE_ID_;
static const int IFACE_ID_ORDER_;
static const int CLASS_;
static const int TACLASS_;
static const int LOGNAME_;
static const int LOGLEVEL_;
static const int LOGMODE_;
static const int LOGCOLORS_;
static const int WORKDIR_;
static const int OPTION_;
static const int DNS_SERVER_;
static const int DOMAIN_;
static const int NTP_SERVER_;
static const int TIME_ZONE_;
static const int SIP_SERVER_;
static const int SIP_DOMAIN_;
static const int NIS_SERVER_;
static const int NIS_DOMAIN_;
static const int NISP_SERVER_;
static const int NISP_DOMAIN_;
static const int LIFETIME_;
static const int FQDN_;
static const int ACCEPT_UNKNOWN_FQDN_;
static const int FQDN_DDNS_ADDRESS_;
static const int DDNS_PROTOCOL_;
static const int DDNS_TIMEOUT_;
static const int ACCEPT_ONLY_;
static const int REJECT_CLIENTS_;
static const int POOL_;
static const int SHARE_;
static const int T1_;
static const int T2_;
static const int PREF_TIME_;
static const int VALID_TIME_;
static const int UNICAST_;
static const int PREFERENCE_;
static const int RAPID_COMMIT_;
static const int IFACE_MAX_LEASE_;
static const int CLASS_MAX_LEASE_;
static const int CLNT_MAX_LEASE_;
static const int STATELESS_;
static const int CACHE_SIZE_;
static const int PDCLASS_;
static const int PD_LENGTH_;
static const int PD_POOL_;
static const int SCRIPT_;
static const int VENDOR_SPEC_;
static const int CLIENT_;
static const int DUID_KEYWORD_;
static const int REMOTE_ID_;
static const int LINK_LOCAL_;
static const int ADDRESS_;
static const int PREFIX_;
static const int GUESS_MODE_;
static const int INACTIVE_MODE_;
static const int EXPERIMENTAL_;
static const int ADDR_PARAMS_;
static const int REMOTE_AUTOCONF_NEIGHBORS_;
static const int AFTR_;
static const int AUTH_PROTOCOL_;
static const int AUTH_ALGORITHM_;
static const int AUTH_REPLAY_;
static const int AUTH_METHODS_;
static const int AUTH_LIFETIME_;
static const int AUTH_KEY_LEN_;
static const int AUTH_DROP_UNAUTH_;
static const int AUTH_REALM_;
static const int KEY_;
static const int SECRET_;
static const int ALGORITHM_;
static const int FUDGE_;
static const int DIGEST_NONE_;
static const int DIGEST_PLAIN_;
static const int DIGEST_HMAC_MD5_;
static const int DIGEST_HMAC_SHA1_;
static const int DIGEST_HMAC_SHA224_;
static const int DIGEST_HMAC_SHA256_;
static const int DIGEST_HMAC_SHA384_;
static const int DIGEST_HMAC_SHA512_;
static const int ACCEPT_LEASEQUERY_;
static const int BULKLQ_ACCEPT_;
static const int BULKLQ_TCPPORT_;
static const int BULKLQ_MAX_CONNS_;
static const int BULKLQ_TIMEOUT_;
static const int CLIENT_CLASS_;
static const int MATCH_IF_;
static const int EQ_;
static const int AND_;
static const int OR_;
static const int CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_;
static const int CLIENT_VENDOR_SPEC_DATA_;
static const int CLIENT_VENDOR_CLASS_EN_;
static const int CLIENT_VENDOR_CLASS_DATA_;
static const int ALLOW_;
static const int DENY_;
static const int SUBSTRING_;
static const int STRING_KEYWORD_;
static const int ADDRESS_LIST_;
static const int CONTAIN_;
static const int NEXT_HOP_;
static const int ROUTE_;
static const int INFINITE_;
static const int SUBNET_;
static const int STRING_;
static const int HEXNUMBER_;
static const int INTNUMBER_;
static const int IPV6ADDR_;
static const int DUID_;


#line 307 "../bison++/bison.cc"
 /* decl const */
#else
enum YY_SrvParser_ENUM_TOKEN { YY_SrvParser_NULL_TOKEN=0

 #line 310 "../bison++/bison.cc"
	,IFACE_=258
	,RELAY_=259
	,IFACE_ID_=260
	,IFACE_ID_ORDER_=261
	,CLASS_=262
	,TACLASS_=263
	,LOGNAME_=264
	,LOGLEVEL_=265
	,LOGMODE_=266
	,LOGCOLORS_=267
	,WORKDIR_=268
	,OPTION_=269
	,DNS_SERVER_=270
	,DOMAIN_=271
	,NTP_SERVER_=272
	,TIME_ZONE_=273
	,SIP_SERVER_=274
	,SIP_DOMAIN_=275
	,NIS_SERVER_=276
	,NIS_DOMAIN_=277
	,NISP_SERVER_=278
	,NISP_DOMAIN_=279
	,LIFETIME_=280
	,FQDN_=281
	,ACCEPT_UNKNOWN_FQDN_=282
	,FQDN_DDNS_ADDRESS_=283
	,DDNS_PROTOCOL_=284
	,DDNS_TIMEOUT_=285
	,ACCEPT_ONLY_=286
	,REJECT_CLIENTS_=287
	,POOL_=288
	,SHARE_=289
	,T1_=290
	,T2_=291
	,PREF_TIME_=292
	,VALID_TIME_=293
	,UNICAST_=294
	,PREFERENCE_=295
	,RAPID_COMMIT_=296
	,IFACE_MAX_LEASE_=297
	,CLASS_MAX_LEASE_=298
	,CLNT_MAX_LEASE_=299
	,STATELESS_=300
	,CACHE_SIZE_=301
	,PDCLASS_=302
	,PD_LENGTH_=303
	,PD_POOL_=304
	,SCRIPT_=305
	,VENDOR_SPEC_=306
	,CLIENT_=307
	,DUID_KEYWORD_=308
	,REMOTE_ID_=309
	,LINK_LOCAL_=310
	,ADDRESS_=311
	,PREFIX_=312
	,GUESS_MODE_=313
	,INACTIVE_MODE_=314
	,EXPERIMENTAL_=315
	,ADDR_PARAMS_=316
	,REMOTE_AUTOCONF_NEIGHBORS_=317
	,AFTR_=318
	,AUTH_PROTOCOL_=319
	,AUTH_ALGORITHM_=320
	,AUTH_REPLAY_=321
	,AUTH_METHODS_=322
	,AUTH_LIFETIME_=323
	,AUTH_KEY_LEN_=324
	,AUTH_DROP_UNAUTH_=325
	,AUTH_REALM_=326
	,KEY_=327
	,SECRET_=328
	,ALGORITHM_=329
	,FUDGE_=330
	,DIGEST_NONE_=331
	,DIGEST_PLAIN_=332
	,DIGEST_HMAC_MD5_=333
	,DIGEST_HMAC_SHA1_=334
	,DIGEST_HMAC_SHA224_=335
	,DIGEST_HMAC_SHA256_=336
	,DIGEST_HMAC_SHA384_=337
	,DIGEST_HMAC_SHA512_=338
	,ACCEPT_LEASEQUERY_=339
	,BULKLQ_ACCEPT_=340
	,BULKLQ_TCPPORT_=341
	,BULKLQ_MAX_CONNS_=342
	,BULKLQ_TIMEOUT_=343
	,CLIENT_CLASS_=344
	,MATCH_IF_=345
	,EQ_=346
	,AND_=347
	,OR_=348
	,CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=349
	,CLIENT_VENDOR_SPEC_DATA_=350
	,CLIENT_VENDOR_CLASS_EN_=351
	,CLIENT_VENDOR_CLASS_DATA_=352
	,ALLOW_=353
	,DENY_=354
	,SUBSTRING_=355
	,STRING_KEYWORD_=356
	,ADDRESS_LIST_=357
	,CONTAIN_=358
	,NEXT_HOP_=359
	,ROUTE_=360
	,INFINITE_=361
	,SUBNET_=362
	,STRING_=363
	,HEXNUMBER_=364
	,INTNUMBER_=365
	,IPV6ADDR_=366
	,DUID_=367


#line 310 "../bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_SrvParser_PARSE (YY_SrvParser_PARSE_PARAM);
 virtual void YY_SrvParser_ERROR(char *msg) YY_SrvParser_ERROR_BODY;
#ifdef YY_SrvParser_PURE
#ifdef YY_SrvParser_LSP_NEEDED
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL,YY_SrvParser_LTYPE *YY_SrvParser_LLOC) YY_SrvParser_LEX_BODY;
#else
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL) YY_SrvParser_LEX_BODY;
#endif
#else
 virtual int YY_SrvParser_LEX() YY_SrvParser_LEX_BODY;
 YY_SrvParser_STYPE YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
 YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
 int   YY_SrvParser_NERRS;
 int    YY_SrvParser_CHAR;
#endif
#if YY_SrvParser_DEBUG != 0
 int YY_SrvParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM);
public:
 YY_SrvParser_MEMBERS 
};
/* other declare folow */
#if YY_SrvParser_USE_CONST_TOKEN != 0

 #line 341 "../bison++/bison.cc"
const int YY_SrvParser_CLASS::IFACE_=258;
const int YY_SrvParser_CLASS::RELAY_=259;
const int YY_SrvParser_CLASS::IFACE_ID_=260;
const int YY_SrvParser_CLASS::IFACE_ID_ORDER_=261;
const int YY_SrvParser_CLASS::CLASS_=262;
const int YY_SrvParser_CLASS::TACLASS_=263;
const int YY_SrvParser_CLASS::LOGNAME_=264;
const int YY_SrvParser_CLASS::LOGLEVEL_=265;
const int YY_SrvParser_CLASS::LOGMODE_=266;
const int YY_SrvParser_CLASS::LOGCOLORS_=267;
const int YY_SrvParser_CLASS::WORKDIR_=268;
const int YY_SrvParser_CLASS::OPTION_=269;
const int YY_SrvParser_CLASS::DNS_SERVER_=270;
const int YY_SrvParser_CLASS::DOMAIN_=271;
const int YY_SrvParser_CLASS::NTP_SERVER_=272;
const int YY_SrvParser_CLASS::TIME_ZONE_=273;
const int YY_SrvParser_CLASS::SIP_SERVER_=274;
const int YY_SrvParser_CLASS::SIP_DOMAIN_=275;
const int YY_SrvParser_CLASS::NIS_SERVER_=276;
const int YY_SrvParser_CLASS::NIS_DOMAIN_=277;
const int YY_SrvParser_CLASS::NISP_SERVER_=278;
const int YY_SrvParser_CLASS::NISP_DOMAIN_=279;
const int YY_SrvParser_CLASS::LIFETIME_=280;
const int YY_SrvParser_CLASS::FQDN_=281;
const int YY_SrvParser_CLASS::ACCEPT_UNKNOWN_FQDN_=282;
const int YY_SrvParser_CLASS::FQDN_DDNS_ADDRESS_=283;
const int YY_SrvParser_CLASS::DDNS_PROTOCOL_=284;
const int YY_SrvParser_CLASS::DDNS_TIMEOUT_=285;
const int YY_SrvParser_CLASS::ACCEPT_ONLY_=286;
const int YY_SrvParser_CLASS::REJECT_CLIENTS_=287;
const int YY_SrvParser_CLASS::POOL_=288;
const int YY_SrvParser_CLASS::SHARE_=289;
const int YY_SrvParser_CLASS::T1_=290;
const int YY_SrvParser_CLASS::T2_=291;
const int YY_SrvParser_CLASS::PREF_TIME_=292;
const int YY_SrvParser_CLASS::VALID_TIME_=293;
const int YY_SrvParser_CLASS::UNICAST_=294;
const int YY_SrvParser_CLASS::PREFERENCE_=295;
const int YY_SrvParser_CLASS::RAPID_COMMIT_=296;
const int YY_SrvParser_CLASS::IFACE_MAX_LEASE_=297;
const int YY_SrvParser_CLASS::CLASS_MAX_LEASE_=298;
const int YY_SrvParser_CLASS::CLNT_MAX_LEASE_=299;
const int YY_SrvParser_CLASS::STATELESS_=300;
const int YY_SrvParser_CLASS::CACHE_SIZE_=301;
const int YY_SrvParser_CLASS::PDCLASS_=302;
const int YY_SrvParser_CLASS::PD_LENGTH_=303;
const int YY_SrvParser_CLASS::PD_POOL_=304;
const int YY_SrvParser_CLASS::SCRIPT_=305;
const int YY_SrvParser_CLASS::VENDOR_SPEC_=306;
const int YY_SrvParser_CLASS::CLIENT_=307;
const int YY_SrvParser_CLASS::DUID_KEYWORD_=308;
const int YY_SrvParser_CLASS::REMOTE_ID_=309;
const int YY_SrvParser_CLASS::LINK_LOCAL_=310;
const int YY_SrvParser_CLASS::ADDRESS_=311;
const int YY_SrvParser_CLASS::PREFIX_=312;
const int YY_SrvParser_CLASS::GUESS_MODE_=313;
const int YY_SrvParser_CLASS::INACTIVE_MODE_=314;
const int YY_SrvParser_CLASS::EXPERIMENTAL_=315;
const int YY_SrvParser_CLASS::ADDR_PARAMS_=316;
const int YY_SrvParser_CLASS::REMOTE_AUTOCONF_NEIGHBORS_=317;
const int YY_SrvParser_CLASS::AFTR_=318;
const int YY_SrvParser_CLASS::AUTH_PROTOCOL_=319;
const int YY_SrvParser_CLASS::AUTH_ALGORITHM_=320;
const int YY_SrvParser_CLASS::AUTH_REPLAY_=321;
const int YY_SrvParser_CLASS::AUTH_METHODS_=322;
const int YY_SrvParser_CLASS::AUTH_LIFETIME_=323;
const int YY_SrvParser_CLASS::AUTH_KEY_LEN_=324;
const int YY_SrvParser_CLASS::AUTH_DROP_UNAUTH_=325;
const int YY_SrvParser_CLASS::AUTH_REALM_=326;
const int YY_SrvParser_CLASS::KEY_=327;
const int YY_SrvParser_CLASS::SECRET_=328;
const int YY_SrvParser_CLASS::ALGORITHM_=329;
const int YY_SrvParser_CLASS::FUDGE_=330;
const int YY_SrvParser_CLASS::DIGEST_NONE_=331;
const int YY_SrvParser_CLASS::DIGEST_PLAIN_=332;
const int YY_SrvParser_CLASS::DIGEST_HMAC_MD5_=333;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA1_=334;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA224_=335;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA256_=336;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA384_=337;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA512_=338;
const int YY_SrvParser_CLASS::ACCEPT_LEASEQUERY_=339;
const int YY_SrvParser_CLASS::BULKLQ_ACCEPT_=340;
const int YY_SrvParser_CLASS::BULKLQ_TCPPORT_=341;
const int YY_SrvParser_CLASS::BULKLQ_MAX_CONNS_=342;
const int YY_SrvParser_CLASS::BULKLQ_TIMEOUT_=343;
const int YY_SrvParser_CLASS::CLIENT_CLASS_=344;
const int YY_SrvParser_CLASS::MATCH_IF_=345;
const int YY_SrvParser_CLASS::EQ_=346;
const int YY_SrvParser_CLASS::AND_=347;
const int YY_SrvParser_CLASS::OR_=348;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=349;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_DATA_=350;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_EN_=351;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_DATA_=352;
const int YY_SrvParser_CLASS::ALLOW_=353;
const int YY_SrvParser_CLASS::DENY_=354;
const int YY_SrvParser_CLASS::SUBSTRING_=355;
const int YY_SrvParser_CLASS::STRING_KEYWORD_=356;
const int YY_SrvParser_CLASS::ADDRESS_LIST_=357;
const int YY_SrvParser_CLASS::CONTAIN_=358;
const int YY_SrvParser_CLASS::NEXT_HOP_=359;
const int YY_SrvParser_CLASS::ROUTE_=360;
const int YY_SrvParser_CLASS::INFINITE_=361;
const int YY_SrvParser_CLASS::SUBNET_=362;
const int YY_SrvParser_CLASS::STRING_=363;
const int YY_SrvParser_CLASS::HEXNUMBER_=364;
const int YY_SrvParser_CLASS::INTNUMBER_=365;
const int YY_SrvParser_CLASS::IPV6ADDR_=366;
const int YY_SrvParser_CLASS::DUID_=367;


#line 341 "../bison++/bison.cc"
 /* const YY_SrvParser_CLASS::token */
#endif
/*apres const  */
YY_SrvParser_CLASS::YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM) YY_SrvParser_CONSTRUCTOR_INIT
{
#if YY_SrvParser_DEBUG != 0
YY_SrvParser_DEBUG_FLAG=0;
#endif
YY_SrvParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "../bison++/bison.cc"


#define	YYFINAL		501
#define	YYFLAG		-32768
#define	YYNTBASE	121

#define YYTRANSLATE(x) ((unsigned)(x) <= 367 ? yytranslate[x] : 261)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   119,
   120,     2,     2,   118,   116,     2,   117,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,   115,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   113,     2,   114,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112
};

#if YY_SrvParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,    10,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
    81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
   101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
   121,   123,   125,   127,   129,   131,   132,   139,   140,   147,
   149,   152,   154,   156,   158,   160,   163,   166,   169,   172,
   173,   174,   183,   185,   188,   190,   192,   194,   198,   202,
   206,   210,   214,   215,   223,   224,   234,   235,   243,   245,
   248,   250,   252,   254,   256,   258,   260,   262,   264,   266,
   268,   270,   272,   274,   276,   278,   280,   283,   288,   289,
   295,   297,   300,   301,   307,   309,   312,   314,   316,   318,
   320,   322,   324,   326,   328,   329,   335,   337,   340,   342,
   344,   346,   348,   350,   352,   354,   356,   357,   364,   367,
   369,   372,   379,   384,   391,   394,   397,   400,   403,   404,
   408,   410,   414,   416,   418,   420,   422,   424,   426,   428,
   430,   433,   436,   439,   441,   445,   449,   453,   459,   465,
   467,   469,   471,   475,   481,   489,   491,   495,   497,   501,
   505,   509,   515,   519,   521,   525,   529,   535,   537,   541,
   545,   551,   552,   556,   557,   561,   562,   566,   567,   571,
   574,   577,   582,   585,   590,   593,   596,   601,   604,   609,
   612,   615,   618,   622,   627,   632,   633,   639,   644,   645,
   650,   653,   656,   659,   662,   665,   668,   671,   674,   677,
   679,   681,   684,   686,   688,   691,   694,   696,   699,   702,
   705,   708,   711,   714,   717,   720,   723,   726,   731,   736,
   738,   740,   742,   744,   746,   748,   750,   752,   754,   756,
   758,   760,   763,   766,   767,   772,   773,   778,   779,   784,
   788,   789,   794,   795,   800,   801,   806,   807,   813,   814,
   821,   825,   828,   831,   834,   837,   838,   843,   844,   849,
   853,   857,   861,   862,   867,   868,   875,   878,   879,   885,
   891,   897,   903,   905,   907,   909,   911,   913,   915
};

static const short yyrhs[] = {   122,
     0,     0,   123,     0,   125,     0,   122,   123,     0,   122,
   125,     0,   124,     0,   206,     0,   205,     0,   207,     0,
   208,     0,   209,     0,   210,     0,   216,     0,   160,     0,
   161,     0,   162,     0,   163,     0,   164,     0,   169,     0,
   170,     0,   168,     0,   214,     0,   215,     0,   244,     0,
   245,     0,   246,     0,   211,     0,   256,     0,   129,     0,
   212,     0,   225,     0,   222,     0,   223,     0,   217,     0,
   218,     0,   219,     0,   220,     0,   221,     0,   202,     0,
   204,     0,   203,     0,   201,     0,   193,     0,   228,     0,
   230,     0,   232,     0,   234,     0,   235,     0,   237,     0,
   239,     0,   243,     0,   247,     0,   251,     0,   249,     0,
   252,     0,   196,     0,   253,     0,   197,     0,   199,     0,
   152,     0,   254,     0,   137,     0,   213,     0,   224,     0,
     0,     3,   108,   113,   126,   128,   114,     0,     0,     3,
   172,   113,   127,   128,   114,     0,   124,     0,   128,   124,
     0,   145,     0,   148,     0,   156,     0,   159,     0,   128,
   148,     0,   128,   145,     0,   128,   156,     0,   128,   159,
     0,     0,     0,    72,   108,   113,   130,   132,   114,   131,
   115,     0,   133,     0,   132,   133,     0,   136,     0,   134,
     0,   135,     0,    73,   108,   115,     0,    75,   172,   115,
     0,    74,    81,   115,     0,    74,    79,   115,     0,    74,
    78,   115,     0,     0,    52,    53,   112,   113,   138,   141,
   114,     0,     0,    52,    54,   172,   116,   112,   113,   139,
   141,   114,     0,     0,    52,    55,   111,   113,   140,   141,
   114,     0,   142,     0,   141,   142,     0,   228,     0,   230,
     0,   232,     0,   234,     0,   235,     0,   237,     0,   247,
     0,   251,     0,   249,     0,   252,     0,   253,     0,   254,
     0,   197,     0,   196,     0,   143,     0,   144,     0,    56,
   111,     0,    57,   111,   117,   172,     0,     0,     7,   113,
   146,   147,   114,     0,   225,     0,   147,   225,     0,     0,
     8,   113,   149,   150,   114,     0,   151,     0,   150,   151,
     0,   188,     0,   189,     0,   183,     0,   194,     0,   179,
     0,   181,     0,   226,     0,   227,     0,     0,    47,   113,
   153,   154,   114,     0,   155,     0,   155,   154,     0,   187,
     0,   185,     0,   189,     0,   188,     0,   191,     0,   192,
     0,   226,     0,   227,     0,     0,   104,   111,   113,   157,
   158,   114,     0,   104,   111,     0,   159,     0,   158,   159,
     0,   105,   111,   117,   110,    25,   110,     0,   105,   111,
   117,   110,     0,   105,   111,   117,   110,    25,   106,     0,
    64,   108,     0,    65,   108,     0,    66,   108,     0,    71,
   108,     0,     0,    67,   165,   166,     0,   167,     0,   166,
   118,   167,     0,    76,     0,    77,     0,    78,     0,    79,
     0,    80,     0,    81,     0,    82,     0,    83,     0,    70,
   172,     0,    68,   172,     0,    69,   172,     0,   108,     0,
   108,   116,   112,     0,   108,   116,   111,     0,   171,   118,
   108,     0,   171,   118,   108,   116,   112,     0,   171,   118,
   108,   116,   111,     0,   109,     0,   110,     0,   111,     0,
   173,   118,   111,     0,   172,   116,   172,   116,   112,     0,
   174,   118,   172,   116,   172,   116,   112,     0,   108,     0,
   175,   118,   108,     0,   111,     0,   111,   116,   111,     0,
   111,   117,   110,     0,   176,   118,   111,     0,   176,   118,
   111,   116,   111,     0,   111,   117,   110,     0,   111,     0,
   111,   116,   111,     0,   178,   118,   111,     0,   178,   118,
   111,   116,   111,     0,   112,     0,   112,   116,   112,     0,
   178,   118,   112,     0,   178,   118,   112,   116,   112,     0,
     0,    32,   180,   178,     0,     0,    31,   182,   178,     0,
     0,    33,   184,   176,     0,     0,    49,   186,   177,     0,
    48,   172,     0,    37,   172,     0,    37,   172,   116,   172,
     0,    38,   172,     0,    38,   172,   116,   172,     0,    34,
   172,     0,    35,   172,     0,    35,   172,   116,   172,     0,
    36,   172,     0,    36,   172,   116,   172,     0,    44,   172,
     0,    43,   172,     0,    61,   172,     0,    14,    63,   108,
     0,    14,   172,    53,   112,     0,    14,   172,    56,   111,
     0,     0,    14,   172,   102,   198,   173,     0,    14,   172,
   101,   108,     0,     0,    14,    62,   200,   173,     0,    42,
   172,     0,    39,   111,     0,    41,   172,     0,    40,   172,
     0,    10,   172,     0,    11,   108,     0,     9,   108,     0,
    12,   172,     0,    13,   108,     0,    45,     0,    58,     0,
    50,   108,     0,    59,     0,    60,     0,     6,   108,     0,
    46,   172,     0,    84,     0,    84,   172,     0,    85,   172,
     0,    86,   172,     0,    87,   172,     0,    88,   172,     0,
     4,   108,     0,     4,   172,     0,     5,   172,     0,     5,
   112,     0,     5,   108,     0,   107,   111,   117,   172,     0,
   107,   111,   116,   111,     0,   188,     0,   189,     0,   183,
     0,   190,     0,   191,     0,   192,     0,   179,     0,   181,
     0,   194,     0,   195,     0,   226,     0,   227,     0,    98,
   108,     0,    99,   108,     0,     0,    14,    15,   229,   173,
     0,     0,    14,    16,   231,   175,     0,     0,    14,    17,
   233,   173,     0,    14,    18,   108,     0,     0,    14,    19,
   236,   173,     0,     0,    14,    20,   238,   175,     0,     0,
    14,    26,   240,   171,     0,     0,    14,    26,   110,   241,
   171,     0,     0,    14,    26,   110,   110,   242,   171,     0,
    27,   172,   108,     0,    27,   172,     0,    28,   111,     0,
    29,   108,     0,    30,   172,     0,     0,    14,    21,   248,
   173,     0,     0,    14,    23,   250,   173,     0,    14,    22,
   108,     0,    14,    24,   108,     0,    14,    25,   172,     0,
     0,    14,    51,   255,   174,     0,     0,    89,   108,   113,
   257,   258,   114,     0,    90,   259,     0,     0,   119,   260,
   103,   260,   120,     0,   119,   260,    91,   260,   120,     0,
   119,   259,    92,   259,   120,     0,   119,   259,    93,   259,
   120,     0,    94,     0,    95,     0,    96,     0,    97,     0,
   108,     0,   172,     0,   100,   119,   260,   118,   172,   118,
   172,   120,     0
};

#endif

#if (YY_SrvParser_DEBUG != 0) || defined(YY_SrvParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   161,   162,   166,   167,   168,   169,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
   197,   201,   202,   203,   204,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   230,   231,   232,   233,   234,   239,   244,   252,   257,   263,
   264,   265,   266,   267,   268,   269,   270,   271,   272,   276,
   281,   301,   304,   305,   309,   310,   311,   315,   322,   328,
   329,   330,   335,   341,   349,   355,   363,   369,   378,   379,
   383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
   393,   394,   395,   396,   397,   398,   401,   409,   418,   423,
   431,   432,   437,   440,   448,   449,   453,   454,   455,   456,
   457,   458,   459,   460,   464,   467,   475,   476,   479,   480,
   481,   482,   483,   484,   485,   486,   493,   500,   506,   515,
   516,   519,   529,   538,   549,   567,   573,   585,   590,   593,
   600,   601,   605,   606,   607,   608,   609,   610,   611,   612,
   617,   622,   626,   638,   643,   650,   656,   661,   667,   676,
   677,   681,   685,   692,   700,   710,   711,   715,   719,   728,
   744,   748,   760,   783,   787,   796,   800,   809,   815,   827,
   833,   847,   851,   857,   861,   867,   871,   877,   880,   885,
   892,   897,   905,   910,   918,   930,   935,   943,   948,   956,
   963,   970,   983,   991,   997,  1005,  1009,  1014,  1022,  1033,
  1042,  1049,  1056,  1071,  1083,  1089,  1094,  1101,  1107,  1114,
  1121,  1128,  1135,  1141,  1148,  1169,  1180,  1185,  1201,  1212,
  1218,  1224,  1233,  1237,  1244,  1249,  1254,  1262,  1275,  1285,
  1286,  1287,  1288,  1289,  1290,  1291,  1292,  1293,  1294,  1295,
  1296,  1300,  1329,  1362,  1366,  1378,  1381,  1392,  1396,  1407,
  1419,  1422,  1433,  1436,  1448,  1456,  1459,  1482,  1486,  1514,
  1521,  1526,  1534,  1542,  1559,  1569,  1572,  1583,  1586,  1597,
  1609,  1620,  1631,  1633,  1640,  1643,  1653,  1659,  1659,  1667,
  1676,  1685,  1696,  1700,  1704,  1708,  1712,  1717,  1726
};

static const char * const yytname[] = {   "$","error","$illegal.","IFACE_","RELAY_",
"IFACE_ID_","IFACE_ID_ORDER_","CLASS_","TACLASS_","LOGNAME_","LOGLEVEL_","LOGMODE_",
"LOGCOLORS_","WORKDIR_","OPTION_","DNS_SERVER_","DOMAIN_","NTP_SERVER_","TIME_ZONE_",
"SIP_SERVER_","SIP_DOMAIN_","NIS_SERVER_","NIS_DOMAIN_","NISP_SERVER_","NISP_DOMAIN_",
"LIFETIME_","FQDN_","ACCEPT_UNKNOWN_FQDN_","FQDN_DDNS_ADDRESS_","DDNS_PROTOCOL_",
"DDNS_TIMEOUT_","ACCEPT_ONLY_","REJECT_CLIENTS_","POOL_","SHARE_","T1_","T2_",
"PREF_TIME_","VALID_TIME_","UNICAST_","PREFERENCE_","RAPID_COMMIT_","IFACE_MAX_LEASE_",
"CLASS_MAX_LEASE_","CLNT_MAX_LEASE_","STATELESS_","CACHE_SIZE_","PDCLASS_","PD_LENGTH_",
"PD_POOL_","SCRIPT_","VENDOR_SPEC_","CLIENT_","DUID_KEYWORD_","REMOTE_ID_","LINK_LOCAL_",
"ADDRESS_","PREFIX_","GUESS_MODE_","INACTIVE_MODE_","EXPERIMENTAL_","ADDR_PARAMS_",
"REMOTE_AUTOCONF_NEIGHBORS_","AFTR_","AUTH_PROTOCOL_","AUTH_ALGORITHM_","AUTH_REPLAY_",
"AUTH_METHODS_","AUTH_LIFETIME_","AUTH_KEY_LEN_","AUTH_DROP_UNAUTH_","AUTH_REALM_",
"KEY_","SECRET_","ALGORITHM_","FUDGE_","DIGEST_NONE_","DIGEST_PLAIN_","DIGEST_HMAC_MD5_",
"DIGEST_HMAC_SHA1_","DIGEST_HMAC_SHA224_","DIGEST_HMAC_SHA256_","DIGEST_HMAC_SHA384_",
"DIGEST_HMAC_SHA512_","ACCEPT_LEASEQUERY_","BULKLQ_ACCEPT_","BULKLQ_TCPPORT_",
"BULKLQ_MAX_CONNS_","BULKLQ_TIMEOUT_","CLIENT_CLASS_","MATCH_IF_","EQ_","AND_",
"OR_","CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_","CLIENT_VENDOR_SPEC_DATA_","CLIENT_VENDOR_CLASS_EN_",
"CLIENT_VENDOR_CLASS_DATA_","ALLOW_","DENY_","SUBSTRING_","STRING_KEYWORD_",
"ADDRESS_LIST_","CONTAIN_","NEXT_HOP_","ROUTE_","INFINITE_","SUBNET_","STRING_",
"HEXNUMBER_","INTNUMBER_","IPV6ADDR_","DUID_","'{'","'}'","';'","'-'","'/'",
"','","'('","')'","Grammar","GlobalDeclarationList","GlobalOption","InterfaceOptionDeclaration",
"InterfaceDeclaration","@1","@2","InterfaceDeclarationsList","Key","@3","@4",
"KeyOptions","KeyOption","KeySecret","KeyFudge","KeyAlgorithm","Client","@5",
"@6","@7","ClientOptions","ClientOption","AddressReservation","PrefixReservation",
"ClassDeclaration","@8","ClassOptionDeclarationsList","TAClassDeclaration","@9",
"TAClassOptionsList","TAClassOption","PDDeclaration","@10","PDOptionsList","PDOptions",
"NextHopDeclaration","@11","RouteList","Route","AuthProtocol","AuthAlgorithm",
"AuthReplay","AuthRealm","AuthMethods","@12","DigestList","Digest","AuthDropUnauthenticated",
"AuthLifetime","AuthKeyGenNonceLen","FQDNList","Number","ADDRESSList","VendorSpecList",
"StringList","ADDRESSRangeList","PDRangeList","ADDRESSDUIDRangeList","RejectClientsOption",
"@13","AcceptOnlyOption","@14","PoolOption","@15","PDPoolOption","@16","PDLength",
"PreferredTimeOption","ValidTimeOption","ShareOption","T1Option","T2Option",
"ClntMaxLeaseOption","ClassMaxLeaseOption","AddrParams","DsLiteAftrName","ExtraOption",
"@17","RemoteAutoconfNeighborsOption","@18","IfaceMaxLeaseOption","UnicastAddressOption",
"RapidCommitOption","PreferenceOption","LogLevelOption","LogModeOption","LogNameOption",
"LogColors","WorkDirOption","StatelessOption","GuessMode","ScriptName","InactiveMode",
"Experimental","IfaceIDOrder","CacheSizeOption","AcceptLeaseQuery","BulkLeaseQueryAccept",
"BulkLeaseQueryTcpPort","BulkLeaseQueryMaxConns","BulkLeaseQueryTimeout","RelayOption",
"InterfaceIDOption","Subnet","ClassOptionDeclaration","AllowClientClassDeclaration",
"DenyClientClassDeclaration","DNSServerOption","@19","DomainOption","@20","NTPServerOption",
"@21","TimeZoneOption","SIPServerOption","@22","SIPDomainOption","@23","FQDNOption",
"@24","@25","@26","AcceptUnknownFQDN","FqdnDdnsAddress","DdnsProtocol","DdnsTimeout",
"NISServerOption","@27","NISPServerOption","@28","NISDomainOption","NISPDomainOption",
"LifetimeOption","VendorSpecOption","@29","ClientClass","@30","ClientClassDecleration",
"Condition","Expr",""
};
#endif

static const short yyr1[] = {     0,
   121,   121,   122,   122,   122,   122,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   126,   125,   127,   125,   128,
   128,   128,   128,   128,   128,   128,   128,   128,   128,   130,
   131,   129,   132,   132,   133,   133,   133,   134,   135,   136,
   136,   136,   138,   137,   139,   137,   140,   137,   141,   141,
   142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   143,   144,   146,   145,
   147,   147,   149,   148,   150,   150,   151,   151,   151,   151,
   151,   151,   151,   151,   153,   152,   154,   154,   155,   155,
   155,   155,   155,   155,   155,   155,   157,   156,   156,   158,
   158,   159,   159,   159,   160,   161,   162,   163,   165,   164,
   166,   166,   167,   167,   167,   167,   167,   167,   167,   167,
   168,   169,   170,   171,   171,   171,   171,   171,   171,   172,
   172,   173,   173,   174,   174,   175,   175,   176,   176,   176,
   176,   176,   177,   178,   178,   178,   178,   178,   178,   178,
   178,   180,   179,   182,   181,   184,   183,   186,   185,   187,
   188,   188,   189,   189,   190,   191,   191,   192,   192,   193,
   194,   195,   196,   197,   197,   198,   197,   197,   200,   199,
   201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   217,   218,   219,
   220,   221,   222,   222,   223,   223,   223,   224,   224,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   226,   227,   229,   228,   231,   230,   233,   232,   234,
   236,   235,   238,   237,   240,   239,   241,   239,   242,   239,
   243,   243,   244,   245,   246,   248,   247,   250,   249,   251,
   252,   253,   255,   254,   257,   256,   258,   259,   259,   259,
   259,   259,   260,   260,   260,   260,   260,   260,   260
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     0,     6,     0,     6,     1,
     2,     1,     1,     1,     1,     2,     2,     2,     2,     0,
     0,     8,     1,     2,     1,     1,     1,     3,     3,     3,
     3,     3,     0,     7,     0,     9,     0,     7,     1,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     4,     0,     5,
     1,     2,     0,     5,     1,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     0,     5,     1,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     0,     6,     2,     1,
     2,     6,     4,     6,     2,     2,     2,     2,     0,     3,
     1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
     2,     2,     2,     1,     3,     3,     3,     5,     5,     1,
     1,     1,     3,     5,     7,     1,     3,     1,     3,     3,
     3,     5,     3,     1,     3,     3,     5,     1,     3,     3,
     5,     0,     3,     0,     3,     0,     3,     0,     3,     2,
     2,     4,     2,     4,     2,     2,     4,     2,     4,     2,
     2,     2,     3,     4,     4,     0,     5,     4,     0,     4,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     1,     2,     1,     1,     2,     2,     1,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     4,     4,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     2,     0,     4,     0,     4,     0,     4,     3,
     0,     4,     0,     4,     0,     4,     0,     5,     0,     6,
     3,     2,     2,     2,     2,     0,     4,     0,     4,     3,
     3,     3,     0,     4,     0,     6,     2,     0,     5,     5,
     5,     5,     1,     1,     1,     1,     1,     1,     8
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   204,   202,   206,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   240,     0,
     0,     0,     0,   241,   243,   244,     0,     0,     0,     0,
   159,     0,     0,     0,     0,     0,   247,     0,     0,     0,
     0,     0,     0,     0,     0,     1,     3,     7,     4,    30,
    63,    61,    15,    16,    17,    18,    19,    22,    20,    21,
   266,   267,   262,   260,   261,   263,   264,   265,    44,   268,
   269,    57,    59,    60,    43,    40,    42,    41,     9,     8,
    10,    11,    12,    13,    28,    31,    64,    23,    24,    14,
    35,    36,    37,    38,    39,    33,    34,    65,    32,   270,
   271,    45,    46,    47,    48,    49,    50,    51,    52,    25,
    26,    27,    53,    55,    54,    56,    58,    62,    29,     0,
   180,   181,     0,   253,   254,   257,   256,   255,   245,   237,
   235,   236,   238,   239,   274,   276,   278,     0,   281,   283,
   296,     0,   298,     0,     0,   285,   303,   229,     0,     0,
   292,   293,   294,   295,     0,     0,     0,   215,   216,   218,
   211,   213,   232,   234,   233,   231,   221,   220,   246,   135,
   242,     0,     0,     0,   222,   155,   156,   157,     0,   172,
   173,   171,   158,     0,   248,   249,   250,   251,   252,     0,
   272,   273,     0,     5,     6,    66,    68,     0,     0,     0,
   280,     0,     0,     0,   300,     0,   301,   302,   287,     0,
     0,     0,   223,     0,     0,     0,   226,   291,   194,   198,
   205,   203,   188,   207,     0,     0,     0,     0,     0,     0,
     0,     0,   163,   164,   165,   166,   167,   168,   169,   170,
   160,   161,    80,   305,     0,     0,     0,     0,   182,   275,
   186,   277,   279,   282,   284,   297,   299,   289,     0,   174,
   286,     0,   304,   230,   224,   225,   228,     0,     0,     0,
     0,     0,     0,     0,   217,   219,   212,   214,     0,   208,
     0,   137,   140,   139,   142,   141,   143,   144,   145,   146,
    93,     0,    97,     0,     0,     0,   259,   258,     0,     0,
     0,     0,    70,     0,    72,    73,    74,    75,     0,     0,
     0,     0,   288,     0,     0,     0,     0,   227,   195,   199,
   196,   200,   189,   190,   191,   210,     0,   136,   138,     0,
     0,     0,   162,     0,     0,     0,     0,    83,    86,    87,
    85,   308,     0,   119,   123,   149,     0,    67,    71,    77,
    76,    78,    79,    69,   183,   187,   290,   176,   175,   177,
     0,     0,     0,     0,     0,     0,   209,     0,     0,     0,
     0,    99,   115,   116,   114,   113,   101,   102,   103,   104,
   105,   106,   107,   109,   108,   110,   111,   112,    95,     0,
     0,     0,     0,     0,     0,    81,    84,   308,   307,   306,
     0,     0,   147,     0,     0,     0,     0,   197,   201,   192,
     0,   117,     0,    94,   100,     0,    98,    88,    92,    91,
    90,    89,     0,   313,   314,   315,   316,     0,   317,   318,
     0,     0,     0,   121,     0,   125,   131,   132,   129,   127,
   128,   130,   133,   134,     0,   153,   179,   178,   184,     0,
   193,     0,     0,    82,     0,   308,   308,     0,     0,   120,
   122,   124,   126,     0,   150,     0,     0,   118,    96,     0,
     0,     0,     0,     0,   148,   151,   154,   152,   185,     0,
   311,   312,   310,   309,     0,     0,     0,   319,     0,     0,
     0
};

static const short yydefgoto[] = {   499,
    56,    57,    58,    59,   257,   258,   314,    60,   305,   433,
   347,   348,   349,   350,   351,    61,   340,   426,   342,   381,
   382,   383,   384,   315,   411,   443,   316,   412,   445,   446,
    62,   239,   291,   292,   317,   455,   474,   318,    63,    64,
    65,    66,    67,   189,   251,   252,    68,    69,    70,   271,
   440,   260,   273,   262,   234,   377,   231,    71,   166,    72,
   165,    73,   167,   293,   337,   294,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,   278,    84,   222,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   208,   113,   209,
   114,   210,   115,   116,   212,   117,   213,   118,   220,   269,
   322,   119,   120,   121,   122,   123,   214,   124,   216,   125,
   126,   127,   128,   221,   129,   306,   353,   409,   442
};

static const short yypact[] = {   438,
   188,   206,   182,   -71,   -68,    55,   -57,    55,   -29,   284,
    55,   -17,     1,    55,-32768,-32768,-32768,    55,    55,    55,
    55,    55,     5,    55,    55,    55,    55,    55,-32768,    55,
    19,    34,   289,-32768,-32768,-32768,    55,    37,    61,    65,
-32768,    55,    55,    55,    76,    87,    55,    55,    55,    55,
    55,    90,    93,   103,   102,   438,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   140,
-32768,-32768,   146,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   108,-32768,-32768,
-32768,   110,-32768,   156,    55,   177,-32768,-32768,   181,    73,
   203,-32768,-32768,-32768,    77,    77,   212,-32768,   201,   213,
   218,   220,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   228,    55,   238,-32768,-32768,-32768,-32768,   148,-32768,
-32768,-32768,-32768,   258,-32768,-32768,-32768,-32768,-32768,   259,
-32768,-32768,   105,-32768,-32768,-32768,-32768,   262,   266,   262,
-32768,   262,   266,   262,-32768,   262,-32768,-32768,   268,   271,
    55,   262,-32768,   264,   269,   273,-32768,-32768,   267,   270,
   274,   274,   116,   279,    55,    55,    55,    55,   214,   272,
   282,   275,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   281,-32768,-32768,-32768,   291,    55,   524,   524,-32768,   285,
-32768,   286,   285,   285,   286,   285,   285,-32768,   271,   290,
   287,   296,   295,   285,-32768,-32768,-32768,   262,   303,   288,
   135,   304,   277,   306,-32768,-32768,-32768,-32768,    55,-32768,
   305,   214,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   308,-32768,   148,   278,   328,-32768,-32768,   310,   311,
   314,   315,-32768,   234,-32768,-32768,-32768,-32768,   323,   318,
   324,   271,   287,   145,   330,    55,    55,   285,-32768,-32768,
   320,   337,-32768,-32768,   338,-32768,   335,-32768,-32768,    56,
   342,    56,-32768,   350,   127,    55,   210,-32768,-32768,-32768,
-32768,   312,   345,-32768,-32768,   347,   346,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   287,-32768,-32768,   348,
   370,   371,   351,   379,   381,   376,-32768,   573,   383,   400,
    54,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    71,
   397,   398,   399,   403,   404,-32768,-32768,   558,-32768,-32768,
   613,   358,-32768,   405,   168,   408,    55,-32768,-32768,-32768,
   407,-32768,   413,-32768,-32768,    56,-32768,-32768,-32768,-32768,
-32768,-32768,   406,-32768,-32768,-32768,-32768,   414,-32768,-32768,
   276,   -36,   582,-32768,   402,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   429,   510,-32768,-32768,-32768,   423,
-32768,    55,   101,-32768,   576,   312,   312,   576,   576,-32768,
-32768,-32768,-32768,   -18,-32768,    -4,   428,-32768,-32768,   424,
   421,   426,   427,   430,-32768,-32768,-32768,-32768,-32768,    55,
-32768,-32768,-32768,-32768,   425,    55,   432,-32768,   544,   548,
-32768
};

static const short yypgoto[] = {-32768,
-32768,   493,  -219,   497,-32768,-32768,   316,-32768,-32768,-32768,
-32768,   207,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -327,
  -329,-32768,-32768,  -211,-32768,-32768,  -176,-32768,-32768,   124,
-32768,-32768,   280,-32768,  -166,-32768,-32768,  -303,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   283,-32768,-32768,-32768,  -247,
    -1,   -20,-32768,   357,-32768,-32768,   409,  -354,-32768,  -282,
-32768,  -265,-32768,-32768,-32768,-32768,  -236,  -235,-32768,  -195,
  -185,-32768,  -252,-32768,  -328,  -312,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -366,  -233,  -231,  -308,-32768,  -307,-32768,
  -280,-32768,  -277,  -276,-32768,  -264,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -260,-32768,  -259,-32768,  -256,
  -209,  -203,  -181,-32768,-32768,-32768,-32768,  -377,  -225
};


#define	YYLAST		712


static const short yytable[] = {   133,
   135,   138,   295,   296,   141,   299,   143,   300,   160,   161,
   363,   385,   164,   385,   400,   363,   168,   169,   170,   171,
   172,   323,   174,   175,   176,   177,   178,   386,   179,   386,
   441,   387,   388,   387,   388,   185,   139,   313,   313,   140,
   190,   191,   192,   297,   444,   195,   196,   197,   198,   199,
   142,   425,   385,   298,   468,   295,   296,   447,   299,   389,
   300,   389,   390,   391,   390,   391,   469,   378,   386,   378,
   425,   385,   387,   388,   367,   392,   471,   392,   144,   393,
   394,   393,   394,   395,   378,   395,   312,   386,   481,   482,
   447,   387,   388,   162,   359,   485,   297,   385,   463,   359,
   389,   487,   360,   390,   391,   488,   298,   360,   163,   379,
   380,   379,   380,   386,   378,   173,   392,   387,   388,   389,
   393,   394,   390,   391,   395,   224,   379,   380,   225,   448,
   396,   180,   396,   425,   385,   392,   397,   361,   397,   393,
   394,   181,   361,   395,   186,   389,   449,   362,   390,   391,
   386,   475,   362,   218,   387,   388,   379,   380,   398,   452,
   398,   392,   448,   131,   132,   393,   394,   424,   187,   395,
   486,   396,   188,   226,   227,   450,   451,   397,   453,   449,
   454,   241,   389,   193,   427,   390,   391,   229,   230,   263,
   396,   264,   452,   266,   194,   267,   397,   200,   392,   398,
   201,   274,   393,   394,   402,   403,   395,   404,   450,   451,
   202,   453,   203,   454,   479,   211,   396,   215,   398,   272,
   255,   256,   397,   243,   244,   245,   246,   247,   248,   249,
   250,   282,   283,   285,   286,   287,   288,     2,     3,   480,
   309,   310,   483,   484,   398,   331,   332,    10,    19,    20,
    21,    22,   206,   396,   308,   368,   369,   328,   207,   397,
    11,   289,   290,   217,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,   457,   458,
    31,   398,   344,   345,   346,    33,   219,   336,   223,   136,
   131,   132,    35,   137,    37,   130,   131,   132,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   228,    53,    54,   134,   131,   132,   235,    47,    48,    49,
    50,    51,   233,   406,   371,   372,     2,     3,   236,   309,
   310,    53,    54,   237,   157,   238,    10,   311,   312,   240,
    55,   182,   183,   184,   405,   158,   159,   358,   242,    11,
   344,   345,   346,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,   466,   467,    31,
   253,   254,   259,   261,    33,   275,   160,   268,   270,   276,
   277,    35,   279,    37,   301,   280,   334,   303,    15,    16,
    17,   281,   131,   132,    21,    22,   284,   302,   304,   330,
    27,   307,   320,   321,   325,   324,    47,    48,    49,    50,
    51,   326,   327,   329,   333,   460,   335,   352,   338,   341,
    53,    54,   354,   355,   356,   357,   311,   312,   365,    55,
   408,   366,    15,    16,    17,   373,   364,   370,    21,    22,
     1,     2,     3,     4,    27,   376,     5,     6,     7,     8,
     9,    10,   374,   375,   399,    53,    54,   401,   410,   413,
   478,   418,   414,   415,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,   416,   417,    32,   495,    33,
   419,   420,   421,   422,   497,    34,    35,    36,    37,    53,
    54,    38,    39,    40,    41,    42,    43,    44,    45,    46,
   423,   428,   429,   430,   456,   472,   461,   431,   432,   459,
   464,    47,    48,    49,    50,    51,    52,     2,     3,   462,
   309,   310,   465,   312,   476,    53,    54,    10,   477,   489,
   491,   490,   496,   500,    55,   492,   493,   501,   204,   494,
    11,   498,   205,   407,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,   473,   265,
    31,   339,     0,   319,   232,    33,     0,     0,     0,     0,
     0,     0,    35,     0,    37,     0,   343,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    47,    48,    49,
    50,    51,    15,    16,    17,    18,    19,    20,    21,    22,
     0,    53,    54,   157,    27,     0,     0,   311,   312,     0,
    55,     0,     0,     0,     0,   159,     0,     0,     0,     0,
     0,     0,    37,    15,    16,    17,    18,    19,    20,    21,
    22,   434,   435,   436,   437,    27,     0,   438,     0,     0,
     0,     0,     0,     0,     0,   439,   131,   132,     0,   434,
   435,   436,   437,    37,     0,   438,   408,     0,     0,    53,
    54,   131,   132,   439,   131,   132,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   470,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    53,    54
};

static const short yycheck[] = {     1,
     2,     3,   239,   239,     6,   239,     8,   239,    10,    11,
   314,   340,    14,   342,   342,   319,    18,    19,    20,    21,
    22,   269,    24,    25,    26,    27,    28,   340,    30,   342,
   408,   340,   340,   342,   342,    37,   108,   257,   258,   108,
    42,    43,    44,   239,   411,    47,    48,    49,    50,    51,
   108,   381,   381,   239,    91,   292,   292,   412,   292,   340,
   292,   342,   340,   340,   342,   342,   103,    14,   381,    14,
   400,   400,   381,   381,   322,   340,   443,   342,   108,   340,
   340,   342,   342,   340,    14,   342,   105,   400,   466,   467,
   445,   400,   400,   111,   314,   114,   292,   426,   426,   319,
   381,   106,   314,   381,   381,   110,   292,   319,   108,    56,
    57,    56,    57,   426,    14,   111,   381,   426,   426,   400,
   381,   381,   400,   400,   381,    53,    56,    57,    56,   412,
   340,   113,   342,   463,   463,   400,   340,   314,   342,   400,
   400,   108,   319,   400,   108,   426,   412,   314,   426,   426,
   463,   455,   319,   155,   463,   463,    56,    57,   340,   412,
   342,   426,   445,   109,   110,   426,   426,   114,   108,   426,
   474,   381,   108,   101,   102,   412,   412,   381,   412,   445,
   412,   183,   463,   108,   114,   463,   463,   111,   112,   210,
   400,   212,   445,   214,   108,   216,   400,   108,   463,   381,
   108,   222,   463,   463,    78,    79,   463,    81,   445,   445,
   108,   445,   111,   445,   114,   108,   426,   108,   400,   221,
   116,   117,   426,    76,    77,    78,    79,    80,    81,    82,
    83,   116,   117,   235,   236,   237,   238,     4,     5,   465,
     7,     8,   468,   469,   426,   111,   112,    14,    35,    36,
    37,    38,   113,   463,   256,   111,   112,   278,   113,   463,
    27,    48,    49,   108,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,   111,   112,
    47,   463,    73,    74,    75,    52,   110,   289,   108,   108,
   109,   110,    59,   112,    61,   108,   109,   110,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
   108,    98,    99,   108,   109,   110,   116,    84,    85,    86,
    87,    88,   111,   114,   326,   327,     4,     5,   116,     7,
     8,    98,    99,   116,    51,   116,    14,   104,   105,   112,
   107,    53,    54,    55,   346,    62,    63,   114,   111,    27,
    73,    74,    75,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    92,    93,    47,
   113,   113,   111,   108,    52,   112,   378,   110,   108,   111,
   108,    59,   116,    61,   113,   116,   110,   113,    31,    32,
    33,   118,   109,   110,    37,    38,   118,   116,   118,   112,
    43,   111,   118,   118,   118,   116,    84,    85,    86,    87,
    88,   116,   118,   111,   111,   417,   111,    90,   114,   112,
    98,    99,   113,   113,   111,   111,   104,   105,   111,   107,
   119,   108,    31,    32,    33,   116,   114,   108,    37,    38,
     3,     4,     5,     6,    43,   111,     9,    10,    11,    12,
    13,    14,   116,   116,   113,    98,    99,   108,   114,   113,
   462,   111,   117,   116,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,   116,   116,    50,   490,    52,
   112,   111,   117,   111,   496,    58,    59,    60,    61,    98,
    99,    64,    65,    66,    67,    68,    69,    70,    71,    72,
   111,   115,   115,   115,   110,   114,   110,   115,   115,   112,
   115,    84,    85,    86,    87,    88,    89,     4,     5,   117,
     7,     8,   119,   105,    25,    98,    99,    14,   116,   112,
   120,   118,   118,     0,   107,   120,   120,     0,    56,   120,
    27,   120,    56,   347,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,   445,   213,
    47,   292,    -1,   258,   166,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    59,    -1,    61,    -1,   304,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
    87,    88,    31,    32,    33,    34,    35,    36,    37,    38,
    -1,    98,    99,    51,    43,    -1,    -1,   104,   105,    -1,
   107,    -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,
    -1,    -1,    61,    31,    32,    33,    34,    35,    36,    37,
    38,    94,    95,    96,    97,    43,    -1,   100,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   108,   109,   110,    -1,    94,
    95,    96,    97,    61,    -1,   100,   119,    -1,    -1,    98,
    99,   109,   110,   108,   109,   110,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    98,    99
};

#line 352 "../bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_SrvParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  }
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL  
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_SrvParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_SrvParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_SrvParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_SrvParser_CHAR = (token), YY_SrvParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_SrvParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_SrvParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_SrvParser_PURE
/* UNPURE */
#define YYLEX           YY_SrvParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_SrvParser_CHAR;                      /*  the lookahead symbol        */
YY_SrvParser_STYPE      YY_SrvParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_SrvParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_SrvParser_LSP_NEEDED
YY_SrvParser_LTYPE YY_SrvParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_SrvParser_LSP_NEEDED
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL, &YY_SrvParser_LLOC)
#else
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_SrvParser_DEBUG != 0
int YY_SrvParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_SrvParser_CLASS::
#endif
     YY_SrvParser_PARSE(YY_SrvParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_SrvParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_SrvParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_SrvParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_SrvParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_SrvParser_LTYPE *yyls = yylsa;
  YY_SrvParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_SrvParser_PURE
  int YY_SrvParser_CHAR;
  YY_SrvParser_STYPE YY_SrvParser_LVAL;
  int YY_SrvParser_NERRS;
#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
#endif

  YY_SrvParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_SrvParser_NERRS = 0;
  YY_SrvParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_SrvParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_SrvParser_LSP_NEEDED
      YY_SrvParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_SrvParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      // cppcheck-suppress constStatement
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	    YY_SrvParser_ERROR(((char*)"parser stack overflow"));
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_SrvParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = (YY_SrvParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_SrvParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_SrvParser_CHAR == YYEMPTY)
    {
#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_SrvParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_SrvParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_SrvParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_SrvParser_CHAR);

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_SrvParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_SrvParser_CHAR, YY_SrvParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_SrvParser_CHAR != YYEOF)
    YY_SrvParser_CHAR = YYEMPTY;

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 840 "../bison++/bison.cc"

  switch (yyn) {

case 66:
#line 240 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].strval))
	YYABORT;
;
    break;}
case 67:
#line 245 "SrvParser.y"
{
    //Information about new interface has been read
    //Add it to list of read interfaces
    delete [] yyvsp[-4].strval;
    EndIfaceDeclaration();
;
    break;}
case 68:
#line 253 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].ival))
	YYABORT;
;
    break;}
case 69:
#line 258 "SrvParser.y"
{
    EndIfaceDeclaration();
;
    break;}
case 80:
#line 277 "SrvParser.y"
{
    /// this is key object initialization part
    CurrentKey = new TSIGKey(string(yyvsp[-1].strval));
;
    break;}
case 81:
#line 282 "SrvParser.y"
{
    /// check that both secret and algorithm keywords were defined.
    Log(Debug) << "Loaded key '" << CurrentKey->Name_ << "', base64len is "
	       << CurrentKey->getBase64Data().length() << ", rawlen is "
	       << CurrentKey->getPackedData().length() << "." << LogEnd;
    if (CurrentKey->getPackedData().length() == 0) {
	Log(Crit) << "Key " << CurrentKey->Name_ << " does not have secret specified." << LogEnd;
	YYABORT;
    }

    if ( (CurrentKey->Digest_ != DIGEST_HMAC_MD5) &&
	 (CurrentKey->Digest_ != DIGEST_HMAC_SHA1) &&
	 (CurrentKey->Digest_ != DIGEST_HMAC_SHA256) ) {
	Log(Crit) << "Invalid key type specified: only hmac-md5, hmac-sha1 and hmac-sha256 are supported." << LogEnd;
	YYABORT;
    }

    CfgMgr->addKey( CurrentKey );
;
    break;}
case 88:
#line 316 "SrvParser.y"
{
    // store the key in base64 encoded form
    CurrentKey->setData(string(yyvsp[-1].strval));
;
    break;}
case 89:
#line 323 "SrvParser.y"
{
    CurrentKey->Fudge_ = yyvsp[-1].ival;
;
    break;}
case 90:
#line 328 "SrvParser.y"
{ CurrentKey->Digest_ = DIGEST_HMAC_SHA256; ;
    break;}
case 91:
#line 329 "SrvParser.y"
{ CurrentKey->Digest_ = DIGEST_HMAC_SHA1;  ;
    break;}
case 92:
#line 330 "SrvParser.y"
{ CurrentKey->Digest_ = DIGEST_HMAC_MD5;  ;
    break;}
case 93:
#line 336 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TDUID> duid = new TDUID(yyvsp[-1].duidval.duid,yyvsp[-1].duidval.length);
    ClientLst.append(new TSrvCfgOptions(duid));
;
    break;}
case 94:
#line 342 "SrvParser.y"
{
    Log(Debug) << "Exception: DUID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 95:
#line 350 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TOptVendorData> remoteid = new TOptVendorData(yyvsp[-3].ival, yyvsp[-1].duidval.duid, yyvsp[-1].duidval.length, 0);
    ClientLst.append(new TSrvCfgOptions(remoteid));
;
    break;}
case 96:
#line 356 "SrvParser.y"
{
    Log(Debug) << "Exception: RemoteID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 97:
#line 364 "SrvParser.y"
{
		ParserOptStack.append(new TSrvParsGlobalOpt());
		SPtr<TIPv6Addr> clntaddr = new TIPv6Addr(yyvsp[-1].addrval);
		ClientLst.append(new TSrvCfgOptions(clntaddr));
;
    break;}
case 98:
#line 370 "SrvParser.y"
{
		Log(Debug) << "Exception: Link-local-based exception specified." << LogEnd;
		// copy all defined options
		ClientLst.getLast()->setOptions(ParserOptStack.getLast());
		ParserOptStack.delLast();
;
    break;}
case 117:
#line 403 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Info) << "Exception: Address " << addr->getPlain() << " reserved." << LogEnd;
    ClientLst.getLast()->setAddr(addr);
;
    break;}
case 118:
#line 411 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[-2].addrval);
    Log(Info) << "Exception: Prefix " << addr->getPlain() << "/" << yyvsp[0].ival << " reserved." << LogEnd;
    ClientLst.getLast()->setPrefix(addr, yyvsp[0].ival);
;
    break;}
case 119:
#line 420 "SrvParser.y"
{
    StartClassDeclaration();
;
    break;}
case 120:
#line 424 "SrvParser.y"
{
    if (!EndClassDeclaration())
	YYABORT;
;
    break;}
case 123:
#line 438 "SrvParser.y"
{
    StartTAClassDeclaration();
;
    break;}
case 124:
#line 441 "SrvParser.y"
{
    if (!EndTAClassDeclaration())
	YYABORT;
;
    break;}
case 135:
#line 465 "SrvParser.y"
{
    StartPDDeclaration();
;
    break;}
case 136:
#line 468 "SrvParser.y"
{
    if (!EndPDDeclaration())
	YYABORT;
;
    break;}
case 147:
#line 495 "SrvParser.y"
{
    SPtr<TIPv6Addr> routerAddr = new TIPv6Addr(yyvsp[-1].addrval);
    SPtr<TOpt> myNextHop = new TOptAddr(OPTION_NEXT_HOP, routerAddr, NULL);
    nextHop = myNextHop; 
;
    break;}
case 148:
#line 501 "SrvParser.y"
{
    SrvCfgIfaceLst.getLast()->addExtraOption(nextHop, false);
    nextHop = 0;
    //should we call YYABORT;?
;
    break;}
case 149:
#line 507 "SrvParser.y"
{
    SPtr<TIPv6Addr> routerAddr = new TIPv6Addr(yyvsp[0].addrval);
    SPtr<TOpt> myNextHop = new TOptAddr(OPTION_NEXT_HOP, routerAddr, NULL);
    SrvCfgIfaceLst.getLast()->addExtraOption(myNextHop, false);
;
    break;}
case 152:
#line 521 "SrvParser.y"
{
    SPtr<TIPv6Addr> prefix = new TIPv6Addr(yyvsp[-4].addrval);
    SPtr<TOpt> rtPrefix = new TOptRtPrefix(yyvsp[0].ival, yyvsp[-2].ival, 42, prefix, NULL);
    if (nextHop)
        nextHop->addOption(rtPrefix);
    else
        SrvCfgIfaceLst.getLast()->addExtraOption(rtPrefix, false);
;
    break;}
case 153:
#line 530 "SrvParser.y"
{
    SPtr<TIPv6Addr> prefix = new TIPv6Addr(yyvsp[-2].addrval);
    SPtr<TOpt> rtPrefix = new TOptRtPrefix(DHCPV6_INFINITY, yyvsp[0].ival, 42, prefix, NULL);
    if (nextHop)
        nextHop->addOption(rtPrefix);
    else
        SrvCfgIfaceLst.getLast()->addExtraOption(rtPrefix, false);
;
    break;}
case 154:
#line 539 "SrvParser.y"
{
    SPtr<TIPv6Addr> prefix = new TIPv6Addr(yyvsp[-4].addrval);
    SPtr<TOpt> rtPrefix = new TOptRtPrefix(DHCPV6_INFINITY, yyvsp[-2].ival, 42, prefix, NULL);
    if (nextHop)
        nextHop->addOption(rtPrefix);
    else
        SrvCfgIfaceLst.getLast()->addExtraOption(rtPrefix, false);
;
    break;}
case 155:
#line 549 "SrvParser.y"
{
    if (!strcasecmp(yyvsp[0].strval,"none")) {
        CfgMgr->setAuthProtocol(AUTH_PROTO_NONE);
        CfgMgr->setAuthAlgorithm(AUTH_ALGORITHM_NONE);
    } else if (!strcasecmp(yyvsp[0].strval, "delayed")) {
        CfgMgr->setAuthProtocol(AUTH_PROTO_DELAYED);
    } else if (!strcasecmp(yyvsp[0].strval, "reconfigure-key")) {
        CfgMgr->setAuthProtocol(AUTH_PROTO_RECONFIGURE_KEY);
        CfgMgr->setAuthAlgorithm(AUTH_ALGORITHM_RECONFIGURE_KEY);
    } else if (!strcasecmp(yyvsp[0].strval, "dibbler")) {
        CfgMgr->setAuthProtocol(AUTH_PROTO_DIBBLER);
    } else {
        Log(Crit) << "Invalid auth-protocol parameter: " << string(yyvsp[0].strval) << LogEnd;
        YYABORT;
    }
;
    break;}
case 156:
#line 567 "SrvParser.y"
{
    Log(Crit) << "auth-algorithm secification is not supported yet." << LogEnd;
    YYABORT;
;
    break;}
case 157:
#line 573 "SrvParser.y"
{
    if (strcasecmp(yyvsp[0].strval, "none")) {
        CfgMgr->setAuthReplay(AUTH_REPLAY_NONE);
    } else if (strcasecmp(yyvsp[0].strval, "monotonic")) {
        CfgMgr->setAuthReplay(AUTH_REPLAY_MONOTONIC);
    } else {
        Log(Crit) << "Invalid auth-replay parameter: " << string(yyvsp[0].strval) << LogEnd;
        YYABORT;
    }
;
    break;}
case 158:
#line 585 "SrvParser.y"
{
    CfgMgr->setAuthRealm(std::string(yyvsp[0].strval));
;
    break;}
case 159:
#line 591 "SrvParser.y"
{
    DigestLst.clear();
;
    break;}
case 160:
#line 593 "SrvParser.y"
{
    CfgMgr->setAuthDigests(DigestLst);
    CfgMgr->setAuthDropUnauthenticated(true);
    DigestLst.clear();
;
    break;}
case 163:
#line 605 "SrvParser.y"
{ DigestLst.push_back(DIGEST_NONE); ;
    break;}
case 164:
#line 606 "SrvParser.y"
{ DigestLst.push_back(DIGEST_PLAIN); ;
    break;}
case 165:
#line 607 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_MD5); ;
    break;}
case 166:
#line 608 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_SHA1); ;
    break;}
case 167:
#line 609 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_SHA224); ;
    break;}
case 168:
#line 610 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_SHA256); ;
    break;}
case 169:
#line 611 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_SHA384); ;
    break;}
case 170:
#line 612 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_SHA512); ;
    break;}
case 171:
#line 617 "SrvParser.y"
{
    CfgMgr->setAuthDropUnauthenticated(yyvsp[0].ival);
;
    break;}
case 172:
#line 622 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthLifetime(yyvsp[0].ival); ;
    break;}
case 173:
#line 626 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthKeyLen(yyvsp[0].ival); ;
    break;}
case 174:
#line 639 "SrvParser.y"
{
    Log(Notice)<< "FQDN: The client "<<yyvsp[0].strval<<" has no address nor DUID"<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 175:
#line 644 "SrvParser.y"
{
    /// @todo: Use SPtr()
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for DUID " << duidNew->getPlain()<<LogEnd;
    PresentFQDNLst.append(new TFQDN(duidNew, yyvsp[-2].strval,false));
;
    break;}
case 176:
#line 651 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for address "<<*addr<<LogEnd;
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 177:
#line 657 "SrvParser.y"
{
	Log(Debug) << "FQDN:"<<yyvsp[0].strval<<" has no reservations (is available to everyone)."<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 178:
#line 662 "SrvParser.y"
{
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval << " reserved for DUID "<< duidNew->getPlain() << LogEnd;
    PresentFQDNLst.append(new TFQDN( duidNew, yyvsp[-2].strval,false));
;
    break;}
case 179:
#line 668 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval<<" reserved for address "<< addr->getPlain() << LogEnd;
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 180:
#line 676 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 181:
#line 677 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 182:
#line 682 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 183:
#line 686 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 184:
#line 693 "SrvParser.y"
{
    Log(Debug) << "Vendor-spec defined: Enterprise: " << yyvsp[-4].ival << ", optionCode: "
	       << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;

    SrvCfgIfaceLst.getLast()->addExtraOption(new TOptVendorSpecInfo(OPTION_VENDOR_OPTS, yyvsp[-4].ival, yyvsp[-2].ival,
								    yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0), false);
;
    break;}
case 185:
#line 701 "SrvParser.y"
{
    Log(Debug) << "Vendor-spec defined: Enterprise: " << yyvsp[-4].ival << ", optionCode: "
	       << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;
    SrvCfgIfaceLst.getLast()->addExtraOption(new TOptVendorSpecInfo(OPTION_VENDOR_OPTS, yyvsp[-4].ival, yyvsp[-2].ival,
								    yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0), false);
;
    break;}
case 186:
#line 710 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 187:
#line 711 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 188:
#line 716 "SrvParser.y"
{
	PresentRangeLst.append(new THostRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 189:
#line 720 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
	SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new THostRange(addr1,addr2));
	else
	    PresentRangeLst.append(new THostRange(addr2,addr1));
    ;
    break;}
case 190:
#line 729 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno()
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}
	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new THostRange(addr1,addr2));
	else
	    PresentRangeLst.append(new THostRange(addr2,addr1));
    ;
    break;}
case 191:
#line 745 "SrvParser.y"
{
	PresentRangeLst.append(new THostRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 192:
#line 749 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
	SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new THostRange(addr1,addr2));
	else
	    PresentRangeLst.append(new THostRange(addr2,addr1));
    ;
    break;}
case 193:
#line 761 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno()
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}

	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	SPtr<THostRange> range = 0;
	if (*addr1<=*addr2)
	    range = new THostRange(addr1,addr2);
	else
	    range = new THostRange(addr2,addr1);
	range->setPrefixLength(prefix);
	PDLst.append(range);
    ;
    break;}
case 194:
#line 784 "SrvParser.y"
{
    PresentRangeLst.append(new THostRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 195:
#line 788 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new THostRange(addr1,addr2));
    else
	PresentRangeLst.append(new THostRange(addr2,addr1));
;
    break;}
case 196:
#line 797 "SrvParser.y"
{
    PresentRangeLst.append(new THostRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 197:
#line 801 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new THostRange(addr1,addr2));
    else
	PresentRangeLst.append(new THostRange(addr2,addr1));
;
    break;}
case 198:
#line 810 "SrvParser.y"
{
    SPtr<TDUID> duid(new TDUID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length));
    PresentRangeLst.append(new THostRange(duid, duid));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 199:
#line 816 "SrvParser.y"
{
    SPtr<TDUID> duid1(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid2(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));

    if (*duid1<=*duid2)
	PresentRangeLst.append(new THostRange(duid1,duid2));
    else
	PresentRangeLst.append(new THostRange(duid2,duid1));

    /// @todo: delete [] $1.duid; delete [] $3.duid?
;
    break;}
case 200:
#line 828 "SrvParser.y"
{
    SPtr<TDUID> duid(new TDUID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length));
    PresentRangeLst.append(new THostRange(duid, duid));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 201:
#line 834 "SrvParser.y"
{
    SPtr<TDUID> duid2(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid1(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));
    if (*duid1<=*duid2)
	PresentRangeLst.append(new THostRange(duid1,duid2));
    else
	PresentRangeLst.append(new THostRange(duid2,duid1));
    delete yyvsp[-2].duidval.duid;
    delete yyvsp[0].duidval.duid;
;
    break;}
case 202:
#line 848 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 203:
#line 851 "SrvParser.y"
{
    ParserOptStack.getLast()->setRejedClnt(&PresentRangeLst);
;
    break;}
case 204:
#line 858 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 205:
#line 861 "SrvParser.y"
{
    ParserOptStack.getLast()->setAcceptClnt(&PresentRangeLst);
;
    break;}
case 206:
#line 868 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 207:
#line 871 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst);
;
    break;}
case 208:
#line 878 "SrvParser.y"
{
;
    break;}
case 209:
#line 880 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst/*PDList*/);
;
    break;}
case 210:
#line 886 "SrvParser.y"
{
   this->PDPrefix = yyvsp[0].ival;
;
    break;}
case 211:
#line 893 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 212:
#line 898 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 213:
#line 906 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 214:
#line 911 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 215:
#line 919 "SrvParser.y"
{
    int x=yyvsp[0].ival;
    if ( (x<1) || (x>1000)) {
	Log(Crit) << "Invalid share value: " << x << " in line " << lex->lineno()
		  << ". Allowed range: 1..1000." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setShare(x);
;
    break;}
case 216:
#line 931 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[0].ival);
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival);
;
    break;}
case 217:
#line 936 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival);
;
    break;}
case 218:
#line 944 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[0].ival);
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival);
;
    break;}
case 219:
#line 949 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival);
;
    break;}
case 220:
#line 957 "SrvParser.y"
{
    ParserOptStack.getLast()->setClntMaxLease(yyvsp[0].ival);
;
    break;}
case 221:
#line 964 "SrvParser.y"
{
    ParserOptStack.getLast()->setClassMaxLease(yyvsp[0].ival);
;
    break;}
case 222:
#line 971 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'addr-params' defined, but experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }
    int bitfield = ADDRPARAMS_MASK_PREFIX;
    Log(Warning) << "Experimental addr-params added (prefix=" << yyvsp[0].ival << ", bitfield=" << bitfield << ")." << LogEnd;
    ParserOptStack.getLast()->setAddrParams(yyvsp[0].ival,bitfield);
;
    break;}
case 223:
#line 984 "SrvParser.y"
{
    SPtr<TOpt> tunnelName = new TOptDomainLst(OPTION_AFTR_NAME, yyvsp[0].strval, 0);
    Log(Debug) << "Enabling DS-Lite tunnel option, AFTR name=" << yyvsp[0].strval << LogEnd;
    SrvCfgIfaceLst.getLast()->addExtraOption(tunnelName, false);
;
    break;}
case 224:
#line 992 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptGeneric(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", length=" << yyvsp[0].duidval.length << LogEnd;
;
    break;}
case 225:
#line 998 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[0].addrval));

    SPtr<TOpt> opt = new TOptAddr(yyvsp[-2].ival, addr, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", address=" << addr->getPlain() << LogEnd;
;
    break;}
case 226:
#line 1006 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 227:
#line 1009 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(yyvsp[-3].ival, PresentAddrLst, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-3].ival << ", address count=" << PresentAddrLst.count() << LogEnd;
;
    break;}
case 228:
#line 1015 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptString(yyvsp[-2].ival, string(yyvsp[0].strval), 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", string=" << yyvsp[0].strval << LogEnd;
;
    break;}
case 229:
#line 1023 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'remote autoconf neighbors' defined, but "
		  << "experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }

    PresentAddrLst.clear();
;
    break;}
case 230:
#line 1033 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(OPTION_NEIGHBORS, PresentAddrLst, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Remote autoconf neighbors enabled (" << PresentAddrLst.count()
	       << " neighbors defined.)" << LogEnd;
;
    break;}
case 231:
#line 1043 "SrvParser.y"
{
    ParserOptStack.getLast()->setIfaceMaxLease(yyvsp[0].ival);
;
    break;}
case 232:
#line 1050 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnicast(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 233:
#line 1057 "SrvParser.y"
{
    if ( (yyvsp[0].ival!=0) && (yyvsp[0].ival!=1)) {
	Log(Crit) << "RAPID-COMMIT  parameter in line " << lex->lineno() << " must have 0 or 1 value."
	       << LogEnd;
	YYABORT;
    }
    if (yyvsp[0].ival==1)
	ParserOptStack.getLast()->setRapidCommit(true);
    else
	ParserOptStack.getLast()->setRapidCommit(false);
;
    break;}
case 234:
#line 1072 "SrvParser.y"
{
    if ((yyvsp[0].ival<0)||(yyvsp[0].ival>255)) {
	Log(Crit) << "Preference value (" << yyvsp[0].ival << ") in line " << lex->lineno()
		   << " is out of range [0..255]." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setPreference(yyvsp[0].ival);
;
    break;}
case 235:
#line 1083 "SrvParser.y"
{
    logger::setLogLevel(yyvsp[0].ival);
;
    break;}
case 236:
#line 1089 "SrvParser.y"
{
    logger::setLogMode(yyvsp[0].strval);
;
    break;}
case 237:
#line 1095 "SrvParser.y"
{
    logger::setLogName(yyvsp[0].strval);
;
    break;}
case 238:
#line 1102 "SrvParser.y"
{
    logger::setColors(yyvsp[0].ival==1);
;
    break;}
case 239:
#line 1108 "SrvParser.y"
{
    ParserOptStack.getLast()->setWorkDir(yyvsp[0].strval);
;
    break;}
case 240:
#line 1115 "SrvParser.y"
{
    ParserOptStack.getLast()->setStateless(true);
;
    break;}
case 241:
#line 1122 "SrvParser.y"
{
    Log(Info) << "Guess-mode enabled: relay interfaces may be loosely defined (matching interface-id is not mandatory)." << LogEnd;
    ParserOptStack.getLast()->setGuessMode(true);
;
    break;}
case 242:
#line 1129 "SrvParser.y"
{
    CfgMgr->setScriptName(yyvsp[0].strval);
;
    break;}
case 243:
#line 1136 "SrvParser.y"
{
    ParserOptStack.getLast()->setInactiveMode(true);
;
    break;}
case 244:
#line 1142 "SrvParser.y"
{
    Log(Crit) << "Experimental features are allowed." << LogEnd;
    ParserOptStack.getLast()->setExperimental(true);
;
    break;}
case 245:
#line 1149 "SrvParser.y"
{
    if (!strncasecmp(yyvsp[0].strval,"before",6))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_BEFORE);
    } else
    if (!strncasecmp(yyvsp[0].strval,"after",5))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_AFTER);
    } else
    if (!strncasecmp(yyvsp[0].strval,"omit",4))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_NONE);
    } else
    {
		Log(Crit) << "Invalid interface-id-order specified. Allowed values: before, after, omit" << LogEnd;
		YYABORT;
    }
;
    break;}
case 246:
#line 1170 "SrvParser.y"
{
    ParserOptStack.getLast()->setCacheSize(yyvsp[0].ival);
;
    break;}
case 247:
#line 1181 "SrvParser.y"
{
    ParserOptStack.getLast()->setLeaseQuerySupport(true);

;
    break;}
case 248:
#line 1186 "SrvParser.y"
{
    switch (yyvsp[0].ival) {
    case 0:
		ParserOptStack.getLast()->setLeaseQuerySupport(false);
		break;
    case 1:
		ParserOptStack.getLast()->setLeaseQuerySupport(true);
		break;
    default:
		Log(Crit) << "Invalid value of accept-leasequery specifed. Allowed values: 0, 1, yes, no, true, false" << LogEnd;
		YYABORT;
    }
;
    break;}
case 249:
#line 1202 "SrvParser.y"
{
    if (yyvsp[0].ival!=0 && yyvsp[0].ival!=1) {
	Log(Error) << "Invalid bulk-leasequery-accept value: " << (yyvsp[0].ival)
		   << ", 0 or 1 expected." << LogEnd;
	YYABORT;
    }
    CfgMgr->bulkLQAccept( (bool) yyvsp[0].ival);
;
    break;}
case 250:
#line 1213 "SrvParser.y"
{
    CfgMgr->bulkLQTcpPort( yyvsp[0].ival );
;
    break;}
case 251:
#line 1219 "SrvParser.y"
{
    CfgMgr->bulkLQMaxConns( yyvsp[0].ival );
;
    break;}
case 252:
#line 1225 "SrvParser.y"
{
    CfgMgr->bulkLQTimeout( yyvsp[0].ival );
;
    break;}
case 253:
#line 1234 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayName(yyvsp[0].strval);
;
    break;}
case 254:
#line 1238 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayID(yyvsp[0].ival);
;
    break;}
case 255:
#line 1245 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].ival, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 256:
#line 1250 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 257:
#line 1255 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].strval, strlen(yyvsp[0].strval), 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 258:
#line 1263 "SrvParser.y"
{
    int prefix = yyvsp[0].ival;
    if ( (prefix<1) || (prefix>128) ) {
        Log(Crit) << "Invalid (1..128 allowed) prefix used: " << prefix
                  << " in subnet definition in line " << lex->lineno() << LogEnd;
        YYABORT;
    }
    SPtr<TIPv6Addr> min = getRangeMin(yyvsp[-2].addrval, prefix);
    SPtr<TIPv6Addr> max = getRangeMax(yyvsp[-2].addrval, prefix);
    SrvCfgIfaceLst.getLast()->addSubnet(min, max);
    Log(Debug) << "Defined subnet " << min->getPlain() << "/" << yyvsp[0].ival
               << " on " << SrvCfgIfaceLst.getLast()->getFullName() << LogEnd;
;
    break;}
case 259:
#line 1276 "SrvParser.y"
{
    SPtr<TIPv6Addr> min = new TIPv6Addr(yyvsp[-2].addrval);
    SPtr<TIPv6Addr> max = new TIPv6Addr(yyvsp[0].addrval);
    SrvCfgIfaceLst.getLast()->addSubnet(min, max);
    Log(Debug) << "Defined subnet " << min->getPlain() << "-" << max->getPlain()
               << "on " << SrvCfgIfaceLst.getLast()->getFullName() << LogEnd;
;
    break;}
case 272:
#line 1301 "SrvParser.y"
{
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setAllowClientClass(string(yyvsp[0].strval));

    int deny = ParserOptStack.getLast()->getDenyClientClassString().count();

    if (deny)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }

;
    break;}
case 273:
#line 1330 "SrvParser.y"
{
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setDenyClientClass(string(yyvsp[0].strval));

    int allow = ParserOptStack.getLast()->getAllowClientClassString().count();

    if (allow)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }

;
    break;}
case 274:
#line 1363 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 275:
#line 1366 "SrvParser.y"
{
    SPtr<TOpt> nis_servers = new TOptAddrLst(OPTION_DNS_SERVERS, PresentAddrLst, NULL);
    ParserOptStack.getLast()->addExtraOption(nis_servers, false);

    // ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
case 276:
#line 1378 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 277:
#line 1381 "SrvParser.y"
{
    SPtr<TOpt> domains = new TOptDomainLst(OPTION_DOMAIN_LIST, PresentStringLst, NULL);
    ParserOptStack.getLast()->addExtraOption(domains, false);
    // ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
case 278:
#line 1393 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 279:
#line 1396 "SrvParser.y"
{
    SPtr<TOpt> ntp_servers = new TOptAddrLst(OPTION_SNTP_SERVERS, PresentAddrLst, NULL);
    ParserOptStack.getLast()->addExtraOption(ntp_servers, false);
    // ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 280:
#line 1408 "SrvParser.y"
{
    SPtr<TOpt> timezone = new TOptString(OPTION_NEW_TZDB_TIMEZONE, string(yyvsp[0].strval), NULL);
    ParserOptStack.getLast()->addExtraOption(timezone, false);
    // ParserOptStack.getLast()->setTimezone($3);
;
    break;}
case 281:
#line 1419 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 282:
#line 1422 "SrvParser.y"
{
    SPtr<TOpt> sip_servers = new TOptAddrLst(OPTION_SIP_SERVER_A, PresentAddrLst, NULL);
    ParserOptStack.getLast()->addExtraOption(sip_servers, false);
    // ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 283:
#line 1433 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 284:
#line 1436 "SrvParser.y"
{
    SPtr<TOpt> sip_domains = new TOptDomainLst(OPTION_SIP_SERVER_D, PresentStringLst, NULL);
    ParserOptStack.getLast()->addExtraOption(sip_domains, false);
    //ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 285:
#line 1449 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)   << "No FQDNMode found, setting default mode 2 (all updates executed by server)." << LogEnd;
    Log(Warning) << "revDNS zoneroot lenght not found, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(2);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 286:
#line 1456 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
;
    break;}
case 287:
#line 1460 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)  << "FQDN: Setting update mode to " << yyvsp[0].ival;
    switch (yyvsp[0].ival) {
    case 0:
	Log(Cont) << "(no updates)" << LogEnd;
	break;
    case 1:
	Log(Cont) << "(client will update AAAA, server will update PTR)" << LogEnd;
	break;
    case 2:
	Log(Cont) << "(server will update both AAAA and PTR)" << LogEnd;
	break;
    default:
	Log(Cont) << LogEnd;
	Log(Crit) << "FQDN: Invalid mode. Only 0-2 are supported." << LogEnd;
        YYABORT;
    }
    Log(Warning)<< "FQDN: RevDNS zoneroot lenght not specified, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[0].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 288:
#line 1482 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);

;
    break;}
case 289:
#line 1487 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug) << "FQDN: Setting update mode to " << yyvsp[-1].ival;
    switch (yyvsp[-1].ival) {
    case 0:
	Log(Cont) << "(no updates)" << LogEnd;
	break;
    case 1:
	Log(Cont) << "(client will update AAAA, server will update PTR)" << LogEnd;
	break;
    case 2:
	Log(Cont) << "(server will update both AAAA and PTR)" << LogEnd;
	break;
    default:
	Log(Cont) << LogEnd;
	Log(Crit) << "FQDN: Invalid mode. Only 0-2 are supported." << LogEnd;
        YYABORT;
    }

    Log(Debug) << "FQDN: RevDNS zoneroot lenght set to " << yyvsp[0].ival <<LogEnd;
    if ( (yyvsp[0].ival < 0) || (yyvsp[0].ival > 128) ) {
	Log(Crit) << "FQDN: Invalid zoneroot length specified:" << yyvsp[0].ival << ". Value 0-128 expected." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setFQDNMode(yyvsp[-1].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(yyvsp[0].ival);
;
    break;}
case 290:
#line 1514 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);

;
    break;}
case 291:
#line 1522 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnknownFQDN(EUnknownFQDNMode(yyvsp[-1].ival), string(yyvsp[0].strval) );
    Log(Debug) << "FQDN: Unknown fqdn names processing set to " << yyvsp[-1].ival << ", domain=" << yyvsp[0].strval << "." << LogEnd;
;
    break;}
case 292:
#line 1527 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnknownFQDN(EUnknownFQDNMode(yyvsp[0].ival), string("") );
    Log(Debug) << "FQDN: Unknown fqdn names processing set to " << yyvsp[0].ival << ", no domain." << LogEnd;
;
    break;}
case 293:
#line 1535 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    CfgMgr->setDDNSAddress(addr);
    Log(Info) << "FQDN: DDNS updates will be performed to " << addr->getPlain() << "." << LogEnd;
;
    break;}
case 294:
#line 1543 "SrvParser.y"
{
    if (!strcasecmp(yyvsp[0].strval,"tcp"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_TCP);
    else if (!strcasecmp(yyvsp[0].strval,"udp"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_UDP);
    else if (!strcasecmp(yyvsp[0].strval,"any"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_ANY);
    else {
        Log(Crit) << "Invalid ddns-protocol specifed:" << (yyvsp[0].strval) 
                  << ", supported values are tcp, udp, any." << LogEnd;
        YYABORT;
    }
    Log(Debug) << "DDNS: Setting protocol to " << (yyvsp[0].strval) << LogEnd;
;
    break;}
case 295:
#line 1560 "SrvParser.y"
{
    Log(Debug) << "DDNS: Setting timeout to " << yyvsp[0].ival << "ms." << LogEnd;
    CfgMgr->setDDNSTimeout(yyvsp[0].ival);
;
    break;}
case 296:
#line 1569 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 297:
#line 1572 "SrvParser.y"
{
    SPtr<TOpt> nis_servers = new TOptAddrLst(OPTION_NIS_SERVERS, PresentAddrLst, NULL);
    ParserOptStack.getLast()->addExtraOption(nis_servers, false);
    ///ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 298:
#line 1583 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 299:
#line 1586 "SrvParser.y"
{
    SPtr<TOpt> nisp_servers = new TOptAddrLst(OPTION_NISP_SERVERS, PresentAddrLst, NULL);
    ParserOptStack.getLast()->addExtraOption(nisp_servers, false);
    // ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 300:
#line 1598 "SrvParser.y"
{
    SPtr<TOpt> nis_domain = new TOptDomainLst(OPTION_NIS_DOMAIN_NAME, string(yyvsp[0].strval), NULL);
    ParserOptStack.getLast()->addExtraOption(nis_domain, false);
    // ParserOptStack.getLast()->setNISDomain($3);
;
    break;}
case 301:
#line 1610 "SrvParser.y"
{
    SPtr<TOpt> nispdomain = new TOptDomainLst(OPTION_NISP_DOMAIN_NAME, string(yyvsp[0].strval), NULL);
    ParserOptStack.getLast()->addExtraOption(nispdomain, false);
;
    break;}
case 302:
#line 1621 "SrvParser.y"
{
    SPtr<TOpt> lifetime = new TOptInteger(OPTION_INFORMATION_REFRESH_TIME,
                                          OPTION_INFORMATION_REFRESH_TIME_LEN, 
                                          (uint32_t)(yyvsp[0].ival), NULL);
    ParserOptStack.getLast()->addExtraOption(lifetime, false);
    //ParserOptStack.getLast()->setLifetime($3);
;
    break;}
case 303:
#line 1631 "SrvParser.y"
{
;
    break;}
case 304:
#line 1633 "SrvParser.y"
{
    // ParserOptStack.getLast()->setVendorSpec(VendorSpec);
    // Log(Debug) << "Vendor-spec parsing finished" << LogEnd;
;
    break;}
case 305:
#line 1641 "SrvParser.y"
{
    Log(Notice) << "ClientClass found, name: " << string(yyvsp[-1].strval) << LogEnd;
;
    break;}
case 306:
#line 1644 "SrvParser.y"
{
    SPtr<Node> cond =  NodeClientClassLst.getLast();
    SrvCfgClientClassLst.append( new TSrvCfgClientClass(string(yyvsp[-4].strval),cond));
    NodeClientClassLst.delLast();
;
    break;}
case 307:
#line 1654 "SrvParser.y"
{
;
    break;}
case 309:
#line 1660 "SrvParser.y"
{
    SPtr<Node> r =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> l = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_CONTAIN,l,r));
;
    break;}
case 310:
#line 1668 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();

    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_EQUAL,l,r));
;
    break;}
case 311:
#line 1677 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_AND,l,r));

;
    break;}
case 312:
#line 1686 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_OR,l,r));
;
    break;}
case 313:
#line 1697 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM));
;
    break;}
case 314:
#line 1701 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_DATA));
;
    break;}
case 315:
#line 1705 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_CLASS_ENTERPRISE_NUM));
;
    break;}
case 316:
#line 1709 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_CLASS_DATA));
;
    break;}
case 317:
#line 1713 "SrvParser.y"
{
    // Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    NodeClientClassLst.append(new NodeConstant(string(yyvsp[0].strval)));
;
    break;}
case 318:
#line 1718 "SrvParser.y"
{
    //Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    stringstream convert;
    string snum;
    convert<<yyvsp[0].ival;
    convert>>snum;
    NodeClientClassLst.append(new NodeConstant(snum));
;
    break;}
case 319:
#line 1727 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_SUBSTRING,l, yyvsp[-3].ival,yyvsp[-1].ival));
;
    break;}
}

#line 840 "../bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_SrvParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_SrvParser_LLOC.first_line;
      yylsp->first_column = YY_SrvParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_SrvParser_NERRS;

#ifdef YY_SrvParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_SrvParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_SrvParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_SrvParser_ERROR_VERBOSE */
        YY_SrvParser_ERROR((char*)"parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_SrvParser_CHAR == YYEOF)
	YYABORT;

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

      YY_SrvParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1039 "../bison++/bison.cc"
#line 1733 "SrvParser.y"


/////////////////////////////////////////////////////////////////////////////
// programs section

/**
 * method check whether interface with id=ifaceNr has been already declared
 *
 * @param ifaceNr
 *
 * @return true if interface was not declared
 */
bool SrvParser::IfaceDefined(int ifaceNr)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
    if ((ptr->getID())==ifaceNr) {
	Log(Crit) << "Interface with ID=" << ifaceNr << " is already defined." << LogEnd;
	return false;
    }
  return true;
}

/**
 * check whether interface with id=ifaceName has been already declared
 *
 * @param ifaceName
 *
 * @return true, if defined, false otherwise
 */
bool SrvParser::IfaceDefined(string ifaceName)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
  {
    string presName=ptr->getName();
    if (presName==ifaceName) {
	Log(Crit) << "Interface " << ifaceName << " is already defined." << LogEnd;
	return false;
    }
  }
  return true;
}

/**
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 *
 */
bool SrvParser::StartIfaceDeclaration(string ifaceName)
{
    if (!IfaceDefined(ifaceName))
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifaceName));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    ClientLst.clear();

    return true;
}

/**
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 *
 */
bool SrvParser::StartIfaceDeclaration(int ifindex)
{
    if (!IfaceDefined(ifindex))
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifindex));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    ClientLst.clear();

    return true;
}


/**
 * this method is called after inteface declaration has ended. It creates
 * new interface representation used in SrvCfgMgr. Also removes corresponding
 * element from the parser stack
 *
 * @return true if everything is ok
 */
bool SrvParser::EndIfaceDeclaration()
{
    // get this interface object
    SPtr<TSrvCfgIface> iface = SrvCfgIfaceLst.getLast();

    // set its options
    SrvCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());

    // copy all IA objects
    SPtr<TSrvCfgAddrClass> ptrAddrClass;
    SrvCfgAddrClassLst.first();
    while (ptrAddrClass=SrvCfgAddrClassLst.get())
	iface->addAddrClass(ptrAddrClass);
    SrvCfgAddrClassLst.clear();

    // copy all TA objects
    SPtr<TSrvCfgTA> ta;
    SrvCfgTALst.first();
    while (ta=SrvCfgTALst.get())
	iface->addTA(ta);
    SrvCfgTALst.clear();

    SPtr<TSrvCfgPD> pd;
    SrvCfgPDLst.first();
    while (pd=SrvCfgPDLst.get())
	iface->addPD(pd);
    SrvCfgPDLst.clear();

    iface->addClientExceptionsLst(ClientLst);

    // remove last option (representing this interface) from the parser stack
    ParserOptStack.delLast();

    return true;
}

void SrvParser::StartClassDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.append(new TSrvCfgAddrClass());
}

/**
 * this method is adds new object representig just parsed IA class.
 *
 * @return true if everything works ok.
 */
bool SrvParser::EndClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
	Log(Crit) << "No pools defined for this class." << LogEnd;
	return false;
    }
    //setting interface options on the basis of just read information
    SrvCfgAddrClassLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();

    return true;
}


/**
 * Just add global options
 *
 */
void SrvParser::StartTAClassDeclaration()
{
  ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
}

bool SrvParser::EndTAClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
	Log(Crit) << "No pools defined for this ta-class." << LogEnd;
	return false;
    }
    // create new object representing just parsed TA and add it to the list
    SPtr<TSrvCfgTA> ptrTA = new TSrvCfgTA();
    ptrTA->setOptions(ParserOptStack.getLast());
    SrvCfgTALst.append(ptrTA);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

void SrvParser::StartPDDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    this->PDLst.clear();
    this->PDPrefix = 0;
}

bool SrvParser::EndPDDeclaration()
{
    if (!this->PDLst.count()) {
	Log(Crit) << "No PD pools defined ." << LogEnd;
	return false;
    }
    if (!this->PDPrefix) {
	Log(Crit) << "PD prefix length not defined or set to 0." << LogEnd;
	return false;
    }

    int len = 0;
    this->PDLst.first();
    while ( SPtr<THostRange> pool = PDLst.get() ) {
	if (!len)
	    len = pool->getPrefixLength();
	if (len!=pool->getPrefixLength()) {
	    Log(Crit) << "Prefix pools with different lengths are not supported. Make sure that all 'pd-pool' uses the same prefix length." << LogEnd;
	    return false;
	}
    }
    if (len>PDPrefix) {
	Log(Crit) << "Clients are supposed to get /" << this->PDPrefix << " prefixes, but pd-pool(s) are only /" << len << " long." << LogEnd;
	return false;
    }
    if (len==PDPrefix) {
	Log(Warning) << "Prefix pool /" << PDPrefix << " defined and clients are supposed to get /" << len << " prefixes. Only ONE client will get prefix" << LogEnd;
    }

    SPtr<TSrvCfgPD> ptrPD = new TSrvCfgPD();
    ParserOptStack.getLast()->setPool(&this->PDLst);
    if (!ptrPD->setOptions(ParserOptStack.getLast(), this->PDPrefix))
	return false;
    SrvCfgPDLst.append(ptrPD);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

namespace std {
    extern yy_SrvParser_stype yylval;
}

int SrvParser::yylex()
{
    memset(&std::yylval,0, sizeof(std::yylval));
    memset(&this->yylval,0, sizeof(this->yylval));
    int x = this->lex->yylex();
    this->yylval=std::yylval;
    return x;
}

void SrvParser::yyerror(char *m)
{
    Log(Crit) << "Config parse error: line " << lex->lineno()
	      << ", unexpected [" << lex->YYText() << "] token." << LogEnd;
}

SrvParser::~SrvParser() {
    this->ParserOptStack.clear();
    this->SrvCfgIfaceLst.clear();
    this->SrvCfgAddrClassLst.clear();
    this->SrvCfgTALst.clear();
    this->PresentAddrLst.clear();
    this->PresentStringLst.clear();
    this->PresentRangeLst.clear();
}

static char bitMask[]= { 0, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff };

SPtr<TIPv6Addr> SrvParser::getRangeMin(char * addrPacked, int prefix) {
    char packed[16];
    char mask;
    memcpy(packed, addrPacked, 16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] & mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0;
    }
    return new TIPv6Addr(packed, false);
}

SPtr<TIPv6Addr> SrvParser::getRangeMax(char * addrPacked, int prefix){
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] | ~mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0xff;
    }

    return new TIPv6Addr(packed, false);
}
