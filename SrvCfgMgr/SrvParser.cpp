#define YY_SrvParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from SrvParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "../bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "../bison++/bison.cc"
#line 3 "SrvParser.y"

#include <iostream>
#include <string>
#include <stdint.h>
#include <sstream>
#include "Portable.h"
#include "DHCPConst.h"
#include "SmartPtr.h"
#include "Container.h"
#include "SrvParser.h"
#include "SrvParsGlobalOpt.h"
#include "SrvParsClassOpt.h"
#include "SrvParsIfaceOpt.h"
#include "OptAddr.h"
#include "OptAddrLst.h"
#include "OptDomainLst.h"
#include "OptString.h"
#include "OptVendorSpecInfo.h"
#include "OptRtPrefix.h"
#include "SrvOptAddrParams.h"
#include "SrvCfgMgr.h"
#include "SrvCfgTA.h"
#include "SrvCfgPD.h"
#include "SrvCfgClientClass.h"
#include "SrvCfgAddrClass.h"
#include "SrvCfgIface.h"
#include "SrvCfgOptions.h"
#include "DUID.h"
#include "Logger.h"
#include "FQDN.h"
#include "Key.h"
#include "Node.h"
#include "NodeConstant.h"
#include "NodeClientSpecific.h"
#include "NodeOperator.h"

using namespace std;

#define YY_USE_CLASS
#line 44 "SrvParser.y"

#include "FlexLexer.h"
#define YY_SrvParser_MEMBERS  FlexLexer * lex;                                                     \
List(TSrvParsGlobalOpt) ParserOptStack;    /* list of parsed interfaces/IAs/addrs */ \
List(TSrvCfgIface) SrvCfgIfaceLst;         /* list of SrvCfg interfaces */           \
List(TSrvCfgAddrClass) SrvCfgAddrClassLst; /* list of SrvCfg address classes */      \
List(TSrvCfgTA) SrvCfgTALst;               /* list of SrvCfg TA objects */           \
List(TSrvCfgPD) SrvCfgPDLst;		   /* list of SrvCfg PD objects */           \
List(TSrvCfgClientClass) SrvCfgClientClassLst; /* list of SrvCfgClientClass objs */  \
List(TIPv6Addr) PresentAddrLst;            /* address list (used for DNS,NTP,etc.)*/ \
List(std::string) PresentStringLst;             /* string list */                    \
List(Node) NodeClientClassLst;             /* Node list */                           \
List(TFQDN) PresentFQDNLst;                                                          \
SPtr<TIPv6Addr> addr;                                                                \
SPtr<TSIGKey> CurrentKey;                                                            \
DigestTypesLst DigestLst;                                                            \
List(THostRange) PresentRangeLst;                                                    \
List(THostRange) PDLst;                                                              \
List(TSrvCfgOptions) ClientLst;                                                      \
int PDPrefix;                                                                        \
bool IfaceDefined(int ifaceNr);                                                      \
bool IfaceDefined(string ifaceName);                                                 \
bool StartIfaceDeclaration(string iface);                                            \
bool StartIfaceDeclaration(int ifindex);                                             \
bool EndIfaceDeclaration();                                                          \
void StartClassDeclaration();                                                        \
bool EndClassDeclaration();                                                          \
SPtr<TIPv6Addr> getRangeMin(char * addrPacked, int prefix);                          \
SPtr<TIPv6Addr> getRangeMax(char * addrPacked, int prefix);                          \
void StartTAClassDeclaration();                                                      \
bool EndTAClassDeclaration();                                                        \
void StartPDDeclaration();                                                           \
bool EndPDDeclaration();                                                             \
TSrvCfgMgr * CfgMgr;                                                                 \
SPtr<TOpt> nextHop;                                                                  \
virtual ~SrvParser();
#define YY_SrvParser_CONSTRUCTOR_PARAM  yyFlexLexer * lex
#define YY_SrvParser_CONSTRUCTOR_CODE                                                 \
                     ParserOptStack.append(new TSrvParsGlobalOpt());    \
                     this->lex = lex;                                   \
                     CfgMgr = 0;                                        \
                     nextHop = 0;                                       \
                     yynerrs = 0;                                       \
                     yychar = 0;                                        \
                     PDPrefix = 0;

#line 95 "SrvParser.y"
typedef union
{
    unsigned int ival;
    char *strval;
    struct SDuid
    {
	int length;
	char* duid;
    } duidval;
    char addrval[16];
} yy_SrvParser_stype;
#define YY_SrvParser_STYPE yy_SrvParser_stype

#line 88 "../bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_SrvParser_BISON 1

#ifndef YY_SrvParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_SrvParser_COMPATIBILITY 1
 #else
  #define  YY_SrvParser_COMPATIBILITY 0
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_SrvParser_LTYPE
   #define YY_SrvParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_SrvParser_STYPE 
   #define YY_SrvParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_SrvParser_DEBUG
   #define  YY_SrvParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_SrvParser_USE_GOTO
  #define YY_SrvParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_SrvParser_USE_GOTO
 #define YY_SrvParser_USE_GOTO 0
#endif

#ifndef YY_SrvParser_PURE

 #line 130 "../bison++/bison.cc"

#line 130 "../bison++/bison.cc"
/*  YY_SrvParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "../bison++/bison.cc"

#line 134 "../bison++/bison.cc"
/* prefix */
#ifndef YY_SrvParser_DEBUG

 #line 136 "../bison++/bison.cc"
#define YY_SrvParser_DEBUG 1

#line 136 "../bison++/bison.cc"
/* YY_SrvParser_DEBUG */
#endif


#ifndef YY_SrvParser_LSP_NEEDED

 #line 141 "../bison++/bison.cc"

#line 141 "../bison++/bison.cc"
 /* YY_SrvParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_SrvParser_LSP_NEEDED
#ifndef YY_SrvParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_SrvParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_SrvParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_SrvParser_STYPE
#define YY_SrvParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_SrvParser_PARSE
#define YY_SrvParser_PARSE yyparse
#endif
#ifndef YY_SrvParser_LEX
#define YY_SrvParser_LEX yylex
#endif
#ifndef YY_SrvParser_LVAL
#define YY_SrvParser_LVAL yylval
#endif
#ifndef YY_SrvParser_LLOC
#define YY_SrvParser_LLOC yylloc
#endif
#ifndef YY_SrvParser_CHAR
#define YY_SrvParser_CHAR yychar
#endif
#ifndef YY_SrvParser_NERRS
#define YY_SrvParser_NERRS yynerrs
#endif
#ifndef YY_SrvParser_DEBUG_FLAG
#define YY_SrvParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_SrvParser_ERROR
#define YY_SrvParser_ERROR yyerror
#endif

#ifndef YY_SrvParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_SrvParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_SrvParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_SrvParser_PARSE_PARAM
  #define YY_SrvParser_PARSE_PARAM void
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_SrvParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_SrvParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_SrvParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_SrvParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_SrvParser_PURE
#  endif
#endif

#ifdef YY_SrvParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_SrvParser_DEBUG 
#  endif
#endif

#ifndef YY_SrvParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_SrvParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_SrvParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_SrvParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "../bison++/bison.cc"
#define	IFACE_	258
#define	RELAY_	259
#define	IFACE_ID_	260
#define	IFACE_ID_ORDER_	261
#define	CLASS_	262
#define	TACLASS_	263
#define	LOGNAME_	264
#define	LOGLEVEL_	265
#define	LOGMODE_	266
#define	LOGCOLORS_	267
#define	WORKDIR_	268
#define	OPTION_	269
#define	DNS_SERVER_	270
#define	DOMAIN_	271
#define	NTP_SERVER_	272
#define	TIME_ZONE_	273
#define	SIP_SERVER_	274
#define	SIP_DOMAIN_	275
#define	NIS_SERVER_	276
#define	NIS_DOMAIN_	277
#define	NISP_SERVER_	278
#define	NISP_DOMAIN_	279
#define	LIFETIME_	280
#define	FQDN_	281
#define	ACCEPT_UNKNOWN_FQDN_	282
#define	FQDN_DDNS_ADDRESS_	283
#define	DDNS_PROTOCOL_	284
#define	DDNS_TIMEOUT_	285
#define	ACCEPT_ONLY_	286
#define	REJECT_CLIENTS_	287
#define	POOL_	288
#define	SHARE_	289
#define	T1_	290
#define	T2_	291
#define	PREF_TIME_	292
#define	VALID_TIME_	293
#define	UNICAST_	294
#define	PREFERENCE_	295
#define	RAPID_COMMIT_	296
#define	IFACE_MAX_LEASE_	297
#define	CLASS_MAX_LEASE_	298
#define	CLNT_MAX_LEASE_	299
#define	STATELESS_	300
#define	CACHE_SIZE_	301
#define	PDCLASS_	302
#define	PD_LENGTH_	303
#define	PD_POOL_	304
#define	SCRIPT_	305
#define	VENDOR_SPEC_	306
#define	CLIENT_	307
#define	DUID_KEYWORD_	308
#define	REMOTE_ID_	309
#define	LINK_LOCAL_	310
#define	ADDRESS_	311
#define	PREFIX_	312
#define	GUESS_MODE_	313
#define	INACTIVE_MODE_	314
#define	EXPERIMENTAL_	315
#define	ADDR_PARAMS_	316
#define	REMOTE_AUTOCONF_NEIGHBORS_	317
#define	AFTR_	318
#define	AUTH_PROTOCOL_	319
#define	AUTH_ALGORITHM_	320
#define	AUTH_REPLAY_	321
#define	AUTH_METHODS_	322
#define	AUTH_DROP_UNAUTH_	323
#define	AUTH_REALM_	324
#define	KEY_	325
#define	SECRET_	326
#define	ALGORITHM_	327
#define	FUDGE_	328
#define	DIGEST_NONE_	329
#define	DIGEST_PLAIN_	330
#define	DIGEST_HMAC_MD5_	331
#define	DIGEST_HMAC_SHA1_	332
#define	DIGEST_HMAC_SHA224_	333
#define	DIGEST_HMAC_SHA256_	334
#define	DIGEST_HMAC_SHA384_	335
#define	DIGEST_HMAC_SHA512_	336
#define	ACCEPT_LEASEQUERY_	337
#define	BULKLQ_ACCEPT_	338
#define	BULKLQ_TCPPORT_	339
#define	BULKLQ_MAX_CONNS_	340
#define	BULKLQ_TIMEOUT_	341
#define	CLIENT_CLASS_	342
#define	MATCH_IF_	343
#define	EQ_	344
#define	AND_	345
#define	OR_	346
#define	CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_	347
#define	CLIENT_VENDOR_SPEC_DATA_	348
#define	CLIENT_VENDOR_CLASS_EN_	349
#define	CLIENT_VENDOR_CLASS_DATA_	350
#define	ALLOW_	351
#define	DENY_	352
#define	SUBSTRING_	353
#define	STRING_KEYWORD_	354
#define	ADDRESS_LIST_	355
#define	CONTAIN_	356
#define	NEXT_HOP_	357
#define	ROUTE_	358
#define	INFINITE_	359
#define	SUBNET_	360
#define	STRING_	361
#define	HEXNUMBER_	362
#define	INTNUMBER_	363
#define	IPV6ADDR_	364
#define	DUID_	365


#line 263 "../bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_SrvParser_CLASS
#define YY_SrvParser_CLASS SrvParser
#endif
#ifndef YY_SrvParser_INHERIT
#define YY_SrvParser_INHERIT
#endif
#ifndef YY_SrvParser_MEMBERS
#define YY_SrvParser_MEMBERS 
#endif
#ifndef YY_SrvParser_LEX_BODY
#define YY_SrvParser_LEX_BODY  
#endif
#ifndef YY_SrvParser_ERROR_BODY
#define YY_SrvParser_ERROR_BODY  
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_PARAM
#define YY_SrvParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_CODE
#define YY_SrvParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_INIT
#define YY_SrvParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_SrvParser_USE_CONST_TOKEN
#define YY_SrvParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_SrvParser_USE_CONST_TOKEN != 0
#ifndef YY_SrvParser_ENUM_TOKEN
#define YY_SrvParser_ENUM_TOKEN yy_SrvParser_enum_token
#endif
#endif

class YY_SrvParser_CLASS YY_SrvParser_INHERIT
{
public: 
#if YY_SrvParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "../bison++/bison.cc"
static const int IFACE_;
static const int RELAY_;
static const int IFACE_ID_;
static const int IFACE_ID_ORDER_;
static const int CLASS_;
static const int TACLASS_;
static const int LOGNAME_;
static const int LOGLEVEL_;
static const int LOGMODE_;
static const int LOGCOLORS_;
static const int WORKDIR_;
static const int OPTION_;
static const int DNS_SERVER_;
static const int DOMAIN_;
static const int NTP_SERVER_;
static const int TIME_ZONE_;
static const int SIP_SERVER_;
static const int SIP_DOMAIN_;
static const int NIS_SERVER_;
static const int NIS_DOMAIN_;
static const int NISP_SERVER_;
static const int NISP_DOMAIN_;
static const int LIFETIME_;
static const int FQDN_;
static const int ACCEPT_UNKNOWN_FQDN_;
static const int FQDN_DDNS_ADDRESS_;
static const int DDNS_PROTOCOL_;
static const int DDNS_TIMEOUT_;
static const int ACCEPT_ONLY_;
static const int REJECT_CLIENTS_;
static const int POOL_;
static const int SHARE_;
static const int T1_;
static const int T2_;
static const int PREF_TIME_;
static const int VALID_TIME_;
static const int UNICAST_;
static const int PREFERENCE_;
static const int RAPID_COMMIT_;
static const int IFACE_MAX_LEASE_;
static const int CLASS_MAX_LEASE_;
static const int CLNT_MAX_LEASE_;
static const int STATELESS_;
static const int CACHE_SIZE_;
static const int PDCLASS_;
static const int PD_LENGTH_;
static const int PD_POOL_;
static const int SCRIPT_;
static const int VENDOR_SPEC_;
static const int CLIENT_;
static const int DUID_KEYWORD_;
static const int REMOTE_ID_;
static const int LINK_LOCAL_;
static const int ADDRESS_;
static const int PREFIX_;
static const int GUESS_MODE_;
static const int INACTIVE_MODE_;
static const int EXPERIMENTAL_;
static const int ADDR_PARAMS_;
static const int REMOTE_AUTOCONF_NEIGHBORS_;
static const int AFTR_;
static const int AUTH_PROTOCOL_;
static const int AUTH_ALGORITHM_;
static const int AUTH_REPLAY_;
static const int AUTH_METHODS_;
static const int AUTH_DROP_UNAUTH_;
static const int AUTH_REALM_;
static const int KEY_;
static const int SECRET_;
static const int ALGORITHM_;
static const int FUDGE_;
static const int DIGEST_NONE_;
static const int DIGEST_PLAIN_;
static const int DIGEST_HMAC_MD5_;
static const int DIGEST_HMAC_SHA1_;
static const int DIGEST_HMAC_SHA224_;
static const int DIGEST_HMAC_SHA256_;
static const int DIGEST_HMAC_SHA384_;
static const int DIGEST_HMAC_SHA512_;
static const int ACCEPT_LEASEQUERY_;
static const int BULKLQ_ACCEPT_;
static const int BULKLQ_TCPPORT_;
static const int BULKLQ_MAX_CONNS_;
static const int BULKLQ_TIMEOUT_;
static const int CLIENT_CLASS_;
static const int MATCH_IF_;
static const int EQ_;
static const int AND_;
static const int OR_;
static const int CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_;
static const int CLIENT_VENDOR_SPEC_DATA_;
static const int CLIENT_VENDOR_CLASS_EN_;
static const int CLIENT_VENDOR_CLASS_DATA_;
static const int ALLOW_;
static const int DENY_;
static const int SUBSTRING_;
static const int STRING_KEYWORD_;
static const int ADDRESS_LIST_;
static const int CONTAIN_;
static const int NEXT_HOP_;
static const int ROUTE_;
static const int INFINITE_;
static const int SUBNET_;
static const int STRING_;
static const int HEXNUMBER_;
static const int INTNUMBER_;
static const int IPV6ADDR_;
static const int DUID_;


#line 307 "../bison++/bison.cc"
 /* decl const */
#else
enum YY_SrvParser_ENUM_TOKEN { YY_SrvParser_NULL_TOKEN=0

 #line 310 "../bison++/bison.cc"
	,IFACE_=258
	,RELAY_=259
	,IFACE_ID_=260
	,IFACE_ID_ORDER_=261
	,CLASS_=262
	,TACLASS_=263
	,LOGNAME_=264
	,LOGLEVEL_=265
	,LOGMODE_=266
	,LOGCOLORS_=267
	,WORKDIR_=268
	,OPTION_=269
	,DNS_SERVER_=270
	,DOMAIN_=271
	,NTP_SERVER_=272
	,TIME_ZONE_=273
	,SIP_SERVER_=274
	,SIP_DOMAIN_=275
	,NIS_SERVER_=276
	,NIS_DOMAIN_=277
	,NISP_SERVER_=278
	,NISP_DOMAIN_=279
	,LIFETIME_=280
	,FQDN_=281
	,ACCEPT_UNKNOWN_FQDN_=282
	,FQDN_DDNS_ADDRESS_=283
	,DDNS_PROTOCOL_=284
	,DDNS_TIMEOUT_=285
	,ACCEPT_ONLY_=286
	,REJECT_CLIENTS_=287
	,POOL_=288
	,SHARE_=289
	,T1_=290
	,T2_=291
	,PREF_TIME_=292
	,VALID_TIME_=293
	,UNICAST_=294
	,PREFERENCE_=295
	,RAPID_COMMIT_=296
	,IFACE_MAX_LEASE_=297
	,CLASS_MAX_LEASE_=298
	,CLNT_MAX_LEASE_=299
	,STATELESS_=300
	,CACHE_SIZE_=301
	,PDCLASS_=302
	,PD_LENGTH_=303
	,PD_POOL_=304
	,SCRIPT_=305
	,VENDOR_SPEC_=306
	,CLIENT_=307
	,DUID_KEYWORD_=308
	,REMOTE_ID_=309
	,LINK_LOCAL_=310
	,ADDRESS_=311
	,PREFIX_=312
	,GUESS_MODE_=313
	,INACTIVE_MODE_=314
	,EXPERIMENTAL_=315
	,ADDR_PARAMS_=316
	,REMOTE_AUTOCONF_NEIGHBORS_=317
	,AFTR_=318
	,AUTH_PROTOCOL_=319
	,AUTH_ALGORITHM_=320
	,AUTH_REPLAY_=321
	,AUTH_METHODS_=322
	,AUTH_DROP_UNAUTH_=323
	,AUTH_REALM_=324
	,KEY_=325
	,SECRET_=326
	,ALGORITHM_=327
	,FUDGE_=328
	,DIGEST_NONE_=329
	,DIGEST_PLAIN_=330
	,DIGEST_HMAC_MD5_=331
	,DIGEST_HMAC_SHA1_=332
	,DIGEST_HMAC_SHA224_=333
	,DIGEST_HMAC_SHA256_=334
	,DIGEST_HMAC_SHA384_=335
	,DIGEST_HMAC_SHA512_=336
	,ACCEPT_LEASEQUERY_=337
	,BULKLQ_ACCEPT_=338
	,BULKLQ_TCPPORT_=339
	,BULKLQ_MAX_CONNS_=340
	,BULKLQ_TIMEOUT_=341
	,CLIENT_CLASS_=342
	,MATCH_IF_=343
	,EQ_=344
	,AND_=345
	,OR_=346
	,CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=347
	,CLIENT_VENDOR_SPEC_DATA_=348
	,CLIENT_VENDOR_CLASS_EN_=349
	,CLIENT_VENDOR_CLASS_DATA_=350
	,ALLOW_=351
	,DENY_=352
	,SUBSTRING_=353
	,STRING_KEYWORD_=354
	,ADDRESS_LIST_=355
	,CONTAIN_=356
	,NEXT_HOP_=357
	,ROUTE_=358
	,INFINITE_=359
	,SUBNET_=360
	,STRING_=361
	,HEXNUMBER_=362
	,INTNUMBER_=363
	,IPV6ADDR_=364
	,DUID_=365


#line 310 "../bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_SrvParser_PARSE (YY_SrvParser_PARSE_PARAM);
 virtual void YY_SrvParser_ERROR(char *msg) YY_SrvParser_ERROR_BODY;
#ifdef YY_SrvParser_PURE
#ifdef YY_SrvParser_LSP_NEEDED
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL,YY_SrvParser_LTYPE *YY_SrvParser_LLOC) YY_SrvParser_LEX_BODY;
#else
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL) YY_SrvParser_LEX_BODY;
#endif
#else
 virtual int YY_SrvParser_LEX() YY_SrvParser_LEX_BODY;
 YY_SrvParser_STYPE YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
 YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
 int   YY_SrvParser_NERRS;
 int    YY_SrvParser_CHAR;
#endif
#if YY_SrvParser_DEBUG != 0
 int YY_SrvParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM);
public:
 YY_SrvParser_MEMBERS 
};
/* other declare folow */
#if YY_SrvParser_USE_CONST_TOKEN != 0

 #line 341 "../bison++/bison.cc"
const int YY_SrvParser_CLASS::IFACE_=258;
const int YY_SrvParser_CLASS::RELAY_=259;
const int YY_SrvParser_CLASS::IFACE_ID_=260;
const int YY_SrvParser_CLASS::IFACE_ID_ORDER_=261;
const int YY_SrvParser_CLASS::CLASS_=262;
const int YY_SrvParser_CLASS::TACLASS_=263;
const int YY_SrvParser_CLASS::LOGNAME_=264;
const int YY_SrvParser_CLASS::LOGLEVEL_=265;
const int YY_SrvParser_CLASS::LOGMODE_=266;
const int YY_SrvParser_CLASS::LOGCOLORS_=267;
const int YY_SrvParser_CLASS::WORKDIR_=268;
const int YY_SrvParser_CLASS::OPTION_=269;
const int YY_SrvParser_CLASS::DNS_SERVER_=270;
const int YY_SrvParser_CLASS::DOMAIN_=271;
const int YY_SrvParser_CLASS::NTP_SERVER_=272;
const int YY_SrvParser_CLASS::TIME_ZONE_=273;
const int YY_SrvParser_CLASS::SIP_SERVER_=274;
const int YY_SrvParser_CLASS::SIP_DOMAIN_=275;
const int YY_SrvParser_CLASS::NIS_SERVER_=276;
const int YY_SrvParser_CLASS::NIS_DOMAIN_=277;
const int YY_SrvParser_CLASS::NISP_SERVER_=278;
const int YY_SrvParser_CLASS::NISP_DOMAIN_=279;
const int YY_SrvParser_CLASS::LIFETIME_=280;
const int YY_SrvParser_CLASS::FQDN_=281;
const int YY_SrvParser_CLASS::ACCEPT_UNKNOWN_FQDN_=282;
const int YY_SrvParser_CLASS::FQDN_DDNS_ADDRESS_=283;
const int YY_SrvParser_CLASS::DDNS_PROTOCOL_=284;
const int YY_SrvParser_CLASS::DDNS_TIMEOUT_=285;
const int YY_SrvParser_CLASS::ACCEPT_ONLY_=286;
const int YY_SrvParser_CLASS::REJECT_CLIENTS_=287;
const int YY_SrvParser_CLASS::POOL_=288;
const int YY_SrvParser_CLASS::SHARE_=289;
const int YY_SrvParser_CLASS::T1_=290;
const int YY_SrvParser_CLASS::T2_=291;
const int YY_SrvParser_CLASS::PREF_TIME_=292;
const int YY_SrvParser_CLASS::VALID_TIME_=293;
const int YY_SrvParser_CLASS::UNICAST_=294;
const int YY_SrvParser_CLASS::PREFERENCE_=295;
const int YY_SrvParser_CLASS::RAPID_COMMIT_=296;
const int YY_SrvParser_CLASS::IFACE_MAX_LEASE_=297;
const int YY_SrvParser_CLASS::CLASS_MAX_LEASE_=298;
const int YY_SrvParser_CLASS::CLNT_MAX_LEASE_=299;
const int YY_SrvParser_CLASS::STATELESS_=300;
const int YY_SrvParser_CLASS::CACHE_SIZE_=301;
const int YY_SrvParser_CLASS::PDCLASS_=302;
const int YY_SrvParser_CLASS::PD_LENGTH_=303;
const int YY_SrvParser_CLASS::PD_POOL_=304;
const int YY_SrvParser_CLASS::SCRIPT_=305;
const int YY_SrvParser_CLASS::VENDOR_SPEC_=306;
const int YY_SrvParser_CLASS::CLIENT_=307;
const int YY_SrvParser_CLASS::DUID_KEYWORD_=308;
const int YY_SrvParser_CLASS::REMOTE_ID_=309;
const int YY_SrvParser_CLASS::LINK_LOCAL_=310;
const int YY_SrvParser_CLASS::ADDRESS_=311;
const int YY_SrvParser_CLASS::PREFIX_=312;
const int YY_SrvParser_CLASS::GUESS_MODE_=313;
const int YY_SrvParser_CLASS::INACTIVE_MODE_=314;
const int YY_SrvParser_CLASS::EXPERIMENTAL_=315;
const int YY_SrvParser_CLASS::ADDR_PARAMS_=316;
const int YY_SrvParser_CLASS::REMOTE_AUTOCONF_NEIGHBORS_=317;
const int YY_SrvParser_CLASS::AFTR_=318;
const int YY_SrvParser_CLASS::AUTH_PROTOCOL_=319;
const int YY_SrvParser_CLASS::AUTH_ALGORITHM_=320;
const int YY_SrvParser_CLASS::AUTH_REPLAY_=321;
const int YY_SrvParser_CLASS::AUTH_METHODS_=322;
const int YY_SrvParser_CLASS::AUTH_DROP_UNAUTH_=323;
const int YY_SrvParser_CLASS::AUTH_REALM_=324;
const int YY_SrvParser_CLASS::KEY_=325;
const int YY_SrvParser_CLASS::SECRET_=326;
const int YY_SrvParser_CLASS::ALGORITHM_=327;
const int YY_SrvParser_CLASS::FUDGE_=328;
const int YY_SrvParser_CLASS::DIGEST_NONE_=329;
const int YY_SrvParser_CLASS::DIGEST_PLAIN_=330;
const int YY_SrvParser_CLASS::DIGEST_HMAC_MD5_=331;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA1_=332;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA224_=333;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA256_=334;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA384_=335;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA512_=336;
const int YY_SrvParser_CLASS::ACCEPT_LEASEQUERY_=337;
const int YY_SrvParser_CLASS::BULKLQ_ACCEPT_=338;
const int YY_SrvParser_CLASS::BULKLQ_TCPPORT_=339;
const int YY_SrvParser_CLASS::BULKLQ_MAX_CONNS_=340;
const int YY_SrvParser_CLASS::BULKLQ_TIMEOUT_=341;
const int YY_SrvParser_CLASS::CLIENT_CLASS_=342;
const int YY_SrvParser_CLASS::MATCH_IF_=343;
const int YY_SrvParser_CLASS::EQ_=344;
const int YY_SrvParser_CLASS::AND_=345;
const int YY_SrvParser_CLASS::OR_=346;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=347;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_DATA_=348;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_EN_=349;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_DATA_=350;
const int YY_SrvParser_CLASS::ALLOW_=351;
const int YY_SrvParser_CLASS::DENY_=352;
const int YY_SrvParser_CLASS::SUBSTRING_=353;
const int YY_SrvParser_CLASS::STRING_KEYWORD_=354;
const int YY_SrvParser_CLASS::ADDRESS_LIST_=355;
const int YY_SrvParser_CLASS::CONTAIN_=356;
const int YY_SrvParser_CLASS::NEXT_HOP_=357;
const int YY_SrvParser_CLASS::ROUTE_=358;
const int YY_SrvParser_CLASS::INFINITE_=359;
const int YY_SrvParser_CLASS::SUBNET_=360;
const int YY_SrvParser_CLASS::STRING_=361;
const int YY_SrvParser_CLASS::HEXNUMBER_=362;
const int YY_SrvParser_CLASS::INTNUMBER_=363;
const int YY_SrvParser_CLASS::IPV6ADDR_=364;
const int YY_SrvParser_CLASS::DUID_=365;


#line 341 "../bison++/bison.cc"
 /* const YY_SrvParser_CLASS::token */
#endif
/*apres const  */
YY_SrvParser_CLASS::YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM) YY_SrvParser_CONSTRUCTOR_INIT
{
#if YY_SrvParser_DEBUG != 0
YY_SrvParser_DEBUG_FLAG=0;
#endif
YY_SrvParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "../bison++/bison.cc"


#define	YYFINAL		495
#define	YYFLAG		-32768
#define	YYNTBASE	119

#define YYTRANSLATE(x) ((unsigned)(x) <= 365 ? yytranslate[x] : 257)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   117,
   118,     2,     2,   116,   114,     2,   115,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,   113,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   111,     2,   112,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110
};

#if YY_SrvParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,    10,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
    81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
   101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
   121,   123,   125,   127,   128,   135,   136,   143,   145,   148,
   150,   152,   154,   156,   159,   162,   165,   168,   169,   170,
   179,   181,   184,   186,   188,   190,   194,   198,   202,   206,
   210,   211,   219,   220,   230,   231,   239,   241,   244,   246,
   248,   250,   252,   254,   256,   258,   260,   262,   264,   266,
   268,   270,   272,   274,   276,   279,   284,   285,   291,   293,
   296,   297,   303,   305,   308,   310,   312,   314,   316,   318,
   320,   322,   324,   325,   331,   333,   336,   338,   340,   342,
   344,   346,   348,   350,   352,   353,   360,   363,   365,   368,
   375,   380,   387,   390,   393,   396,   399,   400,   404,   406,
   410,   412,   414,   416,   418,   420,   422,   424,   426,   429,
   431,   435,   439,   443,   449,   455,   457,   459,   461,   465,
   471,   479,   481,   485,   487,   491,   495,   499,   505,   509,
   511,   515,   519,   525,   527,   531,   535,   541,   542,   546,
   547,   551,   552,   556,   557,   561,   564,   567,   572,   575,
   580,   583,   586,   591,   594,   599,   602,   605,   608,   612,
   617,   622,   623,   629,   634,   635,   640,   643,   646,   649,
   652,   655,   658,   661,   664,   667,   669,   671,   674,   676,
   678,   681,   684,   686,   689,   692,   695,   698,   701,   704,
   707,   710,   713,   716,   721,   726,   728,   730,   732,   734,
   736,   738,   740,   742,   744,   746,   748,   750,   753,   756,
   757,   762,   763,   768,   769,   774,   778,   779,   784,   785,
   790,   791,   796,   797,   803,   804,   811,   815,   818,   821,
   824,   827,   828,   833,   834,   839,   843,   847,   851,   852,
   857,   858,   865,   868,   869,   875,   881,   887,   893,   895,
   897,   899,   901,   903,   905
};

static const short yyrhs[] = {   120,
     0,     0,   121,     0,   123,     0,   120,   121,     0,   120,
   123,     0,   122,     0,   202,     0,   201,     0,   203,     0,
   204,     0,   205,     0,   206,     0,   212,     0,   158,     0,
   159,     0,   160,     0,   161,     0,   162,     0,   166,     0,
   210,     0,   211,     0,   240,     0,   241,     0,   242,     0,
   207,     0,   252,     0,   127,     0,   208,     0,   221,     0,
   218,     0,   219,     0,   213,     0,   214,     0,   215,     0,
   216,     0,   217,     0,   198,     0,   200,     0,   199,     0,
   197,     0,   189,     0,   224,     0,   226,     0,   228,     0,
   230,     0,   231,     0,   233,     0,   235,     0,   239,     0,
   243,     0,   247,     0,   245,     0,   248,     0,   192,     0,
   249,     0,   193,     0,   195,     0,   150,     0,   250,     0,
   135,     0,   209,     0,   220,     0,     0,     3,   106,   111,
   124,   126,   112,     0,     0,     3,   168,   111,   125,   126,
   112,     0,   122,     0,   126,   122,     0,   143,     0,   146,
     0,   154,     0,   157,     0,   126,   146,     0,   126,   143,
     0,   126,   154,     0,   126,   157,     0,     0,     0,    70,
   106,   111,   128,   130,   112,   129,   113,     0,   131,     0,
   130,   131,     0,   134,     0,   132,     0,   133,     0,    71,
   106,   113,     0,    73,   168,   113,     0,    72,    79,   113,
     0,    72,    77,   113,     0,    72,    76,   113,     0,     0,
    52,    53,   110,   111,   136,   139,   112,     0,     0,    52,
    54,   168,   114,   110,   111,   137,   139,   112,     0,     0,
    52,    55,   109,   111,   138,   139,   112,     0,   140,     0,
   139,   140,     0,   224,     0,   226,     0,   228,     0,   230,
     0,   231,     0,   233,     0,   243,     0,   247,     0,   245,
     0,   248,     0,   249,     0,   250,     0,   193,     0,   192,
     0,   141,     0,   142,     0,    56,   109,     0,    57,   109,
   115,   168,     0,     0,     7,   111,   144,   145,   112,     0,
   221,     0,   145,   221,     0,     0,     8,   111,   147,   148,
   112,     0,   149,     0,   148,   149,     0,   184,     0,   185,
     0,   179,     0,   190,     0,   175,     0,   177,     0,   222,
     0,   223,     0,     0,    47,   111,   151,   152,   112,     0,
   153,     0,   153,   152,     0,   183,     0,   181,     0,   185,
     0,   184,     0,   187,     0,   188,     0,   222,     0,   223,
     0,     0,   102,   109,   111,   155,   156,   112,     0,   102,
   109,     0,   157,     0,   156,   157,     0,   103,   109,   115,
   108,    25,   108,     0,   103,   109,   115,   108,     0,   103,
   109,   115,   108,    25,   104,     0,    64,   106,     0,    65,
   106,     0,    66,   106,     0,    69,   106,     0,     0,    67,
   163,   164,     0,   165,     0,   164,   116,   165,     0,    74,
     0,    75,     0,    76,     0,    77,     0,    78,     0,    79,
     0,    80,     0,    81,     0,    68,   168,     0,   106,     0,
   106,   114,   110,     0,   106,   114,   109,     0,   167,   116,
   106,     0,   167,   116,   106,   114,   110,     0,   167,   116,
   106,   114,   109,     0,   107,     0,   108,     0,   109,     0,
   169,   116,   109,     0,   168,   114,   168,   114,   110,     0,
   170,   116,   168,   114,   168,   114,   110,     0,   106,     0,
   171,   116,   106,     0,   109,     0,   109,   114,   109,     0,
   109,   115,   108,     0,   172,   116,   109,     0,   172,   116,
   109,   114,   109,     0,   109,   115,   108,     0,   109,     0,
   109,   114,   109,     0,   174,   116,   109,     0,   174,   116,
   109,   114,   109,     0,   110,     0,   110,   114,   110,     0,
   174,   116,   110,     0,   174,   116,   110,   114,   110,     0,
     0,    32,   176,   174,     0,     0,    31,   178,   174,     0,
     0,    33,   180,   172,     0,     0,    49,   182,   173,     0,
    48,   168,     0,    37,   168,     0,    37,   168,   114,   168,
     0,    38,   168,     0,    38,   168,   114,   168,     0,    34,
   168,     0,    35,   168,     0,    35,   168,   114,   168,     0,
    36,   168,     0,    36,   168,   114,   168,     0,    44,   168,
     0,    43,   168,     0,    61,   168,     0,    14,    63,   106,
     0,    14,   168,    53,   110,     0,    14,   168,    56,   109,
     0,     0,    14,   168,   100,   194,   169,     0,    14,   168,
    99,   106,     0,     0,    14,    62,   196,   169,     0,    42,
   168,     0,    39,   109,     0,    41,   168,     0,    40,   168,
     0,    10,   168,     0,    11,   106,     0,     9,   106,     0,
    12,   168,     0,    13,   106,     0,    45,     0,    58,     0,
    50,   106,     0,    59,     0,    60,     0,     6,   106,     0,
    46,   168,     0,    82,     0,    82,   168,     0,    83,   168,
     0,    84,   168,     0,    85,   168,     0,    86,   168,     0,
     4,   106,     0,     4,   168,     0,     5,   168,     0,     5,
   110,     0,     5,   106,     0,   105,   109,   115,   168,     0,
   105,   109,   114,   109,     0,   184,     0,   185,     0,   179,
     0,   186,     0,   187,     0,   188,     0,   175,     0,   177,
     0,   190,     0,   191,     0,   222,     0,   223,     0,    96,
   106,     0,    97,   106,     0,     0,    14,    15,   225,   169,
     0,     0,    14,    16,   227,   171,     0,     0,    14,    17,
   229,   169,     0,    14,    18,   106,     0,     0,    14,    19,
   232,   169,     0,     0,    14,    20,   234,   171,     0,     0,
    14,    26,   236,   167,     0,     0,    14,    26,   108,   237,
   167,     0,     0,    14,    26,   108,   108,   238,   167,     0,
    27,   168,   106,     0,    27,   168,     0,    28,   109,     0,
    29,   106,     0,    30,   168,     0,     0,    14,    21,   244,
   169,     0,     0,    14,    23,   246,   169,     0,    14,    22,
   106,     0,    14,    24,   106,     0,    14,    25,   168,     0,
     0,    14,    51,   251,   170,     0,     0,    87,   106,   111,
   253,   254,   112,     0,    88,   255,     0,     0,   117,   256,
   101,   256,   118,     0,   117,   256,    89,   256,   118,     0,
   117,   255,    90,   255,   118,     0,   117,   255,    91,   255,
   118,     0,    92,     0,    93,     0,    94,     0,    95,     0,
   106,     0,   168,     0,    98,   117,   256,   116,   168,   116,
   168,   118,     0
};

#endif

#if (YY_SrvParser_DEBUG != 0) || defined(YY_SrvParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   161,   162,   166,   167,   168,   169,   173,   174,   175,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   194,   195,   199,
   200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   230,   231,   232,   237,   242,   250,   255,   261,   262,   263,
   264,   265,   266,   267,   268,   269,   270,   274,   279,   299,
   302,   303,   307,   308,   309,   313,   320,   326,   327,   328,
   333,   339,   347,   353,   361,   367,   376,   377,   381,   382,
   383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
   393,   394,   395,   396,   399,   407,   416,   421,   429,   430,
   435,   438,   446,   447,   451,   452,   453,   454,   455,   456,
   457,   458,   462,   465,   473,   474,   477,   478,   479,   480,
   481,   482,   483,   484,   491,   498,   503,   512,   513,   516,
   526,   535,   546,   564,   570,   582,   587,   590,   597,   598,
   602,   603,   604,   605,   606,   607,   608,   609,   614,   627,
   632,   639,   645,   650,   656,   665,   666,   670,   674,   681,
   689,   699,   700,   704,   708,   717,   733,   737,   749,   772,
   776,   785,   789,   798,   804,   816,   822,   836,   840,   846,
   850,   856,   860,   866,   869,   874,   881,   886,   894,   899,
   907,   919,   924,   932,   937,   945,   952,   959,   972,   980,
   986,   994,   998,  1003,  1011,  1022,  1031,  1038,  1045,  1060,
  1072,  1078,  1083,  1090,  1096,  1103,  1110,  1117,  1124,  1130,
  1137,  1158,  1169,  1174,  1190,  1201,  1207,  1213,  1222,  1226,
  1233,  1238,  1243,  1251,  1264,  1274,  1275,  1276,  1277,  1278,
  1279,  1280,  1281,  1282,  1283,  1284,  1285,  1289,  1318,  1351,
  1355,  1365,  1368,  1378,  1382,  1393,  1405,  1408,  1419,  1422,
  1434,  1442,  1445,  1468,  1472,  1500,  1507,  1512,  1520,  1528,
  1545,  1555,  1558,  1569,  1572,  1583,  1595,  1606,  1617,  1619,
  1626,  1629,  1639,  1645,  1645,  1653,  1662,  1671,  1682,  1686,
  1690,  1694,  1698,  1703,  1712
};

static const char * const yytname[] = {   "$","error","$illegal.","IFACE_","RELAY_",
"IFACE_ID_","IFACE_ID_ORDER_","CLASS_","TACLASS_","LOGNAME_","LOGLEVEL_","LOGMODE_",
"LOGCOLORS_","WORKDIR_","OPTION_","DNS_SERVER_","DOMAIN_","NTP_SERVER_","TIME_ZONE_",
"SIP_SERVER_","SIP_DOMAIN_","NIS_SERVER_","NIS_DOMAIN_","NISP_SERVER_","NISP_DOMAIN_",
"LIFETIME_","FQDN_","ACCEPT_UNKNOWN_FQDN_","FQDN_DDNS_ADDRESS_","DDNS_PROTOCOL_",
"DDNS_TIMEOUT_","ACCEPT_ONLY_","REJECT_CLIENTS_","POOL_","SHARE_","T1_","T2_",
"PREF_TIME_","VALID_TIME_","UNICAST_","PREFERENCE_","RAPID_COMMIT_","IFACE_MAX_LEASE_",
"CLASS_MAX_LEASE_","CLNT_MAX_LEASE_","STATELESS_","CACHE_SIZE_","PDCLASS_","PD_LENGTH_",
"PD_POOL_","SCRIPT_","VENDOR_SPEC_","CLIENT_","DUID_KEYWORD_","REMOTE_ID_","LINK_LOCAL_",
"ADDRESS_","PREFIX_","GUESS_MODE_","INACTIVE_MODE_","EXPERIMENTAL_","ADDR_PARAMS_",
"REMOTE_AUTOCONF_NEIGHBORS_","AFTR_","AUTH_PROTOCOL_","AUTH_ALGORITHM_","AUTH_REPLAY_",
"AUTH_METHODS_","AUTH_DROP_UNAUTH_","AUTH_REALM_","KEY_","SECRET_","ALGORITHM_",
"FUDGE_","DIGEST_NONE_","DIGEST_PLAIN_","DIGEST_HMAC_MD5_","DIGEST_HMAC_SHA1_",
"DIGEST_HMAC_SHA224_","DIGEST_HMAC_SHA256_","DIGEST_HMAC_SHA384_","DIGEST_HMAC_SHA512_",
"ACCEPT_LEASEQUERY_","BULKLQ_ACCEPT_","BULKLQ_TCPPORT_","BULKLQ_MAX_CONNS_",
"BULKLQ_TIMEOUT_","CLIENT_CLASS_","MATCH_IF_","EQ_","AND_","OR_","CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_",
"CLIENT_VENDOR_SPEC_DATA_","CLIENT_VENDOR_CLASS_EN_","CLIENT_VENDOR_CLASS_DATA_",
"ALLOW_","DENY_","SUBSTRING_","STRING_KEYWORD_","ADDRESS_LIST_","CONTAIN_","NEXT_HOP_",
"ROUTE_","INFINITE_","SUBNET_","STRING_","HEXNUMBER_","INTNUMBER_","IPV6ADDR_",
"DUID_","'{'","'}'","';'","'-'","'/'","','","'('","')'","Grammar","GlobalDeclarationList",
"GlobalOption","InterfaceOptionDeclaration","InterfaceDeclaration","@1","@2",
"InterfaceDeclarationsList","Key","@3","@4","KeyOptions","KeyOption","KeySecret",
"KeyFudge","KeyAlgorithm","Client","@5","@6","@7","ClientOptions","ClientOption",
"AddressReservation","PrefixReservation","ClassDeclaration","@8","ClassOptionDeclarationsList",
"TAClassDeclaration","@9","TAClassOptionsList","TAClassOption","PDDeclaration",
"@10","PDOptionsList","PDOptions","NextHopDeclaration","@11","RouteList","Route",
"AuthProtocol","AuthAlgorithm","AuthReplay","AuthRealm","AuthMethods","@12",
"DigestList","Digest","AuthDropUnauthenticated","FQDNList","Number","ADDRESSList",
"VendorSpecList","StringList","ADDRESSRangeList","PDRangeList","ADDRESSDUIDRangeList",
"RejectClientsOption","@13","AcceptOnlyOption","@14","PoolOption","@15","PDPoolOption",
"@16","PDLength","PreferredTimeOption","ValidTimeOption","ShareOption","T1Option",
"T2Option","ClntMaxLeaseOption","ClassMaxLeaseOption","AddrParams","DsLiteAftrName",
"ExtraOption","@17","RemoteAutoconfNeighborsOption","@18","IfaceMaxLeaseOption",
"UnicastAddressOption","RapidCommitOption","PreferenceOption","LogLevelOption",
"LogModeOption","LogNameOption","LogColors","WorkDirOption","StatelessOption",
"GuessMode","ScriptName","InactiveMode","Experimental","IfaceIDOrder","CacheSizeOption",
"AcceptLeaseQuery","BulkLeaseQueryAccept","BulkLeaseQueryTcpPort","BulkLeaseQueryMaxConns",
"BulkLeaseQueryTimeout","RelayOption","InterfaceIDOption","Subnet","ClassOptionDeclaration",
"AllowClientClassDeclaration","DenyClientClassDeclaration","DNSServerOption",
"@19","DomainOption","@20","NTPServerOption","@21","TimeZoneOption","SIPServerOption",
"@22","SIPDomainOption","@23","FQDNOption","@24","@25","@26","AcceptUnknownFQDN",
"FqdnDdnsAddress","DdnsProtocol","DdnsTimeout","NISServerOption","@27","NISPServerOption",
"@28","NISDomainOption","NISPDomainOption","LifetimeOption","VendorSpecOption",
"@29","ClientClass","@30","ClientClassDecleration","Condition","Expr",""
};
#endif

static const short yyr1[] = {     0,
   119,   119,   120,   120,   120,   120,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   122,   122,   124,   123,   125,   123,   126,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   128,   129,   127,
   130,   130,   131,   131,   131,   132,   133,   134,   134,   134,
   136,   135,   137,   135,   138,   135,   139,   139,   140,   140,
   140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
   140,   140,   140,   140,   141,   142,   144,   143,   145,   145,
   147,   146,   148,   148,   149,   149,   149,   149,   149,   149,
   149,   149,   151,   150,   152,   152,   153,   153,   153,   153,
   153,   153,   153,   153,   155,   154,   154,   156,   156,   157,
   157,   157,   158,   159,   160,   161,   163,   162,   164,   164,
   165,   165,   165,   165,   165,   165,   165,   165,   166,   167,
   167,   167,   167,   167,   167,   168,   168,   169,   169,   170,
   170,   171,   171,   172,   172,   172,   172,   172,   173,   174,
   174,   174,   174,   174,   174,   174,   174,   176,   175,   178,
   177,   180,   179,   182,   181,   183,   184,   184,   185,   185,
   186,   187,   187,   188,   188,   189,   190,   191,   192,   193,
   193,   194,   193,   193,   196,   195,   197,   198,   199,   200,
   201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   213,   214,   215,   216,   217,   218,   218,
   219,   219,   219,   220,   220,   221,   221,   221,   221,   221,
   221,   221,   221,   221,   221,   221,   221,   222,   223,   225,
   224,   227,   226,   229,   228,   230,   232,   231,   234,   233,
   236,   235,   237,   235,   238,   235,   239,   239,   240,   241,
   242,   244,   243,   246,   245,   247,   248,   249,   251,   250,
   253,   252,   254,   255,   255,   255,   255,   255,   256,   256,
   256,   256,   256,   256,   256
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     0,     6,     0,     6,     1,     2,     1,
     1,     1,     1,     2,     2,     2,     2,     0,     0,     8,
     1,     2,     1,     1,     1,     3,     3,     3,     3,     3,
     0,     7,     0,     9,     0,     7,     1,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     4,     0,     5,     1,     2,
     0,     5,     1,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     5,     1,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     0,     6,     2,     1,     2,     6,
     4,     6,     2,     2,     2,     2,     0,     3,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
     3,     3,     3,     5,     5,     1,     1,     1,     3,     5,
     7,     1,     3,     1,     3,     3,     3,     5,     3,     1,
     3,     3,     5,     1,     3,     3,     5,     0,     3,     0,
     3,     0,     3,     0,     3,     2,     2,     4,     2,     4,
     2,     2,     4,     2,     4,     2,     2,     2,     3,     4,
     4,     0,     5,     4,     0,     4,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     1,     2,     1,     1,
     2,     2,     1,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     4,     4,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     2,     0,
     4,     0,     4,     0,     4,     3,     0,     4,     0,     4,
     0,     4,     0,     5,     0,     6,     3,     2,     2,     2,
     2,     0,     4,     0,     4,     3,     3,     3,     0,     4,
     0,     6,     2,     0,     5,     5,     5,     5,     1,     1,
     1,     1,     1,     1,     8
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   200,   198,   202,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   236,     0,
     0,     0,     0,   237,   239,   240,     0,     0,     0,     0,
   157,     0,     0,     0,   243,     0,     0,     0,     0,     0,
     0,     0,     0,     1,     3,     7,     4,    28,    61,    59,
    15,    16,    17,    18,    19,    20,   262,   263,   258,   256,
   257,   259,   260,   261,    42,   264,   265,    55,    57,    58,
    41,    38,    40,    39,     9,     8,    10,    11,    12,    13,
    26,    29,    62,    21,    22,    14,    33,    34,    35,    36,
    37,    31,    32,    63,    30,   266,   267,    43,    44,    45,
    46,    47,    48,    49,    50,    23,    24,    25,    51,    53,
    52,    54,    56,    60,    27,     0,   176,   177,     0,   249,
   250,   253,   252,   251,   241,   233,   231,   232,   234,   235,
   270,   272,   274,     0,   277,   279,   292,     0,   294,     0,
     0,   281,   299,   225,     0,     0,   288,   289,   290,   291,
     0,     0,     0,   211,   212,   214,   207,   209,   228,   230,
   229,   227,   217,   216,   242,   133,   238,     0,     0,     0,
   218,   153,   154,   155,     0,   169,   156,     0,   244,   245,
   246,   247,   248,     0,   268,   269,     0,     5,     6,    64,
    66,     0,     0,     0,   276,     0,     0,     0,   296,     0,
   297,   298,   283,     0,     0,     0,   219,     0,     0,     0,
   222,   287,   190,   194,   201,   199,   184,   203,     0,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,   164,
   165,   166,   167,   168,   158,   159,    78,   301,     0,     0,
     0,     0,   178,   271,   182,   273,   275,   278,   280,   293,
   295,   285,     0,   170,   282,     0,   300,   226,   220,   221,
   224,     0,     0,     0,     0,     0,     0,     0,   213,   215,
   208,   210,     0,   204,     0,   135,   138,   137,   140,   139,
   141,   142,   143,   144,    91,     0,    95,     0,     0,     0,
   255,   254,     0,     0,     0,     0,    68,     0,    70,    71,
    72,    73,     0,     0,     0,     0,   284,     0,     0,     0,
     0,   223,   191,   195,   192,   196,   185,   186,   187,   206,
     0,   134,   136,     0,     0,     0,   160,     0,     0,     0,
     0,    81,    84,    85,    83,   304,     0,   117,   121,   147,
     0,    65,    69,    75,    74,    76,    77,    67,   179,   183,
   286,   172,   171,   173,     0,     0,     0,     0,     0,     0,
   205,     0,     0,     0,     0,    97,   113,   114,   112,   111,
    99,   100,   101,   102,   103,   104,   105,   107,   106,   108,
   109,   110,    93,     0,     0,     0,     0,     0,     0,    79,
    82,   304,   303,   302,     0,     0,   145,     0,     0,     0,
     0,   193,   197,   188,     0,   115,     0,    92,    98,     0,
    96,    86,    90,    89,    88,    87,     0,   309,   310,   311,
   312,     0,   313,   314,     0,     0,     0,   119,     0,   123,
   129,   130,   127,   125,   126,   128,   131,   132,     0,   151,
   175,   174,   180,     0,   189,     0,     0,    80,     0,   304,
   304,     0,     0,   118,   120,   122,   124,     0,   148,     0,
     0,   116,    94,     0,     0,     0,     0,     0,   146,   149,
   152,   150,   181,     0,   307,   308,   306,   305,     0,     0,
     0,   315,     0,     0,     0
};

static const short yydefgoto[] = {   493,
    54,    55,    56,    57,   251,   252,   308,    58,   299,   427,
   341,   342,   343,   344,   345,    59,   334,   420,   336,   375,
   376,   377,   378,   309,   405,   437,   310,   406,   439,   440,
    60,   233,   285,   286,   311,   449,   468,   312,    61,    62,
    63,    64,    65,   185,   245,   246,    66,   265,   434,   254,
   267,   256,   228,   371,   225,    67,   162,    68,   161,    69,
   163,   287,   331,   288,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,   272,    80,   216,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   202,   109,   203,   110,   204,
   111,   112,   206,   113,   207,   114,   214,   263,   316,   115,
   116,   117,   118,   119,   208,   120,   210,   121,   122,   123,
   124,   215,   125,   300,   347,   403,   436
};

static const short yypact[] = {   463,
   139,   185,   115,   -91,   -45,   -69,   -40,   -69,   -29,   594,
   -69,   -13,    11,   -69,-32768,-32768,-32768,   -69,   -69,   -69,
   -69,   -69,    21,   -69,   -69,   -69,   -69,   -69,-32768,   -69,
    23,    59,   262,-32768,-32768,-32768,   -69,    62,    74,    84,
-32768,   -69,    94,   107,   -69,   -69,   -69,   -69,   -69,   110,
   114,   135,    34,   463,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    63,-32768,-32768,   145,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   168,-32768,-32768,-32768,   173,-32768,   175,
   -69,   177,-32768,-32768,   191,   119,   192,-32768,-32768,-32768,
    46,    46,   174,-32768,   212,   213,   214,   215,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   208,   -69,   223,
-32768,-32768,-32768,-32768,   286,-32768,-32768,   225,-32768,-32768,
-32768,-32768,-32768,   226,-32768,-32768,    68,-32768,-32768,-32768,
-32768,   229,   235,   229,-32768,   229,   235,   229,-32768,   229,
-32768,-32768,   234,   237,   -69,   229,-32768,   224,   241,   238,
-32768,-32768,   239,   240,   270,   270,   112,   271,   -69,   -69,
   -69,   -69,   321,   278,   276,   283,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   279,-32768,-32768,-32768,   242,   -69,
   547,   547,-32768,   280,-32768,   285,   280,   280,   285,   280,
   280,-32768,   237,   298,   297,   300,   299,   280,-32768,-32768,
-32768,   229,   307,   312,   141,   319,   323,   320,-32768,-32768,
-32768,-32768,   -69,-32768,   322,   321,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   325,-32768,   286,   250,   344,
-32768,-32768,   328,   329,   324,   327,-32768,   228,-32768,-32768,
-32768,-32768,   341,   332,   336,   237,   297,   144,   339,   -69,
   -69,   280,-32768,-32768,   333,   334,-32768,-32768,   335,-32768,
   342,-32768,-32768,    37,   343,    37,-32768,   346,   129,   -69,
   166,-32768,-32768,-32768,-32768,   340,   338,-32768,-32768,   345,
   349,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   297,-32768,-32768,   347,   351,   356,   350,   348,   362,   363,
-32768,   284,   370,   371,    29,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    83,   368,   369,   372,   373,   374,-32768,
-32768,   313,-32768,-32768,   634,   366,-32768,   352,   167,   378,
   -69,-32768,-32768,-32768,   376,-32768,   396,-32768,-32768,    37,
-32768,-32768,-32768,-32768,-32768,-32768,   399,-32768,-32768,-32768,
-32768,   397,-32768,-32768,   204,    31,   603,-32768,   161,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   413,   492,
-32768,-32768,-32768,   404,-32768,   -69,    91,-32768,   581,   340,
   340,   581,   581,-32768,-32768,-32768,-32768,    48,-32768,    -2,
   409,-32768,-32768,   410,   402,   407,   416,   417,-32768,-32768,
-32768,-32768,-32768,   -69,-32768,-32768,-32768,-32768,   420,   -69,
   419,-32768,   538,   539,-32768
};

static const short yypgoto[] = {-32768,
-32768,   486,  -106,   487,-32768,-32768,   290,-32768,-32768,-32768,
-32768,   202,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -328,
  -320,-32768,-32768,  -246,-32768,-32768,  -225,-32768,-32768,   105,
-32768,-32768,   267,-32768,  -146,-32768,-32768,  -280,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   258,-32768,  -247,    -1,    80,
-32768,   355,-32768,-32768,   395,  -327,-32768,  -324,-32768,  -317,
-32768,-32768,-32768,-32768,  -230,  -229,-32768,  -202,  -199,-32768,
  -282,-32768,  -322,  -304,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -383,  -227,  -222,  -299,-32768,  -294,-32768,  -284,-32768,
  -276,  -271,-32768,  -266,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -261,-32768,  -256,-32768,  -233,  -223,  -209,
  -205,-32768,-32768,-32768,-32768,  -353,  -219
};


#define	YYLAST		731


static const short yytable[] = {   129,
   131,   134,   289,   290,   137,   293,   139,   394,   156,   157,
   294,   379,   160,   379,   135,   317,   164,   165,   166,   167,
   168,   438,   170,   171,   172,   173,   174,   357,   175,   380,
   291,   380,   357,   292,   381,   181,   381,   127,   128,   382,
   186,   382,   372,   189,   190,   191,   192,   193,   435,   383,
   372,   383,   379,   465,   419,   289,   290,   384,   293,   384,
   136,   354,   385,   294,   385,   138,   354,   386,   361,   386,
   380,   379,   387,   419,   387,   381,   140,   388,   441,   388,
   382,   442,   355,   291,   373,   374,   292,   355,   443,   380,
   383,   457,   373,   374,   381,   158,   372,   379,   384,   382,
   389,   481,   389,   385,   372,   482,   475,   476,   386,   383,
   390,   441,   390,   387,   442,   380,   159,   384,   388,   462,
   381,   443,   385,   446,   391,   382,   391,   386,   392,   169,
   392,   463,   387,   176,   379,   383,   419,   388,   373,   374,
   418,   389,   197,   384,   307,   307,   373,   374,   385,   212,
   306,   390,   380,   386,   223,   224,   446,   381,   387,   479,
   389,   356,   382,   388,   177,   391,   356,   182,   469,   392,
   390,   218,   383,   200,   219,   444,   445,   235,   447,   183,
   384,   249,   250,   448,   391,   385,   389,   480,   392,   184,
   386,    15,    16,    17,   421,   387,   390,    21,    22,   187,
   388,   353,   473,    27,   396,   397,   353,   398,   444,   445,
   391,   447,   188,   266,   392,   194,   448,   220,   221,   195,
   132,   127,   128,   389,   133,   276,   277,   279,   280,   281,
   282,     2,     3,   390,   303,   304,   338,   339,   340,   474,
   196,    10,   477,   478,   126,   127,   128,   391,   302,   325,
   326,   392,   362,   363,    11,   201,    51,    52,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,   466,   205,    31,   451,   452,   400,   209,    33,
   211,   330,   227,   257,   213,   258,    35,   260,    37,   261,
   130,   127,   128,   460,   461,   268,   217,   222,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,    45,
    46,    47,    48,    49,   178,   179,   180,   234,   365,   366,
   338,   339,   340,    51,    52,   229,   230,   231,   232,   305,
   306,   236,    53,   269,   153,   247,   248,   253,   399,   352,
   255,   262,   264,   271,     2,     3,   155,   303,   304,   270,
   301,   322,   273,   274,    10,    19,    20,    21,    22,   237,
   238,   239,   240,   241,   242,   243,   244,    11,   283,   284,
   156,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,   275,   278,    31,   295,   296,
   127,   128,    33,   297,   298,   314,    15,    16,    17,    35,
   315,    37,    21,    22,   428,   429,   430,   431,    27,   454,
   432,   318,   319,   320,   321,   323,    51,    52,   433,   127,
   128,   324,    45,    46,    47,    48,    49,   327,   329,   402,
   328,   346,   350,   332,   335,   351,    51,    52,   348,   349,
   359,   360,   305,   306,   364,    53,   367,   368,   369,   404,
   370,   395,   358,   393,   472,   407,   402,   413,   412,   450,
   409,    51,    52,   408,   410,     1,     2,     3,     4,   411,
   414,     5,     6,     7,     8,     9,    10,   415,   416,   417,
   422,   423,   489,   455,   424,   425,   426,   453,   491,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
   456,   458,    32,   459,    33,   306,   470,   471,   483,   485,
    34,    35,    36,    37,   486,   484,    38,    39,    40,    41,
    42,    43,    44,   487,   488,   490,   492,   494,   495,   198,
   199,   313,   401,   467,    45,    46,    47,    48,    49,    50,
     2,     3,   333,   303,   304,   337,   226,     0,    51,    52,
    10,   259,     0,     0,     0,     0,     0,    53,     0,     0,
     0,     0,     0,    11,     0,     0,     0,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,     0,     0,    31,     0,     0,     0,     0,    33,     0,
     0,     0,     0,     0,     0,    35,     0,    37,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     0,     0,     0,     0,     0,     0,     0,     0,    45,    46,
    47,    48,    49,    15,    16,    17,    18,    19,    20,    21,
    22,     0,    51,    52,   153,    27,     0,     0,   305,   306,
     0,    53,     0,     0,     0,   154,   155,     0,     0,     0,
     0,     0,     0,    37,    15,    16,    17,    18,    19,    20,
    21,    22,   428,   429,   430,   431,    27,     0,   432,     0,
     0,     0,     0,     0,     0,     0,   433,   127,   128,     0,
     0,     0,     0,     0,    37,     0,     0,     0,    51,    52,
   127,   128,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   464,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    51,
    52
};

static const short yycheck[] = {     1,
     2,     3,   233,   233,     6,   233,     8,   336,    10,    11,
   233,   334,    14,   336,   106,   263,    18,    19,    20,    21,
    22,   405,    24,    25,    26,    27,    28,   308,    30,   334,
   233,   336,   313,   233,   334,    37,   336,   107,   108,   334,
    42,   336,    14,    45,    46,    47,    48,    49,   402,   334,
    14,   336,   375,   437,   375,   286,   286,   334,   286,   336,
   106,   308,   334,   286,   336,   106,   313,   334,   316,   336,
   375,   394,   334,   394,   336,   375,   106,   334,   406,   336,
   375,   406,   308,   286,    56,    57,   286,   313,   406,   394,
   375,   420,    56,    57,   394,   109,    14,   420,   375,   394,
   334,   104,   336,   375,    14,   108,   460,   461,   375,   394,
   334,   439,   336,   375,   439,   420,   106,   394,   375,    89,
   420,   439,   394,   406,   334,   420,   336,   394,   334,   109,
   336,   101,   394,   111,   457,   420,   457,   394,    56,    57,
   112,   375,   109,   420,   251,   252,    56,    57,   420,   151,
   103,   375,   457,   420,   109,   110,   439,   457,   420,   112,
   394,   308,   457,   420,   106,   375,   313,   106,   449,   375,
   394,    53,   457,   111,    56,   406,   406,   179,   406,   106,
   457,   114,   115,   406,   394,   457,   420,   468,   394,   106,
   457,    31,    32,    33,   112,   457,   420,    37,    38,   106,
   457,   308,   112,    43,    76,    77,   313,    79,   439,   439,
   420,   439,   106,   215,   420,   106,   439,    99,   100,   106,
   106,   107,   108,   457,   110,   114,   115,   229,   230,   231,
   232,     4,     5,   457,     7,     8,    71,    72,    73,   459,
   106,    14,   462,   463,   106,   107,   108,   457,   250,   109,
   110,   457,   109,   110,    27,   111,    96,    97,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,   112,   106,    47,   109,   110,   112,   106,    52,
   106,   283,   109,   204,   108,   206,    59,   208,    61,   210,
   106,   107,   108,    90,    91,   216,   106,   106,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    82,
    83,    84,    85,    86,    53,    54,    55,   110,   320,   321,
    71,    72,    73,    96,    97,   114,   114,   114,   114,   102,
   103,   109,   105,   110,    51,   111,   111,   109,   340,   112,
   106,   108,   106,   106,     4,     5,    63,     7,     8,   109,
   109,   272,   114,   114,    14,    35,    36,    37,    38,    74,
    75,    76,    77,    78,    79,    80,    81,    27,    48,    49,
   372,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,   116,   116,    47,   111,   114,
   107,   108,    52,   111,   116,   116,    31,    32,    33,    59,
   116,    61,    37,    38,    92,    93,    94,    95,    43,   411,
    98,   114,   116,   114,   116,   109,    96,    97,   106,   107,
   108,   110,    82,    83,    84,    85,    86,   109,   109,   117,
   108,    88,   109,   112,   110,   109,    96,    97,   111,   111,
   109,   106,   102,   103,   106,   105,   114,   114,   114,   112,
   109,   106,   112,   111,   456,   111,   117,   110,   109,   108,
   114,    96,    97,   115,   114,     3,     4,     5,     6,   114,
   109,     9,    10,    11,    12,    13,    14,   115,   109,   109,
   113,   113,   484,   108,   113,   113,   113,   110,   490,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
   115,   113,    50,   117,    52,   103,    25,   114,   110,   118,
    58,    59,    60,    61,   118,   116,    64,    65,    66,    67,
    68,    69,    70,   118,   118,   116,   118,     0,     0,    54,
    54,   252,   341,   439,    82,    83,    84,    85,    86,    87,
     4,     5,   286,     7,     8,   298,   162,    -1,    96,    97,
    14,   207,    -1,    -1,    -1,    -1,    -1,   105,    -1,    -1,
    -1,    -1,    -1,    27,    -1,    -1,    -1,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    -1,    -1,    47,    -1,    -1,    -1,    -1,    52,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    -1,    61,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,
    84,    85,    86,    31,    32,    33,    34,    35,    36,    37,
    38,    -1,    96,    97,    51,    43,    -1,    -1,   102,   103,
    -1,   105,    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,
    -1,    -1,    -1,    61,    31,    32,    33,    34,    35,    36,
    37,    38,    92,    93,    94,    95,    43,    -1,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,    -1,
    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    96,    97,
   107,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   112,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,
    97
};

#line 352 "../bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_SrvParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  }
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL  
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_SrvParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_SrvParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_SrvParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_SrvParser_CHAR = (token), YY_SrvParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_SrvParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_SrvParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_SrvParser_PURE
/* UNPURE */
#define YYLEX           YY_SrvParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_SrvParser_CHAR;                      /*  the lookahead symbol        */
YY_SrvParser_STYPE      YY_SrvParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_SrvParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_SrvParser_LSP_NEEDED
YY_SrvParser_LTYPE YY_SrvParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_SrvParser_LSP_NEEDED
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL, &YY_SrvParser_LLOC)
#else
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_SrvParser_DEBUG != 0
int YY_SrvParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_SrvParser_CLASS::
#endif
     YY_SrvParser_PARSE(YY_SrvParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_SrvParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_SrvParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_SrvParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_SrvParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_SrvParser_LTYPE *yyls = yylsa;
  YY_SrvParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_SrvParser_PURE
  int YY_SrvParser_CHAR;
  YY_SrvParser_STYPE YY_SrvParser_LVAL;
  int YY_SrvParser_NERRS;
#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
#endif

  YY_SrvParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_SrvParser_NERRS = 0;
  YY_SrvParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_SrvParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_SrvParser_LSP_NEEDED
      YY_SrvParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_SrvParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      // cppcheck-suppress constStatement
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	    YY_SrvParser_ERROR(((char*)"parser stack overflow"));
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_SrvParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = (YY_SrvParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_SrvParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_SrvParser_CHAR == YYEMPTY)
    {
#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_SrvParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_SrvParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_SrvParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_SrvParser_CHAR);

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_SrvParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_SrvParser_CHAR, YY_SrvParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_SrvParser_CHAR != YYEOF)
    YY_SrvParser_CHAR = YYEMPTY;

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 840 "../bison++/bison.cc"

  switch (yyn) {

case 64:
#line 238 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].strval))
	YYABORT;
;
    break;}
case 65:
#line 243 "SrvParser.y"
{
    //Information about new interface has been read
    //Add it to list of read interfaces
    delete [] yyvsp[-4].strval;
    EndIfaceDeclaration();
;
    break;}
case 66:
#line 251 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].ival))
	YYABORT;
;
    break;}
case 67:
#line 256 "SrvParser.y"
{
    EndIfaceDeclaration();
;
    break;}
case 78:
#line 275 "SrvParser.y"
{
    /// this is key object initialization part
    CurrentKey = new TSIGKey(string(yyvsp[-1].strval));
;
    break;}
case 79:
#line 280 "SrvParser.y"
{
    /// check that both secret and algorithm keywords were defined.
    Log(Debug) << "Loaded key '" << CurrentKey->Name_ << "', base64len is "
	       << CurrentKey->getBase64Data().length() << ", rawlen is "
	       << CurrentKey->getPackedData().length() << "." << LogEnd;
    if (CurrentKey->getPackedData().length() == 0) {
	Log(Crit) << "Key " << CurrentKey->Name_ << " does not have secret specified." << LogEnd;
	YYABORT;
    }

    if ( (CurrentKey->Digest_ != DIGEST_HMAC_MD5) &&
	 (CurrentKey->Digest_ != DIGEST_HMAC_SHA1) &&
	 (CurrentKey->Digest_ != DIGEST_HMAC_SHA256) ) {
	Log(Crit) << "Invalid key type specified: only hmac-md5, hmac-sha1 and hmac-sha256 are supported." << LogEnd;
	YYABORT;
    }

    CfgMgr->addKey( CurrentKey );
;
    break;}
case 86:
#line 314 "SrvParser.y"
{
    // store the key in base64 encoded form
    CurrentKey->setData(string(yyvsp[-1].strval));
;
    break;}
case 87:
#line 321 "SrvParser.y"
{
    CurrentKey->Fudge_ = yyvsp[-1].ival;
;
    break;}
case 88:
#line 326 "SrvParser.y"
{ CurrentKey->Digest_ = DIGEST_HMAC_SHA256; ;
    break;}
case 89:
#line 327 "SrvParser.y"
{ CurrentKey->Digest_ = DIGEST_HMAC_SHA1;  ;
    break;}
case 90:
#line 328 "SrvParser.y"
{ CurrentKey->Digest_ = DIGEST_HMAC_MD5;  ;
    break;}
case 91:
#line 334 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TDUID> duid = new TDUID(yyvsp[-1].duidval.duid,yyvsp[-1].duidval.length);
    ClientLst.append(new TSrvCfgOptions(duid));
;
    break;}
case 92:
#line 340 "SrvParser.y"
{
    Log(Debug) << "Exception: DUID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 93:
#line 348 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TOptVendorData> remoteid = new TOptVendorData(yyvsp[-3].ival, yyvsp[-1].duidval.duid, yyvsp[-1].duidval.length, 0);
    ClientLst.append(new TSrvCfgOptions(remoteid));
;
    break;}
case 94:
#line 354 "SrvParser.y"
{
    Log(Debug) << "Exception: RemoteID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 95:
#line 362 "SrvParser.y"
{
		ParserOptStack.append(new TSrvParsGlobalOpt());
		SPtr<TIPv6Addr> clntaddr = new TIPv6Addr(yyvsp[-1].addrval);
		ClientLst.append(new TSrvCfgOptions(clntaddr));
;
    break;}
case 96:
#line 368 "SrvParser.y"
{
		Log(Debug) << "Exception: Link-local-based exception specified." << LogEnd;
		// copy all defined options
		ClientLst.getLast()->setOptions(ParserOptStack.getLast());
		ParserOptStack.delLast();
;
    break;}
case 115:
#line 401 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Info) << "Exception: Address " << addr->getPlain() << " reserved." << LogEnd;
    ClientLst.getLast()->setAddr(addr);
;
    break;}
case 116:
#line 409 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[-2].addrval);
    Log(Info) << "Exception: Prefix " << addr->getPlain() << "/" << yyvsp[0].ival << " reserved." << LogEnd;
    ClientLst.getLast()->setPrefix(addr, yyvsp[0].ival);
;
    break;}
case 117:
#line 418 "SrvParser.y"
{
    StartClassDeclaration();
;
    break;}
case 118:
#line 422 "SrvParser.y"
{
    if (!EndClassDeclaration())
	YYABORT;
;
    break;}
case 121:
#line 436 "SrvParser.y"
{
    StartTAClassDeclaration();
;
    break;}
case 122:
#line 439 "SrvParser.y"
{
    if (!EndTAClassDeclaration())
	YYABORT;
;
    break;}
case 133:
#line 463 "SrvParser.y"
{
    StartPDDeclaration();
;
    break;}
case 134:
#line 466 "SrvParser.y"
{
    if (!EndPDDeclaration())
	YYABORT;
;
    break;}
case 145:
#line 493 "SrvParser.y"
{
    SPtr<TIPv6Addr> routerAddr = new TIPv6Addr(yyvsp[-1].addrval);
    SPtr<TOpt> myNextHop = new TOptAddr(OPTION_NEXT_HOP, routerAddr, NULL);
    nextHop = myNextHop; 
;
    break;}
case 146:
#line 499 "SrvParser.y"
{
    ParserOptStack.getLast()->addExtraOption(nextHop, false);
    nextHop = 0;
;
    break;}
case 147:
#line 504 "SrvParser.y"
{
    SPtr<TIPv6Addr> routerAddr = new TIPv6Addr(yyvsp[0].addrval);
    SPtr<TOpt> myNextHop = new TOptAddr(OPTION_NEXT_HOP, routerAddr, NULL);
    ParserOptStack.getLast()->addExtraOption(myNextHop, false);
;
    break;}
case 150:
#line 518 "SrvParser.y"
{
    SPtr<TIPv6Addr> prefix = new TIPv6Addr(yyvsp[-4].addrval);
    SPtr<TOpt> rtPrefix = new TOptRtPrefix(yyvsp[0].ival, yyvsp[-2].ival, 42, prefix, NULL);
    if (nextHop)
        nextHop->addOption(rtPrefix);
    else
        ParserOptStack.getLast()->addExtraOption(rtPrefix, false);
;
    break;}
case 151:
#line 527 "SrvParser.y"
{
    SPtr<TIPv6Addr> prefix = new TIPv6Addr(yyvsp[-2].addrval);
    SPtr<TOpt> rtPrefix = new TOptRtPrefix(DHCPV6_INFINITY, yyvsp[0].ival, 42, prefix, NULL);
    if (nextHop)
        nextHop->addOption(rtPrefix);
    else
        ParserOptStack.getLast()->addExtraOption(rtPrefix, false);
;
    break;}
case 152:
#line 536 "SrvParser.y"
{
    SPtr<TIPv6Addr> prefix = new TIPv6Addr(yyvsp[-4].addrval);
    SPtr<TOpt> rtPrefix = new TOptRtPrefix(DHCPV6_INFINITY, yyvsp[-2].ival, 42, prefix, NULL);
    if (nextHop)
        nextHop->addOption(rtPrefix);
    else
        ParserOptStack.getLast()->addExtraOption(rtPrefix, false);
;
    break;}
case 153:
#line 546 "SrvParser.y"
{
    if (!strcasecmp(yyvsp[0].strval,"none")) {
        CfgMgr->setAuthProtocol(AUTH_PROTO_NONE);
        CfgMgr->setAuthAlgorithm(AUTH_ALGORITHM_NONE);
    } else if (!strcasecmp(yyvsp[0].strval, "delayed")) {
        CfgMgr->setAuthProtocol(AUTH_PROTO_DELAYED);
    } else if (!strcasecmp(yyvsp[0].strval, "reconfigure-key")) {
        CfgMgr->setAuthProtocol(AUTH_PROTO_RECONFIGURE_KEY);
        CfgMgr->setAuthAlgorithm(AUTH_ALGORITHM_RECONFIGURE_KEY);
    } else if (!strcasecmp(yyvsp[0].strval, "dibbler")) {
        CfgMgr->setAuthProtocol(AUTH_PROTO_DIBBLER);
    } else {
        Log(Crit) << "Invalid auth-protocol parameter: " << string(yyvsp[0].strval) << LogEnd;
        YYABORT;
    }
;
    break;}
case 154:
#line 564 "SrvParser.y"
{
    Log(Crit) << "auth-algorithm secification is not supported yet." << LogEnd;
    YYABORT;
;
    break;}
case 155:
#line 570 "SrvParser.y"
{
    if (strcasecmp(yyvsp[0].strval, "none")) {
        CfgMgr->setAuthReplay(AUTH_REPLAY_NONE);
    } else if (strcasecmp(yyvsp[0].strval, "monotonic")) {
        CfgMgr->setAuthReplay(AUTH_REPLAY_MONOTONIC);
    } else {
        Log(Crit) << "Invalid auth-replay parameter: " << string(yyvsp[0].strval) << LogEnd;
        YYABORT;
    }
;
    break;}
case 156:
#line 582 "SrvParser.y"
{
    CfgMgr->setAuthRealm(std::string(yyvsp[0].strval));
;
    break;}
case 157:
#line 588 "SrvParser.y"
{
    DigestLst.clear();
;
    break;}
case 158:
#line 590 "SrvParser.y"
{
    CfgMgr->setAuthDigests(DigestLst);
    CfgMgr->setAuthDropUnauthenticated(true);
    DigestLst.clear();
;
    break;}
case 161:
#line 602 "SrvParser.y"
{ DigestLst.push_back(DIGEST_NONE); ;
    break;}
case 162:
#line 603 "SrvParser.y"
{ DigestLst.push_back(DIGEST_PLAIN); ;
    break;}
case 163:
#line 604 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_MD5); ;
    break;}
case 164:
#line 605 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_SHA1); ;
    break;}
case 165:
#line 606 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_SHA224); ;
    break;}
case 166:
#line 607 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_SHA256); ;
    break;}
case 167:
#line 608 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_SHA384); ;
    break;}
case 168:
#line 609 "SrvParser.y"
{ DigestLst.push_back(DIGEST_HMAC_SHA512); ;
    break;}
case 169:
#line 614 "SrvParser.y"
{
    CfgMgr->setAuthDropUnauthenticated(yyvsp[0].ival);
;
    break;}
case 170:
#line 628 "SrvParser.y"
{
    Log(Notice)<< "FQDN: The client "<<yyvsp[0].strval<<" has no address nor DUID"<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 171:
#line 633 "SrvParser.y"
{
    /// @todo: Use SPtr()
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for DUID " << duidNew->getPlain()<<LogEnd;
    PresentFQDNLst.append(new TFQDN(duidNew, yyvsp[-2].strval,false));
;
    break;}
case 172:
#line 640 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for address "<<*addr<<LogEnd;
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 173:
#line 646 "SrvParser.y"
{
	Log(Debug) << "FQDN:"<<yyvsp[0].strval<<" has no reservations (is available to everyone)."<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 174:
#line 651 "SrvParser.y"
{
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval << " reserved for DUID "<< duidNew->getPlain() << LogEnd;
    PresentFQDNLst.append(new TFQDN( duidNew, yyvsp[-2].strval,false));
;
    break;}
case 175:
#line 657 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval<<" reserved for address "<< addr->getPlain() << LogEnd;
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 176:
#line 665 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 177:
#line 666 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 178:
#line 671 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 179:
#line 675 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 180:
#line 682 "SrvParser.y"
{
    Log(Debug) << "Vendor-spec defined: Enterprise: " << yyvsp[-4].ival << ", optionCode: "
	       << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;

    ParserOptStack.getLast()->addExtraOption(new TOptVendorSpecInfo(OPTION_VENDOR_OPTS, yyvsp[-4].ival, yyvsp[-2].ival,
								    yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0), false);
;
    break;}
case 181:
#line 690 "SrvParser.y"
{
    Log(Debug) << "Vendor-spec defined: Enterprise: " << yyvsp[-4].ival << ", optionCode: "
	       << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;
    ParserOptStack.getLast()->addExtraOption(new TOptVendorSpecInfo(OPTION_VENDOR_OPTS, yyvsp[-4].ival, yyvsp[-2].ival,
								    yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0), false);
;
    break;}
case 182:
#line 699 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 183:
#line 700 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 184:
#line 705 "SrvParser.y"
{
	PresentRangeLst.append(new THostRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 185:
#line 709 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
	SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new THostRange(addr1,addr2));
	else
	    PresentRangeLst.append(new THostRange(addr2,addr1));
    ;
    break;}
case 186:
#line 718 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno()
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}
	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new THostRange(addr1,addr2));
	else
	    PresentRangeLst.append(new THostRange(addr2,addr1));
    ;
    break;}
case 187:
#line 734 "SrvParser.y"
{
	PresentRangeLst.append(new THostRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 188:
#line 738 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
	SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new THostRange(addr1,addr2));
	else
	    PresentRangeLst.append(new THostRange(addr2,addr1));
    ;
    break;}
case 189:
#line 750 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno()
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}

	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	SPtr<THostRange> range = 0;
	if (*addr1<=*addr2)
	    range = new THostRange(addr1,addr2);
	else
	    range = new THostRange(addr2,addr1);
	range->setPrefixLength(prefix);
	PDLst.append(range);
    ;
    break;}
case 190:
#line 773 "SrvParser.y"
{
    PresentRangeLst.append(new THostRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 191:
#line 777 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new THostRange(addr1,addr2));
    else
	PresentRangeLst.append(new THostRange(addr2,addr1));
;
    break;}
case 192:
#line 786 "SrvParser.y"
{
    PresentRangeLst.append(new THostRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 193:
#line 790 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new THostRange(addr1,addr2));
    else
	PresentRangeLst.append(new THostRange(addr2,addr1));
;
    break;}
case 194:
#line 799 "SrvParser.y"
{
    SPtr<TDUID> duid(new TDUID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length));
    PresentRangeLst.append(new THostRange(duid, duid));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 195:
#line 805 "SrvParser.y"
{
    SPtr<TDUID> duid1(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid2(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));

    if (*duid1<=*duid2)
	PresentRangeLst.append(new THostRange(duid1,duid2));
    else
	PresentRangeLst.append(new THostRange(duid2,duid1));

    /// @todo: delete [] $1.duid; delete [] $3.duid?
;
    break;}
case 196:
#line 817 "SrvParser.y"
{
    SPtr<TDUID> duid(new TDUID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length));
    PresentRangeLst.append(new THostRange(duid, duid));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 197:
#line 823 "SrvParser.y"
{
    SPtr<TDUID> duid2(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid1(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));
    if (*duid1<=*duid2)
	PresentRangeLst.append(new THostRange(duid1,duid2));
    else
	PresentRangeLst.append(new THostRange(duid2,duid1));
    delete yyvsp[-2].duidval.duid;
    delete yyvsp[0].duidval.duid;
;
    break;}
case 198:
#line 837 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 199:
#line 840 "SrvParser.y"
{
    ParserOptStack.getLast()->setRejedClnt(&PresentRangeLst);
;
    break;}
case 200:
#line 847 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 201:
#line 850 "SrvParser.y"
{
    ParserOptStack.getLast()->setAcceptClnt(&PresentRangeLst);
;
    break;}
case 202:
#line 857 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 203:
#line 860 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst);
;
    break;}
case 204:
#line 867 "SrvParser.y"
{
;
    break;}
case 205:
#line 869 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst/*PDList*/);
;
    break;}
case 206:
#line 875 "SrvParser.y"
{
   this->PDPrefix = yyvsp[0].ival;
;
    break;}
case 207:
#line 882 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 208:
#line 887 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 209:
#line 895 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 210:
#line 900 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 211:
#line 908 "SrvParser.y"
{
    int x=yyvsp[0].ival;
    if ( (x<1) || (x>1000)) {
	Log(Crit) << "Invalid share value: " << x << " in line " << lex->lineno()
		  << ". Allowed range: 1..1000." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setShare(x);
;
    break;}
case 212:
#line 920 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[0].ival);
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival);
;
    break;}
case 213:
#line 925 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival);
;
    break;}
case 214:
#line 933 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[0].ival);
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival);
;
    break;}
case 215:
#line 938 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival);
;
    break;}
case 216:
#line 946 "SrvParser.y"
{
    ParserOptStack.getLast()->setClntMaxLease(yyvsp[0].ival);
;
    break;}
case 217:
#line 953 "SrvParser.y"
{
    ParserOptStack.getLast()->setClassMaxLease(yyvsp[0].ival);
;
    break;}
case 218:
#line 960 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'addr-params' defined, but experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }
    int bitfield = ADDRPARAMS_MASK_PREFIX;
    Log(Warning) << "Experimental addr-params added (prefix=" << yyvsp[0].ival << ", bitfield=" << bitfield << ")." << LogEnd;
    ParserOptStack.getLast()->setAddrParams(yyvsp[0].ival,bitfield);
;
    break;}
case 219:
#line 973 "SrvParser.y"
{
    SPtr<TOpt> tunnelName = new TOptDomainLst(OPTION_AFTR_NAME, yyvsp[0].strval, 0);
    Log(Debug) << "Enabling DS-Lite tunnel option, AFTR name=" << yyvsp[0].strval << LogEnd;
    ParserOptStack.getLast()->addExtraOption(tunnelName, false);
;
    break;}
case 220:
#line 981 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptGeneric(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    ParserOptStack.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", length=" << yyvsp[0].duidval.length << LogEnd;
;
    break;}
case 221:
#line 987 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[0].addrval));

    SPtr<TOpt> opt = new TOptAddr(yyvsp[-2].ival, addr, 0);
    ParserOptStack.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", address=" << addr->getPlain() << LogEnd;
;
    break;}
case 222:
#line 995 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 223:
#line 998 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(yyvsp[-3].ival, PresentAddrLst, 0);
    ParserOptStack.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-3].ival << ", address count=" << PresentAddrLst.count() << LogEnd;
;
    break;}
case 224:
#line 1004 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptString(yyvsp[-2].ival, string(yyvsp[0].strval), 0);
    ParserOptStack.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", string=" << yyvsp[0].strval << LogEnd;
;
    break;}
case 225:
#line 1012 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'remote autoconf neighbors' defined, but "
		  << "experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }

    PresentAddrLst.clear();
;
    break;}
case 226:
#line 1022 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(OPTION_NEIGHBORS, PresentAddrLst, 0);
    ParserOptStack.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Remote autoconf neighbors enabled (" << PresentAddrLst.count()
	       << " neighbors defined.)" << LogEnd;
;
    break;}
case 227:
#line 1032 "SrvParser.y"
{
    ParserOptStack.getLast()->setIfaceMaxLease(yyvsp[0].ival);
;
    break;}
case 228:
#line 1039 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnicast(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 229:
#line 1046 "SrvParser.y"
{
    if ( (yyvsp[0].ival!=0) && (yyvsp[0].ival!=1)) {
	Log(Crit) << "RAPID-COMMIT  parameter in line " << lex->lineno() << " must have 0 or 1 value."
	       << LogEnd;
	YYABORT;
    }
    if (yyvsp[0].ival==1)
	ParserOptStack.getLast()->setRapidCommit(true);
    else
	ParserOptStack.getLast()->setRapidCommit(false);
;
    break;}
case 230:
#line 1061 "SrvParser.y"
{
    if ((yyvsp[0].ival<0)||(yyvsp[0].ival>255)) {
	Log(Crit) << "Preference value (" << yyvsp[0].ival << ") in line " << lex->lineno()
		   << " is out of range [0..255]." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setPreference(yyvsp[0].ival);
;
    break;}
case 231:
#line 1072 "SrvParser.y"
{
    logger::setLogLevel(yyvsp[0].ival);
;
    break;}
case 232:
#line 1078 "SrvParser.y"
{
    logger::setLogMode(yyvsp[0].strval);
;
    break;}
case 233:
#line 1084 "SrvParser.y"
{
    logger::setLogName(yyvsp[0].strval);
;
    break;}
case 234:
#line 1091 "SrvParser.y"
{
    logger::setColors(yyvsp[0].ival==1);
;
    break;}
case 235:
#line 1097 "SrvParser.y"
{
    ParserOptStack.getLast()->setWorkDir(yyvsp[0].strval);
;
    break;}
case 236:
#line 1104 "SrvParser.y"
{
    ParserOptStack.getLast()->setStateless(true);
;
    break;}
case 237:
#line 1111 "SrvParser.y"
{
    Log(Info) << "Guess-mode enabled: relay interfaces may be loosely defined (matching interface-id is not mandatory)." << LogEnd;
    ParserOptStack.getLast()->setGuessMode(true);
;
    break;}
case 238:
#line 1118 "SrvParser.y"
{
    CfgMgr->setScriptName(yyvsp[0].strval);
;
    break;}
case 239:
#line 1125 "SrvParser.y"
{
    ParserOptStack.getLast()->setInactiveMode(true);
;
    break;}
case 240:
#line 1131 "SrvParser.y"
{
    Log(Crit) << "Experimental features are allowed." << LogEnd;
    ParserOptStack.getLast()->setExperimental(true);
;
    break;}
case 241:
#line 1138 "SrvParser.y"
{
    if (!strncasecmp(yyvsp[0].strval,"before",6))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_BEFORE);
    } else
    if (!strncasecmp(yyvsp[0].strval,"after",5))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_AFTER);
    } else
    if (!strncasecmp(yyvsp[0].strval,"omit",4))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_NONE);
    } else
    {
		Log(Crit) << "Invalid interface-id-order specified. Allowed values: before, after, omit" << LogEnd;
		YYABORT;
    }
;
    break;}
case 242:
#line 1159 "SrvParser.y"
{
    ParserOptStack.getLast()->setCacheSize(yyvsp[0].ival);
;
    break;}
case 243:
#line 1170 "SrvParser.y"
{
    ParserOptStack.getLast()->setLeaseQuerySupport(true);

;
    break;}
case 244:
#line 1175 "SrvParser.y"
{
    switch (yyvsp[0].ival) {
    case 0:
		ParserOptStack.getLast()->setLeaseQuerySupport(false);
		break;
    case 1:
		ParserOptStack.getLast()->setLeaseQuerySupport(true);
		break;
    default:
		Log(Crit) << "Invalid value of accept-leasequery specifed. Allowed values: 0, 1, yes, no, true, false" << LogEnd;
		YYABORT;
    }
;
    break;}
case 245:
#line 1191 "SrvParser.y"
{
    if (yyvsp[0].ival!=0 && yyvsp[0].ival!=1) {
	Log(Error) << "Invalid bulk-leasequery-accept value: " << (yyvsp[0].ival)
		   << ", 0 or 1 expected." << LogEnd;
	YYABORT;
    }
    CfgMgr->bulkLQAccept( (bool) yyvsp[0].ival);
;
    break;}
case 246:
#line 1202 "SrvParser.y"
{
    CfgMgr->bulkLQTcpPort( yyvsp[0].ival );
;
    break;}
case 247:
#line 1208 "SrvParser.y"
{
    CfgMgr->bulkLQMaxConns( yyvsp[0].ival );
;
    break;}
case 248:
#line 1214 "SrvParser.y"
{
    CfgMgr->bulkLQTimeout( yyvsp[0].ival );
;
    break;}
case 249:
#line 1223 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayName(yyvsp[0].strval);
;
    break;}
case 250:
#line 1227 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayID(yyvsp[0].ival);
;
    break;}
case 251:
#line 1234 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].ival, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 252:
#line 1239 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 253:
#line 1244 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].strval, strlen(yyvsp[0].strval), 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 254:
#line 1252 "SrvParser.y"
{
    int prefix = yyvsp[0].ival;
    if ( (prefix<1) || (prefix>128) ) {
        Log(Crit) << "Invalid (1..128 allowed) prefix used: " << prefix
                  << " in subnet definition in line " << lex->lineno() << LogEnd;
        YYABORT;
    }
    SPtr<TIPv6Addr> min = getRangeMin(yyvsp[-2].addrval, prefix);
    SPtr<TIPv6Addr> max = getRangeMax(yyvsp[-2].addrval, prefix);
    SrvCfgIfaceLst.getLast()->addSubnet(min, max);
    Log(Debug) << "Defined subnet " << min->getPlain() << "/" << yyvsp[0].ival
               << " on " << SrvCfgIfaceLst.getLast()->getFullName() << LogEnd;
;
    break;}
case 255:
#line 1265 "SrvParser.y"
{
    SPtr<TIPv6Addr> min = new TIPv6Addr(yyvsp[-2].addrval);
    SPtr<TIPv6Addr> max = new TIPv6Addr(yyvsp[0].addrval);
    SrvCfgIfaceLst.getLast()->addSubnet(min, max);
    Log(Debug) << "Defined subnet " << min->getPlain() << "-" << max->getPlain()
               << "on " << SrvCfgIfaceLst.getLast()->getFullName() << LogEnd;
;
    break;}
case 268:
#line 1290 "SrvParser.y"
{
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setAllowClientClass(string(yyvsp[0].strval));

    int deny = ParserOptStack.getLast()->getDenyClientClassString().count();

    if (deny)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }

;
    break;}
case 269:
#line 1319 "SrvParser.y"
{
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setDenyClientClass(string(yyvsp[0].strval));

    int allow = ParserOptStack.getLast()->getAllowClientClassString().count();

    if (allow)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }

;
    break;}
case 270:
#line 1352 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 271:
#line 1355 "SrvParser.y"
{
    SPtr<TOpt> nis_servers = new TOptAddrLst(OPTION_DNS_SERVERS, PresentAddrLst, NULL);
    ParserOptStack.getLast()->addExtraOption(nis_servers, false);
;
    break;}
case 272:
#line 1365 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 273:
#line 1368 "SrvParser.y"
{
    SPtr<TOpt> domains = new TOptDomainLst(OPTION_DOMAIN_LIST, PresentStringLst, NULL);
    ParserOptStack.getLast()->addExtraOption(domains, false);
;
    break;}
case 274:
#line 1379 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 275:
#line 1382 "SrvParser.y"
{
    SPtr<TOpt> ntp_servers = new TOptAddrLst(OPTION_SNTP_SERVERS, PresentAddrLst, NULL);
    ParserOptStack.getLast()->addExtraOption(ntp_servers, false);
    // ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 276:
#line 1394 "SrvParser.y"
{
    SPtr<TOpt> timezone = new TOptString(OPTION_NEW_TZDB_TIMEZONE, string(yyvsp[0].strval), NULL);
    ParserOptStack.getLast()->addExtraOption(timezone, false);
    // ParserOptStack.getLast()->setTimezone($3);
;
    break;}
case 277:
#line 1405 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 278:
#line 1408 "SrvParser.y"
{
    SPtr<TOpt> sip_servers = new TOptAddrLst(OPTION_SIP_SERVER_A, PresentAddrLst, NULL);
    ParserOptStack.getLast()->addExtraOption(sip_servers, false);
    // ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 279:
#line 1419 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 280:
#line 1422 "SrvParser.y"
{
    SPtr<TOpt> sip_domains = new TOptDomainLst(OPTION_SIP_SERVER_D, PresentStringLst, NULL);
    ParserOptStack.getLast()->addExtraOption(sip_domains, false);
    //ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 281:
#line 1435 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)   << "No FQDNMode found, setting default mode 2 (all updates executed by server)." << LogEnd;
    Log(Warning) << "revDNS zoneroot lenght not found, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(2);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 282:
#line 1442 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
;
    break;}
case 283:
#line 1446 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)  << "FQDN: Setting update mode to " << yyvsp[0].ival;
    switch (yyvsp[0].ival) {
    case 0:
	Log(Cont) << "(no updates)" << LogEnd;
	break;
    case 1:
	Log(Cont) << "(client will update AAAA, server will update PTR)" << LogEnd;
	break;
    case 2:
	Log(Cont) << "(server will update both AAAA and PTR)" << LogEnd;
	break;
    default:
	Log(Cont) << LogEnd;
	Log(Crit) << "FQDN: Invalid mode. Only 0-2 are supported." << LogEnd;
        YYABORT;
    }
    Log(Warning)<< "FQDN: RevDNS zoneroot lenght not specified, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[0].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 284:
#line 1468 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);

;
    break;}
case 285:
#line 1473 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug) << "FQDN: Setting update mode to " << yyvsp[-1].ival;
    switch (yyvsp[-1].ival) {
    case 0:
	Log(Cont) << "(no updates)" << LogEnd;
	break;
    case 1:
	Log(Cont) << "(client will update AAAA, server will update PTR)" << LogEnd;
	break;
    case 2:
	Log(Cont) << "(server will update both AAAA and PTR)" << LogEnd;
	break;
    default:
	Log(Cont) << LogEnd;
	Log(Crit) << "FQDN: Invalid mode. Only 0-2 are supported." << LogEnd;
        YYABORT;
    }

    Log(Debug) << "FQDN: RevDNS zoneroot lenght set to " << yyvsp[0].ival <<LogEnd;
    if ( (yyvsp[0].ival < 0) || (yyvsp[0].ival > 128) ) {
	Log(Crit) << "FQDN: Invalid zoneroot length specified:" << yyvsp[0].ival << ". Value 0-128 expected." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setFQDNMode(yyvsp[-1].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(yyvsp[0].ival);
;
    break;}
case 286:
#line 1500 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);

;
    break;}
case 287:
#line 1508 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnknownFQDN(EUnknownFQDNMode(yyvsp[-1].ival), string(yyvsp[0].strval) );
    Log(Debug) << "FQDN: Unknown fqdn names processing set to " << yyvsp[-1].ival << ", domain=" << yyvsp[0].strval << "." << LogEnd;
;
    break;}
case 288:
#line 1513 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnknownFQDN(EUnknownFQDNMode(yyvsp[0].ival), string("") );
    Log(Debug) << "FQDN: Unknown fqdn names processing set to " << yyvsp[0].ival << ", no domain." << LogEnd;
;
    break;}
case 289:
#line 1521 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    CfgMgr->setDDNSAddress(addr);
    Log(Info) << "FQDN: DDNS updates will be performed to " << addr->getPlain() << "." << LogEnd;
;
    break;}
case 290:
#line 1529 "SrvParser.y"
{
    if (!strcasecmp(yyvsp[0].strval,"tcp"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_TCP);
    else if (!strcasecmp(yyvsp[0].strval,"udp"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_UDP);
    else if (!strcasecmp(yyvsp[0].strval,"any"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_ANY);
    else {
        Log(Crit) << "Invalid ddns-protocol specifed:" << (yyvsp[0].strval) 
                  << ", supported values are tcp, udp, any." << LogEnd;
        YYABORT;
    }
    Log(Debug) << "DDNS: Setting protocol to " << (yyvsp[0].strval) << LogEnd;
;
    break;}
case 291:
#line 1546 "SrvParser.y"
{
    Log(Debug) << "DDNS: Setting timeout to " << yyvsp[0].ival << "ms." << LogEnd;
    CfgMgr->setDDNSTimeout(yyvsp[0].ival);
;
    break;}
case 292:
#line 1555 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 293:
#line 1558 "SrvParser.y"
{
    SPtr<TOpt> nis_servers = new TOptAddrLst(OPTION_NIS_SERVERS, PresentAddrLst, NULL);
    ParserOptStack.getLast()->addExtraOption(nis_servers, false);
    ///ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 294:
#line 1569 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 295:
#line 1572 "SrvParser.y"
{
    SPtr<TOpt> nisp_servers = new TOptAddrLst(OPTION_NISP_SERVERS, PresentAddrLst, NULL);
    ParserOptStack.getLast()->addExtraOption(nisp_servers, false);
    // ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 296:
#line 1584 "SrvParser.y"
{
    SPtr<TOpt> nis_domain = new TOptDomainLst(OPTION_NIS_DOMAIN_NAME, string(yyvsp[0].strval), NULL);
    ParserOptStack.getLast()->addExtraOption(nis_domain, false);
    // ParserOptStack.getLast()->setNISDomain($3);
;
    break;}
case 297:
#line 1596 "SrvParser.y"
{
    SPtr<TOpt> nispdomain = new TOptDomainLst(OPTION_NISP_DOMAIN_NAME, string(yyvsp[0].strval), NULL);
    ParserOptStack.getLast()->addExtraOption(nispdomain, false);
;
    break;}
case 298:
#line 1607 "SrvParser.y"
{
    SPtr<TOpt> lifetime = new TOptInteger(OPTION_INFORMATION_REFRESH_TIME,
                                          OPTION_INFORMATION_REFRESH_TIME_LEN, 
                                          (uint32_t)(yyvsp[0].ival), NULL);
    ParserOptStack.getLast()->addExtraOption(lifetime, false);
    //ParserOptStack.getLast()->setLifetime($3);
;
    break;}
case 299:
#line 1617 "SrvParser.y"
{
;
    break;}
case 300:
#line 1619 "SrvParser.y"
{
    // ParserOptStack.getLast()->setVendorSpec(VendorSpec);
    // Log(Debug) << "Vendor-spec parsing finished" << LogEnd;
;
    break;}
case 301:
#line 1627 "SrvParser.y"
{
    Log(Notice) << "ClientClass found, name: " << string(yyvsp[-1].strval) << LogEnd;
;
    break;}
case 302:
#line 1630 "SrvParser.y"
{
    SPtr<Node> cond =  NodeClientClassLst.getLast();
    SrvCfgClientClassLst.append( new TSrvCfgClientClass(string(yyvsp[-4].strval),cond));
    NodeClientClassLst.delLast();
;
    break;}
case 303:
#line 1640 "SrvParser.y"
{
;
    break;}
case 305:
#line 1646 "SrvParser.y"
{
    SPtr<Node> r =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> l = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_CONTAIN,l,r));
;
    break;}
case 306:
#line 1654 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();

    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_EQUAL,l,r));
;
    break;}
case 307:
#line 1663 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_AND,l,r));

;
    break;}
case 308:
#line 1672 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_OR,l,r));
;
    break;}
case 309:
#line 1683 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM));
;
    break;}
case 310:
#line 1687 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_DATA));
;
    break;}
case 311:
#line 1691 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_CLASS_ENTERPRISE_NUM));
;
    break;}
case 312:
#line 1695 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_CLASS_DATA));
;
    break;}
case 313:
#line 1699 "SrvParser.y"
{
    // Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    NodeClientClassLst.append(new NodeConstant(string(yyvsp[0].strval)));
;
    break;}
case 314:
#line 1704 "SrvParser.y"
{
    //Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    stringstream convert;
    string snum;
    convert<<yyvsp[0].ival;
    convert>>snum;
    NodeClientClassLst.append(new NodeConstant(snum));
;
    break;}
case 315:
#line 1713 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_SUBSTRING,l, yyvsp[-3].ival,yyvsp[-1].ival));
;
    break;}
}

#line 840 "../bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_SrvParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_SrvParser_LLOC.first_line;
      yylsp->first_column = YY_SrvParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_SrvParser_NERRS;

#ifdef YY_SrvParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_SrvParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_SrvParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_SrvParser_ERROR_VERBOSE */
        YY_SrvParser_ERROR((char*)"parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_SrvParser_CHAR == YYEOF)
	YYABORT;

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

      YY_SrvParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1039 "../bison++/bison.cc"
#line 1719 "SrvParser.y"


/////////////////////////////////////////////////////////////////////////////
// programs section

/**
 * method check whether interface with id=ifaceNr has been already declared
 *
 * @param ifaceNr
 *
 * @return true if interface was not declared
 */
bool SrvParser::IfaceDefined(int ifaceNr)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
    if ((ptr->getID())==ifaceNr) {
	Log(Crit) << "Interface with ID=" << ifaceNr << " is already defined." << LogEnd;
	return false;
    }
  return true;
}

/**
 * check whether interface with id=ifaceName has been already declared
 *
 * @param ifaceName
 *
 * @return true, if defined, false otherwise
 */
bool SrvParser::IfaceDefined(string ifaceName)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
  {
    string presName=ptr->getName();
    if (presName==ifaceName) {
	Log(Crit) << "Interface " << ifaceName << " is already defined." << LogEnd;
	return false;
    }
  }
  return true;
}

/**
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 *
 */
bool SrvParser::StartIfaceDeclaration(string ifaceName)
{
    if (!IfaceDefined(ifaceName))
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifaceName));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    ClientLst.clear();

    return true;
}

/**
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 *
 */
bool SrvParser::StartIfaceDeclaration(int ifindex)
{
    if (!IfaceDefined(ifindex))
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifindex));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    ClientLst.clear();

    return true;
}


/**
 * this method is called after inteface declaration has ended. It creates
 * new interface representation used in SrvCfgMgr. Also removes corresponding
 * element from the parser stack
 *
 * @return true if everything is ok
 */
bool SrvParser::EndIfaceDeclaration()
{
    // get this interface object
    SPtr<TSrvCfgIface> iface = SrvCfgIfaceLst.getLast();

    // set its options
    SrvCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());

    // copy all IA objects
    SPtr<TSrvCfgAddrClass> ptrAddrClass;
    SrvCfgAddrClassLst.first();
    while (ptrAddrClass=SrvCfgAddrClassLst.get())
	iface->addAddrClass(ptrAddrClass);
    SrvCfgAddrClassLst.clear();

    // copy all TA objects
    SPtr<TSrvCfgTA> ta;
    SrvCfgTALst.first();
    while (ta=SrvCfgTALst.get())
	iface->addTA(ta);
    SrvCfgTALst.clear();

    SPtr<TSrvCfgPD> pd;
    SrvCfgPDLst.first();
    while (pd=SrvCfgPDLst.get())
	iface->addPD(pd);
    SrvCfgPDLst.clear();

    iface->addClientExceptionsLst(ClientLst);

    // remove last option (representing this interface) from the parser stack
    ParserOptStack.delLast();

    return true;
}

void SrvParser::StartClassDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.append(new TSrvCfgAddrClass());
}

/**
 * this method is adds new object representig just parsed IA class.
 *
 * @return true if everything works ok.
 */
bool SrvParser::EndClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
	Log(Crit) << "No pools defined for this class." << LogEnd;
	return false;
    }
    //setting interface options on the basis of just read information
    SrvCfgAddrClassLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();

    return true;
}


/**
 * Just add global options
 *
 */
void SrvParser::StartTAClassDeclaration()
{
  ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
}

bool SrvParser::EndTAClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
	Log(Crit) << "No pools defined for this ta-class." << LogEnd;
	return false;
    }
    // create new object representing just parsed TA and add it to the list
    SPtr<TSrvCfgTA> ptrTA = new TSrvCfgTA();
    ptrTA->setOptions(ParserOptStack.getLast());
    SrvCfgTALst.append(ptrTA);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

void SrvParser::StartPDDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    this->PDLst.clear();
    this->PDPrefix = 0;
}

bool SrvParser::EndPDDeclaration()
{
    if (!this->PDLst.count()) {
	Log(Crit) << "No PD pools defined ." << LogEnd;
	return false;
    }
    if (!this->PDPrefix) {
	Log(Crit) << "PD prefix length not defined or set to 0." << LogEnd;
	return false;
    }

    int len = 0;
    this->PDLst.first();
    while ( SPtr<THostRange> pool = PDLst.get() ) {
	if (!len)
	    len = pool->getPrefixLength();
	if (len!=pool->getPrefixLength()) {
	    Log(Crit) << "Prefix pools with different lengths are not supported. Make sure that all 'pd-pool' uses the same prefix length." << LogEnd;
	    return false;
	}
    }
    if (len>PDPrefix) {
	Log(Crit) << "Clients are supposed to get /" << this->PDPrefix << " prefixes, but pd-pool(s) are only /" << len << " long." << LogEnd;
	return false;
    }
    if (len==PDPrefix) {
	Log(Warning) << "Prefix pool /" << PDPrefix << " defined and clients are supposed to get /" << len << " prefixes. Only ONE client will get prefix" << LogEnd;
    }

    SPtr<TSrvCfgPD> ptrPD = new TSrvCfgPD();
    ParserOptStack.getLast()->setPool(&this->PDLst);
    if (!ptrPD->setOptions(ParserOptStack.getLast(), this->PDPrefix))
	return false;
    SrvCfgPDLst.append(ptrPD);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

namespace std {
    extern yy_SrvParser_stype yylval;
}

int SrvParser::yylex()
{
    memset(&std::yylval,0, sizeof(std::yylval));
    memset(&this->yylval,0, sizeof(this->yylval));
    int x = this->lex->yylex();
    this->yylval=std::yylval;
    return x;
}

void SrvParser::yyerror(char *m)
{
    Log(Crit) << "Config parse error: line " << lex->lineno()
	      << ", unexpected [" << lex->YYText() << "] token." << LogEnd;
}

SrvParser::~SrvParser() {
    ParserOptStack.clear();
    SrvCfgIfaceLst.clear();
    SrvCfgAddrClassLst.clear();
    SrvCfgTALst.clear();
    PresentAddrLst.clear();
    PresentStringLst.clear();
    PresentRangeLst.clear();
}

static char bitMask[]= { 0, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff };

SPtr<TIPv6Addr> SrvParser::getRangeMin(char * addrPacked, int prefix) {
    char packed[16];
    char mask;
    memcpy(packed, addrPacked, 16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] & mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0;
    }
    return new TIPv6Addr(packed, false);
}

SPtr<TIPv6Addr> SrvParser::getRangeMax(char * addrPacked, int prefix){
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] | ~mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0xff;
    }

    return new TIPv6Addr(packed, false);
}
