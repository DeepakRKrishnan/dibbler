#define YY_SrvParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from SrvParser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "../bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "../bison++/bison.cc"
#line 3 "SrvParser.y"

#include <iostream>
#include <string>
#include <malloc.h>
#include "DHCPConst.h"
#include "SmartPtr.h"
#include "Container.h"
#include "SrvParser.h"
#include "SrvParsGlobalOpt.h"
#include "SrvParsClassOpt.h"
#include "SrvParsIfaceOpt.h"
#include "OptAddr.h"
#include "OptAddrLst.h"
#include "OptString.h"
#include "SrvCfgMgr.h"
#include "SrvCfgTA.h"
#include "SrvCfgPD.h"
#include "SrvCfgAddrClass.h"
#include "SrvCfgIface.h"
#include "SrvCfgOptions.h"
#include "DUID.h"
#include "Logger.h"
#include "FQDN.h"
#include "OptVendorSpecInfo.h"
#include "OptRtPrefix.h"
#include "SrvOptAddrParams.h"
#include "Portable.h"
#include "SrvCfgClientClass.h"
#include "Node.h"
#include "NodeConstant.h"
#include "NodeClientSpecific.h"
#include "NodeOperator.h"
#include "CfgMgr.h"
#include <sstream>

using namespace std;

#define YY_USE_CLASS
#line 43 "SrvParser.y"

#include "FlexLexer.h"
#define YY_SrvParser_MEMBERS  FlexLexer * lex;                                                     \
List(TSrvParsGlobalOpt) ParserOptStack;    /* list of parsed interfaces/IAs/addrs */ \
List(TSrvCfgIface) SrvCfgIfaceLst;         /* list of SrvCfg interfaces */           \
List(TSrvCfgAddrClass) SrvCfgAddrClassLst; /* list of SrvCfg address classes */      \
List(TSrvCfgTA) SrvCfgTALst;               /* list of SrvCfg TA objects */           \
List(TSrvCfgPD) SrvCfgPDLst;		   /* list of SrvCfg PD objects */           \
List(TSrvCfgClientClass) SrvCfgClientClassLst; /* list of SrvCfgClientClass objs */  \
List(TIPv6Addr) PresentAddrLst;            /* address list (used for DNS,NTP,etc.)*/ \
List(string) PresentStringLst;             /* string list */                         \
List(Node) NodeClientClassLst;             /* Node list */                           \
List(TFQDN) PresentFQDNLst;                                                          \
SPtr<TIPv6Addr> addr;                                                                \
List(TStationRange) PresentRangeLst;                                                 \
List(TStationRange) PDLst;                                                           \
List(TSrvCfgOptions) ClientLst;                                                      \
int PDPrefix;                                                                        \
bool IfaceDefined(int ifaceNr);                                                      \
bool IfaceDefined(string ifaceName);                                                 \
bool StartIfaceDeclaration(string iface);                                            \
bool StartIfaceDeclaration(int ifindex);                                             \
bool EndIfaceDeclaration();                                                          \
void StartClassDeclaration();                                                        \
bool EndClassDeclaration();                                                          \
SPtr<TIPv6Addr> getRangeMin(char * addrPacked, int prefix);                          \
SPtr<TIPv6Addr> getRangeMax(char * addrPacked, int prefix);                          \
void StartTAClassDeclaration();                                                      \
bool EndTAClassDeclaration();                                                        \
void StartPDDeclaration();                                                           \
bool EndPDDeclaration();                                                             \
TSrvCfgMgr * CfgMgr;                                                                 \
SPtr<TOpt> nextHop;                                                                  \
virtual ~SrvParser();
#define YY_SrvParser_CONSTRUCTOR_PARAM  yyFlexLexer * lex
#define YY_SrvParser_CONSTRUCTOR_CODE                                                           \
    ParserOptStack.append(new TSrvParsGlobalOpt());                               \
    this->lex = lex;                                                              \
    CfgMgr = 0;                                                                   \
    nextHop = 0;

#line 89 "SrvParser.y"
typedef union
{
    unsigned int ival;
    char *strval;
    struct SDuid
    {
	int length;
	char* duid;
    } duidval;
    char addrval[16];
} yy_SrvParser_stype;
#define YY_SrvParser_STYPE yy_SrvParser_stype

#line 88 "../bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_SrvParser_BISON 1

#ifndef YY_SrvParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_SrvParser_COMPATIBILITY 1
 #else
  #define  YY_SrvParser_COMPATIBILITY 0
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_SrvParser_LTYPE
   #define YY_SrvParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_SrvParser_STYPE 
   #define YY_SrvParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_SrvParser_DEBUG
   #define  YY_SrvParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_SrvParser_USE_GOTO
  #define YY_SrvParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_SrvParser_USE_GOTO
 #define YY_SrvParser_USE_GOTO 0
#endif

#ifndef YY_SrvParser_PURE

 #line 130 "../bison++/bison.cc"

#line 130 "../bison++/bison.cc"
/*  YY_SrvParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "../bison++/bison.cc"

#line 134 "../bison++/bison.cc"
/* prefix */
#ifndef YY_SrvParser_DEBUG

 #line 136 "../bison++/bison.cc"
#define YY_SrvParser_DEBUG 1

#line 136 "../bison++/bison.cc"
/* YY_SrvParser_DEBUG */
#endif


#ifndef YY_SrvParser_LSP_NEEDED

 #line 141 "../bison++/bison.cc"

#line 141 "../bison++/bison.cc"
 /* YY_SrvParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_SrvParser_LSP_NEEDED
#ifndef YY_SrvParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_SrvParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_SrvParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_SrvParser_STYPE
#define YY_SrvParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_SrvParser_PARSE
#define YY_SrvParser_PARSE yyparse
#endif
#ifndef YY_SrvParser_LEX
#define YY_SrvParser_LEX yylex
#endif
#ifndef YY_SrvParser_LVAL
#define YY_SrvParser_LVAL yylval
#endif
#ifndef YY_SrvParser_LLOC
#define YY_SrvParser_LLOC yylloc
#endif
#ifndef YY_SrvParser_CHAR
#define YY_SrvParser_CHAR yychar
#endif
#ifndef YY_SrvParser_NERRS
#define YY_SrvParser_NERRS yynerrs
#endif
#ifndef YY_SrvParser_DEBUG_FLAG
#define YY_SrvParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_SrvParser_ERROR
#define YY_SrvParser_ERROR yyerror
#endif

#ifndef YY_SrvParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_SrvParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_SrvParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_SrvParser_PARSE_PARAM
  #define YY_SrvParser_PARSE_PARAM void
 #endif
#endif

#if YY_SrvParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_SrvParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_SrvParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_SrvParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_SrvParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_SrvParser_PURE
#  endif
#endif

#ifdef YY_SrvParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_SrvParser_DEBUG 
#  endif
#endif

#ifndef YY_SrvParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_SrvParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_SrvParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_SrvParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "../bison++/bison.cc"
#define	IFACE_	258
#define	RELAY_	259
#define	IFACE_ID_	260
#define	IFACE_ID_ORDER_	261
#define	CLASS_	262
#define	TACLASS_	263
#define	LOGNAME_	264
#define	LOGLEVEL_	265
#define	LOGMODE_	266
#define	LOGCOLORS_	267
#define	WORKDIR_	268
#define	OPTION_	269
#define	DNS_SERVER_	270
#define	DOMAIN_	271
#define	NTP_SERVER_	272
#define	TIME_ZONE_	273
#define	SIP_SERVER_	274
#define	SIP_DOMAIN_	275
#define	NIS_SERVER_	276
#define	NIS_DOMAIN_	277
#define	NISP_SERVER_	278
#define	NISP_DOMAIN_	279
#define	LIFETIME_	280
#define	FQDN_	281
#define	ACCEPT_UNKNOWN_FQDN_	282
#define	FQDN_DDNS_ADDRESS_	283
#define	DDNS_PROTOCOL_	284
#define	DDNS_TIMEOUT_	285
#define	ACCEPT_ONLY_	286
#define	REJECT_CLIENTS_	287
#define	POOL_	288
#define	SHARE_	289
#define	T1_	290
#define	T2_	291
#define	PREF_TIME_	292
#define	VALID_TIME_	293
#define	UNICAST_	294
#define	PREFERENCE_	295
#define	RAPID_COMMIT_	296
#define	IFACE_MAX_LEASE_	297
#define	CLASS_MAX_LEASE_	298
#define	CLNT_MAX_LEASE_	299
#define	STATELESS_	300
#define	CACHE_SIZE_	301
#define	PDCLASS_	302
#define	PD_LENGTH_	303
#define	PD_POOL_	304
#define	SCRIPT_	305
#define	VENDOR_SPEC_	306
#define	CLIENT_	307
#define	DUID_KEYWORD_	308
#define	REMOTE_ID_	309
#define	ADDRESS_	310
#define	GUESS_MODE_	311
#define	INACTIVE_MODE_	312
#define	EXPERIMENTAL_	313
#define	ADDR_PARAMS_	314
#define	REMOTE_AUTOCONF_NEIGHBORS_	315
#define	AFTR_	316
#define	AUTH_METHOD_	317
#define	AUTH_LIFETIME_	318
#define	AUTH_KEY_LEN_	319
#define	DIGEST_NONE_	320
#define	DIGEST_PLAIN_	321
#define	DIGEST_HMAC_MD5_	322
#define	DIGEST_HMAC_SHA1_	323
#define	DIGEST_HMAC_SHA224_	324
#define	DIGEST_HMAC_SHA256_	325
#define	DIGEST_HMAC_SHA384_	326
#define	DIGEST_HMAC_SHA512_	327
#define	ACCEPT_LEASEQUERY_	328
#define	BULKLQ_ACCEPT_	329
#define	BULKLQ_TCPPORT_	330
#define	BULKLQ_MAX_CONNS_	331
#define	BULKLQ_TIMEOUT_	332
#define	CLIENT_CLASS_	333
#define	MATCH_IF_	334
#define	EQ_	335
#define	AND_	336
#define	OR_	337
#define	CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_	338
#define	CLIENT_VENDOR_SPEC_DATA_	339
#define	CLIENT_VENDOR_CLASS_EN_	340
#define	CLIENT_VENDOR_CLASS_DATA_	341
#define	ALLOW_	342
#define	DENY_	343
#define	SUBSTRING_	344
#define	STRING_KEYWORD_	345
#define	ADDRESS_LIST_	346
#define	CONTAIN_	347
#define	NEXT_HOP_	348
#define	ROUTE_	349
#define	INFINITE_	350
#define	SUBNET_	351
#define	STRING_	352
#define	HEXNUMBER_	353
#define	INTNUMBER_	354
#define	IPV6ADDR_	355
#define	DUID_	356


#line 263 "../bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_SrvParser_CLASS
#define YY_SrvParser_CLASS SrvParser
#endif
#ifndef YY_SrvParser_INHERIT
#define YY_SrvParser_INHERIT
#endif
#ifndef YY_SrvParser_MEMBERS
#define YY_SrvParser_MEMBERS 
#endif
#ifndef YY_SrvParser_LEX_BODY
#define YY_SrvParser_LEX_BODY  
#endif
#ifndef YY_SrvParser_ERROR_BODY
#define YY_SrvParser_ERROR_BODY  
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_PARAM
#define YY_SrvParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_CODE
#define YY_SrvParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_SrvParser_CONSTRUCTOR_INIT
#define YY_SrvParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_SrvParser_USE_CONST_TOKEN
#define YY_SrvParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_SrvParser_USE_CONST_TOKEN != 0
#ifndef YY_SrvParser_ENUM_TOKEN
#define YY_SrvParser_ENUM_TOKEN yy_SrvParser_enum_token
#endif
#endif

class YY_SrvParser_CLASS YY_SrvParser_INHERIT
{
public: 
#if YY_SrvParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "../bison++/bison.cc"
static const int IFACE_;
static const int RELAY_;
static const int IFACE_ID_;
static const int IFACE_ID_ORDER_;
static const int CLASS_;
static const int TACLASS_;
static const int LOGNAME_;
static const int LOGLEVEL_;
static const int LOGMODE_;
static const int LOGCOLORS_;
static const int WORKDIR_;
static const int OPTION_;
static const int DNS_SERVER_;
static const int DOMAIN_;
static const int NTP_SERVER_;
static const int TIME_ZONE_;
static const int SIP_SERVER_;
static const int SIP_DOMAIN_;
static const int NIS_SERVER_;
static const int NIS_DOMAIN_;
static const int NISP_SERVER_;
static const int NISP_DOMAIN_;
static const int LIFETIME_;
static const int FQDN_;
static const int ACCEPT_UNKNOWN_FQDN_;
static const int FQDN_DDNS_ADDRESS_;
static const int DDNS_PROTOCOL_;
static const int DDNS_TIMEOUT_;
static const int ACCEPT_ONLY_;
static const int REJECT_CLIENTS_;
static const int POOL_;
static const int SHARE_;
static const int T1_;
static const int T2_;
static const int PREF_TIME_;
static const int VALID_TIME_;
static const int UNICAST_;
static const int PREFERENCE_;
static const int RAPID_COMMIT_;
static const int IFACE_MAX_LEASE_;
static const int CLASS_MAX_LEASE_;
static const int CLNT_MAX_LEASE_;
static const int STATELESS_;
static const int CACHE_SIZE_;
static const int PDCLASS_;
static const int PD_LENGTH_;
static const int PD_POOL_;
static const int SCRIPT_;
static const int VENDOR_SPEC_;
static const int CLIENT_;
static const int DUID_KEYWORD_;
static const int REMOTE_ID_;
static const int ADDRESS_;
static const int GUESS_MODE_;
static const int INACTIVE_MODE_;
static const int EXPERIMENTAL_;
static const int ADDR_PARAMS_;
static const int REMOTE_AUTOCONF_NEIGHBORS_;
static const int AFTR_;
static const int AUTH_METHOD_;
static const int AUTH_LIFETIME_;
static const int AUTH_KEY_LEN_;
static const int DIGEST_NONE_;
static const int DIGEST_PLAIN_;
static const int DIGEST_HMAC_MD5_;
static const int DIGEST_HMAC_SHA1_;
static const int DIGEST_HMAC_SHA224_;
static const int DIGEST_HMAC_SHA256_;
static const int DIGEST_HMAC_SHA384_;
static const int DIGEST_HMAC_SHA512_;
static const int ACCEPT_LEASEQUERY_;
static const int BULKLQ_ACCEPT_;
static const int BULKLQ_TCPPORT_;
static const int BULKLQ_MAX_CONNS_;
static const int BULKLQ_TIMEOUT_;
static const int CLIENT_CLASS_;
static const int MATCH_IF_;
static const int EQ_;
static const int AND_;
static const int OR_;
static const int CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_;
static const int CLIENT_VENDOR_SPEC_DATA_;
static const int CLIENT_VENDOR_CLASS_EN_;
static const int CLIENT_VENDOR_CLASS_DATA_;
static const int ALLOW_;
static const int DENY_;
static const int SUBSTRING_;
static const int STRING_KEYWORD_;
static const int ADDRESS_LIST_;
static const int CONTAIN_;
static const int NEXT_HOP_;
static const int ROUTE_;
static const int INFINITE_;
static const int SUBNET_;
static const int STRING_;
static const int HEXNUMBER_;
static const int INTNUMBER_;
static const int IPV6ADDR_;
static const int DUID_;


#line 307 "../bison++/bison.cc"
 /* decl const */
#else
enum YY_SrvParser_ENUM_TOKEN { YY_SrvParser_NULL_TOKEN=0

 #line 310 "../bison++/bison.cc"
	,IFACE_=258
	,RELAY_=259
	,IFACE_ID_=260
	,IFACE_ID_ORDER_=261
	,CLASS_=262
	,TACLASS_=263
	,LOGNAME_=264
	,LOGLEVEL_=265
	,LOGMODE_=266
	,LOGCOLORS_=267
	,WORKDIR_=268
	,OPTION_=269
	,DNS_SERVER_=270
	,DOMAIN_=271
	,NTP_SERVER_=272
	,TIME_ZONE_=273
	,SIP_SERVER_=274
	,SIP_DOMAIN_=275
	,NIS_SERVER_=276
	,NIS_DOMAIN_=277
	,NISP_SERVER_=278
	,NISP_DOMAIN_=279
	,LIFETIME_=280
	,FQDN_=281
	,ACCEPT_UNKNOWN_FQDN_=282
	,FQDN_DDNS_ADDRESS_=283
	,DDNS_PROTOCOL_=284
	,DDNS_TIMEOUT_=285
	,ACCEPT_ONLY_=286
	,REJECT_CLIENTS_=287
	,POOL_=288
	,SHARE_=289
	,T1_=290
	,T2_=291
	,PREF_TIME_=292
	,VALID_TIME_=293
	,UNICAST_=294
	,PREFERENCE_=295
	,RAPID_COMMIT_=296
	,IFACE_MAX_LEASE_=297
	,CLASS_MAX_LEASE_=298
	,CLNT_MAX_LEASE_=299
	,STATELESS_=300
	,CACHE_SIZE_=301
	,PDCLASS_=302
	,PD_LENGTH_=303
	,PD_POOL_=304
	,SCRIPT_=305
	,VENDOR_SPEC_=306
	,CLIENT_=307
	,DUID_KEYWORD_=308
	,REMOTE_ID_=309
	,ADDRESS_=310
	,GUESS_MODE_=311
	,INACTIVE_MODE_=312
	,EXPERIMENTAL_=313
	,ADDR_PARAMS_=314
	,REMOTE_AUTOCONF_NEIGHBORS_=315
	,AFTR_=316
	,AUTH_METHOD_=317
	,AUTH_LIFETIME_=318
	,AUTH_KEY_LEN_=319
	,DIGEST_NONE_=320
	,DIGEST_PLAIN_=321
	,DIGEST_HMAC_MD5_=322
	,DIGEST_HMAC_SHA1_=323
	,DIGEST_HMAC_SHA224_=324
	,DIGEST_HMAC_SHA256_=325
	,DIGEST_HMAC_SHA384_=326
	,DIGEST_HMAC_SHA512_=327
	,ACCEPT_LEASEQUERY_=328
	,BULKLQ_ACCEPT_=329
	,BULKLQ_TCPPORT_=330
	,BULKLQ_MAX_CONNS_=331
	,BULKLQ_TIMEOUT_=332
	,CLIENT_CLASS_=333
	,MATCH_IF_=334
	,EQ_=335
	,AND_=336
	,OR_=337
	,CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=338
	,CLIENT_VENDOR_SPEC_DATA_=339
	,CLIENT_VENDOR_CLASS_EN_=340
	,CLIENT_VENDOR_CLASS_DATA_=341
	,ALLOW_=342
	,DENY_=343
	,SUBSTRING_=344
	,STRING_KEYWORD_=345
	,ADDRESS_LIST_=346
	,CONTAIN_=347
	,NEXT_HOP_=348
	,ROUTE_=349
	,INFINITE_=350
	,SUBNET_=351
	,STRING_=352
	,HEXNUMBER_=353
	,INTNUMBER_=354
	,IPV6ADDR_=355
	,DUID_=356


#line 310 "../bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_SrvParser_PARSE (YY_SrvParser_PARSE_PARAM);
 virtual void YY_SrvParser_ERROR(char *msg) YY_SrvParser_ERROR_BODY;
#ifdef YY_SrvParser_PURE
#ifdef YY_SrvParser_LSP_NEEDED
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL,YY_SrvParser_LTYPE *YY_SrvParser_LLOC) YY_SrvParser_LEX_BODY;
#else
 virtual int  YY_SrvParser_LEX (YY_SrvParser_STYPE *YY_SrvParser_LVAL) YY_SrvParser_LEX_BODY;
#endif
#else
 virtual int YY_SrvParser_LEX() YY_SrvParser_LEX_BODY;
 YY_SrvParser_STYPE YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
 YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
 int   YY_SrvParser_NERRS;
 int    YY_SrvParser_CHAR;
#endif
#if YY_SrvParser_DEBUG != 0
 int YY_SrvParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM);
public:
 YY_SrvParser_MEMBERS 
};
/* other declare folow */
#if YY_SrvParser_USE_CONST_TOKEN != 0

 #line 341 "../bison++/bison.cc"
const int YY_SrvParser_CLASS::IFACE_=258;
const int YY_SrvParser_CLASS::RELAY_=259;
const int YY_SrvParser_CLASS::IFACE_ID_=260;
const int YY_SrvParser_CLASS::IFACE_ID_ORDER_=261;
const int YY_SrvParser_CLASS::CLASS_=262;
const int YY_SrvParser_CLASS::TACLASS_=263;
const int YY_SrvParser_CLASS::LOGNAME_=264;
const int YY_SrvParser_CLASS::LOGLEVEL_=265;
const int YY_SrvParser_CLASS::LOGMODE_=266;
const int YY_SrvParser_CLASS::LOGCOLORS_=267;
const int YY_SrvParser_CLASS::WORKDIR_=268;
const int YY_SrvParser_CLASS::OPTION_=269;
const int YY_SrvParser_CLASS::DNS_SERVER_=270;
const int YY_SrvParser_CLASS::DOMAIN_=271;
const int YY_SrvParser_CLASS::NTP_SERVER_=272;
const int YY_SrvParser_CLASS::TIME_ZONE_=273;
const int YY_SrvParser_CLASS::SIP_SERVER_=274;
const int YY_SrvParser_CLASS::SIP_DOMAIN_=275;
const int YY_SrvParser_CLASS::NIS_SERVER_=276;
const int YY_SrvParser_CLASS::NIS_DOMAIN_=277;
const int YY_SrvParser_CLASS::NISP_SERVER_=278;
const int YY_SrvParser_CLASS::NISP_DOMAIN_=279;
const int YY_SrvParser_CLASS::LIFETIME_=280;
const int YY_SrvParser_CLASS::FQDN_=281;
const int YY_SrvParser_CLASS::ACCEPT_UNKNOWN_FQDN_=282;
const int YY_SrvParser_CLASS::FQDN_DDNS_ADDRESS_=283;
const int YY_SrvParser_CLASS::DDNS_PROTOCOL_=284;
const int YY_SrvParser_CLASS::DDNS_TIMEOUT_=285;
const int YY_SrvParser_CLASS::ACCEPT_ONLY_=286;
const int YY_SrvParser_CLASS::REJECT_CLIENTS_=287;
const int YY_SrvParser_CLASS::POOL_=288;
const int YY_SrvParser_CLASS::SHARE_=289;
const int YY_SrvParser_CLASS::T1_=290;
const int YY_SrvParser_CLASS::T2_=291;
const int YY_SrvParser_CLASS::PREF_TIME_=292;
const int YY_SrvParser_CLASS::VALID_TIME_=293;
const int YY_SrvParser_CLASS::UNICAST_=294;
const int YY_SrvParser_CLASS::PREFERENCE_=295;
const int YY_SrvParser_CLASS::RAPID_COMMIT_=296;
const int YY_SrvParser_CLASS::IFACE_MAX_LEASE_=297;
const int YY_SrvParser_CLASS::CLASS_MAX_LEASE_=298;
const int YY_SrvParser_CLASS::CLNT_MAX_LEASE_=299;
const int YY_SrvParser_CLASS::STATELESS_=300;
const int YY_SrvParser_CLASS::CACHE_SIZE_=301;
const int YY_SrvParser_CLASS::PDCLASS_=302;
const int YY_SrvParser_CLASS::PD_LENGTH_=303;
const int YY_SrvParser_CLASS::PD_POOL_=304;
const int YY_SrvParser_CLASS::SCRIPT_=305;
const int YY_SrvParser_CLASS::VENDOR_SPEC_=306;
const int YY_SrvParser_CLASS::CLIENT_=307;
const int YY_SrvParser_CLASS::DUID_KEYWORD_=308;
const int YY_SrvParser_CLASS::REMOTE_ID_=309;
const int YY_SrvParser_CLASS::ADDRESS_=310;
const int YY_SrvParser_CLASS::GUESS_MODE_=311;
const int YY_SrvParser_CLASS::INACTIVE_MODE_=312;
const int YY_SrvParser_CLASS::EXPERIMENTAL_=313;
const int YY_SrvParser_CLASS::ADDR_PARAMS_=314;
const int YY_SrvParser_CLASS::REMOTE_AUTOCONF_NEIGHBORS_=315;
const int YY_SrvParser_CLASS::AFTR_=316;
const int YY_SrvParser_CLASS::AUTH_METHOD_=317;
const int YY_SrvParser_CLASS::AUTH_LIFETIME_=318;
const int YY_SrvParser_CLASS::AUTH_KEY_LEN_=319;
const int YY_SrvParser_CLASS::DIGEST_NONE_=320;
const int YY_SrvParser_CLASS::DIGEST_PLAIN_=321;
const int YY_SrvParser_CLASS::DIGEST_HMAC_MD5_=322;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA1_=323;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA224_=324;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA256_=325;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA384_=326;
const int YY_SrvParser_CLASS::DIGEST_HMAC_SHA512_=327;
const int YY_SrvParser_CLASS::ACCEPT_LEASEQUERY_=328;
const int YY_SrvParser_CLASS::BULKLQ_ACCEPT_=329;
const int YY_SrvParser_CLASS::BULKLQ_TCPPORT_=330;
const int YY_SrvParser_CLASS::BULKLQ_MAX_CONNS_=331;
const int YY_SrvParser_CLASS::BULKLQ_TIMEOUT_=332;
const int YY_SrvParser_CLASS::CLIENT_CLASS_=333;
const int YY_SrvParser_CLASS::MATCH_IF_=334;
const int YY_SrvParser_CLASS::EQ_=335;
const int YY_SrvParser_CLASS::AND_=336;
const int YY_SrvParser_CLASS::OR_=337;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_=338;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_SPEC_DATA_=339;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_EN_=340;
const int YY_SrvParser_CLASS::CLIENT_VENDOR_CLASS_DATA_=341;
const int YY_SrvParser_CLASS::ALLOW_=342;
const int YY_SrvParser_CLASS::DENY_=343;
const int YY_SrvParser_CLASS::SUBSTRING_=344;
const int YY_SrvParser_CLASS::STRING_KEYWORD_=345;
const int YY_SrvParser_CLASS::ADDRESS_LIST_=346;
const int YY_SrvParser_CLASS::CONTAIN_=347;
const int YY_SrvParser_CLASS::NEXT_HOP_=348;
const int YY_SrvParser_CLASS::ROUTE_=349;
const int YY_SrvParser_CLASS::INFINITE_=350;
const int YY_SrvParser_CLASS::SUBNET_=351;
const int YY_SrvParser_CLASS::STRING_=352;
const int YY_SrvParser_CLASS::HEXNUMBER_=353;
const int YY_SrvParser_CLASS::INTNUMBER_=354;
const int YY_SrvParser_CLASS::IPV6ADDR_=355;
const int YY_SrvParser_CLASS::DUID_=356;


#line 341 "../bison++/bison.cc"
 /* const YY_SrvParser_CLASS::token */
#endif
/*apres const  */
YY_SrvParser_CLASS::YY_SrvParser_CLASS(YY_SrvParser_CONSTRUCTOR_PARAM) YY_SrvParser_CONSTRUCTOR_INIT
{
#if YY_SrvParser_DEBUG != 0
YY_SrvParser_DEBUG_FLAG=0;
#endif
YY_SrvParser_CONSTRUCTOR_CODE;
}
#endif

 #line 352 "../bison++/bison.cc"


#define	YYFINAL		441
#define	YYFLAG		-32768
#define	YYNTBASE	109

#define YYTRANSLATE(x) ((unsigned)(x) <= 356 ? yytranslate[x] : 231)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   107,
   108,     2,     2,   106,   104,     2,   105,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   102,     2,   103,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101
};

#if YY_SrvParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     5,     7,    10,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
    81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
   101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
   120,   127,   128,   135,   137,   140,   142,   144,   146,   148,
   151,   154,   157,   160,   161,   169,   170,   180,   182,   185,
   187,   189,   191,   193,   195,   197,   199,   201,   203,   205,
   207,   209,   211,   213,   215,   218,   219,   225,   227,   230,
   231,   237,   239,   242,   244,   246,   248,   250,   252,   254,
   256,   258,   259,   265,   267,   270,   272,   274,   276,   278,
   280,   282,   284,   286,   287,   294,   297,   299,   302,   309,
   314,   321,   324,   327,   330,   333,   336,   339,   342,   345,
   348,   351,   353,   357,   361,   365,   371,   377,   379,   381,
   383,   387,   393,   401,   403,   407,   409,   413,   417,   421,
   427,   431,   433,   437,   441,   447,   449,   453,   457,   463,
   464,   468,   469,   473,   474,   478,   479,   483,   486,   489,
   494,   497,   502,   505,   508,   513,   516,   521,   524,   527,
   530,   534,   539,   544,   545,   551,   556,   557,   562,   565,
   568,   571,   574,   577,   580,   583,   586,   589,   591,   593,
   596,   598,   600,   603,   606,   608,   611,   614,   617,   620,
   623,   626,   629,   632,   635,   638,   643,   648,   650,   652,
   654,   656,   658,   660,   662,   664,   666,   668,   670,   672,
   675,   678,   679,   684,   685,   690,   691,   696,   700,   701,
   706,   707,   712,   713,   718,   719,   725,   726,   733,   737,
   740,   743,   746,   749,   750,   755,   756,   761,   765,   769,
   773,   774,   779,   780,   787,   790,   791,   797,   803,   809,
   815,   817,   819,   821,   823
};

static const short yyrhs[] = {   110,
     0,     0,   111,     0,   113,     0,   110,   111,     0,   110,
   113,     0,   112,     0,   176,     0,   175,     0,   177,     0,
   178,     0,   179,     0,   180,     0,   186,     0,   138,     0,
   139,     0,   140,     0,   184,     0,   185,     0,   214,     0,
   215,     0,   216,     0,   181,     0,   226,     0,   182,     0,
   195,     0,   192,     0,   193,     0,   187,     0,   188,     0,
   189,     0,   190,     0,   191,     0,   172,     0,   174,     0,
   173,     0,   171,     0,   163,     0,   198,     0,   200,     0,
   202,     0,   204,     0,   205,     0,   207,     0,   209,     0,
   213,     0,   217,     0,   221,     0,   219,     0,   222,     0,
   166,     0,   223,     0,   167,     0,   169,     0,   130,     0,
   224,     0,   117,     0,   183,     0,   194,     0,     0,     3,
    97,   102,   114,   116,   103,     0,     0,     3,   142,   102,
   115,   116,   103,     0,   112,     0,   116,   112,     0,   123,
     0,   126,     0,   134,     0,   137,     0,   116,   126,     0,
   116,   123,     0,   116,   134,     0,   116,   137,     0,     0,
    52,    53,   101,   102,   118,   120,   103,     0,     0,    52,
    54,   142,   104,   101,   102,   119,   120,   103,     0,   121,
     0,   120,   121,     0,   198,     0,   200,     0,   202,     0,
   204,     0,   205,     0,   207,     0,   217,     0,   221,     0,
   219,     0,   222,     0,   223,     0,   224,     0,   167,     0,
   166,     0,   122,     0,    55,   100,     0,     0,     7,   102,
   124,   125,   103,     0,   195,     0,   125,   195,     0,     0,
     8,   102,   127,   128,   103,     0,   129,     0,   128,   129,
     0,   158,     0,   159,     0,   153,     0,   164,     0,   149,
     0,   151,     0,   196,     0,   197,     0,     0,    47,   102,
   131,   132,   103,     0,   133,     0,   133,   132,     0,   157,
     0,   155,     0,   159,     0,   158,     0,   161,     0,   162,
     0,   196,     0,   197,     0,     0,    93,   100,   102,   135,
   136,   103,     0,    93,   100,     0,   137,     0,   136,   137,
     0,    94,   100,   105,    99,    25,    99,     0,    94,   100,
   105,    99,     0,    94,   100,   105,    99,    25,    95,     0,
    62,    65,     0,    62,    66,     0,    62,    67,     0,    62,
    68,     0,    62,    69,     0,    62,    70,     0,    62,    71,
     0,    62,    72,     0,    63,   142,     0,    64,   142,     0,
    97,     0,    97,   104,   101,     0,    97,   104,   100,     0,
   141,   106,    97,     0,   141,   106,    97,   104,   101,     0,
   141,   106,    97,   104,   100,     0,    98,     0,    99,     0,
   100,     0,   143,   106,   100,     0,   142,   104,   142,   104,
   101,     0,   144,   106,   142,   104,   142,   104,   101,     0,
    97,     0,   145,   106,    97,     0,   100,     0,   100,   104,
   100,     0,   100,   105,    99,     0,   146,   106,   100,     0,
   146,   106,   100,   104,   100,     0,   100,   105,    99,     0,
   100,     0,   100,   104,   100,     0,   148,   106,   100,     0,
   148,   106,   100,   104,   100,     0,   101,     0,   101,   104,
   101,     0,   148,   106,   101,     0,   148,   106,   101,   104,
   101,     0,     0,    32,   150,   148,     0,     0,    31,   152,
   148,     0,     0,    33,   154,   146,     0,     0,    49,   156,
   147,     0,    48,   142,     0,    37,   142,     0,    37,   142,
   104,   142,     0,    38,   142,     0,    38,   142,   104,   142,
     0,    34,   142,     0,    35,   142,     0,    35,   142,   104,
   142,     0,    36,   142,     0,    36,   142,   104,   142,     0,
    44,   142,     0,    43,   142,     0,    59,   142,     0,    14,
    61,    97,     0,    14,   142,    53,   101,     0,    14,   142,
    55,   100,     0,     0,    14,   142,    91,   168,   143,     0,
    14,   142,    90,    97,     0,     0,    14,    60,   170,   143,
     0,    42,   142,     0,    39,   100,     0,    41,   142,     0,
    40,   142,     0,    10,   142,     0,    11,    97,     0,     9,
    97,     0,    12,   142,     0,    13,    97,     0,    45,     0,
    56,     0,    50,    97,     0,    57,     0,    58,     0,     6,
    97,     0,    46,   142,     0,    73,     0,    73,   142,     0,
    74,   142,     0,    75,   142,     0,    76,   142,     0,    77,
   142,     0,     4,    97,     0,     4,   142,     0,     5,   142,
     0,     5,   101,     0,     5,    97,     0,    96,   100,   105,
   142,     0,    96,   100,   104,   100,     0,   158,     0,   159,
     0,   153,     0,   160,     0,   161,     0,   162,     0,   149,
     0,   151,     0,   164,     0,   165,     0,   196,     0,   197,
     0,    87,    97,     0,    88,    97,     0,     0,    14,    15,
   199,   143,     0,     0,    14,    16,   201,   145,     0,     0,
    14,    17,   203,   143,     0,    14,    18,    97,     0,     0,
    14,    19,   206,   143,     0,     0,    14,    20,   208,   145,
     0,     0,    14,    26,   210,   141,     0,     0,    14,    26,
    99,   211,   141,     0,     0,    14,    26,    99,    99,   212,
   141,     0,    27,   142,    97,     0,    27,   142,     0,    28,
   100,     0,    29,    97,     0,    30,   142,     0,     0,    14,
    21,   218,   143,     0,     0,    14,    23,   220,   143,     0,
    14,    22,    97,     0,    14,    24,    97,     0,    14,    25,
   142,     0,     0,    14,    51,   225,   144,     0,     0,    78,
    97,   102,   227,   228,   103,     0,    79,   229,     0,     0,
   107,   230,    92,   230,   108,     0,   107,   230,    80,   230,
   108,     0,   107,   229,    81,   229,   108,     0,   107,   229,
    82,   229,   108,     0,    83,     0,    84,     0,    97,     0,
   142,     0,    89,   107,   230,   106,   142,   106,   142,   108,
     0
};

#endif

#if (YY_SrvParser_DEBUG != 0) || defined(YY_SrvParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   153,   154,   158,   159,   160,   161,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,   180,   181,   182,   183,   189,   190,   191,   192,   193,
   194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
   204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   227,
   232,   240,   245,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   264,   270,   278,   284,   293,   294,   298,
   299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
   309,   310,   311,   312,   315,   324,   329,   337,   338,   343,
   346,   354,   355,   358,   359,   360,   361,   362,   363,   364,
   365,   369,   372,   380,   381,   384,   385,   386,   387,   388,
   389,   390,   391,   398,   405,   411,   420,   421,   424,   434,
   443,   457,   458,   459,   460,   461,   462,   463,   464,   468,
   472,   480,   485,   492,   499,   504,   511,   521,   522,   526,
   530,   537,   544,   553,   554,   558,   562,   571,   587,   591,
   603,   626,   630,   639,   643,   652,   657,   667,   672,   686,
   690,   696,   700,   706,   710,   716,   719,   724,   731,   736,
   744,   749,   757,   769,   774,   782,   787,   795,   802,   809,
   822,   830,   836,   844,   848,   853,   861,   872,   881,   888,
   895,   910,   922,   928,   933,   940,   946,   953,   960,   967,
   974,   980,   987,  1008,  1019,  1024,  1040,  1051,  1057,  1063,
  1072,  1076,  1083,  1088,  1093,  1101,  1107,  1117,  1118,  1119,
  1120,  1121,  1122,  1123,  1124,  1125,  1126,  1127,  1128,  1132,
  1161,  1194,  1198,  1207,  1210,  1219,  1223,  1232,  1242,  1245,
  1254,  1257,  1267,  1275,  1278,  1286,  1290,  1298,  1305,  1310,
  1318,  1326,  1343,  1353,  1356,  1365,  1368,  1377,  1387,  1397,
  1404,  1406,  1413,  1416,  1426,  1432,  1432,  1440,  1449,  1458,
  1469,  1473,  1477,  1482,  1491
};

static const char * const yytname[] = {   "$","error","$illegal.","IFACE_","RELAY_",
"IFACE_ID_","IFACE_ID_ORDER_","CLASS_","TACLASS_","LOGNAME_","LOGLEVEL_","LOGMODE_",
"LOGCOLORS_","WORKDIR_","OPTION_","DNS_SERVER_","DOMAIN_","NTP_SERVER_","TIME_ZONE_",
"SIP_SERVER_","SIP_DOMAIN_","NIS_SERVER_","NIS_DOMAIN_","NISP_SERVER_","NISP_DOMAIN_",
"LIFETIME_","FQDN_","ACCEPT_UNKNOWN_FQDN_","FQDN_DDNS_ADDRESS_","DDNS_PROTOCOL_",
"DDNS_TIMEOUT_","ACCEPT_ONLY_","REJECT_CLIENTS_","POOL_","SHARE_","T1_","T2_",
"PREF_TIME_","VALID_TIME_","UNICAST_","PREFERENCE_","RAPID_COMMIT_","IFACE_MAX_LEASE_",
"CLASS_MAX_LEASE_","CLNT_MAX_LEASE_","STATELESS_","CACHE_SIZE_","PDCLASS_","PD_LENGTH_",
"PD_POOL_","SCRIPT_","VENDOR_SPEC_","CLIENT_","DUID_KEYWORD_","REMOTE_ID_","ADDRESS_",
"GUESS_MODE_","INACTIVE_MODE_","EXPERIMENTAL_","ADDR_PARAMS_","REMOTE_AUTOCONF_NEIGHBORS_",
"AFTR_","AUTH_METHOD_","AUTH_LIFETIME_","AUTH_KEY_LEN_","DIGEST_NONE_","DIGEST_PLAIN_",
"DIGEST_HMAC_MD5_","DIGEST_HMAC_SHA1_","DIGEST_HMAC_SHA224_","DIGEST_HMAC_SHA256_",
"DIGEST_HMAC_SHA384_","DIGEST_HMAC_SHA512_","ACCEPT_LEASEQUERY_","BULKLQ_ACCEPT_",
"BULKLQ_TCPPORT_","BULKLQ_MAX_CONNS_","BULKLQ_TIMEOUT_","CLIENT_CLASS_","MATCH_IF_",
"EQ_","AND_","OR_","CLIENT_VENDOR_SPEC_ENTERPRISE_NUM_","CLIENT_VENDOR_SPEC_DATA_",
"CLIENT_VENDOR_CLASS_EN_","CLIENT_VENDOR_CLASS_DATA_","ALLOW_","DENY_","SUBSTRING_",
"STRING_KEYWORD_","ADDRESS_LIST_","CONTAIN_","NEXT_HOP_","ROUTE_","INFINITE_",
"SUBNET_","STRING_","HEXNUMBER_","INTNUMBER_","IPV6ADDR_","DUID_","'{'","'}'",
"'-'","'/'","','","'('","')'","Grammar","GlobalDeclarationList","GlobalOption",
"InterfaceOptionDeclaration","InterfaceDeclaration","@1","@2","InterfaceDeclarationsList",
"Client","@3","@4","ClientOptions","ClientOption","AddressReservation","ClassDeclaration",
"@5","ClassOptionDeclarationsList","TAClassDeclaration","@6","TAClassOptionsList",
"TAClassOption","PDDeclaration","@7","PDOptionsList","PDOptions","NextHopDeclaration",
"@8","RouteList","Route","AuthMethod","AuthLifetime","AuthKeyGenNonceLen","FQDNList",
"Number","ADDRESSList","VendorSpecList","StringList","ADDRESSRangeList","PDRangeList",
"ADDRESSDUIDRangeList","RejectClientsOption","@9","AcceptOnlyOption","@10","PoolOption",
"@11","PDPoolOption","@12","PDLength","PreferredTimeOption","ValidTimeOption",
"ShareOption","T1Option","T2Option","ClntMaxLeaseOption","ClassMaxLeaseOption",
"AddrParams","DsLiteAftrName","ExtraOption","@13","RemoteAutoconfNeighborsOption",
"@14","IfaceMaxLeaseOption","UnicastAddressOption","RapidCommitOption","PreferenceOption",
"LogLevelOption","LogModeOption","LogNameOption","LogColors","WorkDirOption",
"StatelessOption","GuessMode","ScriptName","InactiveMode","Experimental","IfaceIDOrder",
"CacheSizeOption","AcceptLeaseQuery","BulkLeaseQueryAccept","BulkLeaseQueryTcpPort",
"BulkLeaseQueryMaxConns","BulkLeaseQueryTimeout","RelayOption","InterfaceIDOption",
"Subnet","ClassOptionDeclaration","AllowClientClassDeclaration","DenyClientClassDeclaration",
"DNSServerOption","@15","DomainOption","@16","NTPServerOption","@17","TimeZoneOption",
"SIPServerOption","@18","SIPDomainOption","@19","FQDNOption","@20","@21","@22",
"AcceptUnknownFQDN","FqdnDdnsAddress","DdnsProtocol","DdnsTimeout","NISServerOption",
"@23","NISPServerOption","@24","NISDomainOption","NISPDomainOption","LifetimeOption",
"VendorSpecOption","@25","ClientClass","@26","ClientClassDecleration","Condition",
"Expr",""
};
#endif

static const short yyr1[] = {     0,
   109,   109,   110,   110,   110,   110,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   112,   114,
   113,   115,   113,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   118,   117,   119,   117,   120,   120,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   122,   124,   123,   125,   125,   127,
   126,   128,   128,   129,   129,   129,   129,   129,   129,   129,
   129,   131,   130,   132,   132,   133,   133,   133,   133,   133,
   133,   133,   133,   135,   134,   134,   136,   136,   137,   137,
   137,   138,   138,   138,   138,   138,   138,   138,   138,   139,
   140,   141,   141,   141,   141,   141,   141,   142,   142,   143,
   143,   144,   144,   145,   145,   146,   146,   146,   146,   146,
   147,   148,   148,   148,   148,   148,   148,   148,   148,   150,
   149,   152,   151,   154,   153,   156,   155,   157,   158,   158,
   159,   159,   160,   161,   161,   162,   162,   163,   164,   165,
   166,   167,   167,   168,   167,   167,   170,   169,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
   183,   184,   185,   186,   187,   187,   188,   189,   190,   191,
   192,   192,   193,   193,   193,   194,   194,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   196,
   197,   199,   198,   201,   200,   203,   202,   204,   206,   205,
   208,   207,   210,   209,   211,   209,   212,   209,   213,   213,
   214,   215,   216,   218,   217,   220,   219,   221,   222,   223,
   225,   224,   227,   226,   228,   229,   229,   229,   229,   229,
   230,   230,   230,   230,   230
};

static const short yyr2[] = {     0,
     1,     0,     1,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
     6,     0,     6,     1,     2,     1,     1,     1,     1,     2,
     2,     2,     2,     0,     7,     0,     9,     1,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     0,     5,     1,     2,     0,
     5,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     0,     5,     1,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     0,     6,     2,     1,     2,     6,     4,
     6,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     1,     3,     3,     3,     5,     5,     1,     1,     1,
     3,     5,     7,     1,     3,     1,     3,     3,     3,     5,
     3,     1,     3,     3,     5,     1,     3,     3,     5,     0,
     3,     0,     3,     0,     3,     0,     3,     2,     2,     4,
     2,     4,     2,     2,     4,     2,     4,     2,     2,     2,
     3,     4,     4,     0,     5,     4,     0,     4,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     1,     1,     2,
     1,     1,     2,     2,     1,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     4,     4,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     2,     0,     4,     0,     4,     0,     4,     3,     0,     4,
     0,     4,     0,     4,     0,     5,     0,     6,     3,     2,
     2,     2,     2,     0,     4,     0,     4,     3,     3,     3,
     0,     4,     0,     6,     2,     0,     5,     5,     5,     5,
     1,     1,     1,     1,     8
};

static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   172,   170,   174,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   208,     0,
     0,     0,     0,   209,   211,   212,     0,     0,     0,     0,
   215,     0,     0,     0,     0,     0,     0,     0,     0,     1,
     3,     7,     4,    57,    55,    15,    16,    17,   234,   235,
   230,   228,   229,   231,   232,   233,    38,   236,   237,    51,
    53,    54,    37,    34,    36,    35,     9,     8,    10,    11,
    12,    13,    23,    25,    58,    18,    19,    14,    29,    30,
    31,    32,    33,    27,    28,    59,    26,   238,   239,    39,
    40,    41,    42,    43,    44,    45,    46,    20,    21,    22,
    47,    49,    48,    50,    52,    56,    24,     0,   148,   149,
     0,   221,   222,   225,   224,   223,   213,   205,   203,   204,
   206,   207,   242,   244,   246,     0,   249,   251,   264,     0,
   266,     0,     0,   253,   271,   197,     0,     0,   260,   261,
   262,   263,     0,     0,     0,   183,   184,   186,   179,   181,
   200,   202,   201,   199,   189,   188,   214,   112,   210,     0,
     0,   190,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   216,   217,   218,   219,   220,     0,   240,   241,
     0,     5,     6,    60,    62,     0,     0,     0,   248,     0,
     0,     0,   268,     0,   269,   270,   255,     0,     0,     0,
   191,     0,     0,     0,   194,   259,   162,   166,   173,   171,
   156,   175,     0,     0,     0,     0,     0,     0,     0,   273,
     0,     0,     0,     0,   150,   243,   154,   245,   247,   250,
   252,   265,   267,   257,     0,   142,   254,     0,   272,   198,
   192,   193,   196,     0,     0,     0,     0,     0,     0,     0,
   185,   187,   180,   182,     0,   176,     0,   114,   117,   116,
   119,   118,   120,   121,   122,   123,    74,     0,     0,   227,
   226,     0,     0,     0,     0,    64,     0,    66,    67,    68,
    69,     0,     0,     0,     0,   256,     0,     0,     0,     0,
   195,   163,   167,   164,   168,   157,   158,   159,   178,     0,
   113,   115,     0,     0,   276,     0,    96,   100,   126,     0,
    61,    65,    71,    70,    72,    73,    63,   151,   155,   258,
   144,   143,   145,     0,     0,     0,     0,     0,     0,   177,
     0,     0,     0,    78,    94,    93,    92,    80,    81,    82,
    83,    84,    85,    86,    88,    87,    89,    90,    91,    76,
   276,   275,   274,     0,     0,   124,     0,     0,     0,     0,
   165,   169,   160,     0,    95,    75,    79,     0,   281,   282,
     0,   283,   284,     0,     0,     0,    98,     0,   102,   108,
   109,   106,   104,   105,   107,   110,   111,     0,   130,   147,
   146,   152,     0,   161,     0,     0,   276,   276,     0,     0,
    97,    99,   101,   103,     0,   127,     0,     0,    77,     0,
     0,     0,     0,     0,   125,   128,   131,   129,   153,     0,
   279,   280,   278,   277,     0,     0,     0,   285,     0,     0,
     0
};

static const short yydefgoto[] = {   439,
    50,    51,    52,    53,   233,   234,   287,    54,   313,   378,
   343,   344,   345,   288,   364,   386,   289,   365,   388,   389,
    55,   227,   267,   268,   290,   398,   415,   291,    56,    57,
    58,   247,   383,   236,   249,   238,   222,   340,   219,    59,
   154,    60,   153,    61,   155,   269,   310,   270,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,   254,    72,
   210,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   196,
   101,   197,   102,   198,   103,   104,   200,   105,   201,   106,
   208,   245,   295,   107,   108,   109,   110,   111,   202,   112,
   204,   113,   114,   115,   116,   209,   117,   279,   316,   362,
   385
};

static const short yypact[] = {   314,
   117,   137,    95,   -33,   -25,    91,   -20,    91,   -14,   453,
    91,    -9,     4,    91,-32768,-32768,-32768,    91,    91,    91,
    91,    91,    12,    91,    91,    91,    91,    91,-32768,    91,
    32,    40,   152,-32768,-32768,-32768,    91,   266,    91,    91,
    91,    91,    91,    91,    91,    51,    74,    86,    97,   314,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    93,-32768,-32768,
    98,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   115,-32768,-32768,-32768,   122,
-32768,   129,    91,   164,-32768,-32768,   174,    14,   180,-32768,
-32768,-32768,   109,   109,   193,-32768,   192,   198,   200,   204,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   196,
    91,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   208,-32768,-32768,
   125,-32768,-32768,-32768,-32768,   211,   215,   211,-32768,   211,
   215,   211,-32768,   211,-32768,-32768,   214,   217,    91,   211,
-32768,   220,   222,   218,-32768,-32768,   235,   258,   257,   257,
   154,   259,    91,    91,    91,    91,   150,   265,   264,-32768,
   274,    91,   407,   407,-32768,   269,-32768,   275,   269,   269,
   275,   269,   269,-32768,   217,   278,   277,   280,   290,   269,
-32768,-32768,-32768,   211,   286,   297,   161,   299,   298,   300,
-32768,-32768,-32768,-32768,    91,-32768,   301,   150,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   304,   327,-32768,
-32768,   305,   306,   309,   313,-32768,    88,-32768,-32768,-32768,
-32768,   213,   318,   322,   217,   277,   181,   323,    91,    91,
   269,-32768,-32768,   319,   320,-32768,-32768,   321,-32768,   326,
-32768,-32768,    20,   325,   329,   330,-32768,-32768,   335,   347,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   277,
-32768,-32768,   324,   349,   351,   356,   357,   360,   352,-32768,
   502,   361,     0,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   296,-32768,-32768,   533,   242,-32768,   363,   183,   362,    91,
-32768,-32768,-32768,   366,-32768,-32768,-32768,    20,-32768,-32768,
   378,-32768,-32768,   210,   -19,   499,-32768,   459,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   373,   461,-32768,
-32768,-32768,   383,-32768,     8,   333,   329,   329,   333,   333,
-32768,-32768,-32768,-32768,   -24,-32768,    60,   387,-32768,   392,
   381,   385,   391,   397,-32768,-32768,-32768,-32768,-32768,    91,
-32768,-32768,-32768,-32768,   400,    91,   399,-32768,   508,   509,
-32768
};

static const short yypgoto[] = {-32768,
-32768,   460,  -203,   462,-32768,-32768,   281,-32768,-32768,-32768,
   133,  -340,-32768,  -193,-32768,-32768,  -178,-32768,-32768,   128,
-32768,-32768,   260,-32768,  -149,-32768,-32768,  -259,-32768,-32768,
-32768,  -213,    -1,  -144,-32768,   328,-32768,-32768,   384,  -317,
-32768,  -303,-32768,  -291,-32768,-32768,-32768,-32768,  -221,  -219,
-32768,  -190,  -168,-32768,  -275,-32768,  -298,  -297,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -329,  -216,  -215,  -245,-32768,
  -237,-32768,  -227,-32768,  -226,  -225,-32768,  -177,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -139,-32768,  -136,
-32768,  -111,  -110,  -102,  -100,-32768,-32768,-32768,-32768,  -357,
  -252
};


#define	YYLAST		621


static const short yytable[] = {   121,
   123,   126,   377,   384,   129,   271,   131,   272,   148,   149,
   275,   276,   152,   341,   346,   347,   156,   157,   158,   159,
   160,   341,   162,   163,   164,   165,   166,   326,   167,   286,
   286,   296,   326,   341,   387,   172,   273,   181,   182,   183,
   184,   185,   186,   187,   346,   347,   271,   390,   272,   421,
   422,   275,   276,   239,   342,   240,   412,   242,   274,   243,
   409,   391,   342,   127,   377,   250,   212,   348,   213,   285,
   390,   128,   410,   392,   342,   349,   130,   273,   425,   346,
   347,   330,   132,   322,   391,   350,   351,   352,   322,   395,
   150,     2,     3,   323,   282,   283,   392,   348,   323,   274,
   151,    10,   376,   214,   215,   349,   346,   347,   324,   301,
   419,   161,   395,   324,    11,   350,   351,   352,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,   348,   168,    31,   353,   169,   325,   416,    33,
   349,   206,   325,   393,    35,   394,    37,   188,   396,   397,
   350,   351,   352,   420,   427,   426,   423,   424,   428,   348,
    41,    42,    43,    44,    45,   353,   393,   349,   394,   229,
   189,   396,   397,   354,    47,    48,   355,   350,   351,   352,
   284,   285,   190,    49,    19,    20,    21,    22,   119,   120,
   321,   124,   119,   120,   194,   125,   191,   265,   266,   195,
   353,   356,   357,   354,   170,   171,   355,   248,   217,   218,
   358,   199,   359,   118,   119,   120,     2,     3,   203,   282,
   283,   261,   262,   263,   264,   205,    10,   353,   231,   232,
   281,   356,   357,   122,   119,   120,    47,    48,   354,    11,
   358,   355,   359,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,   258,   259,    31,
   304,   305,   207,   309,    33,   354,   356,   357,   355,    35,
   211,    37,    15,    16,    17,   358,   216,   359,    21,    22,
   331,   332,   400,   401,    27,    41,    42,    43,    44,    45,
   407,   408,   221,   356,   357,   223,   228,   334,   335,    47,
    48,   224,   358,   225,   359,   284,   285,   226,    49,   230,
   235,   237,   244,   246,   253,   327,     1,     2,     3,     4,
   251,   252,     5,     6,     7,     8,     9,    10,    47,    48,
   173,   174,   175,   176,   177,   178,   179,   180,   255,   148,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,   256,   257,    32,   260,    33,   277,   278,   403,    34,
    35,    36,    37,   280,   293,    38,    39,    40,   379,   380,
   294,   297,   298,   299,   381,   302,    41,    42,    43,    44,
    45,    46,   382,   119,   120,   300,   307,   303,   306,   308,
    47,    48,   361,   311,   314,   315,   317,   318,   319,    49,
     2,     3,   320,   282,   283,   379,   380,   328,   329,   333,
    10,   381,   336,   337,   338,   339,   360,   368,   435,   382,
   119,   120,   363,    11,   437,   361,   366,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,   367,   369,    31,   370,   371,   374,   372,    33,   373,
   375,   399,   402,    35,   404,    37,   285,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,    41,
    42,    43,    44,    45,   406,   417,   418,   429,   431,    15,
    16,    17,   432,    47,    48,    21,    22,   430,   433,   284,
   285,    27,    49,   145,   434,   436,   438,   440,   441,   192,
   405,   193,   146,   147,   292,   414,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   312,   241,    15,
    16,    17,    18,    19,    20,    21,    22,   220,     0,     0,
     0,    27,     0,     0,     0,    47,    48,     0,     0,     0,
   119,   120,   145,     0,     0,     0,     0,    37,     0,     0,
     0,   413,   147,    15,    16,    17,    18,    19,    20,    21,
    22,     0,     0,     0,     0,    27,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    47,    48,     0,     0,     0,
     0,    37,     0,     0,     0,     0,     0,     0,     0,   119,
   120,   411,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    47,
    48
};

static const short yycheck[] = {     1,
     2,     3,   343,   361,     6,   227,     8,   227,    10,    11,
   227,   227,    14,    14,   313,   313,    18,    19,    20,    21,
    22,    14,    24,    25,    26,    27,    28,   287,    30,   233,
   234,   245,   292,    14,   364,    37,   227,    39,    40,    41,
    42,    43,    44,    45,   343,   343,   268,   365,   268,   407,
   408,   268,   268,   198,    55,   200,   386,   202,   227,   204,
    80,   365,    55,    97,   405,   210,    53,   313,    55,    94,
   388,    97,    92,   365,    55,   313,    97,   268,   103,   378,
   378,   295,    97,   287,   388,   313,   313,   313,   292,   365,
   100,     4,     5,   287,     7,     8,   388,   343,   292,   268,
    97,    14,   103,    90,    91,   343,   405,   405,   287,   254,
   103,   100,   388,   292,    27,   343,   343,   343,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,   378,   102,    47,   313,    97,   287,   398,    52,
   378,   143,   292,   365,    57,   365,    59,    97,   365,   365,
   378,   378,   378,   406,    95,   415,   409,   410,    99,   405,
    73,    74,    75,    76,    77,   343,   388,   405,   388,   171,
    97,   388,   388,   313,    87,    88,   313,   405,   405,   405,
    93,    94,    97,    96,    35,    36,    37,    38,    98,    99,
   103,    97,    98,    99,   102,   101,   100,    48,    49,   102,
   378,   313,   313,   343,    53,    54,   343,   209,   100,   101,
   313,    97,   313,    97,    98,    99,     4,     5,    97,     7,
     8,   223,   224,   225,   226,    97,    14,   405,   104,   105,
   232,   343,   343,    97,    98,    99,    87,    88,   378,    27,
   343,   378,   343,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,   104,   105,    47,
   100,   101,    99,   265,    52,   405,   378,   378,   405,    57,
    97,    59,    31,    32,    33,   378,    97,   378,    37,    38,
   100,   101,   100,   101,    43,    73,    74,    75,    76,    77,
    81,    82,   100,   405,   405,   104,   101,   299,   300,    87,
    88,   104,   405,   104,   405,    93,    94,   104,    96,   102,
   100,    97,    99,    97,    97,   103,     3,     4,     5,     6,
   101,   100,     9,    10,    11,    12,    13,    14,    87,    88,
    65,    66,    67,    68,    69,    70,    71,    72,   104,   341,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,   104,   106,    50,   106,    52,   102,   104,   370,    56,
    57,    58,    59,   100,   106,    62,    63,    64,    83,    84,
   106,   104,   106,   104,    89,   100,    73,    74,    75,    76,
    77,    78,    97,    98,    99,   106,    99,   101,   100,   100,
    87,    88,   107,   103,   101,    79,   102,   102,   100,    96,
     4,     5,   100,     7,     8,    83,    84,   100,    97,    97,
    14,    89,   104,   104,   104,   100,   102,   104,   430,    97,
    98,    99,   103,    27,   436,   107,   102,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,   105,   104,    47,   104,   100,   105,   101,    52,   100,
   100,    99,   101,    57,    99,    59,    94,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    73,
    74,    75,    76,    77,   107,    25,   104,   101,   108,    31,
    32,    33,   108,    87,    88,    37,    38,   106,   108,    93,
    94,    43,    96,    51,   108,   106,   108,     0,     0,    50,
   378,    50,    60,    61,   234,   388,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,   268,   201,    31,
    32,    33,    34,    35,    36,    37,    38,   154,    -1,    -1,
    -1,    43,    -1,    -1,    -1,    87,    88,    -1,    -1,    -1,
    98,    99,    51,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    -1,   103,    61,    31,    32,    33,    34,    35,    36,    37,
    38,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    87,    88,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
    99,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    87,
    88
};

#line 352 "../bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_SrvParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  }
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL  
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_SrvParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_SrvParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_SrvParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_SrvParser_CHAR = (token), YY_SrvParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_SrvParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_SrvParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_SrvParser_PURE
/* UNPURE */
#define YYLEX           YY_SrvParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_SrvParser_CHAR;                      /*  the lookahead symbol        */
YY_SrvParser_STYPE      YY_SrvParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_SrvParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_SrvParser_LSP_NEEDED
YY_SrvParser_LTYPE YY_SrvParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_SrvParser_LSP_NEEDED
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL, &YY_SrvParser_LLOC)
#else
#define YYLEX           YY_SrvParser_LEX(&YY_SrvParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_SrvParser_DEBUG != 0
int YY_SrvParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_SrvParser_CLASS::
#endif
     YY_SrvParser_PARSE(YY_SrvParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_SrvParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_SrvParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_SrvParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_SrvParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_SrvParser_LTYPE *yyls = yylsa;
  YY_SrvParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_SrvParser_PURE
  int YY_SrvParser_CHAR;
  YY_SrvParser_STYPE YY_SrvParser_LVAL;
  int YY_SrvParser_NERRS;
#ifdef YY_SrvParser_LSP_NEEDED
  YY_SrvParser_LTYPE YY_SrvParser_LLOC;
#endif
#endif

  YY_SrvParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_SrvParser_NERRS = 0;
  YY_SrvParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_SrvParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_SrvParser_LSP_NEEDED
      YY_SrvParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_SrvParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	    YY_SrvParser_ERROR(((char*)"parser stack overflow"));
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_SrvParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_SrvParser_LSP_NEEDED
      yyls = (YY_SrvParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_SrvParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_SrvParser_CHAR == YYEMPTY)
    {
#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_SrvParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_SrvParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_SrvParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_SrvParser_CHAR);

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_SrvParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_SrvParser_CHAR, YY_SrvParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_SrvParser_CHAR != YYEOF)
    YY_SrvParser_CHAR = YYEMPTY;

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "../bison++/bison.cc"

  switch (yyn) {

case 60:
#line 228 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].strval))
	YYABORT;
;
    break;}
case 61:
#line 233 "SrvParser.y"
{
    //Information about new interface has been read
    //Add it to list of read interfaces
    delete [] yyvsp[-4].strval;
    EndIfaceDeclaration();
;
    break;}
case 62:
#line 241 "SrvParser.y"
{
    if (!StartIfaceDeclaration(yyvsp[-1].ival))
	YYABORT;
;
    break;}
case 63:
#line 246 "SrvParser.y"
{
    EndIfaceDeclaration();
;
    break;}
case 74:
#line 265 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TDUID> duid = new TDUID(yyvsp[-1].duidval.duid,yyvsp[-1].duidval.length);
    ClientLst.append(new TSrvCfgOptions(duid));
;
    break;}
case 75:
#line 271 "SrvParser.y"
{
    Log(Debug) << "Exception: DUID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 76:
#line 279 "SrvParser.y"
{
    ParserOptStack.append(new TSrvParsGlobalOpt());
    SPtr<TOptVendorData> remoteid = new TOptVendorData(yyvsp[-3].ival, yyvsp[-1].duidval.duid, yyvsp[-1].duidval.length, 0);
    ClientLst.append(new TSrvCfgOptions(remoteid));
;
    break;}
case 77:
#line 285 "SrvParser.y"
{
    Log(Debug) << "Exception: RemoteID-based exception specified." << LogEnd;
    // copy all defined options
    ClientLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();
;
    break;}
case 95:
#line 317 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Info) << "Exception: Address " << addr->getPlain() << " reserved." << LogEnd;
    ClientLst.getLast()->setAddr(addr);
;
    break;}
case 96:
#line 326 "SrvParser.y"
{
    StartClassDeclaration();
;
    break;}
case 97:
#line 330 "SrvParser.y"
{
    if (!EndClassDeclaration())
	YYABORT;
;
    break;}
case 100:
#line 344 "SrvParser.y"
{
    StartTAClassDeclaration();
;
    break;}
case 101:
#line 347 "SrvParser.y"
{
    if (!EndTAClassDeclaration())
	YYABORT;
;
    break;}
case 112:
#line 370 "SrvParser.y"
{
    StartPDDeclaration();
;
    break;}
case 113:
#line 373 "SrvParser.y"
{
    if (!EndPDDeclaration())
	YYABORT;
;
    break;}
case 124:
#line 400 "SrvParser.y"
{
    SPtr<TIPv6Addr> routerAddr = new TIPv6Addr(yyvsp[-1].addrval);
    SPtr<TOpt> myNextHop = new TOptAddr(OPTION_NEXT_HOP, routerAddr, NULL);
    nextHop = myNextHop; 
;
    break;}
case 125:
#line 406 "SrvParser.y"
{
    SrvCfgIfaceLst.getLast()->addExtraOption(nextHop, false);
    nextHop = 0;
    //should we call YYABORT;?
;
    break;}
case 126:
#line 412 "SrvParser.y"
{
    SPtr<TIPv6Addr> routerAddr = new TIPv6Addr(yyvsp[0].addrval);
    SPtr<TOpt> myNextHop = new TOptAddr(OPTION_NEXT_HOP, routerAddr, NULL);
    SrvCfgIfaceLst.getLast()->addExtraOption(myNextHop, false);
;
    break;}
case 129:
#line 426 "SrvParser.y"
{
    SPtr<TIPv6Addr> prefix = new TIPv6Addr(yyvsp[-4].addrval);
    SPtr<TOpt> rtPrefix = new TOptRtPrefix(yyvsp[0].ival, yyvsp[-2].ival, 42, prefix, NULL);
    if (nextHop)
        nextHop->addOption(rtPrefix);
    else
        SrvCfgIfaceLst.getLast()->addExtraOption(rtPrefix, false);
;
    break;}
case 130:
#line 435 "SrvParser.y"
{
    SPtr<TIPv6Addr> prefix = new TIPv6Addr(yyvsp[-2].addrval);
    SPtr<TOpt> rtPrefix = new TOptRtPrefix(DHCPV6_INFINITY, yyvsp[0].ival, 42, prefix, NULL);
    if (nextHop)
        nextHop->addOption(rtPrefix);
    else
        SrvCfgIfaceLst.getLast()->addExtraOption(rtPrefix, false);
;
    break;}
case 131:
#line 444 "SrvParser.y"
{
    SPtr<TIPv6Addr> prefix = new TIPv6Addr(yyvsp[-4].addrval);
    SPtr<TOpt> rtPrefix = new TOptRtPrefix(DHCPV6_INFINITY, yyvsp[-2].ival, 42, prefix, NULL);
    if (nextHop)
        nextHop->addOption(rtPrefix);
    else
        SrvCfgIfaceLst.getLast()->addExtraOption(rtPrefix, false);
;
    break;}
case 132:
#line 457 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_NONE); ;
    break;}
case 133:
#line 458 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_PLAIN); ;
    break;}
case 134:
#line 459 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_MD5); ;
    break;}
case 135:
#line 460 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA1); ;
    break;}
case 136:
#line 461 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA224); ;
    break;}
case 137:
#line 462 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA256); ;
    break;}
case 138:
#line 463 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA384); ;
    break;}
case 139:
#line 464 "SrvParser.y"
{ ParserOptStack.getLast()->addDigest(DIGEST_HMAC_SHA512); ;
    break;}
case 140:
#line 468 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthLifetime(yyvsp[0].ival); ;
    break;}
case 141:
#line 472 "SrvParser.y"
{ ParserOptStack.getLast()->setAuthKeyLen(yyvsp[0].ival); ;
    break;}
case 142:
#line 481 "SrvParser.y"
{
    Log(Notice)<< "FQDN: The client "<<yyvsp[0].strval<<" has no address nor DUID"<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 143:
#line 486 "SrvParser.y"
{
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for DUID " << duidNew->getPlain()<<LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(duidNew, yyvsp[-2].strval,false));
;
    break;}
case 144:
#line 493 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval <<" reserved for address "<<*addr<<LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 145:
#line 500 "SrvParser.y"
{
	Log(Debug) << "FQDN:"<<yyvsp[0].strval<<" has no reservations (is available to everyone)."<<LogEnd;
    PresentFQDNLst.append(new TFQDN(yyvsp[0].strval,false));
;
    break;}
case 146:
#line 505 "SrvParser.y"
{
    TDUID* duidNew = new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval << " reserved for DUID "<< duidNew->getPlain() << LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN( duidNew, yyvsp[-2].strval,false));
;
    break;}
case 147:
#line 512 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    Log(Debug)<< "FQDN:" << yyvsp[-2].strval<<" reserved for address "<< addr->getPlain() << LogEnd;
    // FIXME: Use SPtr()
    PresentFQDNLst.append(new TFQDN(new TIPv6Addr(yyvsp[0].addrval), yyvsp[-2].strval,false));
;
    break;}
case 148:
#line 521 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 149:
#line 522 "SrvParser.y"
{yyval.ival=yyvsp[0].ival;;
    break;}
case 150:
#line 527 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 151:
#line 531 "SrvParser.y"
{
    PresentAddrLst.append(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 152:
#line 538 "SrvParser.y"
{
    Log(Debug) << "Vendor-spec defined: Enterprise: " << yyvsp[-4].ival << ", optionCode: "
	       << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;

    SrvCfgIfaceLst.getLast()->addExtraOption(new TOptVendorSpecInfo(yyvsp[-4].ival, yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0), false);
;
    break;}
case 153:
#line 545 "SrvParser.y"
{
    Log(Debug) << "Vendor-spec defined: Enterprise: " << yyvsp[-4].ival << ", optionCode: "
	       << yyvsp[-2].ival << ", valuelen=" << yyvsp[0].duidval.length << LogEnd;
    SrvCfgIfaceLst.getLast()->addExtraOption(new TOptVendorSpecInfo(yyvsp[-4].ival, yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0), false);
;
    break;}
case 154:
#line 553 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 155:
#line 554 "SrvParser.y"
{ PresentStringLst.append(SPtr<string> (new string(yyvsp[0].strval))); ;
    break;}
case 156:
#line 559 "SrvParser.y"
{
	PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 157:
#line 563 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
	SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new TStationRange(addr1,addr2));
	else
	    PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 158:
#line 572 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno()
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}
	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new TStationRange(addr1,addr2));
	else
	    PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 159:
#line 588 "SrvParser.y"
{
	PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
    ;
    break;}
case 160:
#line 592 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
	SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
	if (*addr1<=*addr2)
	    PresentRangeLst.append(new TStationRange(addr1,addr2));
	else
	    PresentRangeLst.append(new TStationRange(addr2,addr1));
    ;
    break;}
case 161:
#line 604 "SrvParser.y"
{
	SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[-2].addrval));
	int prefix = yyvsp[0].ival;
	if ( (prefix<1) || (prefix>128)) {
	    Log(Crit) << "Invalid prefix defined: " << prefix << " in line " << lex->lineno()
		      << ". Allowed range: 1..128." << LogEnd;
	    YYABORT;
	}

	SPtr<TIPv6Addr> addr1 = this->getRangeMin(yyvsp[-2].addrval, prefix);
	SPtr<TIPv6Addr> addr2 = this->getRangeMax(yyvsp[-2].addrval, prefix);
	SPtr<TStationRange> range = 0;
	if (*addr1<=*addr2)
	    range = new TStationRange(addr1,addr2);
	else
	    range = new TStationRange(addr2,addr1);
	range->setPrefixLength(prefix);
	PDLst.append(range);
    ;
    break;}
case 162:
#line 627 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 163:
#line 631 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new TStationRange(addr1,addr2));
    else
	PresentRangeLst.append(new TStationRange(addr2,addr1));
;
    break;}
case 164:
#line 640 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TIPv6Addr(yyvsp[0].addrval),new TIPv6Addr(yyvsp[0].addrval)));
;
    break;}
case 165:
#line 644 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr1(new TIPv6Addr(yyvsp[-2].addrval));
    SPtr<TIPv6Addr> addr2(new TIPv6Addr(yyvsp[0].addrval));
    if (*addr1<=*addr2)
	PresentRangeLst.append(new TStationRange(addr1,addr2));
    else
	PresentRangeLst.append(new TStationRange(addr2,addr1));
;
    break;}
case 166:
#line 653 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length)));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 167:
#line 658 "SrvParser.y"
{
    SPtr<TDUID> duid1(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid2(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));

    if (*duid1<=*duid2)
	PresentRangeLst.append(new TStationRange(duid1,duid2));
    else
	PresentRangeLst.append(new TStationRange(duid2,duid1));
;
    break;}
case 168:
#line 668 "SrvParser.y"
{
    PresentRangeLst.append(new TStationRange(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length)));
    delete yyvsp[0].duidval.duid;
;
    break;}
case 169:
#line 673 "SrvParser.y"
{
    SPtr<TDUID> duid2(new TDUID(yyvsp[-2].duidval.duid,yyvsp[-2].duidval.length));
    SPtr<TDUID> duid1(new TDUID(yyvsp[0].duidval.duid,yyvsp[0].duidval.length));
    if (*duid1<=*duid2)
	PresentRangeLst.append(new TStationRange(duid1,duid2));
    else
	PresentRangeLst.append(new TStationRange(duid2,duid1));
    delete yyvsp[-2].duidval.duid;
    delete yyvsp[0].duidval.duid;
;
    break;}
case 170:
#line 687 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 171:
#line 690 "SrvParser.y"
{
    ParserOptStack.getLast()->setRejedClnt(&PresentRangeLst);
;
    break;}
case 172:
#line 697 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 173:
#line 700 "SrvParser.y"
{
    ParserOptStack.getLast()->setAcceptClnt(&PresentRangeLst);
;
    break;}
case 174:
#line 707 "SrvParser.y"
{
    PresentRangeLst.clear();
;
    break;}
case 175:
#line 710 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst);
;
    break;}
case 176:
#line 717 "SrvParser.y"
{
;
    break;}
case 177:
#line 719 "SrvParser.y"
{
    ParserOptStack.getLast()->setPool(&PresentRangeLst/*PDList*/);
;
    break;}
case 178:
#line 725 "SrvParser.y"
{
   this->PDPrefix = yyvsp[0].ival;
;
    break;}
case 179:
#line 732 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 180:
#line 737 "SrvParser.y"
{
    ParserOptStack.getLast()->setPrefBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setPrefEnd(yyvsp[0].ival);
;
    break;}
case 181:
#line 745 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[0].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 182:
#line 750 "SrvParser.y"
{
    ParserOptStack.getLast()->setValidBeg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setValidEnd(yyvsp[0].ival);
;
    break;}
case 183:
#line 758 "SrvParser.y"
{
    int x=yyvsp[0].ival;
    if ( (x<1) || (x>1000)) {
	Log(Crit) << "Invalid share value: " << x << " in line " << lex->lineno()
		  << ". Allowed range: 1..1000." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setShare(x);
;
    break;}
case 184:
#line 770 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[0].ival);
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival);
;
    break;}
case 185:
#line 775 "SrvParser.y"
{
    ParserOptStack.getLast()->setT1Beg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setT1End(yyvsp[0].ival);
;
    break;}
case 186:
#line 783 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[0].ival);
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival);
;
    break;}
case 187:
#line 788 "SrvParser.y"
{
    ParserOptStack.getLast()->setT2Beg(yyvsp[-2].ival);
    ParserOptStack.getLast()->setT2End(yyvsp[0].ival);
;
    break;}
case 188:
#line 796 "SrvParser.y"
{
    ParserOptStack.getLast()->setClntMaxLease(yyvsp[0].ival);
;
    break;}
case 189:
#line 803 "SrvParser.y"
{
    ParserOptStack.getLast()->setClassMaxLease(yyvsp[0].ival);
;
    break;}
case 190:
#line 810 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'addr-params' defined, but experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }
    int bitfield = ADDRPARAMS_MASK_PREFIX;
    Log(Warning) << "Experimental addr-params added (prefix=" << yyvsp[0].ival << ", bitfield=" << bitfield << ")." << LogEnd;
    ParserOptStack.getLast()->setAddrParams(yyvsp[0].ival,bitfield);
;
    break;}
case 191:
#line 823 "SrvParser.y"
{
    SPtr<TOpt> tunnelName = new TOptString(OPTION_AFTR_NAME, yyvsp[0].strval, 0);
    Log(Debug) << "Enabling DS-Lite tunnel option, AFTR name=" << yyvsp[0].strval << LogEnd;
    SrvCfgIfaceLst.getLast()->addExtraOption(tunnelName, false);
;
    break;}
case 192:
#line 831 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptGeneric(yyvsp[-2].ival, yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", length=" << yyvsp[0].duidval.length << LogEnd;
;
    break;}
case 193:
#line 837 "SrvParser.y"
{
    SPtr<TIPv6Addr> addr(new TIPv6Addr(yyvsp[0].addrval));

    SPtr<TOpt> opt = new TOptAddr(yyvsp[-2].ival, addr, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", address=" << addr->getPlain() << LogEnd;
;
    break;}
case 194:
#line 845 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 195:
#line 848 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(yyvsp[-3].ival, PresentAddrLst, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-3].ival << ", address count=" << PresentAddrLst.count() << LogEnd;
;
    break;}
case 196:
#line 854 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptString(yyvsp[-2].ival, string(yyvsp[0].strval), 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Extra option defined: code=" << yyvsp[-2].ival << ", string=" << yyvsp[0].strval << LogEnd;
;
    break;}
case 197:
#line 862 "SrvParser.y"
{
    if (!ParserOptStack.getLast()->getExperimental()) {
	Log(Crit) << "Experimental 'remote autoconf neighbors' defined, but "
		  << "experimental features are disabled. Add 'experimental' "
		  << "in global section of server.conf to enable it." << LogEnd;
	YYABORT;
    }

    PresentAddrLst.clear();
;
    break;}
case 198:
#line 872 "SrvParser.y"
{
    SPtr<TOpt> opt = new TOptAddrLst(OPTION_NEIGHBORS, PresentAddrLst, 0);
    SrvCfgIfaceLst.getLast()->addExtraOption(opt, false);
    Log(Debug) << "Remote autoconf neighbors enabled (" << PresentAddrLst.count()
	       << " neighbors defined.)" << LogEnd;
;
    break;}
case 199:
#line 882 "SrvParser.y"
{
    ParserOptStack.getLast()->setIfaceMaxLease(yyvsp[0].ival);
;
    break;}
case 200:
#line 889 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnicast(new TIPv6Addr(yyvsp[0].addrval));
;
    break;}
case 201:
#line 896 "SrvParser.y"
{
    if ( (yyvsp[0].ival!=0) && (yyvsp[0].ival!=1)) {
	Log(Crit) << "RAPID-COMMIT  parameter in line " << lex->lineno() << " must have 0 or 1 value."
	       << LogEnd;
	YYABORT;
    }
    if (yyvsp[0].ival==1)
	ParserOptStack.getLast()->setRapidCommit(true);
    else
	ParserOptStack.getLast()->setRapidCommit(false);
;
    break;}
case 202:
#line 911 "SrvParser.y"
{
    if ((yyvsp[0].ival<0)||(yyvsp[0].ival>255)) {
	Log(Crit) << "Preference value (" << yyvsp[0].ival << ") in line " << lex->lineno()
		   << " is out of range [0..255]." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setPreference(yyvsp[0].ival);
;
    break;}
case 203:
#line 922 "SrvParser.y"
{
    logger::setLogLevel(yyvsp[0].ival);
;
    break;}
case 204:
#line 928 "SrvParser.y"
{
    logger::setLogMode(yyvsp[0].strval);
;
    break;}
case 205:
#line 934 "SrvParser.y"
{
    logger::setLogName(yyvsp[0].strval);
;
    break;}
case 206:
#line 941 "SrvParser.y"
{
    logger::setColors(yyvsp[0].ival==1);
;
    break;}
case 207:
#line 947 "SrvParser.y"
{
    ParserOptStack.getLast()->setWorkDir(yyvsp[0].strval);
;
    break;}
case 208:
#line 954 "SrvParser.y"
{
    ParserOptStack.getLast()->setStateless(true);
;
    break;}
case 209:
#line 961 "SrvParser.y"
{
    Log(Info) << "Guess-mode enabled: relay interfaces may be loosely defined (matching interface-id is not mandatory)." << LogEnd;
    ParserOptStack.getLast()->setGuessMode(true);
;
    break;}
case 210:
#line 968 "SrvParser.y"
{
    CfgMgr->setScriptName(yyvsp[0].strval);
;
    break;}
case 211:
#line 975 "SrvParser.y"
{
    ParserOptStack.getLast()->setInactiveMode(true);
;
    break;}
case 212:
#line 981 "SrvParser.y"
{
    Log(Crit) << "Experimental features are allowed." << LogEnd;
    ParserOptStack.getLast()->setExperimental(true);
;
    break;}
case 213:
#line 988 "SrvParser.y"
{
    if (!strncasecmp(yyvsp[0].strval,"before",6))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_BEFORE);
    } else
    if (!strncasecmp(yyvsp[0].strval,"after",5))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_AFTER);
    } else
    if (!strncasecmp(yyvsp[0].strval,"omit",4))
    {
		ParserOptStack.getLast()->setInterfaceIDOrder(SRV_IFACE_ID_ORDER_NONE);
    } else
    {
		Log(Crit) << "Invalid interface-id-order specified. Allowed values: before, after, omit" << LogEnd;
		YYABORT;
    }
;
    break;}
case 214:
#line 1009 "SrvParser.y"
{
    ParserOptStack.getLast()->setCacheSize(yyvsp[0].ival);
;
    break;}
case 215:
#line 1020 "SrvParser.y"
{
    ParserOptStack.getLast()->setLeaseQuerySupport(true);

;
    break;}
case 216:
#line 1025 "SrvParser.y"
{
    switch (yyvsp[0].ival) {
    case 0:
		ParserOptStack.getLast()->setLeaseQuerySupport(false);
		break;
    case 1:
		ParserOptStack.getLast()->setLeaseQuerySupport(true);
		break;
    default:
		Log(Crit) << "Invalid value of accept-leasequery specifed. Allowed values: 0, 1, yes, no, true, false" << LogEnd;
		YYABORT;
    }
;
    break;}
case 217:
#line 1041 "SrvParser.y"
{
    if (yyvsp[0].ival!=0 && yyvsp[0].ival!=1) {
	Log(Error) << "Invalid bulk-leasequery-accept value: " << (yyvsp[0].ival)
		   << ", 0 or 1 expected." << LogEnd;
	YYABORT;
    }
    CfgMgr->bulkLQAccept( (bool) yyvsp[0].ival);
;
    break;}
case 218:
#line 1052 "SrvParser.y"
{
    CfgMgr->bulkLQTcpPort( yyvsp[0].ival );
;
    break;}
case 219:
#line 1058 "SrvParser.y"
{
    CfgMgr->bulkLQMaxConns( yyvsp[0].ival );
;
    break;}
case 220:
#line 1064 "SrvParser.y"
{
    CfgMgr->bulkLQTimeout( yyvsp[0].ival );
;
    break;}
case 221:
#line 1073 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayName(yyvsp[0].strval);
;
    break;}
case 222:
#line 1077 "SrvParser.y"
{
    ParserOptStack.getLast()->setRelayID(yyvsp[0].ival);
;
    break;}
case 223:
#line 1084 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].ival, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 224:
#line 1089 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].duidval.duid, yyvsp[0].duidval.length, 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 225:
#line 1094 "SrvParser.y"
{
    SPtr<TSrvOptInterfaceID> id = new TSrvOptInterfaceID(yyvsp[0].strval, strlen(yyvsp[0].strval), 0);
    ParserOptStack.getLast()->setRelayInterfaceID(id);
;
    break;}
case 226:
#line 1102 "SrvParser.y"
{
    SPtr<TIPv6Addr> prf = new TIPv6Addr(yyvsp[-2].addrval);
    SrvCfgIfaceLst.getLast()->addSubnet(prf, yyvsp[0].ival);
    Log(Debug) << "Defined subnet " << prf->getPlain() << "/" << yyvsp[0].ival
               << " on " << SrvCfgIfaceLst.getLast()->getFullName() << LogEnd;
;
    break;}
case 227:
#line 1108 "SrvParser.y"
{
    SPtr<TIPv6Addr> min = new TIPv6Addr(yyvsp[-2].addrval);
    SPtr<TIPv6Addr> max = new TIPv6Addr(yyvsp[0].addrval);
    SrvCfgIfaceLst.getLast()->addSubnet(min, max);
    Log(Debug) << "Defined subnet " << min->getPlain() << "-" << max->getPlain()
               << "on " << SrvCfgIfaceLst.getLast()->getFullName() << LogEnd;
;
    break;}
case 240:
#line 1133 "SrvParser.y"
{
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setAllowClientClass(string(yyvsp[0].strval));

    int deny = ParserOptStack.getLast()->getDenyClientClassString().count();

    if (deny)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }

;
    break;}
case 241:
#line 1162 "SrvParser.y"
{
    SPtr<TSrvCfgClientClass> clntClass;
    bool found = false;
    SrvCfgClientClassLst.first();
    while (clntClass = SrvCfgClientClassLst.get())
    {
	if (clntClass->getClassName() == string(yyvsp[0].strval))
	    found = true;
    }
    if (!found)
    {
	Log(Crit) << "Line " << lex->lineno()
		  << ": Unable to use class " << string(yyvsp[0].strval) << ", no such class defined." << LogEnd;
	YYABORT;
    }
    ParserOptStack.getLast()->setDenyClientClass(string(yyvsp[0].strval));

    int allow = ParserOptStack.getLast()->getAllowClientClassString().count();

    if (allow)
    {
	Log(Crit) << "Line " << lex->lineno() << ": Unable to define both allow and deny lists for this client class." << LogEnd;
	YYABORT;
    }

;
    break;}
case 242:
#line 1195 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 243:
#line 1198 "SrvParser.y"
{
    ParserOptStack.getLast()->setDNSServerLst(&PresentAddrLst);
;
    break;}
case 244:
#line 1207 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 245:
#line 1210 "SrvParser.y"
{
    ParserOptStack.getLast()->setDomainLst(&PresentStringLst);
;
    break;}
case 246:
#line 1220 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 247:
#line 1223 "SrvParser.y"
{
    ParserOptStack.getLast()->setNTPServerLst(&PresentAddrLst);
;
    break;}
case 248:
#line 1233 "SrvParser.y"
{
    ParserOptStack.getLast()->setTimezone(yyvsp[0].strval);
;
    break;}
case 249:
#line 1242 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 250:
#line 1245 "SrvParser.y"
{
    ParserOptStack.getLast()->setSIPServerLst(&PresentAddrLst);
;
    break;}
case 251:
#line 1254 "SrvParser.y"
{
    PresentStringLst.clear();
;
    break;}
case 252:
#line 1257 "SrvParser.y"
{
    ParserOptStack.getLast()->setSIPDomainLst(&PresentStringLst);
;
    break;}
case 253:
#line 1268 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)   << "No FQDNMode found, setting default mode 2 (all updates executed by server)." << LogEnd;
    Log(Warning) << "revDNS zoneroot lenght not found, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(2);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 254:
#line 1275 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);
;
    break;}
case 255:
#line 1279 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug)  << "FQDNMode found, setting value"<< yyvsp[0].ival <<LogEnd;
    Log(Warning)<< "revDNS zoneroot lenght not specified, dynamic revDNS update will not be possible." << LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[0].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(0);
;
    break;}
case 256:
#line 1286 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);

;
    break;}
case 257:
#line 1291 "SrvParser.y"
{
    PresentFQDNLst.clear();
    Log(Debug) << "FQDNMode found, setting value " << yyvsp[-1].ival <<LogEnd;
    Log(Debug) << "revDNS zoneroot lenght found, setting value " << yyvsp[0].ival <<LogEnd;
    ParserOptStack.getLast()->setFQDNMode(yyvsp[-1].ival);
    ParserOptStack.getLast()->setRevDNSZoneRootLength(yyvsp[0].ival);
;
    break;}
case 258:
#line 1298 "SrvParser.y"
{
    ParserOptStack.getLast()->setFQDNLst(&PresentFQDNLst);

;
    break;}
case 259:
#line 1306 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnknownFQDN(EUnknownFQDNMode(yyvsp[-1].ival), string(yyvsp[0].strval) );
    Log(Debug) << "FQDN: Unknown fqdn names processing set to " << yyvsp[-1].ival << ", domain=" << yyvsp[0].strval << "." << LogEnd;
;
    break;}
case 260:
#line 1311 "SrvParser.y"
{
    ParserOptStack.getLast()->setUnknownFQDN(EUnknownFQDNMode(yyvsp[0].ival), string("") );
    Log(Debug) << "FQDN: Unknown fqdn names processing set to " << yyvsp[0].ival << ", no domain." << LogEnd;
;
    break;}
case 261:
#line 1319 "SrvParser.y"
{
    addr = new TIPv6Addr(yyvsp[0].addrval);
    CfgMgr->setDDNSAddress(addr);
    Log(Info) << "FQDN: DDNS updates will be performed to " << addr->getPlain() << "." << LogEnd;
;
    break;}
case 262:
#line 1327 "SrvParser.y"
{
    if (!strcasecmp(yyvsp[0].strval,"tcp"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_TCP);
    else if (!strcasecmp(yyvsp[0].strval,"udp"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_UDP);
    else if (!strcasecmp(yyvsp[0].strval,"any"))
	CfgMgr->setDDNSProtocol(TCfgMgr::DNSUPDATE_ANY);
    else {
        Log(Crit) << "Invalid ddns-protocol specifed:" << (yyvsp[0].strval) 
                  << ", supported values are tcp, udp, any." << LogEnd;
        YYABORT;
    }
    Log(Debug) << "DDNS: Setting protocol to " << (yyvsp[0].strval) << LogEnd;
;
    break;}
case 263:
#line 1344 "SrvParser.y"
{
    Log(Debug) << "DDNS: Setting timeout to " << yyvsp[0].ival << "ms." << LogEnd;
    CfgMgr->setDDNSTimeout(yyvsp[0].ival);
;
    break;}
case 264:
#line 1353 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 265:
#line 1356 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISServerLst(&PresentAddrLst);
;
    break;}
case 266:
#line 1365 "SrvParser.y"
{
    PresentAddrLst.clear();
;
    break;}
case 267:
#line 1368 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISPServerLst(&PresentAddrLst);
;
    break;}
case 268:
#line 1378 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISDomain(yyvsp[0].strval);
;
    break;}
case 269:
#line 1388 "SrvParser.y"
{
    ParserOptStack.getLast()->setNISPDomain(yyvsp[0].strval);
;
    break;}
case 270:
#line 1398 "SrvParser.y"
{
    ParserOptStack.getLast()->setLifetime(yyvsp[0].ival);
;
    break;}
case 271:
#line 1404 "SrvParser.y"
{
;
    break;}
case 272:
#line 1406 "SrvParser.y"
{
    // ParserOptStack.getLast()->setVendorSpec(VendorSpec);
    // Log(Debug) << "Vendor-spec parsing finished" << LogEnd;
;
    break;}
case 273:
#line 1414 "SrvParser.y"
{
    Log(Notice) << "ClientClass found, name: " << string(yyvsp[-1].strval) << LogEnd;
;
    break;}
case 274:
#line 1417 "SrvParser.y"
{
    SPtr<Node> cond =  NodeClientClassLst.getLast();
    SrvCfgClientClassLst.append( new TSrvCfgClientClass(string(yyvsp[-4].strval),cond));
    NodeClientClassLst.delLast();
;
    break;}
case 275:
#line 1427 "SrvParser.y"
{
;
    break;}
case 277:
#line 1433 "SrvParser.y"
{
    SPtr<Node> r =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> l = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_CONTAIN,l,r));
;
    break;}
case 278:
#line 1441 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();

    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_EQUAL,l,r));
;
    break;}
case 279:
#line 1450 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_AND,l,r));

;
    break;}
case 280:
#line 1459 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    SPtr<Node> r = NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_OR,l,r));
;
    break;}
case 281:
#line 1470 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_ENTERPRISE_NUM));
;
    break;}
case 282:
#line 1474 "SrvParser.y"
{
    NodeClientClassLst.append(new NodeClientSpecific(NodeClientSpecific::CLIENT_VENDOR_SPEC_DATA));
;
    break;}
case 283:
#line 1478 "SrvParser.y"
{
    // Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    NodeClientClassLst.append(new NodeConstant(string(yyvsp[0].strval)));
;
    break;}
case 284:
#line 1483 "SrvParser.y"
{
    //Log(Info) << "Constant expression found:" <<string($1)<<LogEnd;
    stringstream convert;
    string snum;
    convert<<yyvsp[0].ival;
    convert>>snum;
    NodeClientClassLst.append(new NodeConstant(snum));
;
    break;}
case 285:
#line 1492 "SrvParser.y"
{
    SPtr<Node> l =  NodeClientClassLst.getLast();
    NodeClientClassLst.delLast();
    NodeClientClassLst.append(new NodeOperator(NodeOperator::OPERATOR_SUBSTRING,l, yyvsp[-3].ival,yyvsp[-1].ival));
;
    break;}
}

#line 839 "../bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_SrvParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_SrvParser_LLOC.first_line;
      yylsp->first_column = YY_SrvParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_SrvParser_NERRS;

#ifdef YY_SrvParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_SrvParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_SrvParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_SrvParser_ERROR_VERBOSE */
        YY_SrvParser_ERROR((char*)"parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_SrvParser_CHAR == YYEOF)
	YYABORT;

#if YY_SrvParser_DEBUG != 0
      if (YY_SrvParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_SrvParser_CHAR, yytname[yychar1]);
#endif

      YY_SrvParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_SrvParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_SrvParser_DEBUG != 0
  if (YY_SrvParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_SrvParser_LVAL;
#ifdef YY_SrvParser_LSP_NEEDED
  *++yylsp = YY_SrvParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "../bison++/bison.cc"
#line 1498 "SrvParser.y"


/////////////////////////////////////////////////////////////////////////////
// programs section

/**
 * method check whether interface with id=ifaceNr has been already declared
 *
 * @param ifaceNr
 *
 * @return true if interface was not declared
 */
bool SrvParser::IfaceDefined(int ifaceNr)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
    if ((ptr->getID())==ifaceNr) {
	Log(Crit) << "Interface with ID=" << ifaceNr << " is already defined." << LogEnd;
	return false;
    }
  return true;
}

/**
 * check whether interface with id=ifaceName has been already declared
 *
 * @param ifaceName
 *
 * @return true, if defined, false otherwise
 */
bool SrvParser::IfaceDefined(string ifaceName)
{
  SPtr<TSrvCfgIface> ptr;
  SrvCfgIfaceLst.first();
  while (ptr=SrvCfgIfaceLst.get())
  {
    string presName=ptr->getName();
    if (presName==ifaceName) {
	Log(Crit) << "Interface " << ifaceName << " is already defined." << LogEnd;
	return false;
    }
  }
  return true;
}

/**
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 *
 */
bool SrvParser::StartIfaceDeclaration(string ifaceName)
{
    if (!IfaceDefined(ifaceName))
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifaceName));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    ClientLst.clear();

    return true;
}

/**
 * method creates new option for just started interface scope
 * clears all lists except the list of interfaces and adds new group
 *
 */
bool SrvParser::StartIfaceDeclaration(int ifindex)
{
    if (!IfaceDefined(ifindex))
	return false;

    SrvCfgIfaceLst.append(new TSrvCfgIface(ifindex));

    // create new option (representing this interface) on the parser stack
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.clear();
    ClientLst.clear();

    return true;
}


/**
 * this method is called after inteface declaration has ended. It creates
 * new interface representation used in SrvCfgMgr. Also removes corresponding
 * element from the parser stack
 *
 * @return true if everything is ok
 */
bool SrvParser::EndIfaceDeclaration()
{
    // get this interface object
    SPtr<TSrvCfgIface> iface = SrvCfgIfaceLst.getLast();

    // set its options
    SrvCfgIfaceLst.getLast()->setOptions(ParserOptStack.getLast());

    // copy all IA objects
    SPtr<TSrvCfgAddrClass> ptrAddrClass;
    SrvCfgAddrClassLst.first();
    while (ptrAddrClass=SrvCfgAddrClassLst.get())
	iface->addAddrClass(ptrAddrClass);
    SrvCfgAddrClassLst.clear();

    // copy all TA objects
    SPtr<TSrvCfgTA> ta;
    SrvCfgTALst.first();
    while (ta=SrvCfgTALst.get())
	iface->addTA(ta);
    SrvCfgTALst.clear();

    SPtr<TSrvCfgPD> pd;
    SrvCfgPDLst.first();
    while (pd=SrvCfgPDLst.get())
	iface->addPD(pd);
    SrvCfgPDLst.clear();

    iface->addClientExceptionsLst(ClientLst);

    // remove last option (representing this interface) from the parser stack
    ParserOptStack.delLast();

    return true;
}

void SrvParser::StartClassDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    SrvCfgAddrClassLst.append(new TSrvCfgAddrClass());
}

/**
 * this method is adds new object representig just parsed IA class.
 *
 * @return true if everything works ok.
 */
bool SrvParser::EndClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
	Log(Crit) << "No pools defined for this class." << LogEnd;
	return false;
    }
    //setting interface options on the basis of just read information
    SrvCfgAddrClassLst.getLast()->setOptions(ParserOptStack.getLast());
    ParserOptStack.delLast();

    return true;
}


/**
 * Just add global options
 *
 */
void SrvParser::StartTAClassDeclaration()
{
  ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
}

bool SrvParser::EndTAClassDeclaration()
{
    if (!ParserOptStack.getLast()->countPool()) {
	Log(Crit) << "No pools defined for this ta-class." << LogEnd;
	return false;
    }
    // create new object representing just parsed TA and add it to the list
    SPtr<TSrvCfgTA> ptrTA = new TSrvCfgTA();
    ptrTA->setOptions(ParserOptStack.getLast());
    SrvCfgTALst.append(ptrTA);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

void SrvParser::StartPDDeclaration()
{
    ParserOptStack.append(new TSrvParsGlobalOpt(*ParserOptStack.getLast()));
    this->PDLst.clear();
    this->PDPrefix = 0;
}

bool SrvParser::EndPDDeclaration()
{
    if (!this->PDLst.count()) {
	Log(Crit) << "No PD pools defined ." << LogEnd;
	return false;
    }
    if (!this->PDPrefix) {
	Log(Crit) << "PD prefix length not defined or set to 0." << LogEnd;
	return false;
    }

    int len = 0;
    this->PDLst.first();
    while ( SPtr<TStationRange> pool = PDLst.get() ) {
	if (!len)
	    len = pool->getPrefixLength();
	if (len!=pool->getPrefixLength()) {
	    Log(Crit) << "Prefix pools with different lengths are not supported. Make sure that all 'pd-pool' uses the same prefix length." << LogEnd;
	    return false;
	}
    }
    if (len>PDPrefix) {
	Log(Crit) << "Clients are supposed to get /" << this->PDPrefix << " prefixes, but pd-pool(s) are only /" << len << " long." << LogEnd;
	return false;
    }
    if (len==PDPrefix) {
	Log(Warning) << "Prefix pool /" << PDPrefix << " defined and clients are supposed to get /" << len << " prefixes. Only ONE client will get prefix" << LogEnd;
    }

    SPtr<TSrvCfgPD> ptrPD = new TSrvCfgPD();
    ParserOptStack.getLast()->setPool(&this->PDLst);
    if (!ptrPD->setOptions(ParserOptStack.getLast(), this->PDPrefix))
	return false;
    SrvCfgPDLst.append(ptrPD);

    // remove temporary parser object for this (just finished) scope
    ParserOptStack.delLast();
    return true;
}

namespace std {
    extern yy_SrvParser_stype yylval;
}

int SrvParser::yylex()
{
    memset(&std::yylval,0, sizeof(std::yylval));
    memset(&this->yylval,0, sizeof(this->yylval));
    int x = this->lex->yylex();
    this->yylval=std::yylval;
    return x;
}

void SrvParser::yyerror(char *m)
{
    Log(Crit) << "Config parse error: line " << lex->lineno()
	      << ", unexpected [" << lex->YYText() << "] token." << LogEnd;
}

SrvParser::~SrvParser() {
    this->ParserOptStack.clear();
    this->SrvCfgIfaceLst.clear();
    this->SrvCfgAddrClassLst.clear();
    this->SrvCfgTALst.clear();
    this->PresentAddrLst.clear();
    this->PresentStringLst.clear();
    this->PresentRangeLst.clear();
}

static char bitMask[]= { 0, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff };

SPtr<TIPv6Addr> SrvParser::getRangeMin(char * addrPacked, int prefix) {
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] & mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0;
    }
    return new TIPv6Addr(packed, false);
}

SPtr<TIPv6Addr> SrvParser::getRangeMax(char * addrPacked, int prefix){
    char packed[16];
    char mask;
    memcpy(packed, addrPacked,16);
    if (prefix%8!=0) {
	mask = bitMask[prefix%8];
	packed[prefix/8] = packed[prefix/8] | ~mask;
	prefix = (prefix/8 + 1)*8;
    }
    for (int i=prefix/8;i<16; i++) {
	packed[i]=0xff;
    }

    return new TIPv6Addr(packed, false);
}
